antoraSearch.initSearch(lunr, {"index":{"version":"2.3.9","fields":["title","name","text","component"],"fieldVectors":[["title/1-1",[0,34.834,1,30.288,2,46.606,3,38.792]],["name/1-1",[]],["text/1-1",[]],["component/1-1",[]],["title/1-2",[4,67.495,5,73.973]],["name/1-2",[]],["text/1-2",[]],["component/1-2",[]],["title/1",[0,38.713,1,33.662,2,51.797]],["name/1",[6,0.12]],["text/1",[0,6.958,1,6.071,2,4.464,3,2.904,4,2.441,7,3.716,8,2.583,9,2.287,10,0.893,11,4.718,12,4.718,13,6.523,14,1.755,15,3.376,16,3.355,17,2.384,18,2.333,19,2.583,20,2.384,21,2.441,22,2.228,23,1.33,24,1.54,25,1.54,26,1.635,27,1.88,28,3.735,29,2.852,30,1.845,31,2.245,32,3.54,33,2.791,34,10.13,35,7.951,36,6.121,37,4.528,38,4.939,39,2.507,40,2.791,41,2.675,42,8.328,43,3.418,44,5.525,45,6.666,46,4.109,47,3.652,48,3.54,49,3.489,50,2.441,51,5.633,52,3.716,53,3.924,54,2.333,55,3.785,56,5.431,57,6.007,58,5.817,59,3.442,60,2.975,61,2.333,62,7.754,63,2.384,64,5.307,65,5.461,66,2.207,67,1.741,68,2.791,69,2.507,70,2.583,71,2.507,72,2.384,73,4.428,74,4.842,75,2.384,76,5.168,77,1.755,78,3.355,79,1.507,80,2.333,81,4.618,82,2.791,83,2.791,84,2.583,85,2.053,86,2.791,87,2.791,88,4.618,89,4.583,90,7.255,91,4.618,92,5.664,93,5.47,94,6.007,95,2.791,96,2.287,97,2.441,98,2.333,99,2.245,100,2.287,101,4.618,102,2.441,103,2.333,104,5.691,105,2.791,106,5.908,107,4.428,108,2.287,109,5.741,110,3.716,111,2.384,112,2.245,113,1.769,114,2.384,115,2.583,116,2.791,117,2.675,118,2.333,119,2.441,120,2.791,121,2.384,122,2.675,123,4.618,124,4.275,125,3.397,126,3.716,127,4.285,128,2.791,129,1.703,130,2.791,131,2.791,132,1.898,133,3.652,134,2.139,135,2.245,136,2.583,137,2.507,138,2.675,139,2.818,140,2.003,141,2.079,142,2.333,143,2.172,144,2.245,145,2.053]],["component/1",[0,0.065,1,0.056,146,0.091]],["title/2-1",[0,38.713,1,33.662,2,51.797]],["name/2-1",[]],["text/2-1",[]],["component/2-1",[]],["title/2-2",[0,34.834,1,30.288,2,46.606,3,38.792]],["name/2-2",[]],["text/2-2",[]],["component/2-2",[]],["title/2-3",[4,67.495,5,73.973]],["name/2-3",[]],["text/2-3",[]],["component/2-3",[]],["title/2",[147,84.574]],["name/2",[147,0.128]],["text/2",[0,6.842,1,6.025,2,3.882,3,2.47,4,2.014,7,4.887,8,2.131,9,1.886,10,2.181,11,5.449,12,5.449,13,6.371,14,1.448,15,2.936,16,2.854,17,1.966,18,1.924,19,2.131,20,1.966,21,2.014,22,2.212,23,1.098,24,1.27,25,1.27,26,3.011,27,3.462,28,4.69,29,3.585,30,4.017,31,3.161,32,3.938,33,2.302,34,9.657,35,7.404,36,5.486,37,4.656,38,4.296,39,2.068,40,2.302,41,2.207,42,7.877,43,3.945,44,5.486,45,6.208,46,4.01,47,3.107,48,3.011,49,2.968,50,2.014,51,6.208,52,4.134,53,4.244,54,1.924,55,3.219,56,4.804,57,5.314,58,5.269,59,2.928,60,2.531,61,1.924,62,7.138,63,1.966,64,4.616,65,4.894,66,1.821,67,1.436,68,2.302,69,2.068,70,2.131,71,2.068,72,1.966,73,3.766,74,4.211,75,1.966,76,4.495,77,1.448,78,4.412,79,1.243,80,3.284,81,3.929,82,2.302,83,2.302,84,2.131,85,1.693,86,2.302,87,2.302,88,3.929,89,4.551,90,6.63,91,3.929,92,4.927,93,4.757,94,5.314,95,2.302,96,1.886,97,2.014,98,1.924,99,1.852,100,1.886,101,3.929,102,2.014,103,1.924,104,5.156,105,2.302,106,5.139,107,3.766,108,1.886,109,5.078,110,3.161,111,1.966,112,1.852,113,1.459,114,1.966,115,2.131,116,2.302,117,2.207,118,1.924,119,2.014,120,2.302,121,1.966,122,2.207,123,3.929,124,3.637,125,2.89,126,3.161,127,3.79,128,2.302,129,1.405,130,2.302,131,2.302,132,1.566,133,3.107,134,1.764,135,1.852,136,2.131,137,2.068,138,2.207,139,2.397,140,1.652,141,1.715,142,1.924,143,1.791,144,1.852,145,1.693,148,1.924,149,2.429,150,6.848,151,1.852,152,6.499,153,1.791,154,0.858,155,1.886,156,1.415,157,5.588,158,4.727,159,1.886,160,2.068,161,2.014,162,2.068,163,1.047,164,1.886,165,1.966,166,1.693,167,1.852,168,1.821,169,2.207,170,1.924,171,2.787,172,1.924,173,1.966,174,1.3,175,1.924,176,2.068,177,2.068,178,1.693,179,2.014,180,2.302,181,1.966,182,1.145,183,2.207,184,2.014,185,1.672,186,2.014,187,2.302]],["component/2",[0,0.065,1,0.056,146,0.091]],["title/3-1",[188,84.574]],["name/3-1",[]],["text/3-1",[]],["component/3-1",[]],["title/3-2",[147,84.574]],["name/3-2",[]],["text/3-2",[]],["component/3-2",[]],["title/3-3",[0,38.713,1,33.662,2,51.797]],["name/3-3",[]],["text/3-3",[]],["component/3-3",[]],["title/3-4",[0,34.834,1,30.288,2,46.606,3,38.792]],["name/3-4",[]],["text/3-4",[]],["component/3-4",[]],["title/3-5",[4,67.495,5,73.973]],["name/3-5",[]],["text/3-5",[]],["component/3-5",[]],["title/3-6",[11,35.309,12,35.309,46,27.752,151,41.345,154,6.47,189,46.164]],["name/3-6",[]],["text/3-6",[]],["component/3-6",[]],["title/3-7",[46,33.315,154,7.767,156,37.923,190,65.105]],["name/3-7",[]],["text/3-7",[]],["component/3-7",[]],["title/3-8",[37,47.282,154,7.767,156,37.923,191,65.105]],["name/3-8",[]],["text/3-8",[]],["component/3-8",[]],["title/3-9",[46,33.315,89,41.169,163,28.065,192,65.105]],["name/3-9",[]],["text/3-9",[]],["component/3-9",[]],["title/3-10",[163,28.065,193,65.105,194,59.146,195,40.793]],["name/3-10",[]],["text/3-10",[]],["component/3-10",[]],["title/3-11",[46,37.025,196,72.357,197,45.337]],["name/3-11",[]],["text/3-11",[]],["component/3-11",[]],["title/3-12",[197,45.337,198,72.357,199,63.472]],["name/3-12",[]],["text/3-12",[]],["component/3-12",[]],["title/3-13",[46,30.28,154,7.059,156,34.468,200,59.175,201,42.361]],["name/3-13",[]],["text/3-13",[]],["component/3-13",[]],["title/3-14",[89,37.419,154,7.059,156,34.468,201,42.361,202,59.175]],["name/3-14",[]],["text/3-14",[]],["component/3-14",[]],["title/3-15",[46,27.752,154,6.47,156,31.591,163,23.379,201,38.824,203,54.235]],["name/3-15",[]],["text/3-15",[]],["component/3-15",[]],["title/3-16",[46,33.315,204,65.105,205,38.792,206,55.417]],["name/3-16",[]],["text/3-16",[]],["component/3-16",[]],["title/3-17",[154,6.47,163,23.379,205,32.315,207,54.235,208,32.835,209,36.463]],["name/3-17",[]],["text/3-17",[]],["component/3-17",[]],["title/3-18",[154,7.059,205,35.259,208,35.826,210,59.175,211,38.927]],["name/3-18",[]],["text/3-18",[]],["component/3-18",[]],["title/3-19",[10,19.733,205,38.792,206,55.417,212,65.105]],["name/3-19",[]],["text/3-19",[]],["component/3-19",[]],["title/3-20",[154,7.059,156,34.468,213,59.175,214,46.872,215,30.774]],["name/3-20",[]],["text/3-20",[]],["component/3-20",[]],["title/3-21",[154,7.767,156,37.923,216,65.105,217,47.282]],["name/3-21",[]],["text/3-21",[]],["component/3-21",[]],["title/3-22",[46,30.28,154,7.059,156,34.468,217,42.976,218,59.175]],["name/3-22",[]],["text/3-22",[]],["component/3-22",[]],["title/3-23",[13,35.252,217,47.282,219,65.105,220,51.57]],["name/3-23",[]],["text/3-23",[]],["component/3-23",[]],["title/3-24",[221,65.105,222,47.282,223,50.555,224,52.698]],["name/3-24",[]],["text/3-24",[]],["component/3-24",[]],["title/3-25",[53,32.041,154,7.059,156,34.468,217,42.976,225,59.175]],["name/3-25",[]],["text/3-25",[]],["component/3-25",[]],["title/3-26",[13,32.041,217,42.976,226,59.175,227,33.285,228,51.909]],["name/3-26",[]],["text/3-26",[]],["component/3-26",[]],["title/3-27",[229,72.357,230,58.567,231,63.472]],["name/3-27",[]],["text/3-27",[]],["component/3-27",[]],["title/3-28",[109,42.959,133,40.641,215,28.205,223,42.114,232,54.235,233,44.956]],["name/3-28",[]],["text/3-28",[]],["component/3-28",[]],["title/3-29",[154,7.767,156,37.923,234,65.105,235,43.772]],["name/3-29",[]],["text/3-29",[]],["component/3-29",[]],["title/3-30",[154,7.767,235,43.772,236,65.105,237,44.812]],["name/3-30",[]],["text/3-30",[]],["component/3-30",[]],["title/3-31",[154,7.767,235,43.772,238,65.105,239,48.007]],["name/3-31",[]],["text/3-31",[]],["component/3-31",[]],["title/3-32",[154,7.767,235,43.772,240,65.105,241,43.772]],["name/3-32",[]],["text/3-32",[]],["component/3-32",[]],["title/3-33",[154,7.767,156,37.923,242,65.105,243,44.279]],["name/3-33",[]],["text/3-33",[]],["component/3-33",[]],["title/3-34",[53,35.252,154,7.767,156,37.923,244,65.105]],["name/3-34",[]],["text/3-34",[]],["component/3-34",[]],["title/3-35",[13,35.252,245,65.105,246,45.972,247,59.146]],["name/3-35",[]],["text/3-35",[]],["component/3-35",[]],["title/3-36",[248,81.426,249,65.908]],["name/3-36",[]],["text/3-36",[]],["component/3-36",[]],["title/3-37",[195,51.019,250,81.426]],["name/3-37",[]],["text/3-37",[]],["component/3-37",[]],["title/3-38",[246,51.093,251,72.357,252,49.804]],["name/3-38",[]],["text/3-38",[]],["component/3-38",[]],["title/3-39",[154,8.632,253,72.357,254,49.804]],["name/3-39",[]],["text/3-39",[]],["component/3-39",[]],["title/3-40",[163,31.191,254,49.804,255,72.357]],["name/3-40",[]],["text/3-40",[]],["component/3-40",[]],["title/3-41",[60,44.17,195,45.337,256,72.357]],["name/3-41",[]],["text/3-41",[]],["component/3-41",[]],["title/3-42",[163,25.509,211,38.927,257,59.175,258,50.369,259,42.361]],["name/3-42",[]],["text/3-42",[]],["component/3-42",[]],["title/3-43",[260,65.105,261,53.967,262,51.57,263,52.698]],["name/3-43",[]],["text/3-43",[]],["component/3-43",[]],["title/3-44",[264,72.357,265,53.354,266,57.314]],["name/3-44",[]],["text/3-44",[]],["component/3-44",[]],["title/3-45",[267,72.357,268,65.734,269,65.734]],["name/3-45",[]],["text/3-45",[]],["component/3-45",[]],["title/3-46",[163,28.065,270,65.105,271,36.621,272,45.972]],["name/3-46",[]],["text/3-46",[]],["component/3-46",[]],["title/3-47",[10,19.733,141,45.972,273,65.105,274,41.964]],["name/3-47",[]],["text/3-47",[]],["component/3-47",[]],["title/3-48",[36,49.633,38,51.57,103,51.57,275,65.105]],["name/3-48",[]],["text/3-48",[]],["component/3-48",[]],["title/3-49",[271,40.7,276,72.357,277,45.754]],["name/3-49",[]],["text/3-49",[]],["component/3-49",[]],["title/3-50",[10,19.733,277,41.169,278,65.105,279,41.964]],["name/3-50",[]],["text/3-50",[]],["component/3-50",[]],["title/3-51",[154,7.059,178,41.243,254,40.73,279,38.142,280,59.175]],["name/3-51",[]],["text/3-51",[]],["component/3-51",[]],["title/3-52",[154,7.059,178,41.243,254,40.73,281,59.175,282,45.112]],["name/3-52",[]],["text/3-52",[]],["component/3-52",[]],["title/3-53",[279,38.142,283,59.175,284,45.95,285,40.245,286,34.724]],["name/3-53",[]],["text/3-53",[]],["component/3-53",[]],["title/3-54",[85,45.376,279,41.964,287,65.105,288,49.633]],["name/3-54",[]],["text/3-54",[]],["component/3-54",[]],["title/3-55",[277,45.754,289,72.357,290,45.754]],["name/3-55",[]],["text/3-55",[]],["component/3-55",[]],["title/3-56",[1,27.529,28,27.529,35,45.95,291,59.175,292,44.343]],["name/3-56",[]],["text/3-56",[]],["component/3-56",[]],["title/3-57",[1,25.231,271,30.506,277,34.295,292,40.641,293,54.235,294,33.68]],["name/3-57",[]],["text/3-57",[]],["component/3-57",[]],["title/3-58",[13,35.252,295,65.105,296,59.146,297,52.698]],["name/3-58",[]],["text/3-58",[]],["component/3-58",[]],["title/3-59",[22,16.672,163,23.379,271,30.506,298,54.235,299,30.712,300,49.27]],["name/3-59",[]],["text/3-59",[]],["component/3-59",[]],["title/3-60",[55,38.869,163,21.578,271,28.156,277,31.652,301,50.056,302,40.516,303,20.883]],["name/3-60",[]],["text/3-60",[]],["component/3-60",[]],["title/3-61",[55,38.869,163,21.578,272,35.345,277,31.652,302,40.516,304,50.056,305,27.97]],["name/3-61",[]],["text/3-61",[]],["component/3-61",[]],["title/3-62",[10,17.935,134,42.976,274,38.142,306,59.175,307,51.909]],["name/3-62",[]],["text/3-62",[]],["component/3-62",[]],["title/3-63",[271,40.7,277,45.754,308,72.357]],["name/3-63",[]],["text/3-63",[]],["component/3-63",[]],["title/3-64",[10,19.733,277,41.169,279,41.964,309,65.105]],["name/3-64",[]],["text/3-64",[]],["component/3-64",[]],["title/3-65",[154,7.059,178,41.243,254,40.73,279,38.142,310,59.175]],["name/3-65",[]],["text/3-65",[]],["component/3-65",[]],["title/3-66",[154,7.059,178,41.243,254,40.73,282,45.112,311,59.175]],["name/3-66",[]],["text/3-66",[]],["component/3-66",[]],["title/3-67",[279,38.142,284,45.95,285,40.245,286,34.724,312,59.175]],["name/3-67",[]],["text/3-67",[]],["component/3-67",[]],["title/3-68",[85,45.376,279,41.964,288,49.633,313,65.105]],["name/3-68",[]],["text/3-68",[]],["component/3-68",[]],["title/3-69",[277,45.754,290,45.754,314,72.357]],["name/3-69",[]],["text/3-69",[]],["component/3-69",[]],["title/3-70",[139,31.362,265,39.991,271,30.506,315,54.235,316,36.463,317,42.959]],["name/3-70",[]],["text/3-70",[]],["component/3-70",[]],["title/3-71",[10,19.733,141,45.972,274,41.964,318,65.105]],["name/3-71",[]],["text/3-71",[]],["component/3-71",[]],["title/3-72",[139,37.649,271,36.621,316,43.772,319,65.105]],["name/3-72",[]],["text/3-72",[]],["component/3-72",[]],["title/3-73",[139,37.649,290,41.169,316,43.772,320,65.105]],["name/3-73",[]],["text/3-73",[]],["component/3-73",[]],["title/3-74",[265,43.634,271,33.285,321,59.175,322,37.077,323,45.95]],["name/3-74",[]],["text/3-74",[]],["component/3-74",[]],["title/3-75",[265,48.007,271,36.621,322,40.793,324,65.105]],["name/3-75",[]],["text/3-75",[]],["component/3-75",[]],["title/3-76",[265,48.007,271,36.621,323,50.555,325,65.105]],["name/3-76",[]],["text/3-76",[]],["component/3-76",[]],["title/3-77",[10,21.931,326,72.357,327,61.59]],["name/3-77",[]],["text/3-77",[]],["component/3-77",[]],["title/3-78",[271,40.7,327,61.59,328,72.357]],["name/3-78",[]],["text/3-78",[]],["component/3-78",[]],["title/3-79",[290,41.169,322,40.793,323,50.555,329,65.105]],["name/3-79",[]],["text/3-79",[]],["component/3-79",[]],["title/3-80",[154,7.767,156,37.923,330,65.105,331,46.606]],["name/3-80",[]],["text/3-80",[]],["component/3-80",[]],["title/3-81",[46,30.28,139,34.219,154,7.059,303,24.687,332,59.175]],["name/3-81",[]],["text/3-81",[]],["component/3-81",[]],["title/3-82",[37,42.976,139,34.219,154,7.059,303,24.687,333,59.175]],["name/3-82",[]],["text/3-82",[]],["component/3-82",[]],["title/3-83",[154,6.47,205,32.315,303,22.626,334,54.235,335,32.315,336,26.274]],["name/3-83",[]],["text/3-83",[]],["component/3-83",[]],["title/3-84",[140,44.279,201,46.606,335,38.792,337,65.105]],["name/3-84",[]],["text/3-84",[]],["component/3-84",[]],["title/3-85",[139,34.219,154,7.059,195,37.077,303,24.687,338,59.175]],["name/3-85",[]],["text/3-85",[]],["component/3-85",[]],["title/3-86",[60,44.17,89,45.754,339,72.357]],["name/3-86",[]],["text/3-86",[]],["component/3-86",[]],["title/3-87",[340,72.357,341,26.109,342,33.517]],["name/3-87",[]],["text/3-87",[]],["component/3-87",[]],["title/3-88",[343,72.357,344,63.472,345,53.354]],["name/3-88",[]],["text/3-88",[]],["component/3-88",[]],["title/3-89",[139,34.219,154,7.059,303,24.687,346,59.175,347,41.785]],["name/3-89",[]],["text/3-89",[]],["component/3-89",[]],["title/3-90",[154,7.767,303,27.161,336,31.54,348,65.105]],["name/3-90",[]],["text/3-90",[]],["component/3-90",[]],["title/3-91",[154,8.632,349,72.357,350,56.186]],["name/3-91",[]],["text/3-91",[]],["component/3-91",[]],["title/3-92",[32,47.282,154,7.767,347,45.972,351,65.105]],["name/3-92",[]],["text/3-92",[]],["component/3-92",[]],["title/3-93",[53,32.041,139,34.219,154,7.059,303,24.687,352,59.175]],["name/3-93",[]],["text/3-93",[]],["component/3-93",[]],["title/3-94",[13,35.252,22,20.014,299,36.868,353,65.105]],["name/3-94",[]],["text/3-94",[]],["component/3-94",[]],["title/3-95",[10,19.733,22,20.014,299,36.868,354,65.105]],["name/3-95",[]],["text/3-95",[]],["component/3-95",[]],["title/3-96",[22,18.191,271,33.285,299,33.51,355,59.175,356,43.634]],["name/3-96",[]],["text/3-96",[]],["component/3-96",[]],["title/3-97",[22,18.191,271,33.285,299,33.51,341,21.352,357,59.175]],["name/3-97",[]],["text/3-97",[]],["component/3-97",[]],["title/3-98",[22,16.672,197,33.982,271,30.506,299,30.712,358,54.235,359,47.575]],["name/3-98",[]],["text/3-98",[]],["component/3-98",[]],["title/3-99",[22,20.014,290,41.169,299,36.868,360,65.105]],["name/3-99",[]],["text/3-99",[]],["component/3-99",[]],["title/3-100",[22,18.191,211,38.927,243,40.245,299,33.51,361,59.175]],["name/3-100",[]],["text/3-100",[]],["component/3-100",[]],["title/3-101",[139,37.649,316,43.772,342,30.158,362,65.105]],["name/3-101",[]],["text/3-101",[]],["component/3-101",[]],["title/3-102",[342,33.517,363,72.357,364,52.549]],["name/3-102",[]],["text/3-102",[]],["component/3-102",[]],["title/3-103",[342,33.517,365,72.357,366,41.256]],["name/3-103",[]],["text/3-103",[]],["component/3-103",[]],["title/3-104",[342,33.517,367,72.357,368,54.221]],["name/3-104",[]],["text/3-104",[]],["component/3-104",[]],["title/3-105",[290,41.169,316,43.772,342,30.158,369,65.105]],["name/3-105",[]],["text/3-105",[]],["component/3-105",[]],["title/3-106",[342,30.158,370,65.105,371,51.57,372,43.289]],["name/3-106",[]],["text/3-106",[]],["component/3-106",[]],["title/3-107",[16,44.812,215,33.858,286,38.204,373,65.105]],["name/3-107",[]],["text/3-107",[]],["component/3-107",[]],["title/3-108",[215,33.858,342,30.158,372,43.289,374,65.105]],["name/3-108",[]],["text/3-108",[]],["component/3-108",[]],["title/3-109",[3,38.792,342,30.158,375,65.105,376,50.555]],["name/3-109",[]],["text/3-109",[]],["component/3-109",[]],["title/3-110",[377,81.426,378,64.498]],["name/3-110",[]],["text/3-110",[]],["component/3-110",[]],["title/3-111",[154,5.971,259,35.833,316,33.653,331,35.833,342,23.187,379,50.056,380,38.869]],["name/3-111",[]],["text/3-111",[]],["component/3-111",[]],["title/3-112",[331,51.797,342,33.517,381,72.357]],["name/3-112",[]],["text/3-112",[]],["component/3-112",[]],["title/3-113",[195,40.793,331,46.606,342,30.158,382,65.105]],["name/3-113",[]],["text/3-113",[]],["component/3-113",[]],["title/3-114",[10,17.935,331,42.361,341,21.352,383,59.175,384,29.221]],["name/3-114",[]],["text/3-114",[]],["component/3-114",[]],["title/3-115",[13,35.252,322,40.793,385,65.105,386,44.279]],["name/3-115",[]],["text/3-115",[]],["component/3-115",[]],["title/3-116",[10,19.733,322,40.793,386,44.279,387,65.105]],["name/3-116",[]],["text/3-116",[]],["component/3-116",[]],["title/3-117",[290,41.169,322,40.793,386,44.279,388,65.105]],["name/3-117",[]],["text/3-117",[]],["component/3-117",[]],["title/3-118",[53,32.041,154,7.059,171,39.784,389,59.175,390,28.802]],["name/3-118",[]],["text/3-118",[]],["component/3-118",[]],["title/3-119",[10,17.935,22,18.191,299,33.51,390,28.802,391,59.175]],["name/3-119",[]],["text/3-119",[]],["component/3-119",[]],["title/3-120",[22,18.191,271,33.285,299,33.51,390,28.802,392,59.175]],["name/3-120",[]],["text/3-120",[]],["component/3-120",[]],["title/3-121",[22,18.191,290,37.419,299,33.51,390,28.802,393,59.175]],["name/3-121",[]],["text/3-121",[]],["component/3-121",[]],["title/3-122",[53,29.366,154,6.47,174,29.017,303,22.626,336,26.274,394,54.235]],["name/3-122",[]],["text/3-122",[]],["component/3-122",[]],["title/3-123",[10,14.086,22,14.287,154,5.544,174,24.866,299,26.318,303,19.389,336,22.514,395,46.475]],["name/3-123",[]],["text/3-123",[]],["component/3-123",[]],["title/3-124",[22,14.287,154,5.544,174,24.866,271,26.141,299,26.318,303,19.389,336,22.514,396,46.475]],["name/3-124",[]],["text/3-124",[]],["component/3-124",[]],["title/3-125",[13,35.252,285,44.279,336,31.54,397,65.105]],["name/3-125",[]],["text/3-125",[]],["component/3-125",[]],["title/3-126",[22,14.287,154,5.544,174,24.866,290,29.388,299,26.318,303,19.389,336,22.514,398,46.475]],["name/3-126",[]],["text/3-126",[]],["component/3-126",[]],["title/3-127",[13,35.252,154,7.767,399,65.105,400,52.698]],["name/3-127",[]],["text/3-127",[]],["component/3-127",[]],["title/3-128",[46,30.28,113,35.538,154,7.059,303,24.687,401,59.175]],["name/3-128",[]],["text/3-128",[]],["component/3-128",[]],["title/3-129",[28,27.529,37,42.976,113,35.538,303,24.687,402,59.175]],["name/3-129",[]],["text/3-129",[]],["component/3-129",[]],["title/3-130",[28,27.529,67,34.987,195,37.077,403,59.175,404,40.245]],["name/3-130",[]],["text/3-130",[]],["component/3-130",[]],["title/3-131",[28,25.231,67,32.067,195,33.982,404,36.885,405,54.235,406,47.575]],["name/3-131",[]],["text/3-131",[]],["component/3-131",[]],["title/3-132",[28,25.231,67,32.067,195,33.982,404,36.885,407,54.235,408,44.956]],["name/3-132",[]],["text/3-132",[]],["component/3-132",[]],["title/3-133",[43,32.437,67,34.987,154,7.059,195,37.077,409,59.175]],["name/3-133",[]],["text/3-133",[]],["component/3-133",[]],["title/3-134",[28,27.529,67,34.987,404,40.245,410,59.175,411,28.802]],["name/3-134",[]],["text/3-134",[]],["component/3-134",[]],["title/3-135",[60,39.743,67,38.494,411,31.689,412,65.105]],["name/3-135",[]],["text/3-135",[]],["component/3-135",[]],["title/3-136",[67,38.494,411,31.689,413,65.105,414,46.606]],["name/3-136",[]],["text/3-136",[]],["component/3-136",[]],["title/3-137",[28,25.231,67,32.067,274,34.958,404,36.885,415,54.235,416,37.33]],["name/3-137",[]],["text/3-137",[]],["component/3-137",[]],["title/3-138",[60,39.743,411,31.689,416,44.812,417,65.105]],["name/3-138",[]],["text/3-138",[]],["component/3-138",[]],["title/3-139",[60,39.743,197,40.793,416,44.812,418,65.105]],["name/3-139",[]],["text/3-139",[]],["component/3-139",[]],["title/3-140",[45,42.387,416,44.812,419,65.105,420,35.913]],["name/3-140",[]],["text/3-140",[]],["component/3-140",[]],["title/3-141",[60,39.743,416,44.812,421,65.105,422,48.007]],["name/3-141",[]],["text/3-141",[]],["component/3-141",[]],["title/3-142",[27,41.559,127,38.494,274,41.964,423,65.105]],["name/3-142",[]],["text/3-142",[]],["component/3-142",[]],["title/3-143",[100,50.555,274,41.964,341,23.492,424,65.105]],["name/3-143",[]],["text/3-143",[]],["component/3-143",[]],["title/3-144",[127,38.494,182,30.689,274,41.964,425,65.105]],["name/3-144",[]],["text/3-144",[]],["component/3-144",[]],["title/3-145",[274,41.964,341,23.492,426,65.105,427,52.698]],["name/3-145",[]],["text/3-145",[]],["component/3-145",[]],["title/3-146",[9,38.869,10,15.171,215,26.031,366,28.541,411,24.364,416,34.454,428,50.056]],["name/3-146",[]],["text/3-146",[]],["component/3-146",[]],["title/3-147",[11,38.526,12,38.526,28,27.529,58,39.784,429,59.175]],["name/3-147",[]],["text/3-147",[]],["component/3-147",[]],["title/3-148",[25,34.046,58,43.772,303,27.161,430,65.105]],["name/3-148",[]],["text/3-148",[]],["component/3-148",[]],["title/3-149",[58,43.772,322,40.793,431,65.105,432,52.698]],["name/3-149",[]],["text/3-149",[]],["component/3-149",[]],["title/3-150",[25,34.046,215,33.858,316,43.772,433,65.105]],["name/3-150",[]],["text/3-150",[]],["component/3-150",[]],["title/3-151",[45,35.309,356,39.991,364,39.388,420,29.917,434,54.235,435,43.899]],["name/3-151",[]],["text/3-151",[]],["component/3-151",[]],["title/3-152",[45,42.387,420,35.913,436,65.105,437,42.828]],["name/3-152",[]],["text/3-152",[]],["component/3-152",[]],["title/3-153",[45,42.387,420,35.913,438,65.105,439,51.57]],["name/3-153",[]],["text/3-153",[]],["component/3-153",[]],["title/3-154",[22,18.191,45,38.526,141,41.785,420,32.642,440,59.175]],["name/3-154",[]],["text/3-154",[]],["component/3-154",[]],["title/3-155",[366,37.122,441,65.105,442,51.57,443,51.57]],["name/3-155",[]],["text/3-155",[]],["component/3-155",[]],["title/3-156",[125,50.43,444,72.357,445,59.978]],["name/3-156",[]],["text/3-156",[]],["component/3-156",[]],["title/3-157",[22,22.243,299,40.975,446,72.357]],["name/3-157",[]],["text/3-157",[]],["component/3-157",[]],["title/3-158",[49,46.606,113,39.099,439,51.57,447,65.105]],["name/3-158",[]],["text/3-158",[]],["component/3-158",[]],["title/3-159",[11,35.309,22,16.672,49,38.824,113,32.571,299,30.712,448,54.235]],["name/3-159",[]],["text/3-159",[]],["component/3-159",[]],["title/3-160",[49,38.824,113,32.571,342,25.123,368,40.641,449,54.235,450,38.296]],["name/3-160",[]],["text/3-160",[]],["component/3-160",[]],["title/3-161",[113,39.099,246,45.972,356,48.007,451,65.105]],["name/3-161",[]],["text/3-161",[]],["component/3-161",[]],["title/3-162",[60,39.743,67,38.494,246,45.972,452,65.105]],["name/3-162",[]],["text/3-162",[]],["component/3-162",[]],["title/3-163",[67,38.494,246,45.972,414,46.606,453,65.105]],["name/3-163",[]],["text/3-163",[]],["component/3-163",[]],["title/3-164",[59,51.093,215,37.629,454,72.357]],["name/3-164",[]],["text/3-164",[]],["component/3-164",[]],["title/3-165",[46,33.315,215,33.858,335,38.792,455,65.105]],["name/3-165",[]],["text/3-165",[]],["component/3-165",[]],["title/3-166",[89,41.169,215,33.858,335,38.792,456,65.105]],["name/3-166",[]],["text/3-166",[]],["component/3-166",[]],["title/3-167",[215,30.774,335,35.259,457,59.175,458,47.897,459,49.051]],["name/3-167",[]],["text/3-167",[]],["component/3-167",[]],["title/3-168",[215,33.858,460,65.105,461,49.633,462,45.972]],["name/3-168",[]],["text/3-168",[]],["component/3-168",[]],["title/3-169",[154,7.767,215,33.858,462,45.972,463,65.105]],["name/3-169",[]],["text/3-169",[]],["component/3-169",[]],["title/3-170",[215,30.774,335,35.259,461,45.112,462,41.785,464,59.175]],["name/3-170",[]],["text/3-170",[]],["component/3-170",[]],["title/3-171",[154,7.059,215,30.774,335,35.259,462,41.785,465,59.175]],["name/3-171",[]],["text/3-171",[]],["component/3-171",[]],["title/3-172",[215,30.774,335,35.259,459,49.051,466,59.175,467,56.074]],["name/3-172",[]],["text/3-172",[]],["component/3-172",[]],["title/3-173",[65,40.245,215,30.774,335,35.259,459,49.051,468,59.175]],["name/3-173",[]],["text/3-173",[]],["component/3-173",[]],["title/3-174",[60,39.743,215,33.858,335,38.792,469,65.105]],["name/3-174",[]],["text/3-174",[]],["component/3-174",[]],["title/3-175",[60,39.743,211,42.828,335,38.792,470,65.105]],["name/3-175",[]],["text/3-175",[]],["component/3-175",[]],["title/3-176",[10,19.733,215,33.858,335,38.792,471,65.105]],["name/3-176",[]],["text/3-176",[]],["component/3-176",[]],["title/3-177",[53,32.041,113,35.538,154,7.059,303,24.687,472,59.175]],["name/3-177",[]],["text/3-177",[]],["component/3-177",[]],["title/3-178",[1,25.231,26,30.109,53,29.366,154,6.47,473,54.235,474,29.19]],["name/3-178",[]],["text/3-178",[]],["component/3-178",[]],["title/3-179",[342,33.517,366,41.256,475,72.357]],["name/3-179",[]],["text/3-179",[]],["component/3-179",[]],["title/3-180",[25,28.361,286,31.825,303,22.626,474,29.19,476,54.235,477,36.885]],["name/3-180",[]],["text/3-180",[]],["component/3-180",[]],["title/3-181",[286,34.724,322,37.077,474,31.849,477,40.245,478,59.175]],["name/3-181",[]],["text/3-181",[]],["component/3-181",[]],["title/3-182",[422,60.042,479,81.426]],["name/3-182",[]],["text/3-182",[]],["component/3-182",[]],["title/3-183",[1,25.231,26,30.109,53,29.366,154,6.47,480,54.235,481,22.312]],["name/3-183",[]],["text/3-183",[]],["component/3-183",[]],["title/3-184",[235,43.772,342,30.158,366,37.122,482,65.105]],["name/3-184",[]],["text/3-184",[]],["component/3-184",[]],["title/3-185",[25,28.361,286,31.825,303,22.626,477,36.885,481,22.312,483,54.235]],["name/3-185",[]],["text/3-185",[]],["component/3-185",[]],["title/3-186",[286,31.825,477,36.885,481,32.244,484,54.235,485,42.114]],["name/3-186",[]],["text/3-186",[]],["component/3-186",[]],["title/3-187",[104,30.572,286,27.272,322,29.12,477,31.608,481,19.119,486,46.475,487,37.617,488,37.617]],["name/3-187",[]],["text/3-187",[]],["component/3-187",[]],["title/3-188",[215,30.774,286,34.724,372,39.346,477,40.245,489,59.175]],["name/3-188",[]],["text/3-188",[]],["component/3-188",[]],["title/3-189",[422,60.042,490,81.426]],["name/3-189",[]],["text/3-189",[]],["component/3-189",[]],["title/3-190",[485,56.186,491,72.357,492,57.314]],["name/3-190",[]],["text/3-190",[]],["component/3-190",[]],["title/3-191",[13,35.252,154,7.767,155,50.555,156,37.923]],["name/3-191",[]],["text/3-191",[]],["component/3-191",[]],["title/3-192",[46,33.315,154,7.767,237,44.812,493,65.105]],["name/3-192",[]],["text/3-192",[]],["component/3-192",[]],["title/3-193",[22,18.191,154,7.059,160,50.369,161,49.051,494,59.175]],["name/3-193",[]],["text/3-193",[]],["component/3-193",[]],["title/3-194",[14,38.792,22,20.014,154,7.767,495,65.105]],["name/3-194",[]],["text/3-194",[]],["component/3-194",[]],["title/3-195",[14,38.792,154,7.767,496,65.105,497,53.967]],["name/3-195",[]],["text/3-195",[]],["component/3-195",[]],["title/3-196",[14,35.259,22,18.191,154,7.059,498,59.175,499,51.909]],["name/3-196",[]],["text/3-196",[]],["component/3-196",[]],["title/3-197",[14,35.259,22,18.191,154,7.059,500,59.175,501,45.112]],["name/3-197",[]],["text/3-197",[]],["component/3-197",[]],["title/3-198",[14,38.792,154,7.767,502,65.105,503,42.387]],["name/3-198",[]],["text/3-198",[]],["component/3-198",[]],["title/3-199",[46,33.315,154,7.767,239,48.007,504,65.105]],["name/3-199",[]],["text/3-199",[]],["component/3-199",[]],["title/3-200",[22,20.014,154,7.767,239,48.007,505,65.105]],["name/3-200",[]],["text/3-200",[]],["component/3-200",[]],["title/3-201",[46,33.315,154,7.767,241,43.772,506,65.105]],["name/3-201",[]],["text/3-201",[]],["component/3-201",[]],["title/3-202",[185,49.804,507,72.357,508,46.638]],["name/3-202",[]],["text/3-202",[]],["component/3-202",[]],["title/3-203",[168,48.787,508,41.964,509,65.105,510,57.111]],["name/3-203",[]],["text/3-203",[]],["component/3-203",[]],["title/3-204",[197,40.793,508,41.964,511,65.105,512,49.633]],["name/3-204",[]],["text/3-204",[]],["component/3-204",[]],["title/3-205",[508,46.638,513,72.357,514,63.472]],["name/3-205",[]],["text/3-205",[]],["component/3-205",[]],["title/3-206",[46,30.28,89,37.419,241,39.784,411,28.802,515,59.175]],["name/3-206",[]],["text/3-206",[]],["component/3-206",[]],["title/3-207",[241,39.784,503,38.526,508,38.142,516,59.175,517,49.051]],["name/3-207",[]],["text/3-207",[]],["component/3-207",[]],["title/3-208",[241,36.463,503,35.309,508,34.958,517,44.956,518,54.235,519,39.991]],["name/3-208",[]],["text/3-208",[]],["component/3-208",[]],["title/3-209",[46,33.315,154,7.767,520,65.105,521,47.282]],["name/3-209",[]],["text/3-209",[]],["component/3-209",[]],["title/3-210",[521,52.549,522,72.357,523,49.804]],["name/3-210",[]],["text/3-210",[]],["component/3-210",[]],["title/3-211",[25,34.046,89,41.169,159,50.555,524,65.105]],["name/3-211",[]],["text/3-211",[]],["component/3-211",[]],["title/3-212",[154,7.767,521,47.282,525,65.105,526,39.416]],["name/3-212",[]],["text/3-212",[]],["component/3-212",[]],["title/3-213",[46,33.315,154,7.767,527,61.694,528,52.698]],["name/3-213",[]],["text/3-213",[]],["component/3-213",[]],["title/3-214",[154,7.767,528,52.698,529,65.105,530,57.111]],["name/3-214",[]],["text/3-214",[]],["component/3-214",[]],["title/3-215",[15,32.041,46,30.28,154,7.059,531,59.175,532,36.123]],["name/3-215",[]],["text/3-215",[]],["component/3-215",[]],["title/3-216",[32,47.282,43,35.688,154,7.767,533,65.105]],["name/3-216",[]],["text/3-216",[]],["component/3-216",[]],["title/3-217",[154,7.767,534,65.105,535,43.772,536,48.787]],["name/3-217",[]],["text/3-217",[]],["component/3-217",[]],["title/3-218",[10,19.733,53,35.252,164,50.555,166,45.376]],["name/3-218",[]],["text/3-218",[]],["component/3-218",[]],["title/3-219",[14,38.792,166,45.376,272,45.972,537,57.111]],["name/3-219",[]],["text/3-219",[]],["component/3-219",[]],["title/3-220",[166,50.43,538,72.357,539,61.59]],["name/3-220",[]],["text/3-220",[]],["component/3-220",[]],["title/3-221",[1,27.529,14,35.259,154,7.059,237,40.73,540,59.175]],["name/3-221",[]],["text/3-221",[]],["component/3-221",[]],["title/3-222",[14,35.259,29,27.066,182,27.893,541,59.175,542,44.343]],["name/3-222",[]],["text/3-222",[]],["component/3-222",[]],["title/3-223",[11,38.526,12,38.526,13,32.041,28,27.529,168,44.343]],["name/3-223",[]],["text/3-223",[]],["component/3-223",[]],["title/3-224",[11,35.309,12,35.309,25,28.361,28,25.231,185,37.33,543,51.393]],["name/3-224",[]],["text/3-224",[]],["component/3-224",[]],["title/3-225",[11,38.526,28,27.529,166,41.243,185,40.73,544,59.175]],["name/3-225",[]],["text/3-225",[]],["component/3-225",[]],["title/3-226",[13,35.252,27,41.559,154,7.767,170,51.57]],["name/3-226",[]],["text/3-226",[]],["component/3-226",[]],["title/3-227",[27,34.62,46,27.752,139,31.362,154,6.47,303,22.626,545,54.235]],["name/3-227",[]],["text/3-227",[]],["component/3-227",[]],["title/3-228",[22,15.387,127,29.596,154,5.971,163,21.578,305,27.97,481,20.592,546,50.056]],["name/3-228",[]],["text/3-228",[]],["component/3-228",[]],["title/3-229",[22,16.672,154,6.47,305,30.305,481,22.312,547,54.235,548,25.679]],["name/3-229",[]],["text/3-229",[]],["component/3-229",[]],["title/3-230",[10,16.438,22,16.672,154,6.47,305,30.305,481,22.312,549,54.235]],["name/3-230",[]],["text/3-230",[]],["component/3-230",[]],["title/3-231",[22,16.672,154,6.47,163,23.379,305,30.305,481,22.312,550,54.235]],["name/3-231",[]],["text/3-231",[]],["component/3-231",[]],["title/3-232",[22,16.672,154,6.47,305,30.305,481,22.312,551,54.235,552,23.921]],["name/3-232",[]],["text/3-232",[]],["component/3-232",[]],["title/3-233",[22,16.672,154,6.47,305,30.305,341,19.57,481,22.312,553,54.235]],["name/3-233",[]],["text/3-233",[]],["component/3-233",[]],["title/3-234",[552,31.914,554,72.357,555,47.598]],["name/3-234",[]],["text/3-234",[]],["component/3-234",[]],["title/3-235",[1,33.662,552,31.914,556,72.357]],["name/3-235",[]],["text/3-235",[]],["component/3-235",[]],["title/3-236",[22,16.672,154,6.47,481,22.312,557,54.235,558,37.799,559,35.677]],["name/3-236",[]],["text/3-236",[]],["component/3-236",[]],["title/3-237",[22,15.387,154,5.971,481,20.592,548,23.7,558,34.887,559,32.928,560,50.056]],["name/3-237",[]],["text/3-237",[]],["component/3-237",[]],["title/3-238",[10,15.171,22,15.387,154,5.971,481,20.592,558,34.887,559,32.928,561,50.056]],["name/3-238",[]],["text/3-238",[]],["component/3-238",[]],["title/3-239",[10,16.438,28,25.231,127,32.067,386,36.885,562,54.235,563,32.067]],["name/3-239",[]],["text/3-239",[]],["component/3-239",[]],["title/3-240",[10,17.935,322,37.077,552,26.1,555,38.927,564,59.175]],["name/3-240",[]],["text/3-240",[]],["component/3-240",[]],["title/3-241",[10,14.086,22,14.287,154,5.544,341,16.769,481,19.119,558,32.391,559,30.572,565,46.475]],["name/3-241",[]],["text/3-241",[]],["component/3-241",[]],["title/3-242",[22,18.191,341,21.352,552,26.1,555,38.927,566,59.175]],["name/3-242",[]],["text/3-242",[]],["component/3-242",[]],["title/3-243",[22,16.672,341,19.57,526,32.835,552,23.921,555,35.677,567,54.235]],["name/3-243",[]],["text/3-243",[]],["component/3-243",[]],["title/3-244",[1,25.231,22,16.672,26,30.109,341,19.57,552,23.921,568,54.235]],["name/3-244",[]],["text/3-244",[]],["component/3-244",[]],["title/3-245",[1,23.287,22,15.387,26,27.789,341,18.062,526,30.305,552,22.078,569,50.056]],["name/3-245",[]],["text/3-245",[]],["component/3-245",[]],["title/3-246",[1,25.231,26,30.109,341,19.57,552,23.921,570,54.235,571,37.799]],["name/3-246",[]],["text/3-246",[]],["component/3-246",[]],["title/3-247",[22,15.387,241,33.653,481,20.592,526,30.305,559,32.928,572,50.056,573,36.91]],["name/3-247",[]],["text/3-247",[]],["component/3-247",[]],["title/3-248",[154,7.767,481,26.784,526,39.416,574,65.105]],["name/3-248",[]],["text/3-248",[]],["component/3-248",[]],["title/3-249",[154,7.059,481,24.344,526,35.826,548,28.018,575,59.175]],["name/3-249",[]],["text/3-249",[]],["component/3-249",[]],["title/3-250",[10,17.935,154,7.059,481,24.344,526,35.826,576,59.175]],["name/3-250",[]],["text/3-250",[]],["component/3-250",[]],["title/3-251",[10,19.733,27,41.559,563,38.494,577,65.105]],["name/3-251",[]],["text/3-251",[]],["component/3-251",[]],["title/3-252",[10,17.935,154,7.059,481,24.344,526,35.826,578,59.175]],["name/3-252",[]],["text/3-252",[]],["component/3-252",[]],["title/3-253",[1,27.529,56,44.343,290,37.419,532,36.123,579,59.175]],["name/3-253",[]],["text/3-253",[]],["component/3-253",[]],["title/3-254",[154,7.059,163,25.509,481,24.344,526,35.826,580,59.175]],["name/3-254",[]],["text/3-254",[]],["component/3-254",[]],["title/3-255",[154,7.059,481,24.344,526,35.826,552,26.1,581,59.175]],["name/3-255",[]],["text/3-255",[]],["component/3-255",[]],["title/3-256",[154,7.059,341,21.352,481,24.344,526,35.826,582,59.175]],["name/3-256",[]],["text/3-256",[]],["component/3-256",[]],["title/3-257",[552,31.914,555,47.598,583,72.357]],["name/3-257",[]],["text/3-257",[]],["component/3-257",[]],["title/3-258",[1,33.662,552,31.914,584,72.357]],["name/3-258",[]],["text/3-258",[]],["component/3-258",[]],["title/3-259",[22,18.191,154,7.059,481,24.344,585,59.175,586,33.51]],["name/3-259",[]],["text/3-259",[]],["component/3-259",[]],["title/3-260",[22,16.672,154,6.47,481,22.312,548,25.679,586,30.712,587,54.235]],["name/3-260",[]],["text/3-260",[]],["component/3-260",[]],["title/3-261",[10,16.438,22,16.672,154,6.47,481,22.312,586,30.712,588,54.235]],["name/3-261",[]],["text/3-261",[]],["component/3-261",[]],["title/3-262",[22,16.672,154,6.47,163,23.379,481,22.312,586,30.712,589,54.235]],["name/3-262",[]],["text/3-262",[]],["component/3-262",[]],["title/3-263",[22,16.672,154,6.47,481,22.312,552,23.921,586,30.712,590,54.235]],["name/3-263",[]],["text/3-263",[]],["component/3-263",[]],["title/3-264",[22,16.672,154,6.47,341,19.57,481,22.312,586,30.712,591,54.235]],["name/3-264",[]],["text/3-264",[]],["component/3-264",[]],["title/3-265",[22,18.191,341,21.352,552,26.1,555,38.927,592,59.175]],["name/3-265",[]],["text/3-265",[]],["component/3-265",[]],["title/3-266",[1,27.529,22,18.191,341,21.352,552,26.1,593,59.175]],["name/3-266",[]],["text/3-266",[]],["component/3-266",[]],["title/3-267",[22,18.191,154,7.059,474,31.849,586,33.51,594,59.175]],["name/3-267",[]],["text/3-267",[]],["component/3-267",[]],["title/3-268",[22,16.672,154,6.47,474,29.19,548,25.679,586,30.712,595,54.235]],["name/3-268",[]],["text/3-268",[]],["component/3-268",[]],["title/3-269",[10,16.438,22,16.672,154,6.47,474,29.19,586,30.712,596,54.235]],["name/3-269",[]],["text/3-269",[]],["component/3-269",[]],["title/3-270",[22,16.672,154,6.47,163,23.379,474,29.19,586,30.712,597,54.235]],["name/3-270",[]],["text/3-270",[]],["component/3-270",[]],["title/3-271",[22,16.672,154,6.47,474,29.19,552,23.921,586,30.712,598,54.235]],["name/3-271",[]],["text/3-271",[]],["component/3-271",[]],["title/3-272",[22,16.672,154,6.47,341,19.57,474,29.19,586,30.712,599,54.235]],["name/3-272",[]],["text/3-272",[]],["component/3-272",[]],["title/3-273",[1,27.529,22,18.191,341,21.352,552,26.1,600,59.175]],["name/3-273",[]],["text/3-273",[]],["component/3-273",[]],["title/3-274",[22,18.191,341,21.352,552,26.1,555,38.927,601,59.175]],["name/3-274",[]],["text/3-274",[]],["component/3-274",[]],["title/3-275",[154,8.632,602,72.357,603,44.17]],["name/3-275",[]],["text/3-275",[]],["component/3-275",[]],["title/3-276",[22,18.191,154,7.059,481,24.344,603,36.123,604,59.175]],["name/3-276",[]],["text/3-276",[]],["component/3-276",[]],["title/3-277",[22,16.672,154,6.47,481,22.312,548,25.679,603,33.107,605,54.235]],["name/3-277",[]],["text/3-277",[]],["component/3-277",[]],["title/3-278",[10,16.438,22,16.672,154,6.47,481,22.312,603,33.107,606,54.235]],["name/3-278",[]],["text/3-278",[]],["component/3-278",[]],["title/3-279",[22,16.672,154,6.47,163,23.379,481,22.312,603,33.107,607,54.235]],["name/3-279",[]],["text/3-279",[]],["component/3-279",[]],["title/3-280",[22,16.672,154,6.47,481,22.312,552,23.921,603,33.107,608,54.235]],["name/3-280",[]],["text/3-280",[]],["component/3-280",[]],["title/3-281",[22,16.672,154,6.47,341,19.57,481,22.312,603,33.107,609,54.235]],["name/3-281",[]],["text/3-281",[]],["component/3-281",[]],["title/3-282",[53,25.164,65,31.608,154,5.544,215,24.169,573,34.269,610,46.475,611,37.617,612,39.559]],["name/3-282",[]],["text/3-282",[]],["component/3-282",[]],["title/3-283",[22,18.191,154,7.059,474,31.849,603,36.123,613,59.175]],["name/3-283",[]],["text/3-283",[]],["component/3-283",[]],["title/3-284",[22,16.672,154,6.47,474,29.19,548,25.679,603,33.107,614,54.235]],["name/3-284",[]],["text/3-284",[]],["component/3-284",[]],["title/3-285",[10,16.438,22,16.672,154,6.47,474,29.19,603,33.107,615,54.235]],["name/3-285",[]],["text/3-285",[]],["component/3-285",[]],["title/3-286",[22,16.672,154,6.47,163,23.379,474,29.19,603,33.107,616,54.235]],["name/3-286",[]],["text/3-286",[]],["component/3-286",[]],["title/3-287",[22,16.672,154,6.47,474,29.19,552,23.921,603,33.107,617,54.235]],["name/3-287",[]],["text/3-287",[]],["component/3-287",[]],["title/3-288",[22,16.672,154,6.47,341,19.57,474,29.19,603,33.107,618,54.235]],["name/3-288",[]],["text/3-288",[]],["component/3-288",[]],["title/3-289",[154,7.767,305,36.379,619,65.105,620,48.007]],["name/3-289",[]],["text/3-289",[]],["component/3-289",[]],["title/3-290",[22,16.672,154,6.47,227,30.506,384,26.782,481,22.312,621,54.235]],["name/3-290",[]],["text/3-290",[]],["component/3-290",[]],["title/3-291",[22,15.387,154,5.971,205,29.825,227,28.156,384,24.718,481,20.592,622,50.056]],["name/3-291",[]],["text/3-291",[]],["component/3-291",[]],["title/3-292",[22,14.287,154,5.544,205,27.691,227,26.141,384,22.95,481,19.119,548,22.004,623,46.475]],["name/3-292",[]],["text/3-292",[]],["component/3-292",[]],["title/3-293",[10,14.086,22,14.287,154,5.544,205,27.691,227,26.141,384,22.95,481,19.119,624,46.475]],["name/3-293",[]],["text/3-293",[]],["component/3-293",[]],["title/3-294",[22,14.287,154,5.544,163,20.034,205,27.691,227,26.141,384,22.95,481,19.119,625,46.475]],["name/3-294",[]],["text/3-294",[]],["component/3-294",[]],["title/3-295",[22,14.287,154,5.544,205,27.691,227,26.141,384,22.95,481,19.119,552,20.499,626,46.475]],["name/3-295",[]],["text/3-295",[]],["component/3-295",[]],["title/3-296",[22,14.287,154,5.544,205,27.691,227,26.141,341,16.769,384,22.95,481,19.119,627,46.475]],["name/3-296",[]],["text/3-296",[]],["component/3-296",[]],["title/3-297",[22,16.672,154,6.47,227,30.506,384,26.782,481,22.312,628,54.235]],["name/3-297",[]],["text/3-297",[]],["component/3-297",[]],["title/3-298",[22,15.387,154,5.971,227,28.156,384,24.718,481,20.592,548,23.7,629,50.056]],["name/3-298",[]],["text/3-298",[]],["component/3-298",[]],["title/3-299",[10,15.171,22,15.387,154,5.971,227,28.156,384,24.718,481,20.592,630,50.056]],["name/3-299",[]],["text/3-299",[]],["component/3-299",[]],["title/3-300",[22,15.387,154,5.971,163,21.578,227,28.156,384,24.718,481,20.592,631,50.056]],["name/3-300",[]],["text/3-300",[]],["component/3-300",[]],["title/3-301",[22,15.387,154,5.971,227,28.156,384,24.718,481,20.592,552,22.078,632,50.056]],["name/3-301",[]],["text/3-301",[]],["component/3-301",[]],["title/3-302",[22,15.387,154,5.971,227,28.156,341,18.062,384,24.718,481,20.592,633,50.056]],["name/3-302",[]],["text/3-302",[]],["component/3-302",[]],["title/3-303",[22,16.672,171,36.463,227,30.506,336,26.274,634,54.235,635,42.959]],["name/3-303",[]],["text/3-303",[]],["component/3-303",[]],["title/3-304",[89,45.754,336,35.053,636,72.357]],["name/3-304",[]],["text/3-304",[]],["component/3-304",[]],["title/3-305",[364,52.549,637,72.357,638,65.734]],["name/3-305",[]],["text/3-305",[]],["component/3-305",[]],["title/3-306",[27,46.188,125,50.43,639,72.357]],["name/3-306",[]],["text/3-306",[]],["component/3-306",[]],["title/3-307",[336,31.54,640,65.105,641,50.555,642,50.555]],["name/3-307",[]],["text/3-307",[]],["component/3-307",[]],["title/3-308",[336,31.54,643,65.105,644,53.967,645,52.698]],["name/3-308",[]],["text/3-308",[]],["component/3-308",[]],["title/3-309",[27,34.62,46,27.752,113,32.571,154,6.47,303,22.626,646,47.575]],["name/3-309",[]],["text/3-309",[]],["component/3-309",[]],["title/3-310",[10,17.935,127,34.987,154,7.059,647,59.175,648,51.909]],["name/3-310",[]],["text/3-310",[]],["component/3-310",[]],["title/3-311",[0,29.017,10,16.438,127,32.067,154,6.47,586,30.712,649,54.235]],["name/3-311",[]],["text/3-311",[]],["component/3-311",[]],["title/3-312",[10,19.733,154,7.767,650,65.105,651,55.417]],["name/3-312",[]],["text/3-312",[]],["component/3-312",[]],["title/3-313",[586,33.51,651,50.369,652,59.175,653,47.897,654,46.872]],["name/3-313",[]],["text/3-313",[]],["component/3-313",[]],["title/3-314",[3,35.259,586,33.51,653,47.897,655,59.175,656,40.73]],["name/3-314",[]],["text/3-314",[]],["component/3-314",[]],["title/3-315",[67,32.067,215,28.205,642,60.862,653,43.899,657,54.235]],["name/3-315",[]],["text/3-315",[]],["component/3-315",[]],["title/3-316",[10,16.438,27,34.62,65,36.885,154,6.47,303,22.626,658,54.235]],["name/3-316",[]],["text/3-316",[]],["component/3-316",[]],["title/3-317",[10,17.935,154,7.059,558,41.243,559,38.927,659,59.175]],["name/3-317",[]],["text/3-317",[]],["component/3-317",[]],["title/3-318",[13,35.252,154,7.767,173,52.698,174,34.834]],["name/3-318",[]],["text/3-318",[]],["component/3-318",[]],["title/3-319",[46,27.752,139,31.362,154,6.47,174,29.017,303,22.626,660,54.235]],["name/3-319",[]],["text/3-319",[]],["component/3-319",[]],["title/3-320",[85,45.376,154,7.767,372,43.289,661,65.105]],["name/3-320",[]],["text/3-320",[]],["component/3-320",[]],["title/3-321",[23,36.785,662,81.426]],["name/3-321",[]],["text/3-321",[]],["component/3-321",[]],["title/3-322",[10,15.171,23,22.613,154,5.971,174,26.782,303,20.883,336,24.249,663,50.056]],["name/3-322",[]],["text/3-322",[]],["component/3-322",[]],["title/3-323",[23,22.613,154,5.971,174,26.782,303,20.883,336,24.249,411,24.364,664,50.056]],["name/3-323",[]],["text/3-323",[]],["component/3-323",[]],["title/3-324",[222,59.136,665,81.426]],["name/3-324",[]],["text/3-324",[]],["component/3-324",[]],["title/3-325",[10,15.171,154,5.971,174,26.782,222,36.353,303,20.883,336,24.249,666,50.056]],["name/3-325",[]],["text/3-325",[]],["component/3-325",[]],["title/3-326",[154,5.971,174,26.782,222,36.353,303,20.883,336,24.249,411,24.364,667,50.056]],["name/3-326",[]],["text/3-326",[]],["component/3-326",[]],["title/3-327",[668,72.357,669,53.354,670,49.804]],["name/3-327",[]],["text/3-327",[]],["component/3-327",[]],["title/3-328",[10,14.086,154,5.544,174,24.866,303,19.389,336,22.514,669,34.269,670,31.989,671,46.475]],["name/3-328",[]],["text/3-328",[]],["component/3-328",[]],["title/3-329",[154,5.544,174,24.866,303,19.389,336,22.514,411,22.621,669,34.269,670,31.989,672,46.475]],["name/3-329",[]],["text/3-329",[]],["component/3-329",[]],["title/3-330",[25,37.838,285,49.211,673,72.357]],["name/3-330",[]],["text/3-330",[]],["component/3-330",[]],["title/3-331",[10,14.086,25,24.303,154,5.544,174,24.866,285,31.608,303,19.389,336,22.514,674,46.475]],["name/3-331",[]],["text/3-331",[]],["component/3-331",[]],["title/3-332",[25,24.303,154,5.544,174,24.866,285,31.608,303,19.389,336,22.514,411,22.621,675,46.475]],["name/3-332",[]],["text/3-332",[]],["component/3-332",[]],["title/3-333",[25,37.838,140,49.211,676,72.357]],["name/3-333",[]],["text/3-333",[]],["component/3-333",[]],["title/3-334",[10,14.086,25,24.303,140,31.608,154,5.544,174,24.866,303,19.389,336,22.514,677,46.475]],["name/3-334",[]],["text/3-334",[]],["component/3-334",[]],["title/3-335",[25,24.303,140,31.608,154,5.544,174,24.866,303,19.389,336,22.514,411,22.621,678,46.475]],["name/3-335",[]],["text/3-335",[]],["component/3-335",[]],["title/3-336",[25,34.046,670,44.812,679,65.105,680,51.57]],["name/3-336",[]],["text/3-336",[]],["component/3-336",[]],["title/3-337",[10,13.146,25,22.681,154,5.174,174,23.205,303,18.094,336,21.011,670,29.853,680,34.355,681,43.372]],["name/3-337",[]],["text/3-337",[]],["component/3-337",[]],["title/3-338",[25,22.681,154,5.174,174,23.205,303,18.094,336,21.011,411,21.111,670,29.853,680,34.355,682,43.372]],["name/3-338",[]],["text/3-338",[]],["component/3-338",[]],["title/3-339",[25,37.838,683,72.357,684,55.161]],["name/3-339",[]],["text/3-339",[]],["component/3-339",[]],["title/3-340",[10,14.086,25,24.303,154,5.544,174,24.866,303,19.389,336,22.514,684,35.43,685,46.475]],["name/3-340",[]],["text/3-340",[]],["component/3-340",[]],["title/3-341",[154,5.971,174,26.782,303,20.883,336,24.249,411,24.364,684,38.16,686,50.056]],["name/3-341",[]],["text/3-341",[]],["component/3-341",[]],["title/3-342",[22,25.031,687,81.426]],["name/3-342",[]],["text/3-342",[]],["component/3-342",[]],["title/3-343",[10,15.171,22,15.387,154,5.971,303,20.883,336,24.249,688,50.056,689,31.952]],["name/3-343",[]],["text/3-343",[]],["component/3-343",[]],["title/3-344",[22,15.387,154,5.971,303,20.883,336,24.249,411,24.364,689,31.952,690,50.056]],["name/3-344",[]],["text/3-344",[]],["component/3-344",[]],["title/3-345",[497,67.495,691,81.426]],["name/3-345",[]],["text/3-345",[]],["component/3-345",[]],["title/3-346",[22,22.243,501,55.161,692,72.357]],["name/3-346",[]],["text/3-346",[]],["component/3-346",[]],["title/3-347",[25,37.838,420,39.913,693,72.357]],["name/3-347",[]],["text/3-347",[]],["component/3-347",[]],["title/3-348",[10,15.171,154,5.971,303,20.883,336,24.249,420,27.612,535,33.653,694,50.056]],["name/3-348",[]],["text/3-348",[]],["component/3-348",[]],["title/3-349",[154,5.971,303,20.883,336,24.249,411,24.364,420,27.612,535,33.653,695,50.056]],["name/3-349",[]],["text/3-349",[]],["component/3-349",[]],["title/3-350",[154,7.059,535,39.784,536,44.343,696,59.175,697,44.343]],["name/3-350",[]],["text/3-350",[]],["component/3-350",[]],["title/3-351",[10,16.438,154,6.47,535,36.463,536,40.641,697,40.641,698,54.235]],["name/3-351",[]],["text/3-351",[]],["component/3-351",[]],["title/3-352",[154,6.47,411,26.398,535,36.463,536,40.641,697,40.641,699,54.235]],["name/3-352",[]],["text/3-352",[]],["component/3-352",[]],["title/3-353",[15,32.041,23,26.732,154,7.059,390,28.802,700,59.175]],["name/3-353",[]],["text/3-353",[]],["component/3-353",[]],["title/3-354",[10,16.438,15,29.366,23,24.501,154,6.47,390,26.398,701,54.235]],["name/3-354",[]],["text/3-354",[]],["component/3-354",[]],["title/3-355",[15,29.366,23,24.501,154,6.47,390,26.398,411,26.398,702,54.235]],["name/3-355",[]],["text/3-355",[]],["component/3-355",[]],["title/3-356",[23,26.732,154,7.059,390,28.802,703,59.175,704,41.785]],["name/3-356",[]],["text/3-356",[]],["component/3-356",[]],["title/3-357",[10,16.438,23,24.501,154,6.47,390,26.398,704,38.296,705,54.235]],["name/3-357",[]],["text/3-357",[]],["component/3-357",[]],["title/3-358",[23,24.501,154,6.47,390,26.398,411,26.398,704,38.296,706,54.235]],["name/3-358",[]],["text/3-358",[]],["component/3-358",[]],["title/3-359",[154,7.059,390,28.802,704,41.785,707,59.175,708,44.343]],["name/3-359",[]],["text/3-359",[]],["component/3-359",[]],["title/3-360",[10,16.438,154,6.47,390,26.398,704,38.296,708,40.641,709,54.235]],["name/3-360",[]],["text/3-360",[]],["component/3-360",[]],["title/3-361",[390,28.802,411,28.802,704,41.785,708,44.343,710,59.175]],["name/3-361",[]],["text/3-361",[]],["component/3-361",[]],["title/3-362",[15,29.366,22,16.672,154,6.47,336,26.274,390,26.398,711,54.235]],["name/3-362",[]],["text/3-362",[]],["component/3-362",[]],["title/3-363",[10,15.171,15,27.103,22,15.387,154,5.971,336,24.249,390,24.364,712,50.056]],["name/3-363",[]],["text/3-363",[]],["component/3-363",[]],["title/3-364",[22,16.672,154,6.47,197,33.982,209,36.463,390,26.398,713,54.235]],["name/3-364",[]],["text/3-364",[]],["component/3-364",[]],["title/3-365",[10,15.171,22,15.387,154,5.971,197,31.363,209,33.653,390,24.364,714,50.056]],["name/3-365",[]],["text/3-365",[]],["component/3-365",[]],["title/3-366",[22,15.387,154,5.971,197,31.363,209,33.653,390,24.364,411,24.364,715,50.056]],["name/3-366",[]],["text/3-366",[]],["component/3-366",[]],["title/3-367",[154,8.632,716,72.357,717,63.472]],["name/3-367",[]],["text/3-367",[]],["component/3-367",[]],["title/3-368",[28,30.288,474,35.041,718,65.105,719,47.282]],["name/3-368",[]],["text/3-368",[]],["component/3-368",[]],["title/3-369",[28,30.288,481,26.784,719,47.282,720,65.105]],["name/3-369",[]],["text/3-369",[]],["component/3-369",[]],["title/3-370",[43,35.688,474,35.041,719,47.282,721,65.105]],["name/3-370",[]],["text/3-370",[]],["component/3-370",[]],["title/3-371",[43,35.688,481,26.784,719,47.282,722,65.105]],["name/3-371",[]],["text/3-371",[]],["component/3-371",[]],["title/3-372",[154,7.767,723,65.105,724,55.417,725,55.417]],["name/3-372",[]],["text/3-372",[]],["component/3-372",[]],["title/3-373",[10,17.935,154,7.059,724,50.369,725,50.369,726,59.175]],["name/3-373",[]],["text/3-373",[]],["component/3-373",[]],["title/3-374",[15,35.252,30,40.793,154,7.767,727,65.105]],["name/3-374",[]],["text/3-374",[]],["component/3-374",[]],["title/3-375",[30,40.793,154,7.767,208,39.416,728,65.105]],["name/3-375",[]],["text/3-375",[]],["component/3-375",[]],["title/3-376",[10,17.935,30,37.077,154,7.059,208,35.826,729,59.175]],["name/3-376",[]],["text/3-376",[]],["component/3-376",[]],["title/3-377",[30,37.077,154,7.059,208,35.826,411,28.802,730,59.175]],["name/3-377",[]],["text/3-377",[]],["component/3-377",[]],["title/3-378",[22,18.191,154,7.059,731,59.175,732,44.343,733,45.112]],["name/3-378",[]],["text/3-378",[]],["component/3-378",[]],["title/3-379",[10,16.438,22,16.672,154,6.47,732,40.641,733,41.345,734,54.235]],["name/3-379",[]],["text/3-379",[]],["component/3-379",[]],["title/3-380",[22,16.672,154,6.47,411,26.398,732,40.641,733,41.345,735,54.235]],["name/3-380",[]],["text/3-380",[]],["component/3-380",[]],["title/3-381",[22,20.014,154,7.767,689,41.559,736,65.105]],["name/3-381",[]],["text/3-381",[]],["component/3-381",[]],["title/3-382",[10,17.935,22,18.191,154,7.059,689,37.773,737,59.175]],["name/3-382",[]],["text/3-382",[]],["component/3-382",[]],["title/3-383",[22,18.191,154,7.059,411,28.802,689,37.773,738,59.175]],["name/3-383",[]],["text/3-383",[]],["component/3-383",[]],["title/3-384",[46,27.752,113,32.571,154,6.47,174,29.017,303,22.626,739,54.235]],["name/3-384",[]],["text/3-384",[]],["component/3-384",[]],["title/3-385",[25,34.046,154,7.767,740,65.105,741,51.57]],["name/3-385",[]],["text/3-385",[]],["component/3-385",[]],["title/3-386",[10,17.935,25,30.944,154,7.059,741,46.872,742,59.175]],["name/3-386",[]],["text/3-386",[]],["component/3-386",[]],["title/3-387",[30,40.793,154,7.767,208,39.416,743,65.105]],["name/3-387",[]],["text/3-387",[]],["component/3-387",[]],["title/3-388",[10,17.935,30,37.077,154,7.059,208,35.826,744,59.175]],["name/3-388",[]],["text/3-388",[]],["component/3-388",[]],["title/3-389",[10,17.935,65,40.245,66,44.343,532,36.123,745,59.175]],["name/3-389",[]],["text/3-389",[]],["component/3-389",[]],["title/3-390",[90,51.57,259,46.606,746,65.105,747,53.967]],["name/3-390",[]],["text/3-390",[]],["component/3-390",[]],["title/3-391",[30,37.077,154,7.059,208,35.826,411,28.802,748,59.175]],["name/3-391",[]],["text/3-391",[]],["component/3-391",[]],["title/3-392",[30,37.077,154,7.059,208,35.826,749,59.175,750,45.95]],["name/3-392",[]],["text/3-392",[]],["component/3-392",[]],["title/3-393",[154,7.059,751,59.175,752,45.95,753,46.872,754,49.051]],["name/3-393",[]],["text/3-393",[]],["component/3-393",[]],["title/3-394",[10,16.438,154,6.47,752,42.114,753,42.959,754,44.956,755,54.235]],["name/3-394",[]],["text/3-394",[]],["component/3-394",[]],["title/3-395",[154,7.059,205,35.259,208,35.826,756,59.175,757,47.897]],["name/3-395",[]],["text/3-395",[]],["component/3-395",[]],["title/3-396",[10,16.438,154,6.47,205,32.315,208,32.835,757,43.899,758,54.235]],["name/3-396",[]],["text/3-396",[]],["component/3-396",[]],["title/3-397",[154,7.059,508,38.142,519,43.634,759,59.175,760,43.634]],["name/3-397",[]],["text/3-397",[]],["component/3-397",[]],["title/3-398",[10,16.438,154,6.47,508,34.958,519,39.991,760,39.991,761,54.235]],["name/3-398",[]],["text/3-398",[]],["component/3-398",[]],["title/3-399",[154,7.059,197,37.077,209,39.784,390,28.802,762,59.175]],["name/3-399",[]],["text/3-399",[]],["component/3-399",[]],["title/3-400",[10,16.438,154,6.47,197,33.982,209,36.463,390,26.398,763,54.235]],["name/3-400",[]],["text/3-400",[]],["component/3-400",[]],["title/3-401",[154,6.47,197,33.982,209,36.463,390,26.398,411,26.398,764,54.235]],["name/3-401",[]],["text/3-401",[]],["component/3-401",[]],["title/3-402",[154,7.767,243,44.279,765,65.105,766,47.282]],["name/3-402",[]],["text/3-402",[]],["component/3-402",[]],["title/3-403",[10,17.935,154,7.059,243,40.245,766,42.976,767,59.175]],["name/3-403",[]],["text/3-403",[]],["component/3-403",[]],["title/3-404",[154,7.059,243,40.245,750,45.95,766,42.976,768,59.175]],["name/3-404",[]],["text/3-404",[]],["component/3-404",[]],["title/3-405",[154,7.767,503,42.387,689,41.559,769,65.105]],["name/3-405",[]],["text/3-405",[]],["component/3-405",[]],["title/3-406",[10,17.935,154,7.059,503,38.526,689,37.773,770,59.175]],["name/3-406",[]],["text/3-406",[]],["component/3-406",[]],["title/3-407",[154,7.059,411,28.802,503,38.526,689,37.773,771,59.175]],["name/3-407",[]],["text/3-407",[]],["component/3-407",[]],["title/3-408",[154,7.059,503,38.526,689,37.773,750,45.95,772,59.175]],["name/3-408",[]],["text/3-408",[]],["component/3-408",[]],["title/3-409",[154,9.95,211,38.927,227,33.285,773,59.175]],["name/3-409",[]],["text/3-409",[]],["component/3-409",[]],["title/3-410",[10,16.438,154,9.35,211,35.677,227,30.506,774,54.235]],["name/3-410",[]],["text/3-410",[]],["component/3-410",[]],["title/3-411",[154,7.059,347,41.785,508,38.142,519,43.634,775,59.175]],["name/3-411",[]],["text/3-411",[]],["component/3-411",[]],["title/3-412",[10,17.935,154,7.059,347,41.785,776,59.175,777,53.758]],["name/3-412",[]],["text/3-412",[]],["component/3-412",[]],["title/3-413",[154,7.059,420,32.642,778,59.175,779,44.343,780,44.343]],["name/3-413",[]],["text/3-413",[]],["component/3-413",[]],["title/3-414",[10,14.086,43,25.475,154,5.544,158,34.269,420,25.636,779,34.826,780,34.826,781,46.475]],["name/3-414",[]],["text/3-414",[]],["component/3-414",[]],["title/3-415",[10,14.086,28,21.621,154,5.544,158,34.269,420,25.636,779,34.826,780,34.826,782,46.475]],["name/3-415",[]],["text/3-415",[]],["component/3-415",[]],["title/3-416",[13,29.366,29,24.806,43,29.729,154,6.47,181,43.899,182,25.564]],["name/3-416",[]],["text/3-416",[]],["component/3-416",[]],["title/3-417",[29,24.806,52,41.345,154,6.47,182,25.564,783,54.235,784,41.345]],["name/3-417",[]],["text/3-417",[]],["component/3-417",[]],["title/3-418",[53,32.041,65,40.245,586,33.51,784,45.112,785,59.175]],["name/3-418",[]],["text/3-418",[]],["component/3-418",[]],["title/3-419",[42,44.343,586,33.51,784,45.112,786,59.175,787,50.369]],["name/3-419",[]],["text/3-419",[]],["component/3-419",[]],["title/3-420",[29,22.895,46,25.614,139,28.946,154,5.971,182,23.595,303,20.883,788,50.056]],["name/3-420",[]],["text/3-420",[]],["component/3-420",[]],["title/3-421",[51,47.108,420,39.913,789,72.357]],["name/3-421",[]],["text/3-421",[]],["component/3-421",[]],["title/3-422",[237,44.812,790,65.105,791,57.111,792,49.633]],["name/3-422",[]],["text/3-422",[]],["component/3-422",[]],["title/3-423",[28,33.662,29,33.095,793,72.357]],["name/3-423",[]],["text/3-423",[]],["component/3-423",[]],["title/3-424",[1,33.662,26,40.169,794,72.357]],["name/3-424",[]],["text/3-424",[]],["component/3-424",[]],["title/3-425",[10,17.935,252,40.73,795,59.175,796,51.909,797,53.758]],["name/3-425",[]],["text/3-425",[]],["component/3-425",[]],["title/3-426",[127,34.987,154,7.059,163,25.509,305,33.066,798,59.175]],["name/3-426",[]],["text/3-426",[]],["component/3-426",[]],["title/3-427",[79,30.28,154,7.059,305,33.066,548,28.018,799,59.175]],["name/3-427",[]],["text/3-427",[]],["component/3-427",[]],["title/3-428",[28,30.288,127,38.494,163,28.065,800,65.105]],["name/3-428",[]],["text/3-428",[]],["component/3-428",[]],["title/3-429",[10,17.935,29,27.066,182,27.893,305,33.066,801,59.175]],["name/3-429",[]],["text/3-429",[]],["component/3-429",[]],["title/3-430",[3,38.792,286,38.204,802,65.105,803,51.57]],["name/3-430",[]],["text/3-430",[]],["component/3-430",[]],["title/3-431",[366,41.256,804,72.357,805,57.314]],["name/3-431",[]],["text/3-431",[]],["component/3-431",[]],["title/3-432",[3,32.315,23,24.501,24,28.361,126,41.345,555,35.677,806,54.235]],["name/3-432",[]],["text/3-432",[]],["component/3-432",[]],["title/3-433",[3,35.259,286,34.724,303,24.687,807,59.175,808,45.112]],["name/3-433",[]],["text/3-433",[]],["component/3-433",[]],["title/3-434",[22,20.014,809,65.105,810,43.289,811,50.555]],["name/3-434",[]],["text/3-434",[]],["component/3-434",[]],["title/3-435",[14,32.315,811,42.114,812,54.235,813,42.114,814,46.164,815,46.164]],["name/3-435",[]],["text/3-435",[]],["component/3-435",[]],["title/3-436",[810,36.061,811,42.114,813,42.114,814,46.164,815,46.164,816,54.235]],["name/3-436",[]],["text/3-436",[]],["component/3-436",[]],["title/3-437",[3,35.259,286,34.724,303,24.687,817,59.175,818,50.369]],["name/3-437",[]],["text/3-437",[]],["component/3-437",[]],["title/3-438",[810,48.11,818,61.59,819,72.357]],["name/3-438",[]],["text/3-438",[]],["component/3-438",[]],["title/3-439",[154,7.767,163,28.065,305,36.379,820,65.105]],["name/3-439",[]],["text/3-439",[]],["component/3-439",[]],["title/3-440",[154,7.767,305,36.379,552,28.716,821,65.105]],["name/3-440",[]],["text/3-440",[]],["component/3-440",[]],["title/3-441",[154,7.767,305,36.379,341,23.492,822,65.105]],["name/3-441",[]],["text/3-441",[]],["component/3-441",[]],["title/3-442",[23,29.412,24,34.046,341,23.492,823,65.105]],["name/3-442",[]],["text/3-442",[]],["component/3-442",[]],["title/3-443",[341,26.109,390,35.219,824,72.357]],["name/3-443",[]],["text/3-443",[]],["component/3-443",[]],["title/3-444",[53,35.252,154,7.767,305,36.379,825,65.105]],["name/3-444",[]],["text/3-444",[]],["component/3-444",[]],["title/3-445",[154,7.767,305,36.379,335,38.792,826,65.105]],["name/3-445",[]],["text/3-445",[]],["component/3-445",[]],["title/3-446",[10,21.931,808,55.161,827,72.357]],["name/3-446",[]],["text/3-446",[]],["component/3-446",[]],["title/3-447",[67,38.494,211,42.828,828,65.105,829,53.967]],["name/3-447",[]],["text/3-447",[]],["component/3-447",[]],["title/3-448",[67,27.478,125,32.391,134,33.752,154,5.544,305,25.969,404,31.608,829,38.523,830,46.475]],["name/3-448",[]],["text/3-448",[]],["component/3-448",[]],["title/3-449",[15,35.252,620,48.007,792,49.633,831,65.105]],["name/3-449",[]],["text/3-449",[]],["component/3-449",[]],["title/3-450",[154,7.767,832,65.105,833,47.282,834,47.282]],["name/3-450",[]],["text/3-450",[]],["component/3-450",[]],["title/3-451",[79,30.28,548,28.018,833,42.976,834,42.976,835,59.175]],["name/3-451",[]],["text/3-451",[]],["component/3-451",[]],["title/3-452",[28,30.288,833,47.282,834,47.282,836,65.105]],["name/3-452",[]],["text/3-452",[]],["component/3-452",[]],["title/3-453",[10,16.438,29,24.806,182,25.564,833,39.388,834,39.388,837,54.235]],["name/3-453",[]],["text/3-453",[]],["component/3-453",[]],["title/3-454",[154,7.059,163,25.509,833,42.976,834,42.976,838,59.175]],["name/3-454",[]],["text/3-454",[]],["component/3-454",[]],["title/3-455",[552,28.716,833,47.282,834,47.282,839,65.105]],["name/3-455",[]],["text/3-455",[]],["component/3-455",[]],["title/3-456",[0,34.834,154,7.767,294,40.431,840,65.105]],["name/3-456",[]],["text/3-456",[]],["component/3-456",[]],["title/3-457",[13,35.252,29,29.778,182,30.689,841,65.105]],["name/3-457",[]],["text/3-457",[]],["component/3-457",[]],["title/3-458",[13,35.252,28,30.288,384,32.15,842,65.105]],["name/3-458",[]],["text/3-458",[]],["component/3-458",[]],["title/3-459",[154,7.767,843,65.105,844,44.812,845,43.772]],["name/3-459",[]],["text/3-459",[]],["component/3-459",[]],["title/3-460",[79,27.752,154,6.47,548,25.679,844,37.33,845,36.463,846,54.235]],["name/3-460",[]],["text/3-460",[]],["component/3-460",[]],["title/3-461",[3,32.315,154,6.47,656,37.33,844,37.33,845,36.463,847,54.235]],["name/3-461",[]],["text/3-461",[]],["component/3-461",[]],["title/3-462",[28,30.288,844,44.812,845,43.772,848,65.105]],["name/3-462",[]],["text/3-462",[]],["component/3-462",[]],["title/3-463",[154,7.059,163,25.509,844,40.73,845,39.784,849,59.175]],["name/3-463",[]],["text/3-463",[]],["component/3-463",[]],["title/3-464",[154,8.632,845,48.647,850,72.357]],["name/3-464",[]],["text/3-464",[]],["component/3-464",[]],["title/3-465",[154,7.059,552,26.1,844,40.73,845,39.784,851,59.175]],["name/3-465",[]],["text/3-465",[]],["component/3-465",[]],["title/3-466",[154,7.059,341,21.352,844,40.73,845,39.784,852,59.175]],["name/3-466",[]],["text/3-466",[]],["component/3-466",[]],["title/3-467",[853,72.357,854,44.934,855,46.638]],["name/3-467",[]],["text/3-467",[]],["component/3-467",[]],["title/3-468",[22,22.243,299,40.975,856,72.357]],["name/3-468",[]],["text/3-468",[]],["component/3-468",[]],["title/3-469",[857,81.426,858,77.16]],["name/3-469",[]],["text/3-469",[]],["component/3-469",[]],["title/3-470",[342,33.517,859,72.357,860,57.314]],["name/3-470",[]],["text/3-470",[]],["component/3-470",[]],["title/3-471",[342,33.517,368,54.221,861,72.357]],["name/3-471",[]],["text/3-471",[]],["component/3-471",[]],["title/3-472",[12,53.013,862,81.426]],["name/3-472",[]],["text/3-472",[]],["component/3-472",[]],["title/3-473",[53,32.041,154,7.059,844,40.73,845,39.784,863,59.175]],["name/3-473",[]],["text/3-473",[]],["component/3-473",[]],["title/3-474",[13,29.366,153,39.991,810,36.061,864,54.235,865,47.575,866,42.959]],["name/3-474",[]],["text/3-474",[]],["component/3-474",[]],["title/3-475",[1,25.231,303,22.626,462,38.296,474,29.19,867,54.235,868,42.959]],["name/3-475",[]],["text/3-475",[]],["component/3-475",[]],["title/3-476",[154,7.767,869,65.105,870,42.828,871,42.828]],["name/3-476",[]],["text/3-476",[]],["component/3-476",[]],["title/3-477",[79,27.752,154,6.47,548,25.679,870,35.677,871,35.677,872,54.235]],["name/3-477",[]],["text/3-477",[]],["component/3-477",[]],["title/3-478",[28,30.288,870,42.828,871,42.828,873,65.105]],["name/3-478",[]],["text/3-478",[]],["component/3-478",[]],["title/3-479",[10,16.438,29,24.806,182,25.564,870,35.677,871,35.677,874,54.235]],["name/3-479",[]],["text/3-479",[]],["component/3-479",[]],["title/3-480",[154,7.059,163,25.509,870,38.927,871,38.927,875,59.175]],["name/3-480",[]],["text/3-480",[]],["component/3-480",[]],["title/3-481",[552,28.716,870,42.828,871,42.828,876,65.105]],["name/3-481",[]],["text/3-481",[]],["component/3-481",[]],["title/3-482",[23,24.501,341,19.57,342,25.123,870,35.677,871,35.677,877,54.235]],["name/3-482",[]],["text/3-482",[]],["component/3-482",[]],["title/3-483",[24,28.361,341,19.57,342,25.123,870,35.677,871,35.677,878,54.235]],["name/3-483",[]],["text/3-483",[]],["component/3-483",[]],["title/3-484",[341,19.57,342,25.123,870,35.677,871,35.677,879,54.235,880,36.885]],["name/3-484",[]],["text/3-484",[]],["component/3-484",[]],["title/3-485",[341,19.57,342,25.123,571,37.799,870,35.677,871,35.677,881,54.235]],["name/3-485",[]],["text/3-485",[]],["component/3-485",[]],["title/3-486",[154,8.632,882,72.357,883,51.093]],["name/3-486",[]],["text/3-486",[]],["component/3-486",[]],["title/3-487",[79,30.28,154,7.059,548,28.018,883,41.785,884,59.175]],["name/3-487",[]],["text/3-487",[]],["component/3-487",[]],["title/3-488",[28,33.662,883,51.093,885,72.357]],["name/3-488",[]],["text/3-488",[]],["component/3-488",[]],["title/3-489",[10,17.935,29,27.066,182,27.893,883,41.785,886,59.175]],["name/3-489",[]],["text/3-489",[]],["component/3-489",[]],["title/3-490",[154,7.767,163,28.065,883,45.972,887,65.105]],["name/3-490",[]],["text/3-490",[]],["component/3-490",[]],["title/3-491",[552,31.914,883,51.093,888,72.357]],["name/3-491",[]],["text/3-491",[]],["component/3-491",[]],["title/3-492",[341,26.109,883,51.093,889,72.357]],["name/3-492",[]],["text/3-492",[]],["component/3-492",[]],["title/3-493",[854,44.934,855,46.638,890,72.357]],["name/3-493",[]],["text/3-493",[]],["component/3-493",[]],["title/3-494",[891,81.426,892,73.973]],["name/3-494",[]],["text/3-494",[]],["component/3-494",[]],["title/3-495",[23,36.785,893,81.426]],["name/3-495",[]],["text/3-495",[]],["component/3-495",[]],["title/3-496",[24,42.581,894,81.426]],["name/3-496",[]],["text/3-496",[]],["component/3-496",[]],["title/3-497",[341,26.109,390,35.219,895,72.357]],["name/3-497",[]],["text/3-497",[]],["component/3-497",[]],["title/3-498",[154,8.632,563,42.781,896,72.357]],["name/3-498",[]],["text/3-498",[]],["component/3-498",[]],["title/3-499",[79,30.28,154,7.059,548,28.018,563,34.987,897,59.175]],["name/3-499",[]],["text/3-499",[]],["component/3-499",[]],["title/3-500",[28,33.662,563,42.781,898,72.357]],["name/3-500",[]],["text/3-500",[]],["component/3-500",[]],["title/3-501",[10,17.935,29,27.066,182,27.893,563,34.987,899,59.175]],["name/3-501",[]],["text/3-501",[]],["component/3-501",[]],["title/3-502",[366,41.256,900,72.357,901,61.59]],["name/3-502",[]],["text/3-502",[]],["component/3-502",[]],["title/3-503",[154,7.767,163,28.065,563,38.494,902,65.105]],["name/3-503",[]],["text/3-503",[]],["component/3-503",[]],["title/3-504",[154,7.767,552,28.716,563,38.494,903,65.105]],["name/3-504",[]],["text/3-504",[]],["component/3-504",[]],["title/3-505",[154,7.767,341,23.492,563,38.494,904,65.105]],["name/3-505",[]],["text/3-505",[]],["component/3-505",[]],["title/3-506",[854,44.934,855,46.638,905,72.357]],["name/3-506",[]],["text/3-506",[]],["component/3-506",[]],["title/3-507",[345,60.042,906,81.426]],["name/3-507",[]],["text/3-507",[]],["component/3-507",[]],["title/3-508",[571,56.751,907,81.426]],["name/3-508",[]],["text/3-508",[]],["component/3-508",[]],["title/3-509",[53,35.252,154,7.767,563,38.494,908,65.105]],["name/3-509",[]],["text/3-509",[]],["component/3-509",[]],["title/3-510",[559,42.828,909,65.105,910,50.555,911,59.146]],["name/3-510",[]],["text/3-510",[]],["component/3-510",[]],["title/3-511",[26,36.144,523,44.812,912,65.105,913,51.57]],["name/3-511",[]],["text/3-511",[]],["component/3-511",[]],["title/3-512",[154,8.632,384,35.731,914,72.357]],["name/3-512",[]],["text/3-512",[]],["component/3-512",[]],["title/3-513",[79,30.28,154,7.059,384,29.221,548,28.018,915,59.175]],["name/3-513",[]],["text/3-513",[]],["component/3-513",[]],["title/3-514",[10,19.733,28,30.288,384,32.15,916,65.105]],["name/3-514",[]],["text/3-514",[]],["component/3-514",[]],["title/3-515",[10,17.935,29,27.066,182,27.893,384,29.221,917,59.175]],["name/3-515",[]],["text/3-515",[]],["component/3-515",[]],["title/3-516",[154,7.767,163,28.065,384,32.15,918,65.105]],["name/3-516",[]],["text/3-516",[]],["component/3-516",[]],["title/3-517",[154,7.767,384,32.15,552,28.716,919,65.105]],["name/3-517",[]],["text/3-517",[]],["component/3-517",[]],["title/3-518",[154,7.767,341,23.492,384,32.15,920,65.105]],["name/3-518",[]],["text/3-518",[]],["component/3-518",[]],["title/3-519",[23,24.501,24,28.361,167,41.345,341,19.57,921,54.235,922,37.799]],["name/3-519",[]],["text/3-519",[]],["component/3-519",[]],["title/3-520",[341,26.109,390,35.219,923,72.357]],["name/3-520",[]],["text/3-520",[]],["component/3-520",[]],["title/3-521",[924,65.105,925,50.555,926,57.111,927,57.111]],["name/3-521",[]],["text/3-521",[]],["component/3-521",[]],["title/3-522",[154,7.767,335,38.792,384,32.15,928,65.105]],["name/3-522",[]],["text/3-522",[]],["component/3-522",[]],["title/3-523",[77,38.792,154,7.767,929,65.105,930,52.698]],["name/3-523",[]],["text/3-523",[]],["component/3-523",[]],["title/3-524",[77,35.259,79,30.28,154,7.059,548,28.018,931,59.175]],["name/3-524",[]],["text/3-524",[]],["component/3-524",[]],["title/3-525",[10,19.733,77,38.792,154,7.767,932,65.105]],["name/3-525",[]],["text/3-525",[]],["component/3-525",[]],["title/3-526",[10,17.935,29,27.066,77,35.259,182,27.893,933,59.175]],["name/3-526",[]],["text/3-526",[]],["component/3-526",[]],["title/3-527",[77,38.792,154,7.767,163,28.065,934,65.105]],["name/3-527",[]],["text/3-527",[]],["component/3-527",[]],["title/3-528",[77,38.792,154,7.767,552,28.716,935,65.105]],["name/3-528",[]],["text/3-528",[]],["component/3-528",[]],["title/3-529",[77,38.792,154,7.767,341,23.492,936,65.105]],["name/3-529",[]],["text/3-529",[]],["component/3-529",[]],["title/3-530",[1,23.287,26,27.789,77,29.825,104,32.928,922,34.887,930,40.516,937,50.056]],["name/3-530",[]],["text/3-530",[]],["component/3-530",[]],["title/3-531",[1,23.287,26,27.789,77,29.825,104,32.928,922,34.887,930,40.516,938,50.056]],["name/3-531",[]],["text/3-531",[]],["component/3-531",[]],["title/3-532",[341,26.109,390,35.219,939,72.357]],["name/3-532",[]],["text/3-532",[]],["component/3-532",[]],["title/3-533",[154,8.632,940,72.357,941,51.093]],["name/3-533",[]],["text/3-533",[]],["component/3-533",[]],["title/3-534",[79,30.28,154,7.059,548,28.018,941,41.785,942,59.175]],["name/3-534",[]],["text/3-534",[]],["component/3-534",[]],["title/3-535",[10,19.733,154,7.767,941,45.972,943,65.105]],["name/3-535",[]],["text/3-535",[]],["component/3-535",[]],["title/3-536",[10,17.935,29,27.066,182,27.893,941,41.785,944,59.175]],["name/3-536",[]],["text/3-536",[]],["component/3-536",[]],["title/3-537",[154,7.767,163,28.065,941,45.972,945,65.105]],["name/3-537",[]],["text/3-537",[]],["component/3-537",[]],["title/3-538",[154,7.767,552,28.716,941,45.972,946,65.105]],["name/3-538",[]],["text/3-538",[]],["component/3-538",[]],["title/3-539",[154,7.767,341,23.492,941,45.972,947,65.105]],["name/3-539",[]],["text/3-539",[]],["component/3-539",[]],["title/3-540",[854,44.934,855,46.638,948,72.357]],["name/3-540",[]],["text/3-540",[]],["component/3-540",[]],["title/3-541",[949,81.426,950,65.908]],["name/3-541",[]],["text/3-541",[]],["component/3-541",[]],["title/3-542",[951,81.426,952,67.495]],["name/3-542",[]],["text/3-542",[]],["component/3-542",[]],["title/3-543",[341,26.109,390,35.219,953,72.357]],["name/3-543",[]],["text/3-543",[]],["component/3-543",[]],["title/3-544",[154,7.767,954,65.105,955,42.828,956,45.972]],["name/3-544",[]],["text/3-544",[]],["component/3-544",[]],["title/3-545",[79,27.752,154,6.47,548,25.679,955,35.677,956,38.296,957,54.235]],["name/3-545",[]],["text/3-545",[]],["component/3-545",[]],["title/3-546",[28,30.288,955,42.828,956,45.972,958,65.105]],["name/3-546",[]],["text/3-546",[]],["component/3-546",[]],["title/3-547",[10,16.438,29,24.806,182,25.564,955,35.677,956,38.296,959,54.235]],["name/3-547",[]],["text/3-547",[]],["component/3-547",[]],["title/3-548",[154,7.059,163,25.509,955,38.927,956,41.785,960,59.175]],["name/3-548",[]],["text/3-548",[]],["component/3-548",[]],["title/3-549",[154,7.059,552,26.1,955,38.927,956,41.785,961,59.175]],["name/3-549",[]],["text/3-549",[]],["component/3-549",[]],["title/3-550",[154,7.059,341,21.352,955,38.927,956,41.785,962,59.175]],["name/3-550",[]],["text/3-550",[]],["component/3-550",[]],["title/3-551",[23,36.785,963,81.426]],["name/3-551",[]],["text/3-551",[]],["component/3-551",[]],["title/3-552",[24,42.581,964,81.426]],["name/3-552",[]],["text/3-552",[]],["component/3-552",[]],["title/3-553",[526,49.297,965,81.426]],["name/3-553",[]],["text/3-553",[]],["component/3-553",[]],["title/3-554",[532,44.17,966,72.357,967,65.734]],["name/3-554",[]],["text/3-554",[]],["component/3-554",[]],["title/3-555",[341,26.109,390,35.219,968,72.357]],["name/3-555",[]],["text/3-555",[]],["component/3-555",[]],["title/3-556",[341,26.109,880,49.211,969,72.357]],["name/3-556",[]],["text/3-556",[]],["component/3-556",[]],["title/3-557",[23,24.501,132,34.958,154,6.47,437,35.677,970,54.235,971,32.835]],["name/3-557",[]],["text/3-557",[]],["component/3-557",[]],["title/3-558",[23,20.995,79,23.781,132,29.956,154,5.544,437,30.572,548,22.004,971,28.137,972,46.475]],["name/3-558",[]],["text/3-558",[]],["component/3-558",[]],["title/3-559",[23,24.501,28,25.231,29,24.806,132,34.958,437,35.677,973,54.235]],["name/3-559",[]],["text/3-559",[]],["component/3-559",[]],["title/3-560",[10,14.086,23,20.995,29,21.257,132,29.956,182,21.907,437,30.572,971,28.137,974,46.475]],["name/3-560",[]],["text/3-560",[]],["component/3-560",[]],["title/3-561",[23,22.613,132,32.264,154,5.971,163,21.578,437,32.928,971,30.305,975,50.056]],["name/3-561",[]],["text/3-561",[]],["component/3-561",[]],["title/3-562",[23,22.613,132,32.264,154,5.971,437,32.928,552,22.078,971,30.305,976,50.056]],["name/3-562",[]],["text/3-562",[]],["component/3-562",[]],["title/3-563",[23,22.613,132,32.264,154,5.971,341,18.062,437,32.928,971,30.305,977,50.056]],["name/3-563",[]],["text/3-563",[]],["component/3-563",[]],["title/3-564",[23,36.785,978,81.426]],["name/3-564",[]],["text/3-564",[]],["component/3-564",[]],["title/3-565",[24,42.581,979,81.426]],["name/3-565",[]],["text/3-565",[]],["component/3-565",[]],["title/3-566",[880,55.379,980,81.426]],["name/3-566",[]],["text/3-566",[]],["component/3-566",[]],["title/3-567",[571,56.751,981,81.426]],["name/3-567",[]],["text/3-567",[]],["component/3-567",[]],["title/3-568",[154,8.632,982,72.357,983,51.797]],["name/3-568",[]],["text/3-568",[]],["component/3-568",[]],["title/3-569",[79,37.025,548,34.259,984,72.357]],["name/3-569",[]],["text/3-569",[]],["component/3-569",[]],["title/3-570",[10,17.935,29,27.066,182,27.893,983,42.361,985,59.175]],["name/3-570",[]],["text/3-570",[]],["component/3-570",[]],["title/3-571",[10,19.733,28,30.288,983,46.606,986,65.105]],["name/3-571",[]],["text/3-571",[]],["component/3-571",[]],["title/3-572",[10,19.733,28,30.288,127,38.494,987,65.105]],["name/3-572",[]],["text/3-572",[]],["component/3-572",[]],["title/3-573",[154,7.767,552,28.716,983,46.606,988,65.105]],["name/3-573",[]],["text/3-573",[]],["component/3-573",[]],["title/3-574",[154,7.767,341,23.492,983,46.606,989,65.105]],["name/3-574",[]],["text/3-574",[]],["component/3-574",[]],["title/3-575",[23,32.687,341,26.109,990,72.357]],["name/3-575",[]],["text/3-575",[]],["component/3-575",[]],["title/3-576",[24,37.838,341,26.109,991,72.357]],["name/3-576",[]],["text/3-576",[]],["component/3-576",[]],["title/3-577",[341,26.109,880,49.211,992,72.357]],["name/3-577",[]],["text/3-577",[]],["component/3-577",[]],["title/3-578",[341,26.109,571,50.43,993,72.357]],["name/3-578",[]],["text/3-578",[]],["component/3-578",[]],["title/3-579",[154,8.632,994,72.357,995,51.093]],["name/3-579",[]],["text/3-579",[]],["component/3-579",[]],["title/3-580",[79,30.28,154,7.059,548,28.018,995,41.785,996,59.175]],["name/3-580",[]],["text/3-580",[]],["component/3-580",[]],["title/3-581",[12,38.526,294,36.748,620,43.634,997,59.175,998,49.051]],["name/3-581",[]],["text/3-581",[]],["component/3-581",[]],["title/3-582",[14,38.792,366,37.122,999,65.105,1000,59.146]],["name/3-582",[]],["text/3-582",[]],["component/3-582",[]],["title/3-583",[79,33.315,154,7.767,995,45.972,1001,65.105]],["name/3-583",[]],["text/3-583",[]],["component/3-583",[]],["title/3-584",[10,19.733,154,7.767,995,45.972,1002,65.105]],["name/3-584",[]],["text/3-584",[]],["component/3-584",[]],["title/3-585",[10,17.935,29,27.066,182,27.893,995,41.785,1003,59.175]],["name/3-585",[]],["text/3-585",[]],["component/3-585",[]],["title/3-586",[154,7.767,163,28.065,995,45.972,1004,65.105]],["name/3-586",[]],["text/3-586",[]],["component/3-586",[]],["title/3-587",[154,7.767,552,28.716,995,45.972,1005,65.105]],["name/3-587",[]],["text/3-587",[]],["component/3-587",[]],["title/3-588",[22,16.672,23,24.501,341,19.57,342,25.123,1006,54.235,1007,36.463]],["name/3-588",[]],["text/3-588",[]],["component/3-588",[]],["title/3-589",[24,28.361,341,19.57,342,25.123,1007,36.463,1008,54.235,1009,46.164]],["name/3-589",[]],["text/3-589",[]],["component/3-589",[]],["title/3-590",[24,28.361,341,19.57,342,25.123,414,38.824,1007,36.463,1010,54.235]],["name/3-590",[]],["text/3-590",[]],["component/3-590",[]],["title/3-591",[23,26.732,341,21.352,342,27.411,1007,39.784,1011,59.175]],["name/3-591",[]],["text/3-591",[]],["component/3-591",[]],["title/3-592",[341,21.352,342,27.411,1007,39.784,1012,59.175,1013,47.897]],["name/3-592",[]],["text/3-592",[]],["component/3-592",[]],["title/3-593",[22,16.672,341,19.57,342,25.123,880,36.885,1007,36.463,1014,54.235]],["name/3-593",[]],["text/3-593",[]],["component/3-593",[]],["title/3-594",[22,16.672,341,19.57,342,25.123,571,37.799,1007,36.463,1015,54.235]],["name/3-594",[]],["text/3-594",[]],["component/3-594",[]],["title/3-595",[1,23.287,23,33.393,26,27.789,341,18.062,342,23.187,1016,50.056]],["name/3-595",[]],["text/3-595",[]],["component/3-595",[]],["title/3-596",[1,23.287,24,26.176,26,27.789,341,18.062,342,23.187,414,35.833,1017,50.056]],["name/3-596",[]],["text/3-596",[]],["component/3-596",[]],["title/3-597",[1,23.287,24,26.176,26,27.789,341,18.062,342,23.187,1009,42.607,1018,50.056]],["name/3-597",[]],["text/3-597",[]],["component/3-597",[]],["title/3-598",[1,21.621,23,20.995,26,25.801,222,33.752,341,16.769,342,21.528,1007,31.246,1019,46.475]],["name/3-598",[]],["text/3-598",[]],["component/3-598",[]],["title/3-599",[1,21.621,22,14.287,26,25.801,341,16.769,342,21.528,1007,31.246,1013,37.617,1020,46.475]],["name/3-599",[]],["text/3-599",[]],["component/3-599",[]],["title/3-600",[154,6.47,1021,54.235,1022,37.33,1023,47.575,1024,38.296,1025,37.799]],["name/3-600",[]],["text/3-600",[]],["component/3-600",[]],["title/3-601",[79,25.614,154,5.971,548,23.7,1022,34.454,1024,35.345,1025,34.887,1026,50.056]],["name/3-601",[]],["text/3-601",[]],["component/3-601",[]],["title/3-602",[10,15.171,29,22.895,182,23.595,1022,34.454,1024,35.345,1025,34.887,1027,50.056]],["name/3-602",[]],["text/3-602",[]],["component/3-602",[]],["title/3-603",[154,6.47,163,23.379,1022,37.33,1024,38.296,1025,37.799,1028,54.235]],["name/3-603",[]],["text/3-603",[]],["component/3-603",[]],["title/3-604",[154,6.47,552,23.921,1022,37.33,1024,38.296,1025,37.799,1029,54.235]],["name/3-604",[]],["text/3-604",[]],["component/3-604",[]],["title/3-605",[154,6.47,341,19.57,1022,37.33,1024,38.296,1025,37.799,1030,54.235]],["name/3-605",[]],["text/3-605",[]],["component/3-605",[]],["title/3-606",[854,44.934,855,46.638,1031,72.357]],["name/3-606",[]],["text/3-606",[]],["component/3-606",[]],["title/3-607",[23,36.785,1032,81.426]],["name/3-607",[]],["text/3-607",[]],["component/3-607",[]],["title/3-608",[24,42.581,1033,81.426]],["name/3-608",[]],["text/3-608",[]],["component/3-608",[]],["title/3-609",[345,60.042,1034,81.426]],["name/3-609",[]],["text/3-609",[]],["component/3-609",[]],["title/3-610",[341,26.109,390,35.219,1035,72.357]],["name/3-610",[]],["text/3-610",[]],["component/3-610",[]],["title/3-611",[53,29.366,154,6.47,1022,37.33,1024,38.296,1025,37.799,1036,54.235]],["name/3-611",[]],["text/3-611",[]],["component/3-611",[]],["title/3-612",[15,35.252,154,7.767,532,39.743,1037,65.105]],["name/3-612",[]],["text/3-612",[]],["component/3-612",[]],["title/3-613",[15,29.366,79,27.752,154,6.47,532,33.107,548,25.679,1038,54.235]],["name/3-613",[]],["text/3-613",[]],["component/3-613",[]],["title/3-614",[10,17.935,15,32.041,154,7.059,532,36.123,1039,59.175]],["name/3-614",[]],["text/3-614",[]],["component/3-614",[]],["title/3-615",[10,16.438,15,29.366,29,24.806,182,25.564,532,33.107,1040,54.235]],["name/3-615",[]],["text/3-615",[]],["component/3-615",[]],["title/3-616",[15,32.041,154,7.059,163,25.509,532,36.123,1041,59.175]],["name/3-616",[]],["text/3-616",[]],["component/3-616",[]],["title/3-617",[15,32.041,154,7.059,532,36.123,552,26.1,1042,59.175]],["name/3-617",[]],["text/3-617",[]],["component/3-617",[]],["title/3-618",[15,32.041,154,7.059,341,21.352,532,36.123,1043,59.175]],["name/3-618",[]],["text/3-618",[]],["component/3-618",[]],["title/3-619",[854,44.934,855,46.638,1044,72.357]],["name/3-619",[]],["text/3-619",[]],["component/3-619",[]],["title/3-620",[23,36.785,1045,81.426]],["name/3-620",[]],["text/3-620",[]],["component/3-620",[]],["title/3-621",[24,42.581,1046,81.426]],["name/3-621",[]],["text/3-621",[]],["component/3-621",[]],["title/3-622",[154,8.632,1047,72.357,1048,47.598]],["name/3-622",[]],["text/3-622",[]],["component/3-622",[]],["title/3-623",[79,30.28,154,7.059,548,28.018,1048,38.927,1049,59.175]],["name/3-623",[]],["text/3-623",[]],["component/3-623",[]],["title/3-624",[10,16.438,28,25.231,154,6.47,542,40.641,1048,35.677,1050,54.235]],["name/3-624",[]],["text/3-624",[]],["component/3-624",[]],["title/3-625",[14,32.315,29,24.806,182,25.564,542,40.641,1048,35.677,1051,54.235]],["name/3-625",[]],["text/3-625",[]],["component/3-625",[]],["title/3-626",[10,19.733,154,7.767,1048,42.828,1052,65.105]],["name/3-626",[]],["text/3-626",[]],["component/3-626",[]],["title/3-627",[10,17.935,28,27.529,1048,38.927,1053,59.175,1054,47.897]],["name/3-627",[]],["text/3-627",[]],["component/3-627",[]],["title/3-628",[10,17.935,29,27.066,182,27.893,1048,38.927,1055,59.175]],["name/3-628",[]],["text/3-628",[]],["component/3-628",[]],["title/3-629",[154,7.767,163,28.065,1048,42.828,1056,65.105]],["name/3-629",[]],["text/3-629",[]],["component/3-629",[]],["title/3-630",[154,7.767,552,28.716,1048,42.828,1057,65.105]],["name/3-630",[]],["text/3-630",[]],["component/3-630",[]],["title/3-631",[154,7.767,341,23.492,1048,42.828,1058,65.105]],["name/3-631",[]],["text/3-631",[]],["component/3-631",[]],["title/3-632",[171,36.463,341,19.57,854,33.68,855,34.958,922,37.799,1059,54.235]],["name/3-632",[]],["text/3-632",[]],["component/3-632",[]],["title/3-633",[24,42.581,1060,81.426]],["name/3-633",[]],["text/3-633",[]],["component/3-633",[]],["title/3-634",[341,26.109,880,49.211,1061,72.357]],["name/3-634",[]],["text/3-634",[]],["component/3-634",[]],["title/3-635",[154,7.767,955,42.828,1062,65.105,1063,52.698]],["name/3-635",[]],["text/3-635",[]],["component/3-635",[]],["title/3-636",[79,37.025,548,34.259,1064,72.357]],["name/3-636",[]],["text/3-636",[]],["component/3-636",[]],["title/3-637",[28,30.288,955,42.828,1063,52.698,1065,65.105]],["name/3-637",[]],["text/3-637",[]],["component/3-637",[]],["title/3-638",[10,16.438,29,24.806,182,25.564,955,35.677,1063,43.899,1066,54.235]],["name/3-638",[]],["text/3-638",[]],["component/3-638",[]],["title/3-639",[154,8.632,163,31.191,1067,72.357]],["name/3-639",[]],["text/3-639",[]],["component/3-639",[]],["title/3-640",[154,8.632,552,31.914,1068,72.357]],["name/3-640",[]],["text/3-640",[]],["component/3-640",[]],["title/3-641",[154,8.632,341,26.109,1069,72.357]],["name/3-641",[]],["text/3-641",[]],["component/3-641",[]],["title/3-642",[23,36.785,1070,81.426]],["name/3-642",[]],["text/3-642",[]],["component/3-642",[]],["title/3-643",[129,37.649,154,7.767,971,39.416,1071,65.105]],["name/3-643",[]],["text/3-643",[]],["component/3-643",[]],["title/3-644",[79,30.28,129,34.219,548,28.018,971,35.826,1072,59.175]],["name/3-644",[]],["text/3-644",[]],["component/3-644",[]],["title/3-645",[28,30.288,29,29.778,129,37.649,1073,65.105]],["name/3-645",[]],["text/3-645",[]],["component/3-645",[]],["title/3-646",[3,27.691,139,26.875,252,31.989,303,19.389,386,31.608,656,31.989,971,28.137,1074,46.475]],["name/3-646",[]],["text/3-646",[]],["component/3-646",[]],["title/3-647",[10,16.438,28,25.231,252,37.33,386,36.885,971,32.835,1075,54.235]],["name/3-647",[]],["text/3-647",[]],["component/3-647",[]],["title/3-648",[10,16.438,29,24.806,129,31.362,182,25.564,971,32.835,1076,54.235]],["name/3-648",[]],["text/3-648",[]],["component/3-648",[]],["title/3-649",[129,34.219,154,7.059,163,25.509,971,35.826,1077,59.175]],["name/3-649",[]],["text/3-649",[]],["component/3-649",[]],["title/3-650",[129,34.219,154,7.059,552,26.1,971,35.826,1078,59.175]],["name/3-650",[]],["text/3-650",[]],["component/3-650",[]],["title/3-651",[129,34.219,154,7.059,341,21.352,971,35.826,1079,59.175]],["name/3-651",[]],["text/3-651",[]],["component/3-651",[]],["title/3-652",[854,44.934,855,46.638,1080,72.357]],["name/3-652",[]],["text/3-652",[]],["component/3-652",[]],["title/3-653",[23,36.785,1081,81.426]],["name/3-653",[]],["text/3-653",[]],["component/3-653",[]],["title/3-654",[24,42.581,1082,81.426]],["name/3-654",[]],["text/3-654",[]],["component/3-654",[]],["title/3-655",[29,22.895,46,25.614,113,30.061,154,5.971,182,23.595,303,20.883,1083,50.056]],["name/3-655",[]],["text/3-655",[]],["component/3-655",[]],["title/3-656",[29,27.066,89,37.419,154,7.059,182,27.893,1084,59.175]],["name/3-656",[]],["text/3-656",[]],["component/3-656",[]],["title/3-657",[23,24.501,24,28.361,25,28.361,58,36.463,1085,54.235,1086,49.27]],["name/3-657",[]],["text/3-657",[]],["component/3-657",[]],["title/3-658",[29,27.066,154,7.059,182,27.893,1087,59.175,1088,47.897]],["name/3-658",[]],["text/3-658",[]],["component/3-658",[]],["title/3-659",[51,47.108,420,39.913,1089,72.357]],["name/3-659",[]],["text/3-659",[]],["component/3-659",[]],["title/3-660",[51,47.108,1090,72.357,1091,56.186]],["name/3-660",[]],["text/3-660",[]],["component/3-660",[]],["title/3-661",[51,47.108,450,51.093,1092,72.357]],["name/3-661",[]],["text/3-661",[]],["component/3-661",[]],["title/3-662",[29,24.806,154,6.47,182,25.564,1088,43.899,1093,54.235,1094,43.899]],["name/3-662",[]],["text/3-662",[]],["component/3-662",[]],["title/3-663",[450,51.093,1091,56.186,1095,72.357]],["name/3-663",[]],["text/3-663",[]],["component/3-663",[]],["title/3-664",[29,24.806,58,36.463,182,25.564,450,38.296,1096,54.235,1097,49.27]],["name/3-664",[]],["text/3-664",[]],["component/3-664",[]],["title/3-665",[154,8.632,1098,72.357,1099,44.934]],["name/3-665",[]],["text/3-665",[]],["component/3-665",[]],["title/3-666",[79,37.025,548,34.259,1100,72.357]],["name/3-666",[]],["text/3-666",[]],["component/3-666",[]],["title/3-667",[10,19.733,154,7.767,1101,65.105,1102,59.146]],["name/3-667",[]],["text/3-667",[]],["component/3-667",[]],["title/3-668",[59,38.296,127,32.067,163,23.379,474,29.19,1103,54.235,1104,49.27]],["name/3-668",[]],["text/3-668",[]],["component/3-668",[]],["title/3-669",[78,44.812,420,35.913,548,30.826,1105,65.105]],["name/3-669",[]],["text/3-669",[]],["component/3-669",[]],["title/3-670",[47,54.221,411,35.219,1106,72.357]],["name/3-670",[]],["text/3-670",[]],["component/3-670",[]],["title/3-671",[29,27.066,60,36.123,620,43.634,1099,36.748,1107,59.175]],["name/3-671",[]],["text/3-671",[]],["component/3-671",[]],["title/3-672",[59,38.296,127,32.067,163,23.379,481,22.312,1108,54.235,1109,49.27]],["name/3-672",[]],["text/3-672",[]],["component/3-672",[]],["title/3-673",[78,44.812,420,35.913,548,30.826,1110,65.105]],["name/3-673",[]],["text/3-673",[]],["component/3-673",[]],["title/3-674",[47,54.221,411,35.219,1111,72.357]],["name/3-674",[]],["text/3-674",[]],["component/3-674",[]],["title/3-675",[215,33.858,372,43.289,1112,65.105,1113,52.698]],["name/3-675",[]],["text/3-675",[]],["component/3-675",[]],["title/3-676",[3,35.259,16,40.73,656,40.73,1099,36.748,1114,59.175]],["name/3-676",[]],["text/3-676",[]],["component/3-676",[]],["title/3-677",[15,25.164,22,14.287,237,31.989,922,32.391,1099,28.861,1115,46.475,1116,37.617,1117,39.559]],["name/3-677",[]],["text/3-677",[]],["component/3-677",[]],["title/3-678",[16,37.33,810,36.061,1099,33.68,1118,54.235,1119,49.27,1120,49.27]],["name/3-678",[]],["text/3-678",[]],["component/3-678",[]],["title/3-679",[16,37.33,165,43.899,1099,33.68,1121,54.235,1122,49.27,1123,49.27]],["name/3-679",[]],["text/3-679",[]],["component/3-679",[]],["title/3-680",[422,53.354,474,38.943,1124,72.357]],["name/3-680",[]],["text/3-680",[]],["component/3-680",[]],["title/3-681",[59,41.785,127,34.987,145,41.243,372,39.346,1125,59.175]],["name/3-681",[]],["text/3-681",[]],["component/3-681",[]],["title/3-682",[145,45.376,372,43.289,1099,40.431,1126,65.105]],["name/3-682",[]],["text/3-682",[]],["component/3-682",[]],["title/3-683",[145,41.243,1099,36.748,1127,59.175,1128,49.051,1129,45.112]],["name/3-683",[]],["text/3-683",[]],["component/3-683",[]],["title/3-684",[1099,40.431,1129,49.633,1130,65.105,1131,55.417]],["name/3-684",[]],["text/3-684",[]],["component/3-684",[]],["title/3-685",[53,35.252,154,7.767,1099,40.431,1132,65.105]],["name/3-685",[]],["text/3-685",[]],["component/3-685",[]],["title/3-686",[277,45.754,1133,72.357,1134,58.567]],["name/3-686",[]],["text/3-686",[]],["component/3-686",[]],["title/3-687",[27,27.686,182,20.444,235,44.62,366,37.841,1135,43.372,1136,35.106,1137,36.918]],["name/3-687",[]],["text/3-687",[]],["component/3-687",[]],["title/3-688",[342,30.158,366,37.122,1136,52.698,1138,65.105]],["name/3-688",[]],["text/3-688",[]],["component/3-688",[]],["title/3-689",[286,38.204,474,35.041,1136,52.698,1139,65.105]],["name/3-689",[]],["text/3-689",[]],["component/3-689",[]],["title/3-690",[342,30.158,366,37.122,1137,55.417,1140,65.105]],["name/3-690",[]],["text/3-690",[]],["component/3-690",[]],["title/3-691",[1099,44.934,1141,72.357,1142,48.647]],["name/3-691",[]],["text/3-691",[]],["component/3-691",[]],["title/3-692",[537,51.909,1142,39.784,1143,59.175,1144,46.872,1145,43.634]],["name/3-692",[]],["text/3-692",[]],["component/3-692",[]],["title/3-693",[1142,39.784,1144,46.872,1145,43.634,1146,59.175,1147,53.758]],["name/3-693",[]],["text/3-693",[]],["component/3-693",[]],["title/3-694",[646,51.909,1142,39.784,1144,46.872,1145,43.634,1148,59.175]],["name/3-694",[]],["text/3-694",[]],["component/3-694",[]],["title/3-695",[15,27.103,1099,31.085,1116,40.516,1142,33.653,1145,36.91,1149,50.056,1150,45.474]],["name/3-695",[]],["text/3-695",[]],["component/3-695",[]],["title/3-696",[15,27.103,1099,31.085,1116,40.516,1117,42.607,1142,33.653,1145,36.91,1151,50.056]],["name/3-696",[]],["text/3-696",[]],["component/3-696",[]],["title/3-697",[154,8.632,1152,72.357,1153,49.804]],["name/3-697",[]],["text/3-697",[]],["component/3-697",[]],["title/3-698",[79,37.025,548,34.259,1154,72.357]],["name/3-698",[]],["text/3-698",[]],["component/3-698",[]],["title/3-699",[154,7.767,1153,44.812,1155,65.105,1156,49.633]],["name/3-699",[]],["text/3-699",[]],["component/3-699",[]],["title/3-700",[366,41.256,901,61.59,1157,72.357]],["name/3-700",[]],["text/3-700",[]],["component/3-700",[]],["title/3-701",[10,21.931,366,41.256,1158,72.357]],["name/3-701",[]],["text/3-701",[]],["component/3-701",[]],["title/3-702",[1,20.177,366,24.73,442,52.57,1153,29.853,1159,43.372,1160,33.679,1161,35.106,1162,38.046]],["name/3-702",[]],["text/3-702",[]],["component/3-702",[]],["title/3-703",[154,7.767,1153,44.812,1163,65.105,1164,50.555]],["name/3-703",[]],["text/3-703",[]],["component/3-703",[]],["title/3-704",[154,8.632,163,31.191,1165,72.357]],["name/3-704",[]],["text/3-704",[]],["component/3-704",[]],["title/3-705",[0,31.661,1,27.529,215,30.774,1166,59.175,1167,53.758]],["name/3-705",[]],["text/3-705",[]],["component/3-705",[]],["title/3-706",[154,7.767,171,43.772,1153,44.812,1168,65.105]],["name/3-706",[]],["text/3-706",[]],["component/3-706",[]],["title/3-707",[154,8.632,163,31.191,1169,72.357]],["name/3-707",[]],["text/3-707",[]],["component/3-707",[]],["title/3-708",[26,30.109,48,39.388,154,6.47,523,37.33,573,39.991,1170,54.235]],["name/3-708",[]],["text/3-708",[]],["component/3-708",[]],["title/3-709",[26,32.851,48,42.976,154,7.059,523,40.73,1171,59.175]],["name/3-709",[]],["text/3-709",[]],["component/3-709",[]],["title/3-710",[53,35.252,154,7.767,1153,44.812,1172,65.105]],["name/3-710",[]],["text/3-710",[]],["component/3-710",[]],["title/3-711",[13,35.252,366,37.122,1173,65.105,1174,50.555]],["name/3-711",[]],["text/3-711",[]],["component/3-711",[]],["title/3-712",[13,29.366,153,39.991,195,33.982,559,35.677,1153,37.33,1175,54.235]],["name/3-712",[]],["text/3-712",[]],["component/3-712",[]],["title/3-713",[154,8.632,983,51.797,1176,72.357]],["name/3-713",[]],["text/3-713",[]],["component/3-713",[]],["title/3-714",[154,8.632,1177,72.357,1178,65.734]],["name/3-714",[]],["text/3-714",[]],["component/3-714",[]],["title/3-715",[78,49.804,183,65.734,1179,63.472]],["name/3-715",[]],["text/3-715",[]],["component/3-715",[]],["title/3-716",[43,35.688,154,7.767,305,36.379,1180,65.105]],["name/3-716",[]],["text/3-716",[]],["component/3-716",[]],["title/3-717",[43,29.729,154,6.47,252,37.33,808,41.345,1181,54.235,1182,47.575]],["name/3-717",[]],["text/3-717",[]],["component/3-717",[]],["title/3-718",[154,8.632,1183,72.357,1184,56.186]],["name/3-718",[]],["text/3-718",[]],["component/3-718",[]],["title/3-719",[154,7.059,420,32.642,1184,45.95,1185,59.175,1186,46.872]],["name/3-719",[]],["text/3-719",[]],["component/3-719",[]],["title/3-720",[79,37.025,548,34.259,1187,72.357]],["name/3-720",[]],["text/3-720",[]],["component/3-720",[]],["title/3-721",[78,40.73,154,7.059,411,28.802,1184,45.95,1188,59.175]],["name/3-721",[]],["text/3-721",[]],["component/3-721",[]],["title/3-722",[171,43.772,390,31.689,1184,50.555,1189,65.105]],["name/3-722",[]],["text/3-722",[]],["component/3-722",[]],["title/3-723",[0,34.834,154,7.767,294,40.431,1190,65.105]],["name/3-723",[]],["text/3-723",[]],["component/3-723",[]],["title/3-724",[0,31.661,79,30.28,294,36.748,548,28.018,1191,59.175]],["name/3-724",[]],["text/3-724",[]],["component/3-724",[]],["title/3-725",[0,31.661,10,17.935,154,7.059,294,36.748,1192,59.175]],["name/3-725",[]],["text/3-725",[]],["component/3-725",[]],["title/3-726",[0,29.017,10,16.438,29,24.806,182,25.564,294,33.68,1193,54.235]],["name/3-726",[]],["text/3-726",[]],["component/3-726",[]],["title/3-727",[0,31.661,154,7.059,163,25.509,294,36.748,1194,59.175]],["name/3-727",[]],["text/3-727",[]],["component/3-727",[]],["title/3-728",[0,34.834,294,40.431,552,28.716,1195,65.105]],["name/3-728",[]],["text/3-728",[]],["component/3-728",[]],["title/3-729",[0,34.834,294,40.431,341,23.492,1196,65.105]],["name/3-729",[]],["text/3-729",[]],["component/3-729",[]],["title/3-730",[854,44.934,855,46.638,1197,72.357]],["name/3-730",[]],["text/3-730",[]],["component/3-730",[]],["title/3-731",[23,36.785,1198,81.426]],["name/3-731",[]],["text/3-731",[]],["component/3-731",[]],["title/3-732",[24,42.581,1199,81.426]],["name/3-732",[]],["text/3-732",[]],["component/3-732",[]],["title/3-733",[43,35.688,154,7.767,563,38.494,1200,65.105]],["name/3-733",[]],["text/3-733",[]],["component/3-733",[]],["title/3-734",[51,38.526,154,7.059,420,32.642,563,34.987,1201,59.175]],["name/3-734",[]],["text/3-734",[]],["component/3-734",[]],["title/3-735",[29,27.066,563,34.987,1142,39.784,1202,59.175,1203,50.369]],["name/3-735",[]],["text/3-735",[]],["component/3-735",[]],["title/3-736",[10,19.733,154,7.767,563,38.494,1204,65.105]],["name/3-736",[]],["text/3-736",[]],["component/3-736",[]],["title/3-737",[66,48.787,411,31.689,563,38.494,1205,65.105]],["name/3-737",[]],["text/3-737",[]],["component/3-737",[]],["title/3-738",[110,49.633,345,48.007,1206,65.105,1207,59.146]],["name/3-738",[]],["text/3-738",[]],["component/3-738",[]],["title/3-739",[43,35.688,154,7.767,384,32.15,1208,65.105]],["name/3-739",[]],["text/3-739",[]],["component/3-739",[]],["title/3-740",[43,32.437,154,7.059,384,29.221,1156,45.112,1209,59.175]],["name/3-740",[]],["text/3-740",[]],["component/3-740",[]],["title/3-741",[24,37.838,1210,72.357,1211,56.186]],["name/3-741",[]],["text/3-741",[]],["component/3-741",[]],["title/3-742",[23,26.732,104,38.927,810,39.346,1212,59.175,1213,45.112]],["name/3-742",[]],["text/3-742",[]],["component/3-742",[]],["title/3-743",[10,17.935,43,32.437,154,7.059,384,29.221,1214,59.175]],["name/3-743",[]],["text/3-743",[]],["component/3-743",[]],["title/3-744",[24,37.838,1211,56.186,1215,72.357]],["name/3-744",[]],["text/3-744",[]],["component/3-744",[]],["title/3-745",[23,26.732,104,38.927,810,39.346,1213,45.112,1216,59.175]],["name/3-745",[]],["text/3-745",[]],["component/3-745",[]],["title/3-746",[43,32.437,154,7.059,384,29.221,1217,59.175,1218,50.369]],["name/3-746",[]],["text/3-746",[]],["component/3-746",[]],["title/3-747",[51,38.526,384,29.221,420,32.642,1218,50.369,1219,59.175]],["name/3-747",[]],["text/3-747",[]],["component/3-747",[]],["title/3-748",[154,7.767,1156,49.633,1220,65.105,1221,57.111]],["name/3-748",[]],["text/3-748",[]],["component/3-748",[]],["title/3-749",[272,45.972,523,44.812,854,40.431,1222,65.105]],["name/3-749",[]],["text/3-749",[]],["component/3-749",[]],["title/3-750",[54,57.314,154,8.632,1223,72.357]],["name/3-750",[]],["text/3-750",[]],["component/3-750",[]],["title/3-751",[53,39.178,143,53.354,1224,72.357]],["name/3-751",[]],["text/3-751",[]],["component/3-751",[]],["title/3-752",[43,32.437,77,35.259,154,7.059,1225,59.175,1226,47.897]],["name/3-752",[]],["text/3-752",[]],["component/3-752",[]],["title/3-753",[43,27.438,77,29.825,113,30.061,154,5.971,303,20.883,1226,40.516,1227,50.056]],["name/3-753",[]],["text/3-753",[]],["component/3-753",[]],["title/3-754",[43,32.437,129,34.219,154,7.059,1228,59.175,1229,38.526]],["name/3-754",[]],["text/3-754",[]],["component/3-754",[]],["title/3-755",[185,49.804,1229,47.108,1230,72.357]],["name/3-755",[]],["text/3-755",[]],["component/3-755",[]],["title/3-756",[3,32.315,43,29.729,154,6.47,656,37.33,1229,35.309,1231,54.235]],["name/3-756",[]],["text/3-756",[]],["component/3-756",[]],["title/3-757",[129,37.649,154,7.767,1229,42.387,1232,65.105]],["name/3-757",[]],["text/3-757",[]],["component/3-757",[]],["title/3-758",[79,27.752,129,31.362,154,6.47,548,25.679,1229,35.309,1233,54.235]],["name/3-758",[]],["text/3-758",[]],["component/3-758",[]],["title/3-759",[10,17.935,129,34.219,154,7.059,1229,38.526,1234,59.175]],["name/3-759",[]],["text/3-759",[]],["component/3-759",[]],["title/3-760",[10,16.438,29,24.806,129,31.362,182,25.564,1229,35.309,1235,54.235]],["name/3-760",[]],["text/3-760",[]],["component/3-760",[]],["title/3-761",[129,34.219,154,7.059,163,25.509,1229,38.526,1236,59.175]],["name/3-761",[]],["text/3-761",[]],["component/3-761",[]],["title/3-762",[129,37.649,552,28.716,1229,42.387,1237,65.105]],["name/3-762",[]],["text/3-762",[]],["component/3-762",[]],["title/3-763",[129,37.649,341,23.492,1229,42.387,1238,65.105]],["name/3-763",[]],["text/3-763",[]],["component/3-763",[]],["title/3-764",[854,44.934,855,46.638,1239,72.357]],["name/3-764",[]],["text/3-764",[]],["component/3-764",[]],["title/3-765",[23,36.785,1240,81.426]],["name/3-765",[]],["text/3-765",[]],["component/3-765",[]],["title/3-766",[24,42.581,1241,81.426]],["name/3-766",[]],["text/3-766",[]],["component/3-766",[]],["title/3",[12,47.108,45,47.108,50,59.978]],["name/3",[45,0.031,1242,0.051,1243,0.051]],["text/3",[0,3.484,1,4.239,2,0.613,3,4.62,4,0.156,5,0.019,6,0.09,7,2.116,8,0.056,9,0.442,10,2.392,11,3.021,12,2.344,13,4.745,14,3.249,15,2.158,16,1.202,17,0.349,18,0.558,19,0.074,20,0.202,21,0.173,22,2.986,23,3.536,24,3.56,25,3.924,26,3.848,27,3.151,28,3.376,29,3.767,30,1.331,31,4.74,32,0.782,33,0.02,34,0.668,35,0.665,36,1.701,37,0.716,38,0.573,39,0.072,40,0.02,41,0.019,42,0.993,43,2.626,44,1.561,45,1.403,46,0.533,47,0.412,48,1.268,49,1.661,50,0.207,51,2.735,52,0.997,53,1.296,54,0.246,55,0.412,56,0.941,57,0.504,58,1.82,59,0.748,60,2.46,61,1.022,62,1.239,63,1.334,64,0.23,65,3.836,66,0.412,67,2.171,68,0.02,69,0.143,70,0.092,71,0.054,72,0.381,73,0.058,74,0.822,75,0.477,76,0.19,77,2.42,78,0.679,79,0.606,80,1.105,81,0.04,82,0.02,83,0.02,84,0.183,85,4.411,86,0.02,87,0.02,88,0.04,89,3.006,90,0.389,91,0.04,92,0.077,93,0.165,94,2.116,95,0.02,96,1.394,97,0.258,98,0.663,99,3.77,100,0.636,101,0.04,102,0.241,103,0.42,104,5.82,105,0.02,106,0.06,107,0.077,108,1.542,109,1.318,110,2.486,111,0.349,112,3.884,113,1.313,114,0.333,115,0.129,116,0.02,117,0.058,118,0.966,119,0.087,120,0.02,121,0.872,122,0.077,123,0.04,124,0.147,125,4.244,126,0.404,127,3.349,128,0.02,129,1.517,130,0.02,131,0.02,132,1.115,133,0.888,134,1.771,135,2.505,136,0.092,137,0.16,138,0.038,139,2.453,140,1.132,141,3.263,142,0.23,143,1.861,144,3.031,145,3.587,147,0.019,148,1.447,149,0.021,150,0.961,151,0.997,152,1.982,153,1.276,154,1.344,155,0.606,156,3.052,157,1.394,158,1.645,159,1.566,160,0.418,161,0.407,162,0.213,163,2.937,164,0.412,165,0.284,166,1.492,167,0.821,168,0.323,169,0.115,170,0.214,171,2.46,172,2.111,173,0.119,174,0.89,175,0.451,176,0.16,177,0.35,178,2.048,179,0.275,180,0.06,181,0.102,182,3.499,183,0.077,184,0.325,185,1.367,186,0.341,187,0.04,188,0.019,189,0.195,190,0.021,191,0.021,192,0.021,193,0.021,194,0.658,195,1.001,196,0.021,197,1.482,198,0.021,199,0.111,200,0.021,201,2.343,202,0.021,203,0.021,204,0.021,205,0.962,206,0.054,207,0.021,208,1.913,209,0.949,210,0.021,211,2.353,212,0.021,213,0.021,214,1.965,215,2.067,216,0.021,217,0.689,218,0.021,219,0.021,220,1.213,221,0.021,222,0.385,223,1.505,224,0.461,225,0.021,226,0.021,227,1.117,228,0.201,229,0.021,230,0.798,231,1.039,232,0.021,233,0.291,234,0.021,235,3.171,236,0.021,237,1.525,238,0.021,239,1.487,240,0.021,241,2.583,242,0.021,243,1.188,244,0.021,245,0.021,246,1.931,247,0.133,248,0.021,249,0.901,250,0.021,251,0.021,252,3.181,253,0.021,254,1.213,255,0.021,256,0.021,257,0.021,258,0.282,259,2.132,260,0.021,261,0.325,262,1.46,263,1.818,264,0.021,265,1.83,266,1.695,267,0.021,268,0.038,269,0.038,270,0.021,271,1.615,272,2.641,273,0.021,274,3.199,275,0.021,276,0.021,277,1.9,278,0.021,279,2.166,280,0.021,281,0.021,282,2.085,283,0.021,284,0.766,285,1.34,286,1.572,287,0.021,288,2.064,289,0.021,290,0.838,291,0.021,292,2.888,293,0.021,294,2.582,295,0.021,296,0.058,297,1.997,298,0.021,299,2.529,300,0.19,301,0.021,302,0.524,303,2.44,304,0.021,305,1.003,306,0.021,307,0.219,308,0.021,309,0.021,310,0.021,311,0.021,312,0.021,313,0.021,314,0.021,315,0.021,316,2.397,317,0.824,318,0.021,319,0.021,320,0.021,321,0.021,322,2.456,323,0.397,324,0.021,325,0.021,326,0.021,327,0.143,328,0.021,329,0.021,330,0.021,331,0.626,332,0.021,333,0.021,334,0.021,335,0.727,336,2.004,337,0.021,338,0.021,339,0.021,340,0.021,341,2.052,342,3.148,343,0.021,344,0.165,345,1.819,346,0.021,347,2.249,348,0.021,349,0.021,350,0.975,351,0.021,352,0.021,353,0.021,354,0.021,355,0.021,356,1.441,357,0.021,358,0.021,359,0.326,360,0.021,361,0.021,362,0.021,363,0.021,364,2.046,365,0.021,366,5.532,367,0.021,368,0.683,369,0.021,370,0.021,371,0.882,372,5.059,373,0.021,374,0.021,375,0.021,376,2.503,377,0.021,378,0.853,379,0.021,380,1.07,381,0.021,382,0.021,383,0.021,384,2.473,385,0.021,386,2.857,387,0.021,388,0.021,389,0.021,390,2.84,391,0.021,392,0.021,393,0.021,394,0.021,395,0.021,396,0.021,397,0.021,398,0.021,399,0.021,400,0.477,401,0.021,402,0.021,403,0.021,404,0.96,405,0.021,406,0.448,407,0.021,408,0.291,409,0.021,410,0.021,411,2.542,412,0.021,413,0.021,414,2.075,415,0.021,416,0.791,417,0.021,418,0.021,419,0.021,420,2.138,421,0.021,422,1.166,423,0.021,424,0.021,425,0.021,426,0.021,427,0.555,428,0.021,429,0.021,430,0.021,431,0.021,432,0.768,433,0.021,434,0.021,435,1.03,436,0.021,437,0.791,438,0.021,439,0.589,440,0.021,441,0.021,442,0.589,443,1.008,444,0.021,445,0.207,446,0.021,447,0.021,448,0.021,449,0.021,450,3.634,451,0.021,452,0.021,453,0.021,454,0.021,455,0.021,456,0.021,457,0.021,458,0.93,459,0.052,460,0.021,461,0.464,462,0.948,463,0.021,464,0.021,465,0.021,466,0.021,467,0.02,468,0.021,469,0.021,470,0.021,471,0.021,472,0.021,473,0.021,474,2.238,475,0.021,476,0.021,477,2.302,478,0.021,479,0.021,480,0.021,481,2.078,482,0.021,483,0.021,484,0.021,485,1.59,486,0.021,487,0.632,488,0.663,489,0.021,490,0.021,491,0.021,492,1.213,493,0.021,494,0.021,495,0.021,496,0.021,497,0.423,498,0.021,499,0.219,500,0.021,501,1.429,502,0.021,503,2.29,504,0.021,505,0.021,506,0.021,507,0.021,508,2.19,509,0.021,510,0.111,511,0.021,512,1.368,513,0.021,514,0.685,515,0.021,516,0.021,517,0.07,518,0.021,519,0.491,520,0.021,521,4.029,522,0.021,523,1.258,524,0.021,525,0.021,526,2.367,527,0.04,528,0.571,529,0.021,530,0.165,531,0.021,532,2.081,533,0.021,534,0.021,535,2.02,536,0.711,537,0.074,538,0.021,539,0.125,540,0.021,541,0.021,542,1.523,543,0.04,544,0.021,545,0.021,546,0.021,547,0.021,548,0.518,549,0.021,550,0.021,551,0.021,552,1.67,553,0.021,554,0.021,555,1.17,556,0.021,557,0.021,558,1.307,559,1.604,560,0.021,561,0.021,562,0.021,563,1.052,564,0.021,565,0.021,566,0.021,567,0.021,568,0.021,569,0.021,570,0.021,571,0.518,572,0.021,573,0.576,574,0.021,575,0.021,576,0.021,577,0.021,578,0.021,579,0.021,580,0.021,581,0.021,582,0.021,583,0.021,584,0.021,585,0.021,586,1.238,587,0.021,588,0.021,589,0.021,590,0.021,591,0.021,592,0.021,593,0.021,594,0.021,595,0.021,596,0.021,597,0.021,598,0.021,599,0.021,600,0.021,601,0.021,602,0.021,603,0.996,604,0.021,605,0.021,606,0.021,607,0.021,608,0.021,609,0.021,610,0.021,611,1.645,612,1.054,613,0.021,614,0.021,615,0.021,616,0.021,617,0.021,618,0.021,619,0.021,620,0.807,621,0.021,622,0.021,623,0.021,624,0.021,625,0.021,626,0.021,627,0.021,628,0.021,629,0.021,630,0.021,631,0.021,632,0.021,633,0.021,634,0.021,635,1.548,636,0.021,637,0.021,638,0.038,639,0.021,640,0.021,641,1.016,642,1.505,643,0.021,644,0.488,645,0.493,646,0.219,647,0.021,648,0.074,649,0.021,650,0.021,651,0.16,652,0.021,653,0.813,654,1.409,655,0.021,656,1.28,657,0.021,658,0.021,659,0.021,660,0.021,661,0.021,662,0.021,663,0.021,664,0.021,665,0.021,666,0.021,667,0.021,668,0.021,669,0.645,670,0.576,671,0.021,672,0.021,673,0.021,674,0.021,675,0.021,676,0.021,677,0.021,678,0.021,679,0.021,680,0.133,681,0.021,682,0.021,683,0.021,684,0.344,685,0.021,686,0.021,687,0.021,688,0.021,689,0.824,690,0.021,691,0.021,692,0.021,693,0.021,694,0.021,695,0.021,696,0.021,697,0.427,698,0.021,699,0.021,700,0.021,701,0.021,702,0.021,703,0.021,704,0.722,705,0.021,706,0.021,707,0.021,708,0.499,709,0.021,710,0.021,711,0.021,712,0.021,713,0.021,714,0.021,715,0.021,716,0.021,717,0.147,718,0.021,719,0.676,720,0.021,721,0.021,722,0.021,723,0.021,724,0.072,725,0.367,726,0.021,727,0.021,728,0.021,729,0.021,730,0.021,731,0.021,732,0.78,733,0.508,734,0.021,735,0.021,736,0.021,737,0.021,738,0.021,739,0.021,740,0.021,741,0.133,742,0.021,743,0.021,744,0.021,745,0.021,746,0.021,747,0.771,748,0.021,749,0.021,750,0.194,751,0.021,752,0.178,753,0.373,754,0.052,755,0.021,756,0.021,757,0.235,758,0.021,759,0.021,760,1.141,761,0.021,762,0.021,763,0.021,764,0.021,765,0.021,766,1.707,767,0.021,768,0.021,769,0.021,770,0.021,771,0.021,772,0.021,773,0.021,774,0.021,775,0.021,776,0.021,777,0.019,778,0.021,779,0.571,780,0.308,781,0.021,782,0.021,783,0.021,784,0.638,785,0.021,786,0.021,787,0.316,788,0.021,789,0.021,790,0.021,791,0.056,792,1.814,793,0.021,794,0.021,795,0.021,796,0.201,797,0.319,798,0.021,799,0.021,800,0.021,801,0.021,802,0.021,803,1.279,804,0.021,805,0.882,806,0.021,807,0.021,808,0.523,809,0.021,810,1.236,811,0.257,812,0.021,813,0.241,814,0.107,815,0.09,816,0.021,817,0.021,818,0.036,819,0.021,820,0.021,821,0.021,822,0.021,823,0.021,824,0.021,825,0.021,826,0.021,827,0.021,828,0.021,829,0.156,830,0.021,831,0.021,832,0.021,833,0.092,834,0.092,835,0.021,836,0.021,837,0.021,838,0.021,839,0.021,840,0.021,841,0.021,842,0.021,843,0.021,844,0.311,845,0.383,846,0.021,847,0.021,848,0.021,849,0.021,850,0.021,851,0.021,852,0.021,853,0.021,854,1.044,855,0.2,856,0.021,857,0.021,858,0.02,859,0.021,860,2.681,861,0.021,862,0.021,863,0.021,864,0.021,865,0.111,866,1.671,867,0.021,868,3.201,869,0.021,870,0.917,871,0.744,872,0.021,873,0.021,874,0.021,875,0.021,876,0.021,877,0.021,878,0.021,879,0.021,880,1.668,881,0.021,882,0.021,883,1.105,884,0.021,885,0.021,886,0.021,887,0.021,888,0.021,889,0.021,890,0.021,891,0.021,892,0.553,893,0.021,894,0.021,895,0.021,896,0.021,897,0.021,898,0.021,899,0.021,900,0.021,901,0.072,902,0.021,903,0.021,904,0.021,905,0.021,906,0.021,907,0.021,908,0.021,909,0.021,910,0.606,911,0.038,912,0.021,913,2.155,914,0.021,915,0.021,916,0.021,917,0.021,918,0.021,919,0.021,920,0.021,921,0.021,922,1.848,923,0.021,924,0.021,925,1.431,926,0.237,927,0.343,928,0.021,929,0.021,930,0.186,931,0.021,932,0.021,933,0.021,934,0.021,935,0.021,936,0.021,937,0.021,938,0.021,939,0.021,940,0.021,941,0.849,942,0.021,943,0.021,944,0.021,945,0.021,946,0.021,947,0.021,948,0.021,949,0.021,950,1.212,951,0.021,952,0.44,953,0.021,954,0.021,955,1.398,956,1.069,957,0.021,958,0.021,959,0.021,960,0.021,961,0.021,962,0.021,963,0.021,964,0.021,965,0.021,966,0.021,967,0.392,968,0.021,969,0.021,970,0.021,971,1.432,972,0.021,973,0.021,974,0.021,975,0.021,976,0.021,977,0.021,978,0.021,979,0.021,980,0.021,981,0.021,982,0.021,983,1.06,984,0.021,985,0.021,986,0.021,987,0.021,988,0.021,989,0.021,990,0.021,991,0.021,992,0.021,993,0.021,994,0.021,995,1.902,996,0.021,997,0.021,998,0.275,999,0.021,1000,0.077,1001,0.021,1002,0.021,1003,0.021,1004,0.021,1005,0.021,1006,0.021,1007,0.984,1008,0.021,1009,0.316,1010,0.021,1011,0.021,1012,0.021,1013,0.445,1014,0.021,1015,0.021,1016,0.021,1017,0.021,1018,0.021,1019,0.021,1020,0.021,1021,0.021,1022,0.864,1023,0.111,1024,0.578,1025,0.424,1026,0.021,1027,0.021,1028,0.021,1029,0.021,1030,0.021,1031,0.021,1032,0.021,1033,0.021,1034,0.021,1035,0.021,1036,0.021,1037,0.021,1038,0.021,1039,0.021,1040,0.021,1041,0.021,1042,0.021,1043,0.021,1044,0.021,1045,0.021,1046,0.021,1047,0.021,1048,1.536,1049,0.021,1050,0.021,1051,0.021,1052,0.021,1053,0.021,1054,0.539,1055,0.021,1056,0.021,1057,0.021,1058,0.021,1059,0.021,1060,0.021,1061,0.021,1062,0.021,1063,0.617,1064,0.021,1065,0.021,1066,0.021,1067,0.021,1068,0.021,1069,0.021,1070,0.021,1071,0.021,1072,0.021,1073,0.021,1074,0.021,1075,0.021,1076,0.021,1077,0.021,1078,0.021,1079,0.021,1080,0.021,1081,0.021,1082,0.021,1083,0.021,1084,0.021,1085,0.021,1086,0.058,1087,0.021,1088,0.301,1089,0.021,1090,0.021,1091,0.723,1092,0.021,1093,0.021,1094,0.381,1095,0.021,1096,0.021,1097,0.038,1098,0.021,1099,1.732,1100,0.021,1101,0.021,1102,0.077,1103,0.021,1104,0.038,1105,0.021,1106,0.021,1107,0.021,1108,0.021,1109,0.038,1110,0.021,1111,0.021,1112,0.021,1113,0.493,1114,0.021,1115,0.021,1116,0.284,1117,0.143,1118,0.021,1119,0.171,1120,0.246,1121,0.021,1122,0.264,1123,0.227,1124,0.021,1125,0.021,1126,0.021,1127,0.021,1128,0.374,1129,2.816,1130,0.021,1131,0.299,1132,0.021,1133,0.021,1134,0.647,1135,0.021,1136,0.085,1137,0.09,1138,0.021,1139,0.021,1140,0.021,1141,0.021,1142,1.658,1143,0.021,1144,0.994,1145,0.124,1146,0.021,1147,0.058,1148,0.021,1149,0.021,1150,0.152,1151,0.021,1152,0.021,1153,1.077,1154,0.021,1155,0.021,1156,0.329,1157,0.021,1158,0.021,1159,0.021,1160,4.766,1161,0.663,1162,0.291,1163,0.021,1164,1.732,1165,0.021,1166,0.021,1167,0.058,1168,0.021,1169,0.021,1170,0.021,1171,0.021,1172,0.021,1173,0.021,1174,1.578,1175,0.021,1176,0.021,1177,0.021,1178,0.428,1179,0.111,1180,0.021,1181,0.021,1182,0.165,1183,0.021,1184,1.056,1185,0.021,1186,0.42,1187,0.021,1188,0.021,1189,0.021,1190,0.021,1191,0.021,1192,0.021,1193,0.021,1194,0.021,1195,0.021,1196,0.021,1197,0.021,1198,0.021,1199,0.021,1200,0.021,1201,0.021,1202,0.021,1203,0.567,1204,0.021,1205,0.021,1206,0.021,1207,0.058,1208,0.021,1209,0.021,1210,0.021,1211,1.083,1212,0.021,1213,0.61,1214,0.021,1215,0.021,1216,0.021,1217,0.021,1218,0.107,1219,0.021,1220,0.021,1221,0.111,1222,0.021,1223,0.021,1224,0.021,1225,0.021,1226,0.186,1227,0.021,1228,0.021,1229,0.783,1230,0.021,1231,0.021,1232,0.021,1233,0.021,1234,0.021,1235,0.021,1236,0.021,1237,0.021,1238,0.021,1239,0.021,1240,0.021,1241,0.021,1244,0.019,1245,0.042,1246,0.021,1247,0.058,1248,0.021,1249,0.042,1250,1.226,1251,0.09,1252,0.195,1253,0.021,1254,0.152,1255,0.021,1256,0.681,1257,0.198,1258,0.241,1259,1.902,1260,0.227,1261,1.838,1262,0.115,1263,0.021,1264,0.04,1265,1.985,1266,0.325,1267,1.059,1268,0.021,1269,0.021,1270,0.649,1271,0.021,1272,0.115,1273,0.021,1274,0.227,1275,0.021,1276,0.165,1277,3.521,1278,1.427,1279,0.021,1280,0.632,1281,0.401,1282,0.021,1283,0.021,1284,0.446,1285,0.021,1286,0.468,1287,0.021,1288,1.283,1289,0.077,1290,0.282,1291,0.08,1292,0.063,1293,2.421,1294,0.428,1295,0.237,1296,0.133,1297,1.633,1298,0.04,1299,0.133,1300,1.245,1301,0.063,1302,0.058,1303,0.06,1304,0.195,1305,0.735,1306,1.862,1307,0.133,1308,1.274,1309,2.413,1310,0.021,1311,0.491,1312,1.943,1313,0.063,1314,0.021,1315,0.019,1316,0.787,1317,1.683,1318,0.063,1319,0.237,1320,0.558,1321,2.568,1322,0.828,1323,0.584,1324,0.255,1325,0.275,1326,0.06,1327,0.084,1328,0.5,1329,0.291,1330,0.982,1331,0.665,1332,0.465,1333,1.338,1334,0.504,1335,0.71,1336,0.058,1337,1.445,1338,0.171,1339,0.042,1340,0.219,1341,0.06,1342,0.021,1343,0.188,1344,1.594,1345,2.247,1346,0.1,1347,0.708,1348,2.324,1349,1.202,1350,0.178,1351,0.413,1352,0.058,1353,0.337,1354,0.551,1355,0.021,1356,0.264,1357,1.873,1358,0.147,1359,0.584,1360,0.04,1361,0.813,1362,1.757,1363,0.391,1364,0.105,1365,0.119,1366,0.341,1367,0.555,1368,0.947,1369,0.584,1370,0.282,1371,0.761,1372,0.058,1373,0.063,1374,0.932,1375,0.337,1376,0.042,1377,0.208,1378,0.384,1379,0.06,1380,0.448,1381,0.02,1382,0.501,1383,0.159,1384,0.227,1385,0.967,1386,0.09,1387,0.584,1388,0.074,1389,0.021,1390,0.273,1391,0.741,1392,0.021,1393,0.308,1394,0.247,1395,0.501,1396,0.165,1397,0.04,1398,0.816,1399,0.021,1400,0.413,1401,0.058,1402,0.133,1403,0.761,1404,0.517,1405,0.111,1406,1.466,1407,0.119,1408,0.056,1409,0.855,1410,0.04,1411,1.059,1412,0.058,1413,0.133,1414,0.282,1415,0.536,1416,0.195,1417,0.021,1418,0.178,1419,0.247,1420,1.344,1421,0.042,1422,0.584,1423,0.534,1424,3.027,1425,1.03,1426,3.425,1427,0.379,1428,0.06,1429,0.165,1430,0.16,1431,0.126,1432,0.381,1433,0.183,1434,0.435,1435,0.227,1436,0.021,1437,0.06,1438,0.021,1439,0.084,1440,0.119,1441,0.604,1442,0.812,1443,0.337,1444,0.139,1445,0.021,1446,0.06,1447,0.042,1448,0.618,1449,0.021,1450,0.901,1451,0.119,1452,0.021,1453,1.36,1454,1.317,1455,0.119,1456,0.021,1457,0.1,1458,0.084,1459,0.084,1460,0.084,1461,0.195,1462,0.042,1463,0.568,1464,0.021,1465,0.308,1466,0.021,1467,0.021,1468,0.021,1469,0.553,1470,0.021,1471,0.021,1472,0.209,1473,0.27,1474,0.57,1475,0.168,1476,0.105,1477,1.393,1478,0.105,1479,0.06,1480,0.021,1481,0.021,1482,0.042,1483,0.021,1484,0.074,1485,0.021,1486,0.482,1487,0.343,1488,0.147,1489,1.213,1490,0.04,1491,0.558,1492,0.178,1493,1.556,1494,0.105,1495,0.021,1496,1.671,1497,0.1,1498,1.352,1499,1.328,1500,1.252,1501,0.71,1502,0.201,1503,0.224,1504,0.021,1505,0.602,1506,0.663,1507,0.107,1508,0.534,1509,0.761,1510,0.021,1511,0.71,1512,0.237,1513,0.198,1514,0.694,1515,0.021,1516,0.063,1517,0.802,1518,0.679,1519,0.183,1520,0.021,1521,0.04,1522,0.021,1523,0.063,1524,0.168,1525,0.451,1526,0.096,1527,0.301,1528,0.105,1529,0.084,1530,0.042,1531,0.219,1532,0.021,1533,0.021,1534,0.063,1535,0.042,1536,0.04,1537,0.021,1538,1.574,1539,0.171,1540,0.584,1541,0.147,1542,1.14,1543,0.488,1544,1.963,1545,0.23,1546,0.077,1547,0.126,1548,0.165,1549,0.096,1550,0.152,1551,0.021,1552,0.021,1553,0.04,1554,0.021,1555,0.021,1556,0.077,1557,0.1,1558,0.021,1559,0.021,1560,0.147,1561,0.115,1562,0.021,1563,1.073,1564,0.291,1565,0.021,1566,0.291,1567,0.063,1568,0.04,1569,0.282,1570,0.165,1571,0.308,1572,0.021,1573,0.08,1574,0.171,1575,0.105,1576,0.042,1577,0.367,1578,0.282,1579,0.663,1580,0.021,1581,0.042,1582,0.063,1583,0.333,1584,0.042,1585,0.021,1586,0.021,1587,0.021,1588,0.042,1589,0.021,1590,0.119,1591,0.021,1592,0.063,1593,0.413,1594,0.063,1595,0.021,1596,0.133,1597,0.058,1598,0.265,1599,2.221,1600,0.485,1601,0.6,1602,0.465,1603,0.817,1604,0.465,1605,0.617,1606,0.042,1607,0.096,1608,0.451,1609,0.06,1610,0.119,1611,0.282,1612,0.485,1613,0.06,1614,0.448,1615,0.1,1616,0.291,1617,0.886,1618,0.265,1619,0.115,1620,0.901,1621,0.129,1622,0.16,1623,0.291,1624,0.147,1625,0.219,1626,0.446,1627,0.501,1628,0.171,1629,0.021,1630,0.021,1631,0.1,1632,0.237,1633,0.19,1634,1.387,1635,0.042,1636,0.217,1637,0.021,1638,0.08,1639,0.021,1640,0.021,1641,0.021,1642,0.021,1643,0.021,1644,0.021,1645,0.021,1646,0.021,1647,0.021,1648,0.021,1649,0.198,1650,0.021,1651,0.431,1652,0.042,1653,0.084,1654,0.105,1655,0.077,1656,0.096,1657,0.042,1658,0.042,1659,1.44,1660,0.129,1661,0.255,1662,0.586,1663,0.04,1664,0.042,1665,0.063,1666,0.147,1667,0.021,1668,0.042,1669,0.084,1670,0.568,1671,0.021,1672,0.247,1673,0.16,1674,0.183,1675,0.282,1676,0.04,1677,0.02,1678,0.042,1679,1.372,1680,0.237,1681,0.237,1682,0.829,1683,0.063,1684,0.021,1685,0.021,1686,0.084,1687,0.021,1688,0.1,1689,0.021,1690,0.04,1691,0.021,1692,0.115,1693,0.021,1694,0.021,1695,0.021,1696,0.021,1697,0.021,1698,0.021,1699,0.19,1700,0.255,1701,0.021,1702,0.021,1703,0.021,1704,0.021,1705,0.021,1706,0.021,1707,0.021,1708,0.04,1709,0.021,1710,0.038,1711,0.301,1712,0.021,1713,0.021,1714,2.038,1715,0.371,1716,0.401,1717,0.139,1718,0.021,1719,0.198,1720,0.042,1721,0.042,1722,1.96,1723,0.937,1724,0.129,1725,1.44,1726,0.465,1727,0.04,1728,0.584,1729,0.063,1730,0.282,1731,0.485,1732,0.219,1733,0.04,1734,0.077,1735,0.178,1736,0.119,1737,0.096,1738,0.06,1739,0.125,1740,0.04,1741,0.341,1742,0.021,1743,0.021,1744,0.23,1745,0.152,1746,0.084,1747,0.198,1748,0.168,1749,0.1,1750,0.448,1751,0.021,1752,0.021,1753,0.119,1754,0.152,1755,0.021,1756,0.021,1757,0.042,1758,0.021,1759,0.021,1760,0.692,1761,0.761,1762,0.021,1763,0.021,1764,0.096,1765,0.201,1766,0.077,1767,0.077,1768,0.021,1769,0.06,1770,0.021,1771,0.021,1772,0.021,1773,0.021,1774,0.06,1775,0.021,1776,0.021,1777,0.021,1778,0.021,1779,0.021,1780,0.021,1781,0.021,1782,0.021,1783,0.021,1784,0.084,1785,0.159,1786,0.063,1787,0.816,1788,0.042,1789,0.063,1790,0.042,1791,0.042,1792,0.213,1793,0.021,1794,0.208,1795,0.063,1796,0.042,1797,0.02,1798,0.021,1799,0.04,1800,0.042,1801,0.021,1802,0.021,1803,0.246,1804,0.042,1805,0.063,1806,0.042,1807,0.042,1808,0.675,1809,0.021,1810,0.021,1811,0.021,1812,0.021,1813,0.021,1814,0.021,1815,0.021,1816,0.021,1817,0.021,1818,0.021,1819,0.021,1820,0.021,1821,0.074,1822,0.042,1823,0.042,1824,0.063,1825,0.501,1826,0.042,1827,0.139,1828,0.379,1829,0.021,1830,0.119,1831,0.333,1832,0.555,1833,0.06,1834,0.115,1835,0.042,1836,0.105,1837,0.042,1838,0.096,1839,0.021,1840,0.021,1841,0.021,1842,0.021,1843,0.021,1844,0.021,1845,0.021,1846,0.021,1847,0.021,1848,0.021,1849,0.021,1850,0.021,1851,0.021,1852,0.165,1853,0.021,1854,0.042,1855,0.282,1856,0.042,1857,0.021,1858,0.021,1859,0.119,1860,0.021,1861,0.183,1862,0.04,1863,0.021,1864,0.04,1865,0.021,1866,0.217,1867,0.021,1868,0.021,1869,0.042,1870,0.119,1871,0.021,1872,0.063,1873,0.06,1874,0.042,1875,0.147,1876,0.021,1877,0.465,1878,0.021,1879,0.021,1880,0.042,1881,0.119,1882,0.042,1883,0.04,1884,0.227,1885,0.482,1886,0.021,1887,0.021,1888,0.021,1889,0.08,1890,0.105,1891,0.021,1892,0.021,1893,0.021,1894,0.096,1895,0.021,1896,0.042,1897,0.021,1898,0.042,1899,0.04,1900,0.159,1901,0.021,1902,0.021,1903,0.53,1904,0.247,1905,0.465,1906,0.021,1907,0.021,1908,0.021,1909,0.021,1910,0.021,1911,0.413,1912,0.201,1913,0.021,1914,0.042,1915,0.042,1916,0.021,1917,0.171,1918,0.042,1919,0.021,1920,0.042,1921,0.042,1922,0.396,1923,0.021,1924,0.168,1925,0.042,1926,0.084,1927,0.063,1928,0.229,1929,0.042,1930,0.021,1931,0.042,1932,0.021,1933,0.04,1934,0.021,1935,0.021,1936,0.021,1937,0.119,1938,0.021,1939,0.021,1940,0.021,1941,0.021,1942,0.021,1943,0.021,1944,0.084,1945,0.02,1946,0.042,1947,0.042,1948,0.063,1949,0.06,1950,0.021,1951,0.021,1952,0.021,1953,0.08,1954,0.021,1955,0.06,1956,0.021,1957,0.021,1958,0.021,1959,0.021,1960,0.021,1961,0.021,1962,0.798,1963,0.06,1964,0.021,1965,0.152,1966,0.042,1967,0.042,1968,0.063,1969,0.084,1970,0.042,1971,0.042,1972,0.855,1973,0.021,1974,0.021,1975,0.326,1976,0.021,1977,0.04,1978,0.096,1979,0.021,1980,0.021,1981,0.021,1982,0.021,1983,0.021,1984,0.021,1985,0.165,1986,0.077,1987,0.021,1988,0.021,1989,0.04,1990,0.063,1991,0.105,1992,0.042,1993,0.264,1994,0.618,1995,0.021,1996,0.021,1997,0.021,1998,0.021,1999,0.021,2000,0.021,2001,0.042,2002,0.021,2003,0.08,2004,0.119,2005,0.201,2006,0.04,2007,0.115,2008,0.021,2009,0.021,2010,0.021,2011,0.139,2012,0.021,2013,0.063,2014,0.021,2015,0.021,2016,0.021,2017,0.042,2018,0.021,2019,0.042,2020,0.021,2021,0.084,2022,0.021,2023,0.021,2024,0.19,2025,0.021,2026,0.06,2027,0.021,2028,0.077,2029,0.04,2030,0.778,2031,0.021,2032,0.042,2033,0.02,2034,0.02,2035,0.021,2036,0.042,2037,0.021,2038,0.021,2039,0.021,2040,0.021,2041,0.021,2042,0.147,2043,0.021,2044,0.021,2045,1.055,2046,0.147,2047,0.412,2048,0.126,2049,0.084,2050,0.675,2051,0.35,2052,0.058,2053,0.021,2054,0.042,2055,0.04,2056,0.19,2057,0.105,2058,0.1,2059,0.25,2060,0.021,2061,0.468,2062,0.021,2063,0.042,2064,0.52,2065,0.042,2066,0.021,2067,0.021,2068,0.618,2069,0.021,2070,0.021,2071,0.19,2072,0.021,2073,0.886,2074,0.021,2075,0.021,2076,0.042,2077,0.021,2078,0.384,2079,0.021,2080,0.021,2081,0.021,2082,0.021,2083,0.147,2084,0.04,2085,0.063,2086,0.021,2087,0.021,2088,0.021,2089,0.021,2090,0.021,2091,0.06,2092,0.06,2093,0.718,2094,0.105,2095,0.021,2096,0.021,2097,0.021,2098,0.042,2099,0.021,2100,0.021,2101,0.077,2102,0.105,2103,0.021,2104,0.021,2105,0.247,2106,0.04,2107,0.021,2108,0.042,2109,0.084,2110,0.237,2111,0.063,2112,0.299,2113,0.042,2114,0.237,2115,0.042,2116,0.042,2117,0.115,2118,0.021,2119,0.105,2120,0.371,2121,0.021,2122,0.264,2123,0.25,2124,0.652,2125,0.063,2126,0.105,2127,0.126,2128,0.063,2129,0.063,2130,0.021,2131,0.021,2132,0.119,2133,0.021,2134,1.227,2135,0.595,2136,0.314,2137,0.021,2138,0.021,2139,0.021,2140,0.021,2141,0.021,2142,0.038,2143,0.021,2144,0.021,2145,0.021,2146,0.021,2147,0.042,2148,0.063,2149,0.021,2150,0.084,2151,0.021,2152,0.042,2153,0.042,2154,0.042,2155,0.077,2156,0.824,2157,0.021,2158,0.396,2159,0.063,2160,0.042,2161,0.063,2162,0.115,2163,0.063,2164,0.021,2165,0.021,2166,0.021,2167,0.021,2168,0.021,2169,0.337,2170,0.126,2171,0.063,2172,0.021,2173,0.021,2174,0.042,2175,0.021,2176,0.021,2177,0.021,2178,0.084,2179,0.021,2180,0.021,2181,0.021,2182,0.021,2183,0.021,2184,0.021,2185,0.042,2186,0.021,2187,0.084,2188,0.084,2189,0.021,2190,0.021,2191,0.042,2192,0.021,2193,0.021,2194,0.021,2195,0.021,2196,0.021,2197,0.021,2198,0.021,2199,0.02,2200,0.632,2201,0.06,2202,0.063,2203,0.021,2204,0.021,2205,0.139,2206,0.042,2207,0.021,2208,0.021,2209,0.021,2210,0.021,2211,0.021,2212,0.147,2213,0.021,2214,0.021,2215,0.021,2216,0.021,2217,0.021,2218,0.021,2219,0.042,2220,0.074,2221,0.171,2222,0.021,2223,0.021,2224,0.021,2225,0.08,2226,0.021,2227,0.021,2228,0.021,2229,0.021,2230,0.021,2231,0.021,2232,0.021,2233,0.08,2234,0.301,2235,0.021,2236,0.021,2237,0.08,2238,0.021,2239,0.058,2240,0.021,2241,0.021,2242,0.021,2243,0.227,2244,0.021,2245,0.04,2246,0.042,2247,0.021,2248,0.021,2249,0.021,2250,0.084,2251,0.063,2252,0.115,2253,0.133,2254,0.042,2255,0.021,2256,0.159,2257,0.021,2258,0.021,2259,0.308,2260,0.077,2261,0.042,2262,0.042,2263,0.042,2264,0.042,2265,0.084,2266,0.275,2267,0.04,2268,0.084,2269,0.147,2270,0.04,2271,0.021,2272,0.021,2273,0.165,2274,0.021,2275,0.021,2276,0.021,2277,0.084,2278,0.021,2279,0.042,2280,0.021,2281,0.021,2282,0.208,2283,0.147,2284,0.183,2285,0.152,2286,0.021,2287,0.042,2288,0.021,2289,0.308,2290,0.042,2291,0.042,2292,0.126,2293,0.213,2294,0.084,2295,0.042,2296,0.084,2297,0.021,2298,0.063,2299,0.084,2300,0.021,2301,0.021,2302,0.021,2303,0.021,2304,0.042,2305,0.021,2306,0.021,2307,0.021,2308,0.042,2309,0.021,2310,0.02,2311,0.042,2312,0.021,2313,0.021,2314,0.021,2315,0.021,2316,0.021,2317,0.021,2318,0.042,2319,0.021,2320,0.074,2321,0.219,2322,0.042,2323,0.171,2324,0.021,2325,0.021,2326,0.042,2327,0.042,2328,0.042,2329,0.042,2330,0.042,2331,0.042,2332,0.042,2333,0.042,2334,0.042,2335,0.021,2336,0.042,2337,0.042,2338,0.021,2339,0.021,2340,0.06,2341,0.021,2342,0.021,2343,0.021,2344,0.021,2345,0.021,2346,0.021,2347,0.021,2348,0.021,2349,0.021,2350,0.021,2351,0.021,2352,0.208,2353,0.021,2354,0.021,2355,0.021,2356,0.021,2357,0.021,2358,0.021,2359,0.021,2360,0.021,2361,0.021,2362,0.021,2363,0.042,2364,0.038,2365,0.125,2366,0.038,2367,0.021,2368,0.06,2369,0.021,2370,0.021,2371,0.021,2372,0.188,2373,0.021,2374,0.021,2375,0.35,2376,0.042,2377,0.021,2378,0.063,2379,0.021,2380,0.063,2381,0.04,2382,0.021,2383,0.058,2384,0.021,2385,0.021,2386,0.021,2387,0.021,2388,0.147,2389,0.139,2390,0.021,2391,0.021,2392,0.042,2393,0.063,2394,0.115,2395,0.042,2396,0.021,2397,0.063,2398,0.042,2399,0.021,2400,0.265,2401,0.021,2402,0.096,2403,0.021,2404,0.06,2405,0.042,2406,0.021,2407,0.021,2408,0.208,2409,0.021,2410,0.021,2411,0.021,2412,0.021,2413,0.021,2414,0.021,2415,0.021,2416,0.021,2417,0.021,2418,0.291,2419,0.021,2420,0.021,2421,0.021,2422,0.021,2423,0.219,2424,0.021,2425,0.042,2426,0.115,2427,0.021,2428,0.465,2429,0.264,2430,0.107,2431,0.152,2432,0.126,2433,0.08,2434,0.178,2435,0.042,2436,0.042,2437,0.178,2438,0.08,2439,0.04,2440,1.5,2441,0.295,2442,0.042,2443,0.021,2444,0.063,2445,0.129,2446,0.1,2447,0.139,2448,0.19,2449,0.19,2450,0.255,2451,0.021,2452,0.446,2453,0.02,2454,0.08,2455,0.04,2456,0.096,2457,0.02,2458,0.04,2459,0.143,2460,0.119,2461,0.361,2462,0.129,2463,0.337,2464,0.021,2465,0.129,2466,0.096,2467,0.021,2468,0.08,2469,0.06,2470,0.647,2471,0.35,2472,0.02,2473,0.02,2474,0.021,2475,0.337,2476,0.092,2477,0.077,2478,0.021,2479,0.115,2480,0.021,2481,0.021,2482,0.04,2483,0.208,2484,0.04,2485,0.021,2486,0.074,2487,0.096,2488,0.058,2489,0.09,2490,0.096,2491,0.16,2492,0.119,2493,0.021,2494,0.042,2495,0.217,2496,0.143,2497,0.08,2498,0.04,2499,0.04,2500,0.129,2501,0.04,2502,0.111,2503,0.021,2504,0.042,2505,0.198,2506,0.09,2507,0.042,2508,0.021,2509,0.021,2510,0.042,2511,0.042,2512,0.129,2513,0.042,2514,0.042,2515,0.021,2516,0.042,2517,0.246,2518,0.195,2519,0.08,2520,0.299,2521,0.021,2522,0.021,2523,0.229,2524,0.021,2525,0.021,2526,0.058,2527,0.224,2528,0.042,2529,0.1,2530,0.337,2531,0.063,2532,0.021,2533,0.042,2534,0.021,2535,0.282,2536,0.021,2537,0.021,2538,0.04,2539,0.042,2540,0.06,2541,0.171,2542,0.021,2543,0.264,2544,0.021,2545,0.1,2546,0.147,2547,0.273,2548,0.02,2549,0.04,2550,0.06,2551,0.02,2552,0.04,2553,0.139,2554,0.021,2555,0.08,2556,0.08,2557,0.04,2558,0.021,2559,0.021,2560,0.021,2561,0.077,2562,0.02,2563,0.042,2564,0.178,2565,0.06,2566,0.021,2567,0.021,2568,0.021,2569,0.06,2570,0.258,2571,0.02,2572,0.021,2573,0.021,2574,0.021,2575,0.042,2576,0.042,2577,0.255,2578,0.021,2579,0.063,2580,0.06,2581,0.042,2582,0.04,2583,0.021,2584,0.021,2585,0.063,2586,0.042,2587,0.042,2588,0.021,2589,0.021,2590,0.021,2591,0.021,2592,0.021,2593,0.06,2594,0.021,2595,0.021,2596,0.02,2597,0.021,2598,0.147,2599,1.488,2600,0.133,2601,0.133,2602,0.021,2603,0.021,2604,0.105,2605,0.178,2606,0.273,2607,0.084,2608,0.021,2609,0.021,2610,0.021,2611,0.084,2612,0.021,2613,0.06,2614,0.042,2615,0.084,2616,0.092,2617,0.042,2618,0.042,2619,0.042,2620,0.021,2621,0.021,2622,0.534,2623,0.25,2624,0.159,2625,0.042,2626,0.042,2627,0.021,2628,0.021,2629,0.139,2630,0.021,2631,0.021,2632,0.337,2633,0.021,2634,0.042,2635,0.021,2636,0.021,2637,0.021,2638,0.021,2639,0.021,2640,0.021,2641,0.08,2642,0.063,2643,0.08,2644,0.409,2645,0.042,2646,0.021,2647,0.021,2648,0.042,2649,0.042,2650,0.021,2651,0.021,2652,0.04,2653,0.021,2654,0.058,2655,0.021,2656,0.021,2657,0.042,2658,0.042,2659,0.042,2660,0.021,2661,0.021,2662,0.021,2663,0.021,2664,0.021,2665,0.058,2666,0.021,2667,0.021,2668,0.08,2669,0.042,2670,0.021,2671,0.042,2672,0.021,2673,0.021,2674,0.06,2675,0.077,2676,0.06,2677,0.021,2678,0.021,2679,0.021,2680,0.042,2681,0.063,2682,0.056,2683,0.021,2684,0.021,2685,0.021,2686,0.042,2687,0.021,2688,0.021,2689,0.021,2690,0.021,2691,0.021,2692,0.021,2693,0.021,2694,0.042,2695,0.021,2696,0.021,2697,0.021,2698,0.021,2699,0.042,2700,0.021,2701,0.021,2702,0.021,2703,0.021,2704,0.021,2705,0.021,2706,0.021,2707,0.021,2708,0.021,2709,0.021,2710,0.021,2711,0.021,2712,0.021,2713,0.021,2714,0.06,2715,0.021,2716,0.021,2717,0.021,2718,0.021,2719,0.042,2720,0.042,2721,0.021,2722,0.021,2723,0.152,2724,0.021,2725,0.105,2726,0.021,2727,0.021,2728,0.021,2729,0.021,2730,0.021,2731,0.063,2732,0.06,2733,0.021,2734,0.06,2735,0.042,2736,0.021,2737,0.063,2738,0.084,2739,0.021,2740,0.063,2741,0.295,2742,0.021,2743,0.021,2744,0.021,2745,0.021,2746,0.021,2747,0.021,2748,0.021,2749,0.021,2750,0.021,2751,0.021,2752,0.247,2753,0.1,2754,0.337,2755,0.042,2756,0.042,2757,0.058,2758,0.021,2759,0.058,2760,0.04,2761,0.482,2762,0.021,2763,0.021,2764,0.021,2765,0.021,2766,0.06,2767,0.021,2768,0.021,2769,0.021,2770,0.021,2771,0.042,2772,0.06,2773,0.042,2774,0.042,2775,0.042,2776,0.042,2777,0.021,2778,0.1,2779,0.042,2780,0.038,2781,0.021,2782,0.021,2783,0.021,2784,0.021,2785,0.021,2786,0.021,2787,0.042,2788,0.084,2789,0.021,2790,0.021,2791,0.021,2792,0.021,2793,0.021,2794,0.021,2795,0.06,2796,0.08,2797,0.021,2798,0.021,2799,0.913,2800,0.435,2801,0.06,2802,0.021,2803,0.021,2804,0.021,2805,0.021,2806,0.021,2807,0.021,2808,0.021,2809,0.042,2810,0.021,2811,0.021,2812,0.021,2813,0.021,2814,0.021,2815,0.021,2816,0.021,2817,0.021,2818,0.021,2819,0.021,2820,0.021,2821,0.021,2822,0.021,2823,0.021,2824,0.021,2825,0.04,2826,0.021,2827,0.133,2828,0.06,2829,0.021,2830,0.217,2831,0.074,2832,0.021,2833,0.08,2834,0.077,2835,0.021,2836,0.539,2837,0.165,2838,0.084,2839,0.058,2840,0.063,2841,0.04,2842,0.1,2843,0.021,2844,0.04,2845,0.021,2846,0.159,2847,0.021,2848,0.021,2849,0.021,2850,0.111,2851,0.077,2852,0.02,2853,0.115,2854,0.1,2855,0.178,2856,0.1,2857,0.06,2858,0.063,2859,0.021,2860,0.042,2861,0.021,2862,0.021,2863,0.448,2864,0.139,2865,0.042,2866,0.021,2867,0.021,2868,0.021,2869,0.06,2870,0.04,2871,0.04,2872,0.021,2873,0.077,2874,0.042,2875,0.042,2876,0.042,2877,0.021,2878,0.042,2879,0.042,2880,0.084,2881,0.042,2882,0.021,2883,0.021,2884,0.021,2885,0.042,2886,0.021,2887,0.042,2888,0.021,2889,0.133,2890,0.021,2891,0.021,2892,0.021,2893,0.021,2894,0.021,2895,0.04,2896,0.04,2897,0.021,2898,0.063,2899,0.021,2900,0.063,2901,0.021,2902,0.021,2903,0.1,2904,0.105,2905,0.171,2906,0.139,2907,0.326,2908,0.19,2909,0.105,2910,0.042,2911,0.159,2912,0.04,2913,0.126,2914,0.021,2915,0.255,2916,0.08,2917,0.198,2918,0.042,2919,0.291,2920,0.147,2921,0.021,2922,0.021,2923,0.168,2924,0.147,2925,0.133,2926,0.139,2927,0.021,2928,0.021,2929,0.021,2930,0.1,2931,0.063,2932,0.021,2933,0.147,2934,0.021,2935,0.1,2936,0.063,2937,0.1,2938,0.077,2939,0.237,2940,0.126,2941,0.171,2942,0.111,2943,0.021,2944,0.021,2945,0.04,2946,0.139,2947,0.096,2948,0.06,2949,0.021,2950,0.042,2951,0.042,2952,0.042,2953,0.042,2954,0.08,2955,0.04,2956,0.105,2957,0.042,2958,0.133,2959,0.021,2960,0.021,2961,0.058,2962,0.042,2963,0.021,2964,0.04,2965,0.1,2966,0.096,2967,0.042,2968,0.246,2969,0.063,2970,0.042,2971,0.316,2972,0.021,2973,0.021,2974,0.021,2975,0.021,2976,0.096,2977,0.021,2978,0.021,2979,0.021,2980,0.021,2981,0.084,2982,0.063,2983,0.021,2984,0.021,2985,0.08,2986,0.042,2987,0.042,2988,0.04,2989,0.021,2990,0.021,2991,0.119,2992,0.464,2993,0.021,2994,0.021,2995,0.074,2996,0.021,2997,0.021,2998,0.119,2999,0.021,3000,0.139,3001,0.021,3002,0.042,3003,0.042,3004,0.077,3005,0.178,3006,0.021,3007,0.042,3008,0.021,3009,0.04,3010,0.04,3011,0.021,3012,0.282,3013,0.08,3014,0.042,3015,0.021,3016,0.1,3017,0.042,3018,0.021,3019,0.063,3020,0.021,3021,0.042,3022,0.198,3023,0.139,3024,0.08,3025,0.042,3026,0.08,3027,0.021,3028,0.021,3029,0.159,3030,0.056,3031,0.183,3032,0.119,3033,0.021,3034,0.042,3035,0.08,3036,0.105,3037,0.063,3038,0.08,3039,0.021,3040,0.063,3041,0.021,3042,0.063,3043,0.08,3044,0.06,3045,0.021,3046,0.021,3047,0.092,3048,0.058,3049,0.021,3050,0.084,3051,0.126,3052,0.105,3053,0.291,3054,0.021,3055,0.042,3056,0.178,3057,0.04,3058,0.159,3059,0.021,3060,0.042,3061,0.126,3062,0.178,3063,0.213,3064,0.021,3065,0.021,3066,0.392,3067,0.021,3068,0.084,3069,0.1,3070,0.042,3071,0.021,3072,0.021,3073,0.042,3074,0.063,3075,0.021,3076,0.021,3077,0.021,3078,0.063,3079,0.147,3080,0.021,3081,0.021,3082,0.084,3083,0.084,3084,0.021,3085,0.021,3086,0.084,3087,0.084,3088,0.084,3089,0.084,3090,0.042,3091,0.042,3092,0.021,3093,0.021,3094,0.021,3095,0.04,3096,0.021,3097,0.063,3098,0.021,3099,0.021,3100,0.063,3101,0.084,3102,0.021,3103,0.04,3104,0.063,3105,0.021,3106,0.171,3107,0.063,3108,0.042,3109,0.063,3110,0.042,3111,0.042,3112,0.042,3113,0.06,3114,0.374,3115,0.147,3116,0.126,3117,0.021,3118,0.168,3119,0.042,3120,0.04,3121,0.084,3122,0.021,3123,0.105,3124,0.105,3125,0.105,3126,0.084,3127,0.275,3128,0.021,3129,0.084,3130,0.021,3131,0.021,3132,0.021,3133,0.021,3134,0.021,3135,0.042,3136,0.021,3137,0.042,3138,0.147,3139,0.021,3140,0.021,3141,0.021,3142,0.1,3143,0.139,3144,0.021,3145,0.021,3146,0.021,3147,0.021,3148,0.021,3149,0.273,3150,0.021,3151,0.021,3152,0.021,3153,0.021,3154,0.021,3155,0.042,3156,0.021,3157,0.021,3158,0.021,3159,0.021,3160,0.021,3161,0.021,3162,0.06,3163,0.04,3164,0.058,3165,0.021,3166,0.084,3167,0.021,3168,0.021,3169,0.021,3170,0.021,3171,0.021,3172,0.021,3173,0.04,3174,0.02,3175,0.021,3176,0.1,3177,0.021,3178,0.021,3179,0.021,3180,0.06,3181,0.021,3182,0.021,3183,0.021,3184,0.021,3185,0.021,3186,0.021,3187,0.021,3188,0.021,3189,0.042,3190,0.08,3191,0.042,3192,0.042,3193,0.042,3194,0.021,3195,0.183,3196,0.521,3197,0.042,3198,0.021,3199,0.04,3200,0.021,3201,0.042,3202,0.021,3203,0.021,3204,0.021,3205,0.021,3206,0.021,3207,0.021,3208,0.021,3209,0.021,3210,0.021,3211,0.021,3212,0.021,3213,0.021,3214,0.021,3215,0.021,3216,0.021,3217,0.021,3218,0.063,3219,0.021,3220,0.021,3221,0.04,3222,0.021,3223,0.129,3224,0.04,3225,0.139,3226,0.183,3227,0.02,3228,0.021,3229,0.021,3230,0.021,3231,0.021,3232,0.021,3233,0.021,3234,0.077,3235,0.021,3236,0.219,3237,0.115,3238,0.092,3239,0.06,3240,0.165,3241,0.301,3242,0.021,3243,0.021,3244,0.021,3245,0.021,3246,0.021,3247,0.111,3248,0.06,3249,0.04,3250,0.021,3251,0.021,3252,0.021,3253,0.021,3254,0.021,3255,0.063,3256,0.063,3257,0.021,3258,0.021,3259,0.1,3260,0.077,3261,0.111,3262,0.105,3263,0.063,3264,0.084,3265,0.021,3266,0.021,3267,0.063,3268,0.021,3269,0.042,3270,0.021,3271,0.042,3272,0.021,3273,0.04,3274,0.021,3275,0.04,3276,0.19,3277,0.021,3278,0.021,3279,0.021,3280,0.021,3281,0.04,3282,0.021,3283,0.237,3284,0.021,3285,0.021,3286,0.021,3287,0.021,3288,0.04,3289,0.096,3290,0.021,3291,0.021,3292,0.111,3293,0.021,3294,0.021,3295,0.021,3296,0.021,3297,0.021,3298,0.021,3299,0.139,3300,0.04,3301,0.02,3302,0.021,3303,0.042,3304,0.023,3305,0.111,3306,0.023,3307,0.04,3308,0.021,3309,0.1,3310,0.219,3311,0.021,3312,0.021,3313,0.021,3314,0.021,3315,0.021,3316,0.021,3317,0.038,3318,0.021,3319,0.021,3320,0.19,3321,0.02,3322,0.021,3323,0.021,3324,0.021,3325,0.021,3326,0.021,3327,0.021,3328,0.023,3329,0.021,3330,0.021,3331,0.264,3332,0.1,3333,0.023,3334,0.021,3335,0.021,3336,0.021,3337,0.021,3338,0.02,3339,0.021,3340,0.02,3341,0.021,3342,0.02,3343,0.021,3344,0.256,3345,0.023,3346,0.077,3347,0.04,3348,0.023,3349,0.227,3350,0.021,3351,0.021,3352,0.021,3353,0.021,3354,0.06,3355,0.021,3356,0.021,3357,0.021,3358,0.038,3359,0.115,3360,0.021,3361,0.08,3362,0.021,3363,0.042,3364,0.021,3365,0.077,3366,0.042,3367,0.042,3368,0.021,3369,0.021,3370,0.139,3371,0.042,3372,0.021,3373,0.021,3374,0.021,3375,0.021,3376,0.021,3377,0.021,3378,0.021,3379,0.021,3380,0.57,3381,0.159,3382,0.042,3383,0.02,3384,0.021,3385,0.178,3386,0.896,3387,0.021,3388,0.021,3389,0.021,3390,0.021,3391,0.021,3392,0.021,3393,0.021,3394,0.021,3395,0.08,3396,0.08,3397,0.042,3398,0.558,3399,0.021,3400,0.042,3401,0.042,3402,0.021,3403,0.021,3404,0.021,3405,0.021,3406,0.021,3407,0.038,3408,0.021,3409,0.021,3410,0.02,3411,0.021,3412,0.021,3413,0.04,3414,0.058,3415,0.023,3416,0.021,3417,0.038,3418,0.042,3419,0.147,3420,0.105,3421,0.063,3422,0.198,3423,0.042,3424,0.021,3425,0.08,3426,0.168,3427,0.023,3428,0.021,3429,0.02,3430,0.02,3431,0.409,3432,0.021,3433,0.021,3434,0.021,3435,0.02,3436,0.042,3437,0.021,3438,0.021,3439,0.042,3440,0.217,3441,0.021,3442,0.021,3443,0.084,3444,0.084,3445,0.105,3446,0.021,3447,0.023,3448,0.042,3449,0.021,3450,0.021,3451,0.021,3452,0.021,3453,0.021,3454,0.021,3455,0.063,3456,0.021,3457,0.021,3458,0.021,3459,0.021,3460,0.021,3461,0.06,3462,0.092,3463,0.042,3464,0.042,3465,0.042,3466,0.04,3467,0.084,3468,0.023,3469,0.02,3470,0.042,3471,0.021,3472,0.021,3473,0.042,3474,0.021,3475,0.021,3476,0.021,3477,0.021,3478,0.021,3479,0.06,3480,0.077,3481,0.021,3482,0.04,3483,0.021,3484,0.237,3485,0.06,3486,0.021,3487,0.021,3488,0.042,3489,0.063,3490,0.119,3491,0.021,3492,0.021,3493,0.021,3494,0.042,3495,0.063,3496,0.021,3497,0.063,3498,0.04,3499,0.105,3500,0.042,3501,0.021,3502,0.04,3503,0.021,3504,0.021,3505,0.084,3506,0.042,3507,0.06,3508,0.042,3509,0.042,3510,0.021,3511,0.042,3512,0.084,3513,0.042,3514,0.063,3515,0.021,3516,0.084,3517,0.084,3518,0.021,3519,0.301,3520,0.08,3521,0.237,3522,0.119,3523,0.042,3524,0.168,3525,0.063,3526,0.084,3527,0.042,3528,0.105,3529,0.042,3530,0.168,3531,0.042,3532,0.084,3533,0.159,3534,0.021,3535,0.021,3536,0.042,3537,0.021,3538,0.084,3539,0.084,3540,0.042,3541,0.042,3542,0.021,3543,0.042,3544,0.021,3545,0.063,3546,0.063,3547,0.042,3548,0.058,3549,0.021,3550,0.058,3551,0.063,3552,0.021,3553,0.021,3554,0.021,3555,0.021,3556,0.021,3557,0.021,3558,0.021,3559,0.042,3560,0.021,3561,0.021,3562,0.021,3563,0.021,3564,0.126,3565,0.04,3566,0.021,3567,0.021,3568,0.096,3569,0.021,3570,0.021,3571,0.021,3572,0.021,3573,0.04,3574,0.021,3575,0.021,3576,0.063,3577,0.021,3578,0.021,3579,0.021,3580,0.021,3581,0.64,3582,0.042,3583,0.021,3584,0.042,3585,0.042,3586,0.042,3587,0.06,3588,0.159,3589,0.1,3590,0.119,3591,0.1,3592,0.133,3593,0.119,3594,0.178,3595,0.084,3596,0.04,3597,0.042,3598,0.084,3599,0.042,3600,0.042,3601,0.042,3602,0.042,3603,0.042,3604,0.04,3605,0.178,3606,0.042,3607,0.042,3608,0.042,3609,0.042,3610,1.589,3611,0.021,3612,0.042,3613,0.021,3614,0.275,3615,0.021,3616,0.115,3617,0.021,3618,0.021,3619,0.021,3620,0.021,3621,0.021,3622,0.021,3623,0.021,3624,0.021,3625,0.021,3626,0.021,3627,0.063,3628,0.042,3629,0.021,3630,0.042,3631,0.021,3632,0.021,3633,0.021,3634,0.063,3635,0.1,3636,0.04,3637,0.021,3638,0.042,3639,0.08,3640,0.188,3641,0.042,3642,0.042,3643,0.042,3644,0.042,3645,0.021,3646,0.042,3647,0.105,3648,0.171,3649,0.063,3650,0.042,3651,0.02,3652,0.021,3653,0.042,3654,0.042,3655,0.063,3656,0.021,3657,0.063,3658,0.139,3659,0.042,3660,0.021,3661,0.042,3662,0.021,3663,0.1,3664,0.042,3665,0.139,3666,0.021,3667,0.021,3668,0.021,3669,0.042,3670,0.084,3671,0.04,3672,0.115,3673,0.042,3674,0.198,3675,0.02,3676,0.063,3677,0.021,3678,0.042,3679,0.021,3680,0.058,3681,0.021,3682,0.021,3683,0.021,3684,0.021,3685,0.063,3686,0.021,3687,0.139,3688,0.084,3689,0.152,3690,0.084,3691,0.021,3692,0.021,3693,0.021,3694,0.042,3695,0.021,3696,0.021,3697,0.021,3698,0.042,3699,0.021,3700,0.063,3701,0.042,3702,0.042,3703,0.042,3704,0.042,3705,0.1,3706,0.021,3707,0.042,3708,0.02,3709,0.021,3710,0.227,3711,0.021,3712,0.021,3713,0.021,3714,0.021,3715,0.021,3716,0.021,3717,0.021,3718,0.021,3719,0.021,3720,0.021,3721,0.021,3722,0.021,3723,0.021,3724,0.021,3725,0.042,3726,0.021,3727,0.04,3728,0.042,3729,0.021,3730,0.021,3731,0.042,3732,0.042,3733,0.04,3734,0.1,3735,0.331,3736,0.168,3737,0.021,3738,0.168,3739,0.147,3740,0.198,3741,0.021,3742,0.042,3743,0.021,3744,0.021,3745,0.021,3746,0.021,3747,0.08,3748,0.021,3749,0.021,3750,0.021,3751,0.042,3752,0.021,3753,0.021,3754,0.021,3755,0.021,3756,0.042,3757,0.042,3758,0.021,3759,0.021,3760,0.021,3761,0.021,3762,0.021,3763,0.042,3764,0.021,3765,0.021,3766,0.021,3767,0.042,3768,0.021,3769,0.021,3770,0.021,3771,0.021,3772,0.042,3773,0.021,3774,0.04,3775,0.021,3776,0.042,3777,0.063,3778,0.042,3779,0.042,3780,0.042,3781,0.042,3782,0.021,3783,0.04,3784,0.063,3785,0.021,3786,0.04,3787,0.063,3788,0.04,3789,0.042,3790,0.021,3791,0.021,3792,0.042,3793,0.021,3794,0.042,3795,0.021,3796,0.021,3797,0.021,3798,0.021,3799,0.021,3800,0.021,3801,0.021,3802,0.021,3803,0.042,3804,0.021,3805,0.021,3806,0.06,3807,0.021,3808,0.105,3809,0.084,3810,0.042,3811,0.063,3812,0.084,3813,0.021,3814,0.04,3815,0.021,3816,0.021,3817,0.021,3818,0.042,3819,0.021,3820,0.021,3821,0.021,3822,0.021,3823,0.042,3824,0.042,3825,0.115,3826,0.1,3827,0.021,3828,0.021,3829,0.042,3830,0.08,3831,0.021,3832,0.04,3833,0.021,3834,0.021,3835,0.063,3836,0.021,3837,0.038,3838,0.021,3839,0.021,3840,0.021,3841,0.063,3842,0.063,3843,0.063,3844,0.08,3845,0.021,3846,0.042,3847,0.021,3848,0.042,3849,0.042,3850,0.119,3851,0.042,3852,0.042,3853,0.021,3854,0.021,3855,0.096,3856,0.021,3857,0.021,3858,0.1,3859,0.042,3860,0.042,3861,0.042,3862,0.042,3863,0.021,3864,0.021,3865,0.021,3866,0.096,3867,0.021,3868,0.021,3869,0.021,3870,0.021,3871,0.021,3872,0.021,3873,0.021,3874,0.063,3875,0.063,3876,0.063,3877,0.063,3878,0.227,3879,0.084,3880,0.105,3881,0.084,3882,0.063,3883,0.021,3884,0.021,3885,0.021,3886,0.021,3887,0.021,3888,0.021,3889,0.021,3890,0.042,3891,0.105,3892,0.042,3893,0.021,3894,0.042,3895,0.084,3896,0.063,3897,0.021,3898,0.021,3899,0.063,3900,0.021,3901,0.042,3902,0.06,3903,0.077,3904,0.021,3905,0.042,3906,0.04,3907,0.021,3908,0.023,3909,0.063,3910,0.063,3911,0.021,3912,0.042,3913,0.042,3914,0.275,3915,0.503,3916,0.063,3917,0.063,3918,0.021,3919,0.021,3920,0.063,3921,0.021,3922,0.021,3923,0.021,3924,0.021,3925,0.021,3926,0.042,3927,0.021,3928,0.021,3929,0.021,3930,0.021,3931,0.042,3932,0.021,3933,0.351,3934,0.021,3935,0.021,3936,0.021,3937,0.331,3938,0.446,3939,0.311,3940,0.021,3941,0.105,3942,0.021,3943,0.042,3944,0.021,3945,0.021,3946,0.139,3947,0.021,3948,0.021,3949,0.042,3950,0.021,3951,0.04,3952,0.063,3953,0.021,3954,0.021,3955,0.021,3956,0.021,3957,0.042,3958,0.105,3959,0.023,3960,0.319,3961,0.021,3962,0.021,3963,0.333,3964,0.021,3965,0.021,3966,0.021,3967,0.042,3968,0.063,3969,0.147,3970,0.021,3971,0.021,3972,0.021,3973,0.021,3974,0.021,3975,0.126,3976,0.021,3977,0.042,3978,0.042,3979,0.021,3980,0.021,3981,1.113,3982,0.063,3983,0.042,3984,0.021,3985,0.021,3986,0.021,3987,0.06,3988,0.023,3989,0.023,3990,0.04,3991,0.021,3992,0.02,3993,0.021,3994,0.063,3995,0.021,3996,0.331,3997,0.126,3998,0.023,3999,0.023,4000,0.021,4001,0.021,4002,0.042,4003,0.042,4004,0.042,4005,0.021,4006,0.021,4007,0.096,4008,0.042,4009,0.021,4010,0.042,4011,0.063,4012,0.063,4013,0.168,4014,0.198,4015,0.126,4016,0.105,4017,0.021,4018,0.042,4019,0.042,4020,0.021,4021,0.042,4022,0.042,4023,0.021,4024,0.021,4025,0.021,4026,0.021,4027,0.021,4028,0.063,4029,0.084,4030,0.063,4031,0.063,4032,0.063,4033,0.147,4034,0.042,4035,0.042,4036,0.021,4037,0.021,4038,0.021,4039,0.021,4040,0.021,4041,0.021,4042,0.021,4043,0.021,4044,0.021,4045,0.021,4046,0.256,4047,0.021,4048,0.021,4049,0.021,4050,0.021,4051,0.021,4052,0.021,4053,0.063,4054,0.105,4055,0.063,4056,0.042,4057,0.042,4058,0.126,4059,0.042,4060,0.042,4061,0.168,4062,0.021,4063,0.084,4064,0.042,4065,0.042,4066,0.042,4067,0.042,4068,0.084,4069,0.042,4070,0.042,4071,0.042,4072,0.209,4073,0.063,4074,0.042,4075,0.042,4076,0.042,4077,0.042,4078,0.042,4079,0.105,4080,0.042,4081,0.042,4082,0.042,4083,0.042,4084,0.042,4085,0.042,4086,0.042,4087,0.042,4088,0.042,4089,0.042,4090,0.042,4091,0.042,4092,0.021,4093,0.021,4094,0.021,4095,0.021,4096,0.021,4097,0.021,4098,0.042,4099,0.042,4100,0.021,4101,0.021,4102,0.021,4103,0.021,4104,0.042,4105,0.021,4106,0.042,4107,0.021,4108,0.021,4109,0.021,4110,0.021,4111,0.042,4112,0.021,4113,0.021,4114,0.021,4115,0.021,4116,0.021,4117,0.021,4118,0.021,4119,0.02,4120,0.021,4121,0.021,4122,0.021,4123,0.021,4124,0.021,4125,0.021,4126,0.021,4127,0.021,4128,0.042,4129,0.021,4130,0.229,4131,0.021,4132,0.126,4133,0.042,4134,0.168,4135,0.023,4136,0.063,4137,0.021,4138,0.021,4139,0.021,4140,0.021,4141,0.021,4142,0.021,4143,0.063,4144,0.042,4145,0.021,4146,0.021,4147,0.021,4148,0.021,4149,0.021,4150,0.08,4151,0.042,4152,0.042,4153,0.063,4154,0.023,4155,0.063,4156,0.063,4157,0.021,4158,0.021,4159,0.042,4160,0.021,4161,0.042,4162,0.021,4163,0.021,4164,0.06,4165,0.021,4166,0.021,4167,0.021,4168,0.063,4169,0.105,4170,0.105,4171,0.063,4172,0.021,4173,0.063,4174,0.042,4175,0.042,4176,0.063,4177,0.084,4178,0.311,4179,0.063,4180,0.105,4181,0.063,4182,0.021,4183,0.021,4184,0.021,4185,0.021,4186,0.021,4187,0.021,4188,0.021,4189,0.042,4190,0.021,4191,0.063,4192,0.021,4193,0.021,4194,0.021,4195,0.021,4196,0.042,4197,0.021,4198,0.021,4199,0.021,4200,0.021,4201,0.021,4202,0.021,4203,0.021,4204,0.021,4205,0.021,4206,0.021,4207,0.021,4208,0.021,4209,0.021,4210,0.021,4211,0.021,4212,0.021,4213,0.063,4214,0.105,4215,0.042,4216,0.021,4217,0.021,4218,0.042,4219,0.084,4220,0.042,4221,0.042,4222,0.021,4223,0.021,4224,0.021,4225,0.042,4226,0.042,4227,0.021,4228,0.021,4229,0.042,4230,0.084,4231,0.077,4232,0.021,4233,0.021,4234,0.021,4235,0.021,4236,0.042,4237,0.042,4238,0.023,4239,0.021,4240,0.042,4241,0.229,4242,0.021,4243,0.021,4244,0.021,4245,0.021,4246,0.021,4247,0.021,4248,0.021,4249,0.27,4250,0.021,4251,0.105,4252,0.042,4253,0.042,4254,0.042,4255,0.042,4256,0.105,4257,0.042,4258,0.063,4259,0.021,4260,0.04,4261,0.042,4262,0.021,4263,0.021,4264,0.042,4265,0.021,4266,0.042,4267,0.04,4268,0.023,4269,0.311,4270,0.021,4271,0.021,4272,0.021,4273,0.021,4274,0.063,4275,0.021,4276,0.1,4277,0.021,4278,0.021,4279,0.023,4280,0.021,4281,0.021,4282,0.042,4283,0.021,4284,0.021,4285,0.021,4286,0.021,4287,0.021,4288,0.021,4289,0.021,4290,0.021,4291,0.021,4292,0.021,4293,0.042,4294,0.021,4295,0.021,4296,0.021,4297,0.021,4298,0.021,4299,0.021,4300,0.042,4301,0.021,4302,0.021,4303,0.021,4304,0.021,4305,0.021,4306,0.209,4307,0.021,4308,0.021,4309,0.021,4310,0.021,4311,0.021,4312,0.021,4313,0.021,4314,0.021,4315,0.021,4316,0.021,4317,0.021,4318,0.021,4319,0.042,4320,0.021,4321,0.021,4322,0.063,4323,0.04,4324,0.084,4325,0.021,4326,0.021,4327,0.021,4328,0.042,4329,0.021,4330,0.021,4331,0.042,4332,0.021,4333,0.021,4334,0.147,4335,0.084,4336,0.021,4337,0.042,4338,0.021,4339,0.25,4340,0.02,4341,0.021,4342,0.021,4343,0.021,4344,0.021,4345,0.021,4346,0.042,4347,0.021,4348,0.021,4349,0.042,4350,0.021,4351,0.042,4352,0.042,4353,0.021,4354,0.021,4355,0.021,4356,0.021,4357,0.021,4358,0.021,4359,0.021,4360,0.021,4361,0.021,4362,0.021,4363,0.021,4364,0.021,4365,0.105,4366,0.042,4367,0.042,4368,0.084,4369,0.021,4370,0.021,4371,0.042,4372,0.021,4373,0.084,4374,0.229,4375,0.042,4376,0.021,4377,0.021,4378,0.021,4379,0.021,4380,0.084,4381,0.06,4382,0.042,4383,0.021,4384,0.021,4385,0.021,4386,0.063,4387,0.021,4388,0.021,4389,0.021,4390,0.021,4391,0.021,4392,0.021,4393,0.021,4394,0.063,4395,0.229,4396,0.021,4397,0.021,4398,0.084,4399,0.021,4400,0.042,4401,0.021,4402,0.021,4403,0.021,4404,0.021,4405,0.021,4406,0.021,4407,0.021,4408,0.084,4409,0.021,4410,0.021,4411,0.063,4412,0.021,4413,0.021,4414,0.021,4415,0.021,4416,0.021,4417,0.063,4418,0.021,4419,0.021,4420,0.021,4421,0.021,4422,0.021,4423,0.021,4424,0.063,4425,0.063,4426,0.042,4427,0.02,4428,0.021,4429,0.021,4430,0.021,4431,0.021,4432,0.042,4433,0.042,4434,0.021,4435,0.021,4436,0.042,4437,0.021,4438,0.126,4439,0.042,4440,0.021,4441,0.147,4442,0.084,4443,0.147,4444,0.063,4445,0.084,4446,0.021,4447,0.021,4448,0.126,4449,0.021,4450,0.042,4451,0.042,4452,0.021,4453,0.021,4454,0.021,4455,0.084,4456,0.021,4457,0.021,4458,0.063,4459,0.084,4460,0.021,4461,0.021,4462,0.021,4463,0.021,4464,0.021,4465,0.021,4466,0.021,4467,0.021,4468,0.021,4469,0.021,4470,0.042,4471,0.021,4472,0.021,4473,0.021,4474,0.021,4475,0.021,4476,0.063,4477,0.021,4478,0.021,4479,0.021,4480,0.021,4481,0.021,4482,0.042,4483,0.021,4484,0.021,4485,0.042,4486,0.042,4487,0.021,4488,0.021,4489,0.021,4490,0.021,4491,0.063,4492,0.042,4493,0.042,4494,0.021,4495,0.021,4496,0.168,4497,0.084,4498,0.023,4499,0.042,4500,0.021,4501,0.021,4502,0.021,4503,0.021,4504,0.021,4505,0.021,4506,0.021,4507,0.021,4508,0.021,4509,0.021,4510,0.021,4511,0.021,4512,0.021,4513,0.042,4514,0.021,4515,0.023,4516,0.06,4517,0.021,4518,0.126,4519,0.021,4520,0.168,4521,0.021,4522,0.042,4523,0.042,4524,0.023,4525,0.021,4526,0.256,4527,0.1,4528,0.1,4529,0.1,4530,0.042,4531,0.042,4532,0.021,4533,0.021,4534,0.021,4535,0.042,4536,0.021,4537,0.021,4538,0.021,4539,0.042,4540,0.042,4541,0.042,4542,0.042,4543,0.042,4544,0.021,4545,0.021,4546,0.021,4547,0.042,4548,0.021,4549,0.042,4550,0.042,4551,0.042,4552,0.021,4553,0.042,4554,0.021,4555,0.021,4556,0.021,4557,0.126,4558,0.021,4559,0.105,4560,0.021,4561,0.021,4562,0.042,4563,0.084,4564,0.042,4565,0.042,4566,0.042,4567,0.042,4568,0.021,4569,0.126,4570,0.042,4571,0.021,4572,0.021,4573,0.023,4574,0.021,4575,0.06,4576,0.042,4577,0.021,4578,0.021,4579,0.021,4580,0.021,4581,0.021,4582,0.021,4583,0.021,4584,0.021,4585,0.021,4586,0.02,4587,0.021,4588,0.021,4589,0.021,4590,0.021,4591,0.063,4592,0.042,4593,0.021,4594,0.042,4595,0.021,4596,0.021,4597,0.021,4598,0.084,4599,0.021,4600,0.042,4601,0.084,4602,0.198,4603,0.021,4604,0.229,4605,0.021,4606,0.021,4607,0.021,4608,0.023,4609,0.021,4610,0.021,4611,0.021,4612,0.021,4613,0.021,4614,0.021,4615,0.021,4616,0.023,4617,0.021,4618,0.021,4619,0.063,4620,0.023,4621,0.063,4622,0.02,4623,0.021,4624,0.023,4625,0.04,4626,0.04,4627,0.063,4628,0.042,4629,0.042,4630,0.021,4631,0.021,4632,0.021,4633,0.021,4634,0.021,4635,0.021,4636,0.021,4637,0.021,4638,0.038,4639,0.021,4640,0.042,4641,0.021,4642,0.042,4643,0.021,4644,0.021,4645,0.042,4646,0.042,4647,0.021,4648,0.021,4649,0.023,4650,0.021,4651,0.021,4652,0.04,4653,0.04,4654,0.042,4655,0.084,4656,0.126,4657,0.021,4658,0.021,4659,0.02,4660,0.021,4661,0.126,4662,0.291,4663,0.021,4664,0.021,4665,0.021,4666,0.188,4667,0.25,4668,0.126,4669,0.105,4670,0.105,4671,0.084,4672,0.27,4673,0.229,4674,0.188,4675,0.188,4676,0.084,4677,0.021,4678,0.038,4679,0.105,4680,0.021,4681,0.084,4682,0.021,4683,0.126,4684,0.126,4685,0.063,4686,0.042,4687,0.126,4688,0.021,4689,0.021,4690,0.042,4691,0.021,4692,0.021,4693,0.042,4694,0.021,4695,0.021,4696,0.02,4697,0.021,4698,0.021,4699,0.042,4700,0.021,4701,0.021,4702,0.021,4703,0.021,4704,0.021,4705,0.021,4706,0.063,4707,0.021,4708,0.188,4709,0.042,4710,0.021,4711,0.021,4712,0.021,4713,0.021,4714,0.021,4715,0.351,4716,0.042,4717,0.126,4718,0.021,4719,0.042,4720,0.105,4721,0.063,4722,0.392,4723,0.27,4724,0.063,4725,0.188,4726,0.063,4727,0.042,4728,0.147,4729,0.042,4730,0.168,4731,0.042,4732,0.021,4733,0.063,4734,0.042,4735,0.021,4736,0.063,4737,0.063,4738,0.042,4739,0.042,4740,0.042,4741,0.168,4742,0.042,4743,0.105,4744,0.042,4745,0.042,4746,0.042,4747,0.042,4748,0.084,4749,0.084,4750,0.042,4751,0.042,4752,0.042,4753,0.084,4754,0.021,4755,0.042,4756,0.021,4757,0.021,4758,0.021,4759,0.021,4760,0.021,4761,0.021,4762,0.021,4763,0.021,4764,0.021,4765,0.126,4766,0.021,4767,0.042,4768,0.021,4769,0.021,4770,0.021,4771,0.063,4772,0.021,4773,0.063,4774,0.021,4775,0.042,4776,0.042,4777,0.021,4778,0.021,4779,0.021,4780,0.084,4781,0.042,4782,0.168,4783,0.042,4784,0.021,4785,0.126,4786,0.042,4787,0.021,4788,0.021,4789,0.021,4790,0.105,4791,0.105,4792,0.168,4793,0.168,4794,0.168,4795,0.105,4796,0.063,4797,0.084,4798,0.084,4799,0.063,4800,0.084,4801,0.063,4802,0.063,4803,0.063,4804,0.063,4805,0.168,4806,0.084,4807,0.084,4808,0.084,4809,0.084,4810,0.084,4811,0.084,4812,0.084,4813,0.084,4814,0.084,4815,0.084,4816,0.084,4817,0.084,4818,0.126,4819,0.084,4820,0.063,4821,0.063,4822,0.063,4823,0.063,4824,0.063,4825,0.063,4826,0.063,4827,0.063,4828,0.126,4829,0.126,4830,0.063,4831,0.063,4832,0.042,4833,0.042,4834,0.042,4835,0.063,4836,0.021,4837,0.084,4838,0.084,4839,0.021,4840,0.042,4841,0.042,4842,0.042,4843,0.084,4844,0.042,4845,0.042,4846,0.084,4847,0.084,4848,0.042,4849,0.042,4850,0.042,4851,0.021,4852,0.021,4853,0.021,4854,0.021,4855,0.021,4856,0.021,4857,0.021,4858,0.021,4859,0.021,4860,0.021,4861,0.021,4862,0.021,4863,0.021,4864,0.021,4865,0.021,4866,0.021,4867,0.021,4868,0.021,4869,0.021,4870,0.021,4871,0.021,4872,0.021,4873,0.021,4874,0.021,4875,0.021,4876,0.021,4877,0.021,4878,0.021,4879,0.021,4880,0.021,4881,0.021,4882,0.021,4883,0.021,4884,0.021,4885,0.021,4886,0.021,4887,0.021,4888,0.021,4889,0.021,4890,0.042,4891,0.021,4892,0.021,4893,0.021,4894,0.021,4895,0.021,4896,0.021,4897,0.021,4898,0.021,4899,0.021,4900,0.021,4901,0.021,4902,0.021,4903,0.021,4904,0.021,4905,0.021,4906,0.021,4907,0.021,4908,0.021,4909,0.021,4910,0.021,4911,0.021,4912,0.042,4913,0.042,4914,0.021,4915,0.021,4916,0.063,4917,0.021,4918,0.042,4919,0.021,4920,0.021,4921,0.04,4922,0.042,4923,0.08,4924,0.06,4925,0.021,4926,0.08,4927,0.021,4928,0.021,4929,0.063,4930,0.021,4931,0.021,4932,0.021,4933,0.021,4934,0.021,4935,0.021,4936,0.021,4937,0.021,4938,0.021,4939,0.021,4940,0.021,4941,0.021,4942,0.021,4943,0.021,4944,0.021,4945,0.021,4946,0.021,4947,0.042,4948,0.021,4949,0.021,4950,0.021,4951,0.021,4952,0.021,4953,0.021,4954,0.042,4955,0.021,4956,0.021,4957,0.021,4958,0.021,4959,0.021,4960,0.021,4961,0.021,4962,0.021,4963,0.042,4964,0.021,4965,0.021,4966,0.021,4967,0.021,4968,0.021,4969,0.021,4970,0.021,4971,0.021,4972,0.021,4973,0.021,4974,0.021,4975,0.021,4976,0.021,4977,0.021,4978,0.021,4979,0.021,4980,0.04,4981,0.021,4982,0.021,4983,0.021,4984,0.021,4985,0.021,4986,0.021,4987,0.021,4988,0.042,4989,0.021,4990,0.021,4991,0.021,4992,0.021,4993,0.021,4994,0.021,4995,0.042,4996,0.021,4997,0.021,4998,0.021,4999,0.021,5000,0.058,5001,0.021,5002,0.021,5003,0.063,5004,0.063,5005,0.021,5006,0.021,5007,0.021,5008,0.042,5009,0.02,5010,0.021,5011,0.021,5012,0.02,5013,0.021,5014,0.042,5015,0.021,5016,0.02,5017,0.021,5018,0.021,5019,0.04,5020,0.04,5021,0.042,5022,0.063,5023,0.042,5024,0.021,5025,0.021,5026,0.042,5027,0.021,5028,0.021,5029,0.021,5030,0.021,5031,0.021,5032,0.021,5033,0.021,5034,0.021,5035,0.042,5036,0.023,5037,0.042,5038,0.021,5039,0.021,5040,0.042,5041,0.021,5042,0.063,5043,0.023,5044,0.126,5045,0.042,5046,0.021,5047,0.021,5048,0.023,5049,0.042,5050,0.042,5051,0.063,5052,0.021,5053,0.042,5054,0.021,5055,0.021,5056,0.021,5057,0.023,5058,0.021,5059,0.021,5060,0.023,5061,0.021,5062,0.042,5063,0.042,5064,0.021,5065,0.021,5066,0.021,5067,0.063,5068,0.042,5069,0.021,5070,0.021,5071,0.021,5072,0.021,5073,0.021,5074,0.021,5075,0.021,5076,0.021,5077,0.021,5078,0.021,5079,0.021,5080,0.021,5081,0.021,5082,0.147,5083,0.021,5084,0.042,5085,0.021,5086,0.042,5087,0.042,5088,0.063,5089,0.042,5090,0.021,5091,0.042,5092,0.021,5093,0.02,5094,0.021,5095,0.021,5096,0.021,5097,0.021,5098,0.021,5099,0.021,5100,0.04,5101,0.021,5102,0.084,5103,0.021,5104,0.021,5105,0.021,5106,0.021,5107,0.021,5108,0.063,5109,0.021,5110,0.042,5111,0.063,5112,0.021,5113,0.105,5114,0.021,5115,0.084,5116,0.021,5117,0.021,5118,0.084,5119,0.063,5120,0.021,5121,0.021,5122,0.021,5123,0.042,5124,0.021,5125,0.021,5126,0.147,5127,0.021,5128,0.021,5129,0.042,5130,0.021,5131,0.021,5132,0.021,5133,0.126,5134,0.042,5135,0.021,5136,0.084,5137,0.084,5138,0.042,5139,0.021,5140,0.021,5141,0.042,5142,0.021,5143,0.021,5144,0.042,5145,0.042,5146,0.042,5147,0.042,5148,0.042,5149,0.021,5150,0.021,5151,0.021,5152,0.021,5153,0.021,5154,0.021,5155,0.042,5156,0.021,5157,0.042,5158,0.1,5159,0.021,5160,0.02,5161,0.02,5162,0.021,5163,0.021,5164,0.021,5165,0.021,5166,0.021,5167,0.021,5168,0.021,5169,0.021,5170,0.042,5171,0.063,5172,0.126,5173,0.126,5174,0.021,5175,0.023,5176,0.021,5177,0.021,5178,0.042,5179,0.021,5180,0.021,5181,0.042,5182,0.105,5183,0.021,5184,0.023,5185,0.021,5186,0.021,5187,0.021]],["component/3",[0,0.065,1,0.056,146,0.091]],["title/4",[188,84.574]],["name/4",[188,0.128]],["text/4",[104,6.383,125,6.762,142,7.686,573,7.155,998,8.043,1244,8.815,1245,11.504,1246,9.703,1247,8.815,1248,9.703,1249,11.504,1250,7.686,1251,8.259,1252,8.259,1253,9.703,1254,8.815,1255,9.703]],["component/4",[0,0.065,1,0.056,146,0.091]],["title/5-1",[43,39.663,154,8.632,305,40.432]],["name/5-1",[]],["text/5-1",[]],["component/5-1",[]],["title/5-2",[43,32.437,154,7.059,252,40.73,808,45.112,1182,51.909]],["name/5-2",[]],["text/5-2",[]],["component/5-2",[]],["title/5-3",[154,9.713,1184,63.229]],["name/5-3",[]],["text/5-3",[]],["component/5-3",[]],["title/5-4",[154,7.767,420,35.913,1184,50.555,1186,51.57]],["name/5-4",[]],["text/5-4",[]],["component/5-4",[]],["title/5-5",[79,41.666,548,38.553]],["name/5-5",[]],["text/5-5",[]],["component/5-5",[]],["title/5-6",[78,44.812,154,7.767,411,31.689,1184,50.555]],["name/5-6",[]],["text/5-6",[]],["component/5-6",[]],["title/5-7",[171,48.647,390,35.219,1184,56.186]],["name/5-7",[]],["text/5-7",[]],["component/5-7",[]],["title/5-8",[0,38.713,154,8.632,294,44.934]],["name/5-8",[]],["text/5-8",[]],["component/5-8",[]],["title/5-9",[0,34.834,79,33.315,294,40.431,548,30.826]],["name/5-9",[]],["text/5-9",[]],["component/5-9",[]],["title/5-10",[0,34.834,10,19.733,154,7.767,294,40.431]],["name/5-10",[]],["text/5-10",[]],["component/5-10",[]],["title/5-11",[0,31.661,10,17.935,29,27.066,182,27.893,294,36.748]],["name/5-11",[]],["text/5-11",[]],["component/5-11",[]],["title/5-12",[0,34.834,154,7.767,163,28.065,294,40.431]],["name/5-12",[]],["text/5-12",[]],["component/5-12",[]],["title/5-13",[0,38.713,294,44.934,552,31.914]],["name/5-13",[]],["text/5-13",[]],["component/5-13",[]],["title/5-14",[0,38.713,294,44.934,341,26.109]],["name/5-14",[]],["text/5-14",[]],["component/5-14",[]],["title/5-15",[854,50.567,855,52.484]],["name/5-15",[]],["text/5-15",[]],["component/5-15",[]],["title/5-16",[23,42.056]],["name/5-16",[]],["text/5-16",[]],["component/5-16",[]],["title/5-17",[24,48.683]],["name/5-17",[]],["text/5-17",[]],["component/5-17",[]],["title/5-18",[43,39.663,154,8.632,563,42.781]],["name/5-18",[]],["text/5-18",[]],["component/5-18",[]],["title/5-19",[51,42.387,154,7.767,420,35.913,563,38.494]],["name/5-19",[]],["text/5-19",[]],["component/5-19",[]],["title/5-20",[29,29.778,563,38.494,1142,43.772,1203,55.417]],["name/5-20",[]],["text/5-20",[]],["component/5-20",[]],["title/5-21",[10,21.931,154,8.632,563,42.781]],["name/5-21",[]],["text/5-21",[]],["component/5-21",[]],["title/5-22",[66,54.221,411,35.219,563,42.781]],["name/5-22",[]],["text/5-22",[]],["component/5-22",[]],["title/5-23",[110,55.161,345,53.354,1207,65.734]],["name/5-23",[]],["text/5-23",[]],["component/5-23",[]],["title/5-24",[43,39.663,154,8.632,384,35.731]],["name/5-24",[]],["text/5-24",[]],["component/5-24",[]],["title/5-25",[43,35.688,154,7.767,384,32.15,1156,49.633]],["name/5-25",[]],["text/5-25",[]],["component/5-25",[]],["title/5-26",[24,42.581,1211,63.229]],["name/5-26",[]],["text/5-26",[]],["component/5-26",[]],["title/5-27",[23,29.412,104,42.828,810,43.289,1213,49.633]],["name/5-27",[]],["text/5-27",[]],["component/5-27",[]],["title/5-28",[10,19.733,43,35.688,154,7.767,384,32.15]],["name/5-28",[]],["text/5-28",[]],["component/5-28",[]],["title/5-29",[24,42.581,1211,63.229]],["name/5-29",[]],["text/5-29",[]],["component/5-29",[]],["title/5-30",[23,29.412,104,42.828,810,43.289,1213,49.633]],["name/5-30",[]],["text/5-30",[]],["component/5-30",[]],["title/5-31",[43,35.688,154,7.767,384,32.15,1218,55.417]],["name/5-31",[]],["text/5-31",[]],["component/5-31",[]],["title/5-32",[51,42.387,384,32.15,420,35.913,1218,55.417]],["name/5-32",[]],["text/5-32",[]],["component/5-32",[]],["title/5-33",[154,8.632,1156,55.161,1221,63.472]],["name/5-33",[]],["text/5-33",[]],["component/5-33",[]],["title/5-34",[272,51.093,523,49.804,854,44.934]],["name/5-34",[]],["text/5-34",[]],["component/5-34",[]],["title/5-35",[54,64.498,154,9.713]],["name/5-35",[]],["text/5-35",[]],["component/5-35",[]],["title/5-36",[53,44.089,143,60.042]],["name/5-36",[]],["text/5-36",[]],["component/5-36",[]],["title/5-37",[43,35.688,77,38.792,154,7.767,1226,52.698]],["name/5-37",[]],["text/5-37",[]],["component/5-37",[]],["title/5-38",[43,29.729,77,32.315,113,32.571,154,6.47,303,22.626,1226,43.899]],["name/5-38",[]],["text/5-38",[]],["component/5-38",[]],["title/5-39",[43,35.688,129,37.649,154,7.767,1229,42.387]],["name/5-39",[]],["text/5-39",[]],["component/5-39",[]],["title/5-40",[185,56.046,1229,53.013]],["name/5-40",[]],["text/5-40",[]],["component/5-40",[]],["title/5-41",[3,35.259,43,32.437,154,7.059,656,40.73,1229,38.526]],["name/5-41",[]],["text/5-41",[]],["component/5-41",[]],["title/5-42",[129,41.842,154,8.632,1229,47.108]],["name/5-42",[]],["text/5-42",[]],["component/5-42",[]],["title/5-43",[79,30.28,129,34.219,154,7.059,548,28.018,1229,38.526]],["name/5-43",[]],["text/5-43",[]],["component/5-43",[]],["title/5-44",[10,19.733,129,37.649,154,7.767,1229,42.387]],["name/5-44",[]],["text/5-44",[]],["component/5-44",[]],["title/5-45",[10,17.935,29,27.066,129,34.219,182,27.893,1229,38.526]],["name/5-45",[]],["text/5-45",[]],["component/5-45",[]],["title/5-46",[129,37.649,154,7.767,163,28.065,1229,42.387]],["name/5-46",[]],["text/5-46",[]],["component/5-46",[]],["title/5-47",[129,41.842,552,31.914,1229,47.108]],["name/5-47",[]],["text/5-47",[]],["component/5-47",[]],["title/5-48",[129,41.842,341,26.109,1229,47.108]],["name/5-48",[]],["text/5-48",[]],["component/5-48",[]],["title/5-49",[854,50.567,855,52.484]],["name/5-49",[]],["text/5-49",[]],["component/5-49",[]],["title/5-50",[23,42.056]],["name/5-50",[]],["text/5-50",[]],["component/5-50",[]],["title/5-51",[24,48.683]],["name/5-51",[]],["text/5-51",[]],["component/5-51",[]],["title/5",[78,56.046,1179,71.428]],["name/5",[5188,0.152]],["text/5",[0,5.12,1,4.51,2,1.056,3,5.388,6,0.341,7,2.431,10,1.886,11,1.912,12,5.008,13,5.085,14,2.79,15,1.727,16,0.276,21,0.332,22,2.365,23,4.649,24,4.981,25,3.678,26,4.726,28,2.706,29,4.926,30,0.925,31,4.644,32,0.291,34,0.351,35,0.311,37,1.072,42,1.795,43,3.677,44,1.37,45,0.261,46,0.755,47,0.583,48,0.565,49,1.287,50,0.332,51,3.787,52,1.37,53,0.217,54,0.617,56,1.347,58,0.992,59,0.55,60,1.631,61,0.617,62,1.703,65,3.425,66,2.571,67,1.58,72,1.455,74,0.311,76,0.332,77,3.001,78,2.673,79,0.582,80,0.617,85,3.739,89,2.169,90,0.317,94,2.434,96,0.605,97,0.332,98,0.317,99,2.037,100,0.605,104,4.557,108,1.146,110,2.96,112,4.744,113,2.06,114,0.63,118,0.617,121,0.324,125,3.132,126,0.593,127,2.875,129,4.885,132,0.502,133,0.852,134,1.528,135,3.967,136,0.997,139,0.45,140,1.431,141,1.485,143,0.838,144,3.122,145,3.627,148,2.526,150,1.86,151,2.037,152,2.075,153,1.766,154,1.238,155,0.311,157,2.477,158,1.97,159,3.636,163,2.096,164,0.605,165,0.63,166,0.543,167,0.305,168,0.3,169,0.364,170,0.317,171,4.658,172,1.666,173,0.324,175,0.317,177,0.967,178,1.253,181,0.324,182,4.807,184,0.645,185,2.021,186,0.645,187,0.379,195,1.126,201,1.056,205,0.238,208,1.274,211,0.971,215,2.529,220,2.117,224,0.324,227,3.641,230,0.92,235,1.974,237,0.782,241,2.462,243,0.773,246,1.042,249,0.324,252,3.582,259,1.287,261,0.332,262,0.9,266,0.617,271,0.639,272,0.55,274,0.951,277,2.961,279,3.458,282,1.604,284,1.396,286,1.568,288,0.305,290,0.253,292,0.852,294,5.681,297,0.324,299,0.644,302,0.63,303,1.62,316,1.414,317,0.317,322,1.318,331,0.287,335,0.677,341,1.238,342,2.759,345,4.589,364,0.825,366,5.832,368,1.106,371,0.317,372,1.777,376,3.015,378,0.9,380,1.633,384,3.92,386,1.431,390,3.521,404,1.629,408,0.645,411,2.188,414,0.287,416,0.782,420,1.321,422,0.295,427,0.324,432,0.324,443,0.317,450,3.434,461,0.305,462,1.691,474,1.971,477,0.272,481,1.208,485,1.146,487,0.63,488,1.455,492,3.56,499,0.683,501,2.037,503,0.507,512,0.593,521,2.82,523,3.093,526,3.151,532,2.235,535,0.992,539,0.341,548,0.19,552,1.179,555,1.183,558,1.466,559,0.748,563,3.264,586,0.441,611,1.455,635,0.617,641,0.311,645,1.194,654,0.317,656,0.782,697,0.3,719,0.291,732,0.583,750,0.311,752,0.311,760,1.326,779,0.852,780,0.3,784,2.037,803,0.317,805,1.424,808,3.707,810,2.582,811,2.844,813,0.311,854,2.412,860,2.326,866,0.617,868,4.718,880,4.143,910,0.311,913,1.424,922,2.854,925,1.396,952,0.942,1054,0.324,1094,0.324,1113,0.324,1128,0.645,1129,1.826,1131,0.967,1134,3.48,1142,0.992,1153,1.016,1156,0.866,1160,3.911,1161,0.324,1164,3.18,1174,1.86,1182,2.101,1184,7.256,1186,0.617,1203,1.53,1207,0.707,1211,2.477,1213,1.125,1218,1.256,1221,1.294,1226,1.938,1229,5.499,1250,0.617,1252,0.341,1256,0.663,1258,0.645,1259,3.143,1260,0.364,1261,1.666,1265,0.92,1266,0.942,1267,1.703,1272,0.364,1277,3.244,1278,1.938,1280,1.223,1281,0.663,1286,0.967,1288,1.223,1290,0.663,1293,2.964,1297,1.49,1304,0.341,1305,0.997,1309,0.332,1312,2.526,1316,0.332,1317,2.377,1319,0.683,1321,1.938,1322,1.703,1323,1.791,1325,0.332,1330,0.645,1333,1.223,1334,2.644,1335,0.645,1340,0.351,1345,2.777,1347,2.163,1348,2.215,1349,0.341,1350,0.341,1359,0.942,1361,2.163,1362,1.455,1363,0.645,1366,0.942,1367,0.324,1368,0.967,1370,0.341,1374,1.53,1378,0.663,1380,0.683,1382,1.53,1385,1.49,1387,0.645,1390,0.997,1391,0.645,1393,0.351,1395,0.341,1396,0.351,1398,0.997,1404,0.351,1406,0.92,1408,0.351,1411,1.938,1414,0.341,1416,0.341,1420,0.9,1422,0.332,1423,2.5,1424,3.315,1425,1.194,1426,3.244,1430,0.341,1432,0.324,1434,0.341,1437,0.738,1441,0.9,1453,1.194,1454,0.341,1461,0.663,1463,1.294,1465,0.351,1486,1.032,1489,1.49,1491,0.317,1492,0.341,1493,1.938,1496,0.617,1498,1.223,1500,1.424,1501,0.645,1503,0.332,1506,0.332,1509,0.341,1511,0.942,1517,2.434,1518,0.332,1519,0.351,1525,1.53,1531,0.351,1539,0.364,1540,1.791,1542,1.633,1543,0.332,1544,0.967,1563,0.63,1564,1.845,1569,0.341,1571,0.332,1577,0.341,1579,1.938,1601,1.223,1603,0.942,1605,0.63,1611,0.364,1612,0.967,1614,0.351,1616,0.351,1617,0.663,1618,0.663,1620,1.256,1622,1.256,1623,0.683,1627,0.663,1659,0.324,1662,0.63,1670,0.683,1673,0.341,1675,0.341,1679,0.351,1690,0.379,1699,0.364,1714,0.663,1716,2.715,1722,3.395,1725,2.163,1731,0.663,1733,0.379,1734,0.364,1735,0.341,1739,0.341,1741,0.645,1750,0.683,1761,0.663,1766,0.364,1803,0.364,1828,0.683,1832,0.324,1833,0.738,1834,0.364,1855,0.663,1859,1.077,1861,0.351,1862,0.379,1866,2.783,1873,0.738,1904,0.341,1911,0.351,1962,0.324,1972,1.53,1978,0.707,2004,0.738,2005,0.683,2006,0.379,2024,0.332,2030,0.707,2045,0.683,2064,1.223,2068,1.294,2071,0.364,2073,0.967,2078,0.341,2112,0.341,2122,0.364,2134,0.645,2156,0.663,2220,0.351,2221,0.707,2260,0.364,2266,1.398,2273,0.351,2282,1.341,2289,0.351,2321,0.351,2352,0.364,2375,0.341,2400,0.663,2429,0.364,2431,0.364,2438,0.738,2440,0.663,2445,0.351,2448,0.332,2449,0.332,2450,0.683,2461,0.351,2462,0.351,2465,0.683,2470,0.645,2475,1.341,2476,0.351,2483,1.032,2486,0.351,2488,0.364,2502,0.997,2512,0.351,2517,0.364,2518,0.341,2520,0.967,2527,0.645,2541,1.341,2543,0.364,2547,0.997,2557,0.379,2570,0.942,2599,3.035,2600,0.707,2606,0.683,2632,2.668,2652,0.379,2682,0.351,2754,0.707,2761,1.577,2799,0.683,2830,0.379,2834,0.364,2836,0.63,2853,0.364,2857,0.379,2863,0.351,2871,0.379,2873,0.364,2889,0.364,2907,0.351,2916,0.738,2948,0.379,2954,1.077,2968,1.341,2971,0.663,2988,0.379,2995,0.351,3000,1.077,3032,1.077,3043,0.379,3047,0.351,3048,0.364,3103,0.379,3106,0.364,3114,1.911,3176,1.398,3195,0.997,3224,0.379,3226,0.683,3237,1.032,3238,0.351,3240,0.997,3247,0.683,3259,0.379,3261,0.683,3289,0.364,3292,0.683,3300,0.379,3310,0.351,3317,0.364,3331,1.341,3346,0.364,3347,0.379,3349,1.341,3386,1.911,3407,0.364,3413,0.379,3462,0.351,3480,0.364,3490,0.379,3507,0.738,3550,0.364,3592,0.707,3610,2.101,3614,2.783,3616,0.364,3648,0.364,3710,0.707,3727,0.379,3747,0.738,3774,0.379,3788,0.379,3825,0.364,3832,0.379,3837,0.364,3855,0.364,3866,0.364,3878,0.364,3903,0.364,3914,0.738,3915,0.738,3938,0.707,3946,0.738,3960,0.707,3963,1.993,3987,0.379,3990,0.379,4007,0.364,4014,0.379,4046,0.379,4231,0.364,4267,0.379,4276,1.398,4323,0.379,4381,0.379,4516,0.379,4526,0.738,4527,0.379,4528,0.379,4529,0.738,4575,0.379,4602,1.993,4625,0.379,4626,0.379,4638,0.364,4652,0.379,4653,0.379,4678,0.364,4921,0.379,4923,0.738,4924,0.379,4926,0.738,4980,0.379,5000,0.364,5008,0.778,5009,0.379,5010,0.4,5011,0.4,5012,0.379,5013,0.4,5014,0.778,5015,0.4,5016,0.379,5017,0.4,5018,0.4,5019,0.738,5020,0.738,5021,0.778,5022,1.136,5023,0.778,5024,0.4,5025,0.4,5026,0.778,5027,0.4,5028,0.4,5029,0.4,5030,0.4,5031,0.4,5032,0.4,5033,0.4,5034,0.4,5035,0.778,5037,0.778,5038,0.4,5039,0.4,5040,0.778,5041,0.4,5042,1.136,5044,2.104,5045,0.778,5046,0.4,5047,0.4,5049,0.778,5050,0.778,5051,1.136,5052,0.4,5053,0.778,5054,0.4,5055,0.4,5056,0.4,5058,0.4,5059,0.4,5061,0.4,5062,0.778,5063,0.778,5064,0.4,5065,0.4,5066,0.4,5067,1.136,5068,0.778,5069,0.4,5070,0.4,5071,0.4,5072,0.4,5073,0.4,5074,0.4,5075,0.4,5076,0.4,5077,0.4,5078,0.4,5079,0.4,5080,0.4,5081,0.4,5082,2.395,5083,0.4,5084,0.778,5085,0.4,5086,0.778,5087,0.778,5088,1.136,5089,0.778,5090,0.4,5091,0.778,5092,0.4,5093,0.379,5094,0.4,5095,0.4,5096,0.4,5097,0.4,5098,0.4,5099,0.4,5100,0.738,5101,0.4,5102,1.476,5103,0.4,5104,0.4,5105,0.4,5106,0.4,5107,0.4,5108,1.136,5109,0.4,5110,0.778,5111,1.136,5112,0.4,5113,1.798,5114,0.4,5115,1.476,5116,0.4,5117,0.4,5118,1.476,5119,1.136,5120,0.4,5121,0.4,5122,0.4,5123,0.778,5124,0.4,5125,0.4,5126,2.395,5127,0.4,5128,0.4,5129,0.778,5130,0.4,5131,0.4,5132,0.4,5133,2.104,5134,0.778,5135,0.4,5136,1.476,5137,1.476,5138,0.778,5139,0.4,5140,0.4,5141,0.778,5142,0.4,5143,0.4,5144,0.778,5145,0.778,5146,0.778,5147,0.778,5148,0.778,5149,0.4,5150,0.4,5151,0.4,5152,0.4,5153,0.4,5154,0.4,5155,0.778,5156,0.4,5157,0.778,5158,1.703,5159,0.4,5160,0.379,5161,0.379,5162,0.4,5163,0.4,5164,0.4,5165,0.4,5166,0.4,5167,0.4,5168,0.4,5169,0.4,5170,0.778,5171,1.136,5172,2.104,5173,2.104,5174,0.4,5176,0.4,5177,0.4,5178,0.778,5179,0.4,5180,0.4,5181,0.778,5182,1.798,5183,0.4,5185,0.4,5186,0.4,5187,0.4]],["component/5",[0,0.065,1,0.056,146,0.091]],["title/6-1",[46,37.025,154,8.632,156,42.146]],["name/6-1",[]],["text/6-1",[]],["component/6-1",[]],["title/6-2",[37,52.549,154,8.632,156,42.146]],["name/6-2",[]],["text/6-2",[]],["component/6-2",[]],["title/6-3",[46,37.025,89,45.754,163,31.191]],["name/6-3",[]],["text/6-3",[]],["component/6-3",[]],["title/6-4",[163,31.191,194,65.734,195,45.337]],["name/6-4",[]],["text/6-4",[]],["component/6-4",[]],["title/6-5",[46,41.666,197,51.019]],["name/6-5",[]],["text/6-5",[]],["component/6-5",[]],["title/6-6",[197,51.019,199,71.428]],["name/6-6",[]],["text/6-6",[]],["component/6-6",[]],["title/6-7",[46,33.315,154,7.767,156,37.923,201,46.606]],["name/6-7",[]],["text/6-7",[]],["component/6-7",[]],["title/6-8",[89,41.169,154,7.767,156,37.923,201,46.606]],["name/6-8",[]],["text/6-8",[]],["component/6-8",[]],["title/6-9",[46,30.28,154,7.059,156,34.468,163,25.509,201,42.361]],["name/6-9",[]],["text/6-9",[]],["component/6-9",[]],["title/6-10",[46,37.025,205,43.113,206,61.59]],["name/6-10",[]],["text/6-10",[]],["component/6-10",[]],["title/6-11",[154,7.059,163,25.509,205,35.259,208,35.826,209,39.784]],["name/6-11",[]],["text/6-11",[]],["component/6-11",[]],["title/6-12",[154,7.767,205,38.792,208,39.416,211,42.828]],["name/6-12",[]],["text/6-12",[]],["component/6-12",[]],["title/6-13",[10,21.931,205,43.113,206,61.59]],["name/6-13",[]],["text/6-13",[]],["component/6-13",[]],["title/6-14",[154,7.767,156,37.923,214,51.57,215,33.858]],["name/6-14",[]],["text/6-14",[]],["component/6-14",[]],["title/6-15",[154,8.632,156,42.146,217,52.549]],["name/6-15",[]],["text/6-15",[]],["component/6-15",[]],["title/6-16",[46,33.315,154,7.767,156,37.923,217,47.282]],["name/6-16",[]],["text/6-16",[]],["component/6-16",[]],["title/6-17",[13,39.178,217,52.549,220,57.314]],["name/6-17",[]],["text/6-17",[]],["component/6-17",[]],["title/6-18",[222,52.549,223,56.186,224,58.567]],["name/6-18",[]],["text/6-18",[]],["component/6-18",[]],["title/6-19",[53,35.252,154,7.767,156,37.923,217,47.282]],["name/6-19",[]],["text/6-19",[]],["component/6-19",[]],["title/6-20",[13,35.252,217,47.282,227,36.621,228,57.111]],["name/6-20",[]],["text/6-20",[]],["component/6-20",[]],["title/6-21",[230,65.908,231,71.428]],["name/6-21",[]],["text/6-21",[]],["component/6-21",[]],["title/6-22",[109,46.872,133,44.343,215,30.774,223,45.95,233,49.051]],["name/6-22",[]],["text/6-22",[]],["component/6-22",[]],["title/6-23",[154,8.632,156,42.146,235,48.647]],["name/6-23",[]],["text/6-23",[]],["component/6-23",[]],["title/6-24",[154,8.632,235,48.647,237,49.804]],["name/6-24",[]],["text/6-24",[]],["component/6-24",[]],["title/6-25",[154,8.632,235,48.647,239,53.354]],["name/6-25",[]],["text/6-25",[]],["component/6-25",[]],["title/6-26",[154,8.632,235,48.647,241,48.647]],["name/6-26",[]],["text/6-26",[]],["component/6-26",[]],["title/6-27",[154,8.632,156,42.146,243,49.211]],["name/6-27",[]],["text/6-27",[]],["component/6-27",[]],["title/6-28",[53,39.178,154,8.632,156,42.146]],["name/6-28",[]],["text/6-28",[]],["component/6-28",[]],["title/6-29",[13,39.178,246,51.093,247,65.734]],["name/6-29",[]],["text/6-29",[]],["component/6-29",[]],["title/6-30",[249,75.353]],["name/6-30",[]],["text/6-30",[]],["component/6-30",[]],["title/6-31",[195,58.331]],["name/6-31",[]],["text/6-31",[]],["component/6-31",[]],["title/6-32",[246,57.497,252,56.046]],["name/6-32",[]],["text/6-32",[]],["component/6-32",[]],["title/6-33",[154,9.713,254,56.046]],["name/6-33",[]],["text/6-33",[]],["component/6-33",[]],["title/6-34",[163,35.101,254,56.046]],["name/6-34",[]],["text/6-34",[]],["component/6-34",[]],["title/6-35",[60,49.707,195,51.019]],["name/6-35",[]],["text/6-35",[]],["component/6-35",[]],["title/6-36",[163,28.065,211,42.828,258,55.417,259,46.606]],["name/6-36",[]],["text/6-36",[]],["component/6-36",[]],["title/6-37",[261,59.978,262,57.314,263,58.567]],["name/6-37",[]],["text/6-37",[]],["component/6-37",[]],["title/6-38",[265,60.042,266,64.498]],["name/6-38",[]],["text/6-38",[]],["component/6-38",[]],["title/6-39",[268,73.973,269,73.973]],["name/6-39",[]],["text/6-39",[]],["component/6-39",[]],["title/6-40",[163,31.191,271,40.7,272,51.093]],["name/6-40",[]],["text/6-40",[]],["component/6-40",[]],["title/6-41",[10,21.931,141,51.093,274,46.638]],["name/6-41",[]],["text/6-41",[]],["component/6-41",[]],["title/6-42",[36,55.161,38,57.314,103,57.314]],["name/6-42",[]],["text/6-42",[]],["component/6-42",[]],["title/6-43",[271,45.801,277,51.489]],["name/6-43",[]],["text/6-43",[]],["component/6-43",[]],["title/6-44",[10,21.931,277,45.754,279,46.638]],["name/6-44",[]],["text/6-44",[]],["component/6-44",[]],["title/6-45",[154,7.767,178,45.376,254,44.812,279,41.964]],["name/6-45",[]],["text/6-45",[]],["component/6-45",[]],["title/6-46",[154,7.767,178,45.376,254,44.812,282,49.633]],["name/6-46",[]],["text/6-46",[]],["component/6-46",[]],["title/6-47",[279,41.964,284,50.555,285,44.279,286,38.204]],["name/6-47",[]],["text/6-47",[]],["component/6-47",[]],["title/6-48",[85,50.43,279,46.638,288,55.161]],["name/6-48",[]],["text/6-48",[]],["component/6-48",[]],["title/6-49",[277,51.489,290,51.489]],["name/6-49",[]],["text/6-49",[]],["component/6-49",[]],["title/6-50",[1,30.288,28,30.288,35,50.555,292,48.787]],["name/6-50",[]],["text/6-50",[]],["component/6-50",[]],["title/6-51",[1,27.529,271,33.285,277,37.419,292,44.343,294,36.748]],["name/6-51",[]],["text/6-51",[]],["component/6-51",[]],["title/6-52",[13,39.178,296,65.734,297,58.567]],["name/6-52",[]],["text/6-52",[]],["component/6-52",[]],["title/6-53",[22,18.191,163,25.509,271,33.285,299,33.51,300,53.758]],["name/6-53",[]],["text/6-53",[]],["component/6-53",[]],["title/6-54",[55,42.114,163,23.379,271,30.506,277,34.295,302,43.899,303,22.626]],["name/6-54",[]],["text/6-54",[]],["component/6-54",[]],["title/6-55",[55,42.114,163,23.379,272,38.296,277,34.295,302,43.899,305,30.305]],["name/6-55",[]],["text/6-55",[]],["component/6-55",[]],["title/6-56",[10,19.733,134,47.282,274,41.964,307,57.111]],["name/6-56",[]],["text/6-56",[]],["component/6-56",[]],["title/6-57",[271,45.801,277,51.489]],["name/6-57",[]],["text/6-57",[]],["component/6-57",[]],["title/6-58",[10,21.931,277,45.754,279,46.638]],["name/6-58",[]],["text/6-58",[]],["component/6-58",[]],["title/6-59",[154,7.767,178,45.376,254,44.812,279,41.964]],["name/6-59",[]],["text/6-59",[]],["component/6-59",[]],["title/6-60",[154,7.767,178,45.376,254,44.812,282,49.633]],["name/6-60",[]],["text/6-60",[]],["component/6-60",[]],["title/6-61",[279,41.964,284,50.555,285,44.279,286,38.204]],["name/6-61",[]],["text/6-61",[]],["component/6-61",[]],["title/6-62",[85,50.43,279,46.638,288,55.161]],["name/6-62",[]],["text/6-62",[]],["component/6-62",[]],["title/6-63",[277,51.489,290,51.489]],["name/6-63",[]],["text/6-63",[]],["component/6-63",[]],["title/6-64",[139,34.219,265,43.634,271,33.285,316,39.784,317,46.872]],["name/6-64",[]],["text/6-64",[]],["component/6-64",[]],["title/6-65",[10,21.931,141,51.093,274,46.638]],["name/6-65",[]],["text/6-65",[]],["component/6-65",[]],["title/6-66",[139,41.842,271,40.7,316,48.647]],["name/6-66",[]],["text/6-66",[]],["component/6-66",[]],["title/6-67",[139,41.842,290,45.754,316,48.647]],["name/6-67",[]],["text/6-67",[]],["component/6-67",[]],["title/6-68",[265,48.007,271,36.621,322,40.793,323,50.555]],["name/6-68",[]],["text/6-68",[]],["component/6-68",[]],["title/6-69",[265,53.354,271,40.7,322,45.337]],["name/6-69",[]],["text/6-69",[]],["component/6-69",[]],["title/6-70",[265,53.354,271,40.7,323,56.186]],["name/6-70",[]],["text/6-70",[]],["component/6-70",[]],["title/6-71",[10,24.68,327,69.31]],["name/6-71",[]],["text/6-71",[]],["component/6-71",[]],["title/6-72",[271,45.801,327,69.31]],["name/6-72",[]],["text/6-72",[]],["component/6-72",[]],["title/6-73",[290,45.754,322,45.337,323,56.186]],["name/6-73",[]],["text/6-73",[]],["component/6-73",[]],["title/6-74",[154,8.632,156,42.146,331,51.797]],["name/6-74",[]],["text/6-74",[]],["component/6-74",[]],["title/6-75",[46,33.315,139,37.649,154,7.767,303,27.161]],["name/6-75",[]],["text/6-75",[]],["component/6-75",[]],["title/6-76",[37,47.282,139,37.649,154,7.767,303,27.161]],["name/6-76",[]],["text/6-76",[]],["component/6-76",[]],["title/6-77",[154,7.059,205,35.259,303,24.687,335,35.259,336,28.667]],["name/6-77",[]],["text/6-77",[]],["component/6-77",[]],["title/6-78",[140,49.211,201,51.797,335,43.113]],["name/6-78",[]],["text/6-78",[]],["component/6-78",[]],["title/6-79",[139,37.649,154,7.767,195,40.793,303,27.161]],["name/6-79",[]],["text/6-79",[]],["component/6-79",[]],["title/6-80",[60,49.707,89,51.489]],["name/6-80",[]],["text/6-80",[]],["component/6-80",[]],["title/6-81",[341,29.381,342,37.719]],["name/6-81",[]],["text/6-81",[]],["component/6-81",[]],["title/6-82",[344,71.428,345,60.042]],["name/6-82",[]],["text/6-82",[]],["component/6-82",[]],["title/6-83",[139,37.649,154,7.767,303,27.161,347,45.972]],["name/6-83",[]],["text/6-83",[]],["component/6-83",[]],["title/6-84",[154,8.632,303,30.186,336,35.053]],["name/6-84",[]],["text/6-84",[]],["component/6-84",[]],["title/6-85",[154,9.713,350,63.229]],["name/6-85",[]],["text/6-85",[]],["component/6-85",[]],["title/6-86",[32,52.549,154,8.632,347,51.093]],["name/6-86",[]],["text/6-86",[]],["component/6-86",[]],["title/6-87",[53,35.252,139,37.649,154,7.767,303,27.161]],["name/6-87",[]],["text/6-87",[]],["component/6-87",[]],["title/6-88",[13,39.178,22,22.243,299,40.975]],["name/6-88",[]],["text/6-88",[]],["component/6-88",[]],["title/6-89",[10,21.931,22,22.243,299,40.975]],["name/6-89",[]],["text/6-89",[]],["component/6-89",[]],["title/6-90",[22,20.014,271,36.621,299,36.868,356,48.007]],["name/6-90",[]],["text/6-90",[]],["component/6-90",[]],["title/6-91",[22,20.014,271,36.621,299,36.868,341,23.492]],["name/6-91",[]],["text/6-91",[]],["component/6-91",[]],["title/6-92",[22,18.191,197,37.077,271,33.285,299,33.51,359,51.909]],["name/6-92",[]],["text/6-92",[]],["component/6-92",[]],["title/6-93",[22,22.243,290,45.754,299,40.975]],["name/6-93",[]],["text/6-93",[]],["component/6-93",[]],["title/6-94",[22,20.014,211,42.828,243,44.279,299,36.868]],["name/6-94",[]],["text/6-94",[]],["component/6-94",[]],["title/6-95",[139,41.842,316,48.647,342,33.517]],["name/6-95",[]],["text/6-95",[]],["component/6-95",[]],["title/6-96",[342,37.719,364,59.136]],["name/6-96",[]],["text/6-96",[]],["component/6-96",[]],["title/6-97",[342,37.719,366,46.428]],["name/6-97",[]],["text/6-97",[]],["component/6-97",[]],["title/6-98",[342,37.719,368,61.018]],["name/6-98",[]],["text/6-98",[]],["component/6-98",[]],["title/6-99",[290,45.754,316,48.647,342,33.517]],["name/6-99",[]],["text/6-99",[]],["component/6-99",[]],["title/6-100",[342,33.517,371,57.314,372,48.11]],["name/6-100",[]],["text/6-100",[]],["component/6-100",[]],["title/6-101",[16,49.804,215,37.629,286,42.459]],["name/6-101",[]],["text/6-101",[]],["component/6-101",[]],["title/6-102",[215,37.629,342,33.517,372,48.11]],["name/6-102",[]],["text/6-102",[]],["component/6-102",[]],["title/6-103",[3,43.113,342,33.517,376,56.186]],["name/6-103",[]],["text/6-103",[]],["component/6-103",[]],["title/6-104",[378,73.741]],["name/6-104",[]],["text/6-104",[]],["component/6-104",[]],["title/6-105",[154,6.47,259,38.824,316,36.463,331,38.824,342,25.123,380,42.114]],["name/6-105",[]],["text/6-105",[]],["component/6-105",[]],["title/6-106",[331,58.29,342,37.719]],["name/6-106",[]],["text/6-106",[]],["component/6-106",[]],["title/6-107",[195,45.337,331,51.797,342,33.517]],["name/6-107",[]],["text/6-107",[]],["component/6-107",[]],["title/6-108",[10,19.733,331,46.606,341,23.492,384,32.15]],["name/6-108",[]],["text/6-108",[]],["component/6-108",[]],["title/6-109",[13,39.178,322,45.337,386,49.211]],["name/6-109",[]],["text/6-109",[]],["component/6-109",[]],["title/6-110",[10,21.931,322,45.337,386,49.211]],["name/6-110",[]],["text/6-110",[]],["component/6-110",[]],["title/6-111",[290,45.754,322,45.337,386,49.211]],["name/6-111",[]],["text/6-111",[]],["component/6-111",[]],["title/6-112",[53,35.252,154,7.767,171,43.772,390,31.689]],["name/6-112",[]],["text/6-112",[]],["component/6-112",[]],["title/6-113",[10,19.733,22,20.014,299,36.868,390,31.689]],["name/6-113",[]],["text/6-113",[]],["component/6-113",[]],["title/6-114",[22,20.014,271,36.621,299,36.868,390,31.689]],["name/6-114",[]],["text/6-114",[]],["component/6-114",[]],["title/6-115",[22,20.014,290,41.169,299,36.868,390,31.689]],["name/6-115",[]],["text/6-115",[]],["component/6-115",[]],["title/6-116",[53,32.041,154,7.059,174,31.661,303,24.687,336,28.667]],["name/6-116",[]],["text/6-116",[]],["component/6-116",[]],["title/6-117",[10,15.171,22,15.387,154,5.971,174,26.782,299,28.346,303,20.883,336,24.249]],["name/6-117",[]],["text/6-117",[]],["component/6-117",[]],["title/6-118",[22,15.387,154,5.971,174,26.782,271,28.156,299,28.346,303,20.883,336,24.249]],["name/6-118",[]],["text/6-118",[]],["component/6-118",[]],["title/6-119",[13,39.178,285,49.211,336,35.053]],["name/6-119",[]],["text/6-119",[]],["component/6-119",[]],["title/6-120",[22,15.387,154,5.971,174,26.782,290,31.652,299,28.346,303,20.883,336,24.249]],["name/6-120",[]],["text/6-120",[]],["component/6-120",[]],["title/6-121",[13,39.178,154,8.632,400,58.567]],["name/6-121",[]],["text/6-121",[]],["component/6-121",[]],["title/6-122",[46,33.315,113,39.099,154,7.767,303,27.161]],["name/6-122",[]],["text/6-122",[]],["component/6-122",[]],["title/6-123",[28,30.288,37,47.282,113,39.099,303,27.161]],["name/6-123",[]],["text/6-123",[]],["component/6-123",[]],["title/6-124",[28,30.288,67,38.494,195,40.793,404,44.279]],["name/6-124",[]],["text/6-124",[]],["component/6-124",[]],["title/6-125",[28,27.529,67,34.987,195,37.077,404,40.245,406,51.909]],["name/6-125",[]],["text/6-125",[]],["component/6-125",[]],["title/6-126",[28,27.529,67,34.987,195,37.077,404,40.245,408,49.051]],["name/6-126",[]],["text/6-126",[]],["component/6-126",[]],["title/6-127",[43,35.688,67,38.494,154,7.767,195,40.793]],["name/6-127",[]],["text/6-127",[]],["component/6-127",[]],["title/6-128",[28,30.288,67,38.494,404,44.279,411,31.689]],["name/6-128",[]],["text/6-128",[]],["component/6-128",[]],["title/6-129",[60,44.17,67,42.781,411,35.219]],["name/6-129",[]],["text/6-129",[]],["component/6-129",[]],["title/6-130",[67,42.781,411,35.219,414,51.797]],["name/6-130",[]],["text/6-130",[]],["component/6-130",[]],["title/6-131",[28,27.529,67,34.987,274,38.142,404,40.245,416,40.73]],["name/6-131",[]],["text/6-131",[]],["component/6-131",[]],["title/6-132",[60,44.17,411,35.219,416,49.804]],["name/6-132",[]],["text/6-132",[]],["component/6-132",[]],["title/6-133",[60,44.17,197,45.337,416,49.804]],["name/6-133",[]],["text/6-133",[]],["component/6-133",[]],["title/6-134",[45,47.108,416,49.804,420,39.913]],["name/6-134",[]],["text/6-134",[]],["component/6-134",[]],["title/6-135",[60,44.17,416,49.804,422,53.354]],["name/6-135",[]],["text/6-135",[]],["component/6-135",[]],["title/6-136",[27,46.188,127,42.781,274,46.638]],["name/6-136",[]],["text/6-136",[]],["component/6-136",[]],["title/6-137",[100,56.186,274,46.638,341,26.109]],["name/6-137",[]],["text/6-137",[]],["component/6-137",[]],["title/6-138",[127,42.781,182,34.107,274,46.638]],["name/6-138",[]],["text/6-138",[]],["component/6-138",[]],["title/6-139",[274,46.638,341,26.109,427,58.567]],["name/6-139",[]],["text/6-139",[]],["component/6-139",[]],["title/6-140",[9,42.114,10,16.438,215,28.205,366,30.923,411,26.398,416,37.33]],["name/6-140",[]],["text/6-140",[]],["component/6-140",[]],["title/6-141",[11,42.387,12,42.387,28,30.288,58,43.772]],["name/6-141",[]],["text/6-141",[]],["component/6-141",[]],["title/6-142",[25,37.838,58,48.647,303,30.186]],["name/6-142",[]],["text/6-142",[]],["component/6-142",[]],["title/6-143",[58,48.647,322,45.337,432,58.567]],["name/6-143",[]],["text/6-143",[]],["component/6-143",[]],["title/6-144",[25,37.838,215,37.629,316,48.647]],["name/6-144",[]],["text/6-144",[]],["component/6-144",[]],["title/6-145",[45,38.526,356,43.634,364,42.976,420,32.642,435,47.897]],["name/6-145",[]],["text/6-145",[]],["component/6-145",[]],["title/6-146",[45,47.108,420,39.913,437,47.598]],["name/6-146",[]],["text/6-146",[]],["component/6-146",[]],["title/6-147",[45,47.108,420,39.913,439,57.314]],["name/6-147",[]],["text/6-147",[]],["component/6-147",[]],["title/6-148",[22,20.014,45,42.387,141,45.972,420,35.913]],["name/6-148",[]],["text/6-148",[]],["component/6-148",[]],["title/6-149",[366,41.256,442,57.314,443,57.314]],["name/6-149",[]],["text/6-149",[]],["component/6-149",[]],["title/6-150",[125,56.751,445,67.495]],["name/6-150",[]],["text/6-150",[]],["component/6-150",[]],["title/6-151",[22,25.031,299,46.111]],["name/6-151",[]],["text/6-151",[]],["component/6-151",[]],["title/6-152",[49,51.797,113,43.454,439,57.314]],["name/6-152",[]],["text/6-152",[]],["component/6-152",[]],["title/6-153",[11,38.526,22,18.191,49,42.361,113,35.538,299,33.51]],["name/6-153",[]],["text/6-153",[]],["component/6-153",[]],["title/6-154",[49,42.361,113,35.538,342,27.411,368,44.343,450,41.785]],["name/6-154",[]],["text/6-154",[]],["component/6-154",[]],["title/6-155",[113,43.454,246,51.093,356,53.354]],["name/6-155",[]],["text/6-155",[]],["component/6-155",[]],["title/6-156",[60,44.17,67,42.781,246,51.093]],["name/6-156",[]],["text/6-156",[]],["component/6-156",[]],["title/6-157",[67,42.781,246,51.093,414,51.797]],["name/6-157",[]],["text/6-157",[]],["component/6-157",[]],["title/6-158",[59,57.497,215,42.346]],["name/6-158",[]],["text/6-158",[]],["component/6-158",[]],["title/6-159",[46,37.025,215,37.629,335,43.113]],["name/6-159",[]],["text/6-159",[]],["component/6-159",[]],["title/6-160",[89,45.754,215,37.629,335,43.113]],["name/6-160",[]],["text/6-160",[]],["component/6-160",[]],["title/6-161",[215,33.858,335,38.792,458,52.698,459,53.967]],["name/6-161",[]],["text/6-161",[]],["component/6-161",[]],["title/6-162",[215,37.629,461,55.161,462,51.093]],["name/6-162",[]],["text/6-162",[]],["component/6-162",[]],["title/6-163",[154,8.632,215,37.629,462,51.093]],["name/6-163",[]],["text/6-163",[]],["component/6-163",[]],["title/6-164",[215,33.858,335,38.792,461,49.633,462,45.972]],["name/6-164",[]],["text/6-164",[]],["component/6-164",[]],["title/6-165",[154,7.767,215,33.858,335,38.792,462,45.972]],["name/6-165",[]],["text/6-165",[]],["component/6-165",[]],["title/6-166",[215,33.858,335,38.792,459,53.967,467,61.694]],["name/6-166",[]],["text/6-166",[]],["component/6-166",[]],["title/6-167",[65,44.279,215,33.858,335,38.792,459,53.967]],["name/6-167",[]],["text/6-167",[]],["component/6-167",[]],["title/6-168",[60,44.17,215,37.629,335,43.113]],["name/6-168",[]],["text/6-168",[]],["component/6-168",[]],["title/6-169",[60,44.17,211,47.598,335,43.113]],["name/6-169",[]],["text/6-169",[]],["component/6-169",[]],["title/6-170",[10,21.931,215,37.629,335,43.113]],["name/6-170",[]],["text/6-170",[]],["component/6-170",[]],["title/6-171",[53,35.252,113,39.099,154,7.767,303,27.161]],["name/6-171",[]],["text/6-171",[]],["component/6-171",[]],["title/6-172",[1,27.529,26,32.851,53,32.041,154,7.059,474,31.849]],["name/6-172",[]],["text/6-172",[]],["component/6-172",[]],["title/6-173",[342,37.719,366,46.428]],["name/6-173",[]],["text/6-173",[]],["component/6-173",[]],["title/6-174",[25,30.944,286,34.724,303,24.687,474,31.849,477,40.245]],["name/6-174",[]],["text/6-174",[]],["component/6-174",[]],["title/6-175",[286,38.204,322,40.793,474,35.041,477,44.279]],["name/6-175",[]],["text/6-175",[]],["component/6-175",[]],["title/6-176",[422,68.646]],["name/6-176",[]],["text/6-176",[]],["component/6-176",[]],["title/6-177",[1,27.529,26,32.851,53,32.041,154,7.059,481,24.344]],["name/6-177",[]],["text/6-177",[]],["component/6-177",[]],["title/6-178",[235,48.647,342,33.517,366,41.256]],["name/6-178",[]],["text/6-178",[]],["component/6-178",[]],["title/6-179",[25,30.944,286,34.724,303,24.687,477,40.245,481,24.344]],["name/6-179",[]],["text/6-179",[]],["component/6-179",[]],["title/6-180",[286,34.724,477,40.245,481,34.314,485,45.95]],["name/6-180",[]],["text/6-180",[]],["component/6-180",[]],["title/6-181",[104,32.928,286,29.373,322,31.363,477,34.043,481,20.592,487,40.516,488,40.516]],["name/6-181",[]],["text/6-181",[]],["component/6-181",[]],["title/6-182",[215,33.858,286,38.204,372,43.289,477,44.279]],["name/6-182",[]],["text/6-182",[]],["component/6-182",[]],["title/6-183",[422,68.646]],["name/6-183",[]],["text/6-183",[]],["component/6-183",[]],["title/6-184",[485,63.229,492,64.498]],["name/6-184",[]],["text/6-184",[]],["component/6-184",[]],["title/6",[11,38.526,12,38.526,46,30.28,154,7.059,189,50.369]],["name/6",[5189,0.152]],["text/6",[0,2.467,1,3.227,2,0.508,3,4.604,4,0.35,6,0.053,7,2.539,8,0.054,9,0.463,10,2.103,11,2.754,12,2.192,13,4.711,14,2.911,15,1.842,16,1.363,17,0.149,18,0.472,19,0.162,20,0.342,21,0.153,22,2.694,23,1.709,24,1.779,25,3.678,26,2.513,27,4.279,28,3.012,29,2.748,30,0.684,31,4.763,32,0.556,35,1.009,36,1.614,37,0.474,38,0.906,39,0.053,42,0.489,43,1.576,44,0.952,45,1.923,46,0.334,47,0.404,48,1.371,49,2.984,50,0.153,51,2.984,52,0.668,53,1.194,54,0.241,55,0.847,56,1.272,57,0.948,58,1.933,59,0.845,60,3.39,61,0.288,62,1.565,63,1.295,64,0.105,65,4.289,66,0.228,67,3.337,69,0.208,70,0.215,71,0.053,72,0.619,74,1.009,75,0.1,76,0.051,77,1.806,78,0.565,79,0.156,80,1.42,85,4.13,89,3.666,90,0.288,92,0.056,93,0.054,94,1.367,96,1.127,97,0.302,98,0.737,99,4.612,100,1.127,102,0.302,103,0.606,104,6.663,108,2.471,109,2.807,110,3.745,111,0.342,112,4.109,113,1.956,114,0.574,115,0.108,117,0.112,118,1.345,119,0.102,121,1.565,122,0.167,124,0.215,125,4.435,126,0.322,127,2.776,132,0.235,133,1.379,134,1.504,135,2.781,139,2.667,140,0.953,141,4.228,142,0.288,143,2.401,144,3.58,145,3.568,148,1.42,150,0.969,151,1.474,152,1.429,153,1.252,154,1.255,155,0.929,156,3.865,157,1.713,158,0.482,159,1.049,160,0.31,161,0.203,162,0.409,163,3.53,164,0.373,165,0.1,166,0.723,167,0.952,168,0.228,169,0.222,170,0.194,171,1.542,172,1.641,174,0.498,175,0.517,176,0.053,177,0.053,178,2.112,179,0.203,182,2.963,184,0.541,185,1.755,186,0.399,189,0.053,194,1.715,195,1.437,197,1.923,199,0.267,201,3.178,205,0.865,206,0.053,208,1.493,209,0.477,211,2.532,214,3.697,215,2.555,217,1.57,220,0.694,223,2.989,224,0.389,227,0.069,228,0.473,230,0.797,231,2.452,233,0.634,235,2.61,237,1.609,239,2.482,241,2.14,243,2.061,246,3.668,247,0.331,249,1.927,252,2.581,254,2.216,258,0.556,259,2.305,261,0.494,262,1.641,263,2.484,265,3.316,266,2.695,268,0.056,269,0.056,271,2.763,272,2.551,274,4.632,277,3.408,279,3.25,282,3.106,284,1.009,285,2.41,286,2.017,288,3.745,290,0.95,292,2.603,294,2.328,296,0.112,297,4.164,299,3.403,300,0.489,302,1.052,303,2.146,305,0.428,307,0.473,316,3.733,317,1.07,322,2.669,323,0.929,327,0.31,331,1.111,335,0.713,336,1.767,341,1.838,342,3.265,344,0.267,345,0.726,347,3.579,350,0.847,356,2.149,359,0.162,364,2.03,366,5.157,368,1.012,371,1.747,372,6.163,376,3.47,378,1.345,380,0.888,384,1.75,386,2.113,390,1.808,400,0.968,404,1.347,406,1.049,408,0.399,411,3.212,414,1.384,416,1.457,420,2.031,422,2.178,427,1.175,432,1.01,435,0.883,437,0.955,439,1.15,442,0.517,443,1.306,445,0.153,450,3.668,458,1.256,461,0.14,462,0.618,474,1.041,477,1.021,481,1.583,485,2.557,487,0.926,488,1.216,492,1.953,501,1.439,503,1.948,508,2.284,510,0.054,512,0.952,514,0.863,519,0.805,521,3.965,523,0.751,526,1.544,527,0.059,528,0.246,530,0.054,532,1.292,535,2.429,536,0.046,542,0.818,548,0.029,552,0.263,555,0.683,558,0.572,559,0.354,571,0.086,573,0.482,586,0.104,603,0.149,611,1.892,612,0.838,620,0.046,635,1.383,641,1.355,642,1.713,644,0.726,645,0.483,654,0.606,656,1.068,669,0.091,670,0.127,684,0.498,689,0.307,697,0.447,704,0.173,708,0.656,719,0.556,732,0.974,733,0.322,741,0.098,747,0.726,750,0.19,753,0.194,757,0.436,760,1.392,766,1.602,779,0.778,780,0.447,784,0.277,787,0.36,791,0.108,792,2.222,796,0.054,803,0.606,805,0.606,808,0.14,810,0.795,811,0.048,813,0.19,829,0.203,854,1.286,855,0.04,860,1.605,865,0.054,866,1.953,868,3.023,880,1.055,910,0.236,913,3.152,922,0.648,925,2.013,927,0.215,950,0.619,952,0.102,983,0.427,1013,0.246,1022,0.127,1023,0.108,1025,0.086,1054,0.574,1088,0.05,1091,0.463,1094,0.246,1113,0.753,1128,0.102,1129,2.398,1131,0.459,1134,0.294,1142,0.362,1144,0.241,1156,0.454,1160,5.461,1161,0.436,1162,0.319,1164,1.392,1174,2.14,1179,0.162,1186,0.562,1203,0.053,1211,1.502,1213,0.367,1226,0.05,1247,0.056,1250,0.288,1251,0.105,1252,0.105,1254,0.277,1256,0.604,1257,0.401,1258,0.252,1259,1.892,1260,0.056,1261,2.431,1262,0.222,1263,0.062,1264,0.117,1265,3.473,1266,0.302,1267,1.295,1268,0.062,1269,0.062,1270,0.459,1271,0.062,1272,0.222,1273,0.062,1274,0.222,1275,0.062,1276,0.162,1277,3.785,1278,0.84,1279,0.062,1280,0.771,1281,0.259,1282,0.062,1283,0.062,1284,1.087,1285,0.062,1286,0.31,1287,0.062,1288,1.245,1289,0.112,1290,0.507,1291,0.175,1292,0.184,1293,2.636,1294,1.084,1295,0.619,1296,0.222,1297,2.35,1298,0.059,1299,0.222,1300,2.447,1301,0.184,1302,0.112,1303,0.059,1304,0.157,1305,0.72,1306,2.966,1307,0.331,1308,1.445,1309,3.556,1310,0.062,1311,1.351,1312,2.246,1313,0.184,1314,0.062,1315,0.056,1316,0.726,1317,1.413,1318,0.184,1319,0.473,1320,0.456,1321,2.515,1322,1.256,1323,0.699,1324,0.108,1325,0.35,1326,0.059,1327,0.245,1328,0.622,1329,0.473,1330,1.077,1331,0.838,1332,1.095,1333,1.829,1334,0.35,1335,0.252,1336,0.056,1337,3.259,1338,0.112,1339,0.123,1340,0.108,1341,0.059,1342,0.062,1343,0.539,1344,2.079,1345,1.565,1346,0.232,1347,0.797,1348,3.481,1349,1.802,1350,0.259,1351,0.816,1352,0.167,1353,0.437,1354,0.473,1355,0.062,1356,0.112,1357,3.134,1358,0.319,1359,0.905,1360,0.059,1361,0.753,1362,3.007,1363,0.588,1364,0.304,1365,0.117,1366,0.252,1367,0.664,1368,1.915,1369,0.884,1370,0.105,1371,1.362,1372,0.056,1373,0.184,1374,1.445,1375,0.384,1376,0.123,1377,0.437,1378,0.556,1379,0.117,1380,0.622,1381,0.059,1382,0.409,1383,0.117,1384,0.222,1385,1.407,1386,0.105,1387,0.051,1388,0.054,1389,0.062,1390,0.473,1391,0.588,1392,0.062,1393,0.108,1394,0.36,1395,1.106,1396,0.267,1397,0.059,1398,0.863,1399,0.062,1400,0.523,1401,0.056,1402,0.112,1403,0.845,1404,0.911,1405,0.267,1406,2.165,1407,0.059,1408,0.054,1409,0.792,1410,0.059,1411,1.052,1412,0.112,1413,0.331,1414,0.604,1415,0.588,1416,0.259,1417,0.062,1418,0.456,1419,0.31,1420,1.15,1421,0.123,1422,0.726,1423,0.507,1424,2.198,1425,0.883,1426,3.177,1427,0.911,1428,0.117,1429,0.162,1430,0.31,1431,0.364,1432,0.436,1433,0.319,1434,0.459,1435,0.112,1436,0.062,1437,0.059,1438,0.062,1439,0.245,1440,0.289,1441,0.822,1442,1.087,1443,0.894,1444,0.289,1445,0.062,1446,0.059,1447,0.123,1448,1.573,1449,0.062,1450,0.507,1451,0.059,1452,0.062,1453,1.451,1454,2.803,1455,0.289,1456,0.062,1457,0.232,1458,0.245,1459,0.245,1460,0.245,1461,0.157,1462,0.123,1463,0.622,1464,0.062,1465,0.371,1466,0.062,1467,0.062,1468,0.062,1469,0.056,1470,0.062,1471,0.062,1472,0.596,1473,0.765,1474,0.796,1475,0.481,1476,0.304,1477,1.327,1478,0.304,1479,0.117,1480,0.062,1481,0.062,1482,0.123,1483,0.062,1484,0.054,1485,0.062,1486,0.845,1487,0.671,1488,0.215,1489,1.679,1490,0.059,1491,0.517,1492,0.31,1493,1.295,1494,0.304,1495,0.062,1496,0.822,1497,0.232,1498,1.12,1499,1.656,1500,1.306,1501,0.905,1502,0.422,1503,0.252,1504,0.062,1505,0.371,1506,1.286,1507,0.105,1508,0.409,1509,0.651,1510,0.062,1511,0.948,1512,0.573,1513,0.289,1514,0.948,1515,0.062,1516,0.184,1517,0.86,1518,1.245,1519,0.162,1520,0.062,1521,0.059,1522,0.062,1523,0.184,1524,0.481,1525,0.259,1526,0.112,1527,0.542,1528,0.304,1529,0.245,1530,0.123,1531,0.162,1532,0.062,1533,0.062,1534,0.184,1535,0.123,1536,0.059,1537,0.062,1538,2.625,1539,0.384,1540,0.459,1541,0.423,1542,2.576,1543,0.816,1544,3.468,1545,0.259,1546,0.112,1547,0.364,1548,0.215,1549,0.112,1550,0.277,1551,0.062,1552,0.062,1553,0.059,1554,0.062,1555,0.062,1556,0.112,1557,0.289,1558,0.062,1559,0.062,1560,0.423,1561,0.056,1562,0.062,1563,0.926,1564,0.422,1565,0.062,1566,0.252,1567,0.184,1568,0.117,1569,0.507,1570,0.054,1571,0.494,1572,0.062,1573,0.232,1574,0.331,1575,0.304,1576,0.123,1577,0.31,1578,0.695,1579,0.797,1580,0.062,1581,0.123,1582,0.184,1583,0.83,1584,0.123,1585,0.062,1586,0.062,1587,0.062,1588,0.123,1589,0.062,1590,0.289,1591,0.062,1592,0.184,1593,0.72,1594,0.184,1595,0.062,1596,0.277,1597,0.056,1598,0.507,1599,0.929,1600,0.699,1601,0.726,1602,0.511,1603,0.905,1604,0.319,1605,0.389,1606,0.123,1607,0.167,1608,0.36,1609,0.117,1610,0.345,1611,0.695,1612,0.745,1613,0.059,1614,0.573,1615,0.175,1616,0.523,1617,1.362,1618,0.31,1619,0.112,1620,0.459,1621,0.108,1622,0.053,1623,0.215,1624,0.423,1625,0.162,1626,0.489,1627,0.556,1628,0.384,1629,0.062,1630,0.062,1631,0.232,1632,0.422,1633,0.277,1634,1.274,1635,0.123,1636,0.565,1637,0.062,1638,0.175,1639,0.062,1640,0.062,1641,0.062,1642,0.062,1643,0.062,1644,0.062,1645,0.062,1646,0.062,1647,0.062,1648,0.062,1649,0.232,1650,0.062,1651,0.523,1652,0.123,1653,0.245,1654,0.304,1655,0.167,1656,0.112,1657,0.123,1658,0.123,1659,2.131,1660,0.215,1661,0.215,1662,0.246,1663,0.059,1664,0.123,1665,0.184,1666,0.319,1667,0.062,1668,0.123,1669,0.245,1670,0.523,1671,0.062,1672,0.31,1673,0.157,1674,0.162,1675,0.507,1676,0.117,1677,0.059,1678,0.123,1679,2.921,1680,0.319,1681,0.267,1682,2.048,1683,0.184,1684,0.062,1685,0.062,1686,0.245,1687,0.062,1688,0.232,1689,0.062,1690,0.059,1691,0.062,1692,0.112,1693,0.062,1694,0.062,1695,0.062,1696,0.062,1697,0.062,1698,0.062,1699,0.277,1700,0.162,1701,0.062,1702,0.062,1703,0.062,1704,0.062,1705,0.062,1706,0.062,1707,0.062,1708,0.117,1709,0.062,1710,0.056,1711,0.056,1712,0.062,1713,0.062,1714,4.159,1715,0.401,1716,0.259,1717,0.345,1718,0.062,1719,0.401,1720,0.123,1721,0.123,1722,1.035,1723,1.286,1724,0.215,1725,1.413,1726,1.232,1727,0.117,1728,0.604,1729,0.184,1730,0.222,1731,0.105,1732,0.108,1733,0.059,1734,0.167,1735,0.053,1736,0.117,1737,0.112,1738,0.059,1739,0.105,1740,0.059,1741,0.541,1742,0.062,1743,0.062,1744,0.31,1745,0.222,1746,0.245,1747,0.565,1748,0.481,1749,0.175,1750,0.108,1751,0.062,1752,0.062,1753,0.289,1754,0.222,1755,0.062,1756,0.062,1757,0.123,1758,0.062,1759,0.062,1760,0.167,1761,0.884,1762,0.062,1763,0.062,1764,0.222,1765,0.108,1766,0.112,1767,0.167,1768,0.062,1769,0.117,1770,0.062,1771,0.062,1772,0.062,1773,0.062,1774,0.117,1775,0.062,1776,0.062,1777,0.062,1778,0.062,1779,0.062,1780,0.062,1781,0.062,1782,0.062,1783,0.062,1784,0.245,1785,0.289,1786,0.184,1787,0.422,1788,0.123,1789,0.184,1790,0.123,1791,0.123,1792,0.157,1793,0.062,1794,0.056,1795,0.184,1796,0.123,1797,0.059,1798,0.062,1799,0.059,1800,0.123,1801,0.062,1802,0.062,1803,0.384,1804,0.123,1805,0.184,1806,0.123,1807,0.123,1808,1.409,1809,0.062,1810,0.062,1811,0.062,1812,0.062,1813,0.062,1814,0.062,1815,0.062,1816,0.062,1817,0.062,1818,0.062,1819,0.062,1820,0.062,1821,0.054,1822,0.123,1823,0.123,1824,0.184,1825,0.651,1826,0.123,1827,0.345,1828,0.215,1829,0.062,1830,0.232,1831,0.565,1832,0.529,1833,0.059,1834,0.056,1835,0.123,1836,0.304,1837,0.123,1838,0.112,1839,0.062,1840,0.062,1841,0.062,1842,0.062,1843,0.062,1844,0.062,1845,0.062,1846,0.062,1847,0.062,1848,0.062,1849,0.062,1850,0.062,1851,0.062,1852,0.267,1853,0.062,1854,0.123,1855,0.157,1856,0.123,1857,0.062,1858,0.062,1859,0.175,1860,0.062,1861,0.319,1862,0.059,1863,0.062,1864,0.059,1865,0.062,1866,0.117,1867,0.062,1868,0.062,1869,0.123,1870,0.175,1871,0.062,1872,0.184,1873,0.059,1874,0.123,1875,0.423,1876,0.062,1877,1.28,1878,0.062,1879,0.062,1880,0.123,1881,0.232,1882,0.123,1883,0.059,1884,0.277,1885,0.542,1886,0.062,1887,0.062,1888,0.062,1889,0.059,1890,0.304,1891,0.062,1892,0.062,1893,0.062,1894,0.167,1895,0.062,1896,0.123,1897,0.062,1898,0.123,1899,0.059,1900,0.289,1901,0.062,1902,0.062,1903,1.452,1904,0.259,1905,0.162,1906,0.062,1907,0.062,1908,0.062,1909,0.062,1910,0.062,1911,0.054,1912,0.054,1913,0.062,1914,0.123,1915,0.123,1916,0.062,1917,0.277,1918,0.123,1919,0.062,1920,0.123,1921,0.123,1922,0.863,1923,0.062,1924,0.481,1925,0.123,1926,0.245,1927,0.184,1928,0.653,1929,0.123,1930,0.062,1931,0.123,1932,0.062,1933,0.059,1934,0.062,1935,0.062,1936,0.062,1937,0.117,1938,0.062,1939,0.062,1940,0.062,1941,0.062,1942,0.062,1943,0.062,1944,0.245,1945,0.059,1946,0.123,1947,0.123,1948,0.184,1949,0.059,1950,0.062,1951,0.062,1952,0.062,1953,0.117,1954,0.062,1955,0.117,1956,0.062,1957,0.062,1958,0.062,1959,0.062,1960,0.062,1961,0.062,1962,0.342,1963,0.059,1964,0.062,1965,0.277,1966,0.123,1967,0.123,1968,0.184,1969,0.245,1970,0.123,1971,0.123,1972,0.259,1973,0.062,1974,0.062,1975,0.319,1976,0.062,1977,0.059,1978,0.112,1979,0.062,1980,0.062,1981,0.062,1982,0.062,1983,0.062,1984,0.062,1985,0.215,1986,0.112,1987,0.062,1988,0.062,1989,0.059,1990,0.184,1991,0.304,1992,0.123,1993,0.167,1994,0.671,1995,0.062,1996,0.062,1997,0.062,1998,0.062,1999,0.062,2000,0.062,2001,0.123,2002,0.062,2003,0.059,2004,0.232,2005,0.215,2006,0.059,2007,0.112,2008,0.062,2009,0.062,2010,0.062,2011,0.117,2012,0.062,2013,0.184,2014,0.062,2015,0.062,2016,0.062,2017,0.123,2018,0.062,2019,0.123,2020,0.062,2021,0.245,2022,0.062,2023,0.062,2024,0.203,2025,0.062,2026,0.059,2027,0.062,2028,0.056,2029,0.059,2030,1.882,2031,0.062,2032,0.123,2033,0.059,2034,0.059,2035,0.062,2036,0.123,2037,0.062,2038,0.062,2039,0.062,2040,0.062,2041,0.062,2042,0.215,2043,0.062,2044,0.062,2045,1.14,2046,0.423,2047,1.144,2048,0.364,2049,0.245,2050,1.454,2051,0.36,2052,0.056,2053,0.062,2054,0.123,2055,0.059,2056,0.277,2057,0.304,2058,0.232,2059,0.709,2060,0.062,2061,0.507,2062,0.062,2063,0.123,2064,0.68,2065,0.123,2066,0.062,2067,0.062,2068,0.267,2069,0.062,2070,0.062,2071,0.167,2072,0.062,2073,0.053,2074,0.062,2075,0.062,2076,0.123,2077,0.062,2078,0.884,2079,0.062,2080,0.062,2081,0.062,2082,0.062,2083,0.215,2084,0.059,2085,0.184,2086,0.062,2087,0.062,2088,0.062,2089,0.062,2090,0.062,2091,0.059,2092,0.059,2093,0.473,2094,0.304,2095,0.062,2096,0.062,2097,0.062,2098,0.123,2099,0.062,2100,0.062,2101,0.056,2102,0.304,2103,0.062,2104,0.062,2105,0.31,2106,0.059,2107,0.062,2108,0.123,2109,0.245,2110,0.573,2111,0.184,2112,0.208,2113,0.123,2114,0.565,2115,0.123,2116,0.123,2117,0.167,2118,0.062,2119,0.304,2120,0.117,2121,0.062,2122,0.277,2123,0.709,2124,1.185,2125,0.184,2126,0.304,2127,0.364,2128,0.184,2129,0.184,2130,0.062,2131,0.062,2132,0.232,2133,0.062,2134,1.245,2135,1.517,2136,0.672,2137,0.062,2138,0.062,2139,0.062,2140,0.062,2141,0.062,2142,0.056,2143,0.062,2144,0.062,2145,0.062,2146,0.062,2147,0.123,2148,0.184,2149,0.062,2150,0.245,2151,0.062,2152,0.123,2153,0.123,2154,0.123,2155,0.056,2156,0.31,2157,0.062,2158,0.573,2159,0.184,2160,0.123,2161,0.184,2162,0.112,2163,0.184,2164,0.062,2165,0.062,2166,0.062,2167,0.062,2168,0.062,2169,0.331,2170,0.364,2171,0.184,2172,0.062,2173,0.062,2174,0.123,2175,0.062,2176,0.062,2177,0.062,2178,0.245,2179,0.062,2180,0.062,2181,0.062,2182,0.062,2183,0.062,2184,0.062,2185,0.123,2186,0.062,2187,0.245,2188,0.245,2189,0.062,2190,0.062,2191,0.123,2192,0.062,2193,0.062,2194,0.062,2195,0.062,2196,0.062,2197,0.062,2198,0.062,2199,0.059,2200,0.884,2201,0.059,2202,0.184,2203,0.062,2204,0.062,2205,0.289,2206,0.123,2207,0.062,2208,0.062,2209,0.062,2210,0.062,2211,0.062,2212,0.423,2213,0.062,2214,0.062,2215,0.062,2216,0.062,2217,0.062,2218,0.062,2219,0.123,2220,0.054,2221,0.112,2222,0.062,2223,0.062,2224,0.062,2225,0.117,2226,0.062,2227,0.062,2228,0.062,2229,0.062,2230,0.062,2231,0.062,2232,0.062,2233,0.175,2234,0.277,2235,0.062,2236,0.062,2237,0.117,2238,0.062,2239,0.056,2240,0.062,2241,0.062,2242,0.062,2243,0.112,2244,0.062,2245,0.059,2246,0.123,2247,0.062,2248,0.062,2249,0.062,2250,0.245,2251,0.184,2252,0.056,2253,0.222,2254,0.123,2255,0.062,2256,0.175,2257,0.062,2258,0.062,2259,0.302,2260,0.112,2261,0.123,2262,0.123,2263,0.123,2264,0.123,2265,0.245,2266,0.565,2267,0.059,2268,0.245,2269,0.108,2270,0.059,2271,0.062,2272,0.062,2273,0.162,2274,0.062,2275,0.062,2276,0.062,2277,0.245,2278,0.062,2279,0.123,2280,0.062,2281,0.062,2282,0.384,2283,0.267,2284,0.108,2285,0.112,2286,0.062,2287,0.123,2288,0.062,2289,0.267,2290,0.123,2291,0.123,2292,0.364,2293,0.208,2294,0.245,2295,0.123,2296,0.245,2297,0.062,2298,0.184,2299,0.245,2300,0.062,2301,0.062,2302,0.062,2303,0.062,2304,0.123,2305,0.062,2306,0.062,2307,0.062,2308,0.123,2309,0.062,2310,0.059,2311,0.123,2312,0.062,2313,0.062,2314,0.062,2315,0.062,2316,0.062,2317,0.062,2318,0.123,2319,0.062,2320,0.108,2321,0.054,2322,0.123,2323,0.167,2324,0.062,2325,0.062,2326,0.123,2327,0.123,2328,0.123,2329,0.123,2330,0.123,2331,0.123,2332,0.123,2333,0.123,2334,0.123,2335,0.062,2336,0.123,2337,0.123,2338,0.062,2339,0.062,2340,0.059,2341,0.062,2342,0.062,2343,0.062,2344,0.062,2345,0.062,2346,0.062,2347,0.062,2348,0.062,2349,0.062,2350,0.062,2351,0.062,2352,0.112,2353,0.062,2354,0.062,2355,0.062,2356,0.062,2357,0.062,2358,0.062,2359,0.062,2360,0.062,2361,0.062,2362,0.062,2363,0.123,2364,0.056,2365,0.053,2366,0.056,2367,0.062,2368,0.117,2369,0.062,2370,0.062,2371,0.062,2372,0.539,2373,0.062,2374,0.062,2375,0.208,2376,0.123,2377,0.062,2378,0.184,2379,0.062,2380,0.184,2381,0.059,2382,0.062,2383,0.056,2384,0.062,2385,0.062,2386,0.062,2387,0.062,2388,0.423,2389,0.289,2390,0.062,2391,0.062,2392,0.123,2393,0.184,2394,0.167,2395,0.123,2396,0.062,2397,0.184,2398,0.123,2399,0.062,2400,0.053,2401,0.062,2402,0.112,2403,0.062,2404,0.059,2405,0.123,2406,0.062,2407,0.062,2408,0.056,2409,0.062,2410,0.062,2411,0.062,2412,0.062,2413,0.062,2414,0.062,2415,0.062,2416,0.062,2417,0.062,2418,0.371,2419,0.062,2420,0.062,2421,0.062,2422,0.062,2423,0.422,2424,0.062,2425,0.123,2426,0.056,2427,0.062,2428,1.232,2429,0.542,2430,0.105,2431,0.112,2432,0.364,2433,0.175,2434,0.105,2435,0.123,2436,0.123,2437,0.208,2438,0.117,2439,0.059,2440,1.724,2441,0.345,2442,0.123,2443,0.062,2444,0.184,2445,0.108,2446,0.232,2447,0.175,2448,0.153,2449,0.252,2450,0.422,2451,0.062,2452,0.056,2453,0.059,2454,0.059,2455,0.117,2456,0.056,2457,0.059,2458,0.059,2459,0.157,2460,0.289,2461,0.215,2462,0.054,2463,0.222,2464,0.062,2465,0.054,2466,0.056,2467,0.062,2468,0.059,2469,0.059,2470,0.447,2471,0.053,2472,0.059,2473,0.059,2474,0.062,2475,0.056,2476,0.054,2477,0.056,2478,0.062,2479,0.167,2480,0.062,2481,0.062,2482,0.117,2483,0.056,2484,0.117,2485,0.062,2486,0.108,2487,0.112,2488,0.056,2489,0.053,2490,0.056,2491,0.259,2492,0.059,2493,0.062,2494,0.123,2495,0.117,2496,0.208,2497,0.175,2498,0.059,2499,0.059,2500,0.162,2501,0.059,2502,0.108,2503,0.062,2504,0.123,2505,0.117,2506,0.053,2507,0.123,2508,0.062,2509,0.062,2510,0.123,2511,0.123,2512,0.215,2513,0.123,2514,0.123,2515,0.062,2516,0.123,2517,0.593,2518,0.409,2519,0.175,2520,0.208,2521,0.062,2522,0.062,2523,0.653,2524,0.062,2525,0.062,2526,0.056,2527,0.051,2528,0.123,2529,0.117,2530,0.437,2531,0.184,2532,0.062,2533,0.123,2534,0.062,2535,0.331,2536,0.062,2537,0.062,2538,0.059,2539,0.123,2540,0.059,2541,0.056,2542,0.062,2543,0.222,2544,0.062,2545,0.289,2546,0.108,2547,0.215,2548,0.059,2549,0.117,2550,0.175,2551,0.059,2552,0.117,2553,0.059,2554,0.062,2555,0.059,2556,0.059,2557,0.059,2558,0.062,2559,0.062,2560,0.062,2561,0.056,2562,0.059,2563,0.123,2564,0.289,2565,0.059,2566,0.062,2567,0.062,2568,0.062,2569,0.117,2570,0.153,2571,0.059,2572,0.062,2573,0.062,2574,0.062,2575,0.123,2576,0.123,2577,0.108,2578,0.062,2579,0.184,2580,0.117,2581,0.062,2582,0.059,2583,0.062,2584,0.062,2585,0.184,2586,0.123,2587,0.123,2588,0.062,2589,0.062,2590,0.062,2591,0.062,2592,0.062,2593,0.059,2594,0.062,2595,0.062,2596,0.059,2597,0.062,2598,0.108,2599,0.588,2600,0.056,2601,0.167,2602,0.062,2603,0.062,2604,0.304,2605,0.345,2606,0.215,2607,0.245,2608,0.062,2609,0.062,2610,0.062,2611,0.245,2612,0.062,2613,0.117,2614,0.123,2615,0.245,2616,0.162,2617,0.123,2618,0.123,2619,0.123,2620,0.062,2621,0.062,2622,0.622,2623,0.709,2624,0.345,2625,0.123,2626,0.123,2627,0.062,2628,0.062,2629,0.175,2630,0.062,2631,0.062,2632,0.056,2633,0.062,2634,0.123,2635,0.062,2636,0.062,2637,0.062,2638,0.062,2639,0.062,2640,0.062,2641,0.175,2642,0.184,2643,0.175,2644,0.619,2645,0.123,2646,0.062,2647,0.062,2648,0.123,2649,0.123,2650,0.062,2651,0.062,2652,0.059,2653,0.062,2654,0.056,2655,0.062,2656,0.062,2657,0.123,2658,0.123,2659,0.123,2660,0.062,2661,0.062,2662,0.062,2663,0.062,2664,0.062,2665,0.112,2666,0.062,2667,0.062,2668,0.117,2669,0.123,2670,0.062,2671,0.123,2672,0.062,2673,0.062,2674,0.117,2675,0.112,2676,0.059,2677,0.062,2678,0.062,2679,0.062,2680,0.123,2681,0.184,2682,0.054,2683,0.062,2684,0.062,2685,0.062,2686,0.123,2687,0.062,2688,0.062,2689,0.062,2690,0.062,2691,0.062,2692,0.062,2693,0.062,2694,0.123,2695,0.062,2696,0.062,2697,0.062,2698,0.062,2699,0.123,2700,0.062,2701,0.062,2702,0.062,2703,0.062,2704,0.062,2705,0.062,2706,0.062,2707,0.062,2708,0.062,2709,0.062,2710,0.062,2711,0.062,2712,0.062,2713,0.062,2714,0.059,2715,0.062,2716,0.062,2717,0.062,2718,0.062,2719,0.123,2720,0.123,2721,0.062,2722,0.062,2723,0.222,2724,0.062,2725,0.304,2726,0.062,2727,0.062,2728,0.062,2729,0.062,2730,0.062,2731,0.184,2732,0.117,2733,0.062,2734,0.175,2735,0.123,2736,0.062,2737,0.184,2738,0.245,2739,0.062,2740,0.184,2741,0.725,2742,0.062,2743,0.062,2744,0.062,2745,0.062,2746,0.062,2747,0.062,2748,0.062,2749,0.062,2750,0.062,2751,0.062,2752,0.259,2753,0.059,2754,0.056,2755,0.123,2756,0.123,2757,0.056,2758,0.062,2759,0.056,2760,0.059,2761,0.054,2762,0.062,2763,0.062,2764,0.062,2765,0.062,2766,0.117,2767,0.062,2768,0.062,2769,0.062,2770,0.062,2771,0.123,2772,0.117,2773,0.123,2774,0.123,2775,0.123,2776,0.123,2777,0.062,2778,0.059,2779,0.123,2780,0.056,2781,0.062,2782,0.062,2783,0.062,2784,0.062,2785,0.062,2786,0.062,2787,0.123,2788,0.245,2789,0.062,2790,0.062,2791,0.062,2792,0.062,2793,0.062,2794,0.062,2795,0.117,2796,0.232,2797,0.062,2798,0.062,2799,0.911,2800,0.208,2801,0.059,2802,0.062,2803,0.062,2804,0.062,2805,0.062,2806,0.062,2807,0.062,2808,0.062,2809,0.123,2810,0.062,2811,0.062,2812,0.062,2813,0.062,2814,0.062,2815,0.062,2816,0.062,2817,0.062,2818,0.062,2819,0.062,2820,0.062,2821,0.062,2822,0.062,2823,0.062,2824,0.062,2825,0.059,2826,0.062,2827,0.222,2828,0.059,2829,0.062,2830,0.565,2831,0.108,2832,0.062,2833,0.175,2834,0.056,2835,0.062,2836,0.436,2837,0.162,2838,0.245,2839,0.056,2840,0.184,2841,0.059,2842,0.059,2843,0.062,2844,0.059,2845,0.062,2846,0.232,2847,0.062,2848,0.062,2849,0.062,2850,0.054,2851,0.056,2852,0.059,2853,0.167,2854,0.059,2855,0.059,2856,0.059,2857,0.117,2858,0.184,2859,0.062,2860,0.123,2861,0.062,2862,0.062,2863,0.319,2864,0.289,2865,0.123,2866,0.062,2867,0.062,2868,0.062,2869,0.117,2870,0.059,2871,0.059,2872,0.062,2873,0.112,2874,0.123,2875,0.123,2876,0.123,2877,0.062,2878,0.123,2879,0.123,2880,0.245,2881,0.123,2882,0.062,2883,0.062,2884,0.062,2885,0.123,2886,0.062,2887,0.123,2888,0.062,2889,0.277,2890,0.062,2891,0.062,2892,0.062,2893,0.062,2894,0.062,2895,0.059,2896,0.059,2897,0.062,2898,0.184,2899,0.062,2900,0.184,2901,0.062,2902,0.062,2903,0.059,2904,0.304,2905,0.384,2906,0.345,2907,0.422,2908,0.331,2909,0.304,2910,0.123,2911,0.401,2912,0.059,2913,0.364,2914,0.062,2915,0.267,2916,0.117,2917,0.511,2918,0.123,2919,0.821,2920,0.423,2921,0.062,2922,0.062,2923,0.481,2924,0.423,2925,0.056,2926,0.059,2927,0.062,2928,0.062,2929,0.062,2930,0.059,2931,0.184,2932,0.062,2933,0.423,2934,0.062,2935,0.232,2936,0.184,2937,0.059,2938,0.056,2939,0.511,2940,0.364,2941,0.056,2942,0.108,2943,0.062,2944,0.062,2945,0.059,2946,0.175,2947,0.112,2948,0.117,2949,0.062,2950,0.123,2951,0.123,2952,0.123,2953,0.123,2954,0.059,2955,0.117,2956,0.304,2957,0.123,2958,0.277,2959,0.062,2960,0.062,2961,0.056,2962,0.123,2963,0.062,2964,0.059,2965,0.289,2966,0.056,2967,0.123,2968,0.384,2969,0.184,2970,0.123,2971,0.105,2972,0.062,2973,0.062,2974,0.062,2975,0.062,2976,0.167,2977,0.062,2978,0.062,2979,0.062,2980,0.062,2981,0.245,2982,0.184,2983,0.062,2984,0.062,2985,0.175,2986,0.123,2987,0.123,2988,0.059,2989,0.062,2990,0.062,2991,0.059,2992,0.112,2993,0.062,2994,0.062,2995,0.054,2996,0.062,2997,0.062,2998,0.059,2999,0.062,3000,0.232,3001,0.062,3002,0.123,3003,0.123,3004,0.056,3005,0.117,3006,0.062,3007,0.123,3008,0.062,3009,0.059,3010,0.059,3011,0.062,3012,0.437,3013,0.232,3014,0.123,3015,0.062,3016,0.232,3017,0.123,3018,0.062,3019,0.184,3020,0.062,3021,0.123,3022,0.117,3023,0.232,3024,0.059,3025,0.123,3026,0.059,3027,0.062,3028,0.062,3029,0.059,3030,0.054,3031,0.319,3032,0.175,3033,0.062,3034,0.123,3035,0.059,3036,0.304,3037,0.184,3038,0.175,3039,0.062,3040,0.184,3041,0.062,3042,0.184,3043,0.175,3044,0.059,3045,0.062,3046,0.062,3047,0.054,3048,0.056,3049,0.062,3050,0.245,3051,0.364,3052,0.304,3053,0.821,3054,0.062,3055,0.123,3056,0.053,3057,0.059,3058,0.117,3059,0.062,3060,0.123,3061,0.364,3062,0.157,3063,0.053,3064,0.062,3065,0.062,3066,1.091,3067,0.062,3068,0.245,3069,0.232,3070,0.123,3071,0.062,3072,0.062,3073,0.123,3074,0.184,3075,0.062,3076,0.062,3077,0.062,3078,0.184,3079,0.423,3080,0.062,3081,0.062,3082,0.245,3083,0.245,3084,0.062,3085,0.062,3086,0.245,3087,0.245,3088,0.245,3089,0.245,3090,0.123,3091,0.123,3092,0.062,3093,0.062,3094,0.062,3095,0.059,3096,0.062,3097,0.184,3098,0.062,3099,0.062,3100,0.184,3101,0.245,3102,0.062,3103,0.059,3104,0.184,3105,0.062,3106,0.056,3107,0.184,3108,0.123,3109,0.184,3110,0.123,3111,0.123,3112,0.123,3113,0.117,3114,0.695,3115,0.423,3116,0.364,3117,0.062,3118,0.481,3119,0.123,3120,0.059,3121,0.245,3122,0.062,3123,0.304,3124,0.304,3125,0.304,3126,0.245,3127,0.059,3128,0.062,3129,0.245,3130,0.062,3131,0.062,3132,0.062,3133,0.062,3134,0.062,3135,0.123,3136,0.062,3137,0.123,3138,0.423,3139,0.062,3140,0.062,3141,0.062,3142,0.175,3143,0.117,3144,0.062,3145,0.062,3146,0.062,3147,0.062,3148,0.062,3149,0.054,3150,0.062,3151,0.062,3152,0.062,3153,0.062,3154,0.062,3155,0.123,3156,0.062,3157,0.062,3158,0.062,3159,0.062,3160,0.062,3161,0.062,3162,0.059,3163,0.059,3164,0.056,3165,0.062,3166,0.245,3167,0.062,3168,0.062,3169,0.062,3170,0.062,3171,0.062,3172,0.062,3173,0.059,3174,0.059,3175,0.062,3176,0.059,3177,0.062,3178,0.062,3179,0.062,3180,0.117,3181,0.062,3182,0.062,3183,0.062,3184,0.062,3185,0.062,3186,0.062,3187,0.062,3188,0.062,3189,0.123,3190,0.117,3191,0.123,3192,0.123,3193,0.123,3194,0.062,3195,0.054,3196,0.117,3197,0.123,3198,0.062,3199,0.059,3200,0.062,3201,0.123,3202,0.062,3203,0.062,3204,0.062,3205,0.062,3206,0.062,3207,0.062,3208,0.062,3209,0.062,3210,0.062,3211,0.062,3212,0.062,3213,0.062,3214,0.062,3215,0.062,3216,0.062,3217,0.062,3218,0.184,3219,0.062,3220,0.062,3221,0.059,3222,0.062,3223,0.108,3224,0.059,3225,0.175,3226,0.054,3227,0.059,3228,0.062,3229,0.062,3230,0.062,3231,0.062,3232,0.062,3233,0.062,3234,0.056,3235,0.062,3236,0.054,3237,0.056,3238,0.108,3239,0.059,3240,0.054,3241,0.056,3242,0.062,3243,0.062,3244,0.062,3245,0.062,3246,0.062,3247,0.054,3248,0.059,3249,0.059,3250,0.062]],["component/6",[0,0.065,1,0.056,146,0.091]],["title/7-1",[46,37.025,154,8.632,237,49.804]],["name/7-1",[]],["text/7-1",[]],["component/7-1",[]],["title/7-2",[22,20.014,154,7.767,160,55.417,161,53.967]],["name/7-2",[]],["text/7-2",[]],["component/7-2",[]],["title/7-3",[14,43.113,22,22.243,154,8.632]],["name/7-3",[]],["text/7-3",[]],["component/7-3",[]],["title/7-4",[14,43.113,154,8.632,497,59.978]],["name/7-4",[]],["text/7-4",[]],["component/7-4",[]],["title/7-5",[14,38.792,22,20.014,154,7.767,499,57.111]],["name/7-5",[]],["text/7-5",[]],["component/7-5",[]],["title/7-6",[14,38.792,22,20.014,154,7.767,501,49.633]],["name/7-6",[]],["text/7-6",[]],["component/7-6",[]],["title/7-7",[14,43.113,154,8.632,503,47.108]],["name/7-7",[]],["text/7-7",[]],["component/7-7",[]],["title/7-8",[46,37.025,154,8.632,239,53.354]],["name/7-8",[]],["text/7-8",[]],["component/7-8",[]],["title/7-9",[22,22.243,154,8.632,239,53.354]],["name/7-9",[]],["text/7-9",[]],["component/7-9",[]],["title/7-10",[46,37.025,154,8.632,241,48.647]],["name/7-10",[]],["text/7-10",[]],["component/7-10",[]],["title/7-11",[185,56.046,508,52.484]],["name/7-11",[]],["text/7-11",[]],["component/7-11",[]],["title/7-12",[168,54.221,508,46.638,510,63.472]],["name/7-12",[]],["text/7-12",[]],["component/7-12",[]],["title/7-13",[197,45.337,508,46.638,512,55.161]],["name/7-13",[]],["text/7-13",[]],["component/7-13",[]],["title/7-14",[508,52.484,514,71.428]],["name/7-14",[]],["text/7-14",[]],["component/7-14",[]],["title/7-15",[46,33.315,89,41.169,241,43.772,411,31.689]],["name/7-15",[]],["text/7-15",[]],["component/7-15",[]],["title/7-16",[241,43.772,503,42.387,508,41.964,517,53.967]],["name/7-16",[]],["text/7-16",[]],["component/7-16",[]],["title/7-17",[241,39.784,503,38.526,508,38.142,517,49.051,519,43.634]],["name/7-17",[]],["text/7-17",[]],["component/7-17",[]],["title/7-18",[46,37.025,154,8.632,521,52.549]],["name/7-18",[]],["text/7-18",[]],["component/7-18",[]],["title/7-19",[521,59.136,523,56.046]],["name/7-19",[]],["text/7-19",[]],["component/7-19",[]],["title/7-20",[25,37.838,89,45.754,159,56.186]],["name/7-20",[]],["text/7-20",[]],["component/7-20",[]],["title/7-21",[154,8.632,521,52.549,526,43.807]],["name/7-21",[]],["text/7-21",[]],["component/7-21",[]],["title/7-22",[46,37.025,154,8.632,528,58.567]],["name/7-22",[]],["text/7-22",[]],["component/7-22",[]],["title/7-23",[154,8.632,528,58.567,530,63.472]],["name/7-23",[]],["text/7-23",[]],["component/7-23",[]],["title/7-24",[15,35.252,46,33.315,154,7.767,532,39.743]],["name/7-24",[]],["text/7-24",[]],["component/7-24",[]],["title/7-25",[32,52.549,43,39.663,154,8.632]],["name/7-25",[]],["text/7-25",[]],["component/7-25",[]],["title/7-26",[154,8.632,535,48.647,536,54.221]],["name/7-26",[]],["text/7-26",[]],["component/7-26",[]],["title/7",[13,39.178,154,8.632,156,42.146]],["name/7",[5190,0.152]],["text/7",[0,3.644,1,3.291,2,1.267,3,4.852,7,1.349,9,0.379,10,1.787,11,2.425,12,2.599,13,3.897,14,5.439,15,3.76,16,0.943,18,0.748,21,0.405,22,3.409,23,1.129,24,1.645,25,5.041,26,0.983,27,0.603,28,0.227,29,2.258,30,0.306,31,5.294,32,2.899,36,2.398,42,0.708,43,3.232,44,6.208,45,2.242,47,1.027,48,3.259,49,0.676,51,3.605,52,0.72,53,3.097,56,1.027,57,0.405,58,0.328,60,0.298,61,0.387,64,1.167,65,0.332,71,0.416,72,0.764,74,2.674,77,1.875,78,1.218,79,0.25,80,1.402,84,1.553,85,4.651,89,4.551,96,2.674,98,2.492,99,5.392,103,1.699,104,1.863,108,1.375,110,1.905,112,1.636,113,0.293,132,0.315,133,0.708,134,0.355,135,1.905,136,0.428,139,0.546,140,0.642,141,4.039,142,0.387,143,1.305,144,2.84,145,3.987,148,1.402,150,2.199,151,1.045,152,1.666,153,1.011,154,1.446,155,0.733,156,5.491,157,0.379,159,2.443,160,4.38,161,4.266,162,0.804,163,3.758,164,1.94,165,0.395,167,0.372,168,1.608,170,1.086,171,0.328,172,2.951,173,0.395,175,0.387,176,0.416,178,1.495,179,2.071,181,0.395,182,1.623,184,0.405,185,1.218,197,4.985,201,3.684,205,0.563,208,2.085,209,4.077,211,0.902,214,1.086,215,1.116,217,0.355,222,0.686,223,1.666,227,0.275,228,0.428,230,1.109,235,0.635,237,4.78,239,3.942,241,6.3,243,1.204,252,0.336,254,2.564,259,4.341,263,0.764,265,5.48,266,4.803,271,0.531,272,2.998,274,1.141,279,0.883,282,1.905,285,0.642,286,1.846,288,2.625,292,0.366,294,2.93,303,0.895,317,0.387,322,0.306,336,0.664,342,0.437,347,2.998,350,0.379,356,0.36,364,0.355,366,4.792,372,2.477,376,2.443,380,1.666,384,1.7,386,0.332,390,1.044,404,0.332,406,1.202,411,1.378,420,2.055,435,0.395,443,1.402,458,0.395,461,0.372,481,0.201,487,2.022,492,0.387,497,4.092,499,3.021,501,3.764,503,6.601,508,7.421,510,1.553,512,6.809,514,5.319,517,0.783,519,1.842,521,7.334,523,2.37,526,5.278,528,3.015,530,2.484,532,3.895,535,3.964,536,3.535,558,0.955,573,0.696,635,5.286,641,3.663,642,0.733,644,0.783,654,2.243,656,3.542,669,0.696,670,0.65,680,1.086,684,0.372,689,1.808,697,0.708,708,1.027,741,0.748,752,0.733,753,2.951,754,0.405,757,1.109,760,2.32,766,6.22,779,1.027,780,0.708,803,0.387,805,1.699,810,1.661,860,0.387,866,1.699,880,0.642,910,0.379,913,0.748,922,4.447,925,3.663,950,2.022,998,0.405,1128,0.783,1160,3.663,1174,2.443,1186,0.387,1213,0.372,1250,1.086,1251,0.416,1258,0.405,1259,3.819,1261,3.162,1262,0.444,1265,3.015,1266,0.405,1267,1.433,1270,1.507,1277,4.386,1278,0.764,1280,1.467,1281,0.416,1288,3.52,1289,0.444,1290,0.416,1293,4.165,1300,0.804,1306,2.608,1308,5.299,1309,5.16,1312,1.402,1316,1.778,1317,1.433,1319,0.428,1320,5.746,1321,1.109,1322,1.433,1325,0.405,1328,2.192,1330,5.532,1331,0.416,1333,1.467,1334,1.136,1335,0.783,1336,0.444,1337,0.828,1338,0.444,1344,3.088,1345,3.632,1347,0.764,1348,1.778,1351,1.882,1354,1.202,1357,1.507,1361,0.764,1362,2.546,1366,0.405,1367,0.395,1369,0.416,1370,1.507,1371,2.127,1372,0.444,1374,0.416,1383,2.368,1385,2.347,1386,0.416,1387,0.405,1390,0.828,1391,1.136,1394,0.416,1397,0.463,1401,0.444,1406,1.109,1408,0.428,1409,0.416,1411,1.109,1415,0.405,1419,1.507,1420,1.979,1424,6.194,1425,0.395,1426,2.951,1429,0.428,1430,0.416,1432,0.395,1433,0.428,1434,0.804,1441,0.387,1442,5.797,1450,2.127,1451,2.033,1453,3.996,1465,0.428,1477,0.783,1491,0.748,1493,2.546,1496,0.748,1500,1.086,1502,0.428,1503,0.405,1505,5.172,1506,0.783,1507,0.416,1508,1.826,1511,0.405,1512,0.428,1514,2.071,1517,1.467,1518,0.405,1526,0.858,1543,0.405,1545,0.416,1550,0.444,1556,0.444,1566,2.071,1574,1.245,1577,0.416,1579,1.737,1596,0.444,1601,0.405,1605,0.395,1608,1.167,1612,1.507,1618,0.804,1625,0.828,1632,0.828,1651,0.828,1656,0.858,1659,1.433,1661,0.828,1662,0.764,1672,0.804,1673,0.804,1674,0.428,1675,0.416,1710,0.444,1716,0.804,1722,2.608,1723,0.405,1724,1.202,1725,1.737,1728,0.416,1730,0.858,1732,0.828,1735,0.416,1738,0.895,1739,0.416,1741,0.405,1744,0.804,1745,0.858,1749,0.895,1761,0.416,1785,1.299,1787,1.882,1825,1.167,1832,0.395,1855,0.804,1861,0.828,1864,0.463,1905,0.828,1912,0.428,1922,0.428,1962,3.232,1965,0.444,1994,0.428,2005,0.428,2024,0.783,2028,0.444,2029,0.463,2064,0.405,2101,0.444,2105,0.416,2110,0.428,2117,1.245,2134,0.405,2200,0.416,2201,0.895,2239,0.444,2259,0.405,2269,1.202,2293,0.416,2340,0.895,2365,0.416,2408,0.858,2430,0.804,2434,0.416,2437,0.416,2439,0.463,2446,0.463,2448,1.136,2449,0.405,2459,0.416,2487,0.444,2489,0.416,2491,0.416,2496,0.416,2506,0.416,2526,0.444,2527,1.136,2538,0.463,2547,0.428,2570,0.783,2577,0.828,2616,0.428,2622,0.428,2665,0.444,2760,0.463,2780,0.444,2800,0.416,2825,0.463,2837,0.828,2839,0.444,2850,0.828,2851,0.858,2863,0.828,2942,0.828,2947,0.444,2958,0.444,2961,0.444,2964,0.463,3004,0.444,3030,0.428,3062,0.416,3063,0.804,3251,0.488,3252,0.488,3253,0.488,3254,0.488,3255,1.371,3256,1.371,3257,0.488,3258,0.488,3260,0.444,3261,0.428,3262,2.145,3263,1.371,3265,0.488,3266,0.488,3268,0.488,3271,0.944,3272,0.488,3273,0.463,3274,0.488,3275,0.463,3276,2.572,3277,0.488,3278,0.488,3279,0.488,3280,0.488,3281,0.463,3283,0.463,3284,0.488,3285,0.488,3286,0.488,3287,0.488,3288,0.463,3289,0.444,3290,0.488,3291,0.488,3292,0.428,3293,0.488,3294,0.488,3295,0.488,3297,0.488,3298,0.488,3299,0.895,3300,0.463,3301,0.463,3303,0.944,3305,0.428,3307,0.463,3308,0.488,3309,0.895,3310,0.828,3311,0.488,3312,0.488,3313,0.488,3314,0.488,3315,0.488,3316,0.488,3317,0.444,3318,0.488,3319,0.488,3320,0.858,3321,0.463,3322,0.488,3323,0.488,3324,0.488,3325,0.488,3326,0.488,3327,0.488,3329,0.488,3330,0.488,3331,0.444,3332,0.463,3334,0.488,3335,0.488,3336,0.488,3337,0.488,3338,0.463,3339,0.488,3340,0.463,3341,0.488,3342,0.463,3343,0.488,3344,1.677,3346,0.444,3347,0.463,3349,0.444,3350,0.488,3351,0.488]],["component/7",[0,0.065,1,0.056,146,0.091]],["title/8-1",[14,43.113,166,50.43,272,51.093]],["name/8-1",[]],["text/8-1",[]],["component/8-1",[]],["title/8-2",[166,56.751,539,69.31]],["name/8-2",[]],["text/8-2",[]],["component/8-2",[]],["title/8-3",[1,30.288,14,38.792,154,7.767,237,44.812]],["name/8-3",[]],["text/8-3",[]],["component/8-3",[]],["title/8-4",[14,38.792,29,29.778,182,30.689,542,48.787]],["name/8-4",[]],["text/8-4",[]],["component/8-4",[]],["title/8",[10,21.931,53,39.178,166,50.43]],["name/8",[5191,0.152]],["text/8",[0,2.987,1,4.176,3,4.769,7,2.424,10,3.224,11,1.645,13,5.533,14,6.339,15,2.037,16,3.277,17,0.774,18,3.771,20,0.774,22,1.157,23,3.925,24,2.49,25,4.185,26,3.299,27,0.611,28,5.362,29,5.679,30,1.123,31,1.926,32,0.695,36,0.729,37,0.695,39,0.814,42,1.342,43,4.993,44,1.366,45,1.166,46,0.489,48,1.301,51,1.166,53,1.722,56,0.717,58,1.204,60,1.094,62,1.45,63,2.574,72,0.774,77,1.067,78,0.658,85,4.142,89,2.711,96,3.697,99,4.257,104,4.127,108,1.962,111,1.45,112,5.23,114,0.774,118,0.758,119,0.793,125,3.318,126,1.366,127,5.386,129,1.839,132,1.629,133,1.342,134,3.458,135,4.531,139,0.553,140,0.65,141,2.657,143,0.705,144,1.926,145,2.988,148,4.112,150,1.391,151,0.729,152,1.391,153,3.161,154,1.379,155,0.743,157,1.962,158,6.516,164,0.743,166,5.44,167,1.366,168,0.717,171,3.754,172,3.771,174,1.701,175,0.758,176,2.707,178,1.761,182,5.816,185,0.658,186,0.793,195,1.992,208,1.085,211,4.845,214,0.758,215,0.932,220,6.488,235,5.381,237,4.528,239,0.705,241,2.882,243,1.719,249,0.774,252,5.07,259,0.685,261,0.793,262,1.419,272,6.025,274,5.031,279,1.155,285,1.218,286,3.046,292,4.453,294,1.113,297,0.774,303,1.789,305,2.396,341,0.345,342,0.83,347,1.265,350,1.962,366,4.061,371,0.758,376,0.743,378,1.419,384,1.248,386,2.559,390,2.527,400,0.774,414,3.069,420,0.988,450,1.265,462,3.362,477,4.267,481,1.04,503,0.623,512,2.424,521,0.695,523,0.658,532,1.094,535,0.643,539,2.707,542,8.335,641,1.391,656,3.573,760,0.705,766,0.695,780,2.383,784,0.729,792,4.531,868,1.419,910,0.743,913,0.758,925,1.962,971,3.798,1091,0.743,1094,1.45,1156,0.729,1160,2.469,1164,2.469,1174,5.108,1250,1.419,1259,1.45,1261,0.758,1265,2.574,1277,2.981,1278,2.574,1284,0.869,1290,0.814,1293,4.202,1297,0.793,1304,1.525,1306,1.485,1307,0.869,1312,4.112,1316,2.636,1317,5.764,1321,4.81,1322,2.574,1324,0.839,1329,0.839,1331,2.151,1332,0.839,1344,0.793,1345,1.45,1350,0.814,1359,0.793,1361,1.45,1362,1.45,1363,1.485,1366,1.485,1367,0.774,1371,3.203,1385,0.793,1387,0.793,1388,0.839,1400,0.839,1405,0.839,1406,0.774,1411,0.774,1415,0.793,1419,0.814,1420,2.981,1422,0.793,1426,4.423,1427,0.839,1432,2.045,1441,0.758,1453,2.045,1461,2.151,1477,2.095,1484,0.839,1489,2.636,1491,2.519,1493,3.046,1496,3.771,1500,0.758,1501,0.793,1507,0.814,1514,0.793,1540,0.814,1545,1.525,1563,0.774,1570,0.839,1571,0.793,1598,0.814,1599,6.643,1600,2.707,1603,2.095,1605,0.774,1608,1.525,1612,0.814,1618,0.814,1622,0.814,1627,0.814,1633,0.869,1659,2.574,1662,2.574,1666,0.839,1673,0.814,1680,0.839,1700,1.572,1723,0.793,1725,3.47,1732,0.839,1765,0.839,1792,2.707,1828,2.217,1830,1.698,1832,0.774,1852,0.839,1904,2.151,1962,0.774,2024,0.793,2042,1.572,2051,2.151,2061,1.525,2105,0.814,2259,1.485,2284,0.839,2365,0.814,2404,1.698,2448,1.485,2462,0.839,2470,0.793,2471,1.525,2500,0.839,2502,0.839,2527,1.485,2599,6.293,2616,0.839,2622,2.217,2675,0.869,2752,1.525,2836,0.774,2839,0.869,2850,0.839,2905,0.869,3056,3.203,3162,1.698,3226,0.839,3236,0.839,3238,0.839,3249,0.906,3352,0.956,3353,0.956,3354,0.906,3355,0.956,3356,0.956,3357,0.956,3358,0.869,3359,2.296,3360,0.956,3361,0.906,3362,0.956,3363,1.792,3364,0.956,3365,2.296,3366,1.792,3367,1.792,3368,0.956,3369,0.956,3370,3.013,3371,1.792,3372,0.956,3373,0.956,3374,0.956,3375,0.956,3376,0.956,3377,0.956,3378,0.956,3379,0.956,3380,1.628,3381,2.395,3382,1.792,3383,0.906,3384,0.956,3385,0.906,3386,0.869,3387,0.956,3388,0.956,3389,0.956,3390,0.956,3391,0.956,3392,0.956,3393,0.956,3394,0.956,3395,0.906,3396,0.906,3397,1.792,3398,3.013,3399,0.956,3400,1.792,3401,1.792,3402,0.956]],["component/8",[0,0.065,1,0.056,146,0.091]],["title/9-1",[11,38.526,12,38.526,25,30.944,28,27.529,185,40.73]],["name/9-1",[]],["text/9-1",[]],["component/9-1",[]],["title/9-2",[11,42.387,28,30.288,166,45.376,185,44.812]],["name/9-2",[]],["text/9-2",[]],["component/9-2",[]],["title/9",[11,42.387,12,42.387,13,35.252,28,30.288]],["name/9",[5192,0.152]],["text/9",[0,5.432,1,5.496,7,4.197,10,2.401,11,7.609,12,6.823,13,3.742,14,6.41,15,2.981,22,1.051,24,2.879,25,5.953,26,3.056,27,5.925,28,5.642,29,3.624,30,4.33,31,6.04,39,2.91,43,3.788,44,4.197,45,2.226,46,1.749,48,2.483,51,3.584,53,2.981,67,2.021,74,2.655,75,2.767,76,2.834,77,2.037,85,4.817,99,4.197,104,5.212,112,2.606,113,4.758,125,2.383,127,4.086,135,2.606,139,3.184,140,2.325,143,2.521,144,4.197,145,3.837,150,6.745,151,2.606,152,6.152,154,1.435,156,1.991,157,2.655,158,5.096,166,8.234,171,3.701,174,3.698,175,2.708,182,3.735,185,3.789,208,2.07,209,2.299,237,2.353,243,2.325,259,3.941,286,2.006,303,3.305,347,2.414,350,4.275,356,2.521,364,3.998,366,1.949,380,4.275,390,2.68,435,2.767,437,2.249,439,6.88,450,2.414,481,2.843,503,2.226,512,2.606,523,2.353,669,2.521,689,2.182,733,4.197,760,2.521,766,2.483,792,7.989,813,2.655,1129,2.606,1164,2.655,1261,2.708,1267,2.767,1272,3.106,1277,2.708,1312,2.708,1325,2.834,1347,2.767,1358,2.999,1420,2.708,1424,4.456,1425,2.767,1426,5.474,1441,2.708,1448,2.999,1457,3.24,1477,2.834,1491,4.361,1492,2.91,1496,5.474,1498,2.834,1500,2.708,1507,2.91,1549,3.106,1563,2.767,1566,2.834,1569,2.91,1579,5.594,1593,2.999,1670,2.999,1883,3.24,2024,2.834,2400,2.91,2527,5.729,2752,4.686,2836,2.767,2851,3.106,2938,3.106,3261,4.829,3403,3.419,3404,3.419,3405,3.419,3406,3.419,3407,3.106,3408,3.419,3409,3.419,3410,3.24,3411,3.419,3412,3.419,3413,3.24,3414,3.106]],["component/9",[0,0.065,1,0.056,146,0.091]],["title/10-1",[27,37.773,46,30.28,139,34.219,154,7.059,303,24.687]],["name/10-1",[]],["text/10-1",[]],["component/10-1",[]],["title/10-2",[22,16.672,127,32.067,154,6.47,163,23.379,305,30.305,481,22.312]],["name/10-2",[]],["text/10-2",[]],["component/10-2",[]],["title/10-3",[22,18.191,154,7.059,305,33.066,481,24.344,548,28.018]],["name/10-3",[]],["text/10-3",[]],["component/10-3",[]],["title/10-4",[10,17.935,22,18.191,154,7.059,305,33.066,481,24.344]],["name/10-4",[]],["text/10-4",[]],["component/10-4",[]],["title/10-5",[22,18.191,154,7.059,163,25.509,305,33.066,481,24.344]],["name/10-5",[]],["text/10-5",[]],["component/10-5",[]],["title/10-6",[22,18.191,154,7.059,305,33.066,481,24.344,552,26.1]],["name/10-6",[]],["text/10-6",[]],["component/10-6",[]],["title/10-7",[22,18.191,154,7.059,305,33.066,341,21.352,481,24.344]],["name/10-7",[]],["text/10-7",[]],["component/10-7",[]],["title/10-8",[552,35.915,555,53.564]],["name/10-8",[]],["text/10-8",[]],["component/10-8",[]],["title/10-9",[1,37.881,552,35.915]],["name/10-9",[]],["text/10-9",[]],["component/10-9",[]],["title/10-10",[22,18.191,154,7.059,481,24.344,558,41.243,559,38.927]],["name/10-10",[]],["text/10-10",[]],["component/10-10",[]],["title/10-11",[22,16.672,154,6.47,481,22.312,548,25.679,558,37.799,559,35.677]],["name/10-11",[]],["text/10-11",[]],["component/10-11",[]],["title/10-12",[10,16.438,22,16.672,154,6.47,481,22.312,558,37.799,559,35.677]],["name/10-12",[]],["text/10-12",[]],["component/10-12",[]],["title/10-13",[10,17.935,28,27.529,127,34.987,386,40.245,563,34.987]],["name/10-13",[]],["text/10-13",[]],["component/10-13",[]],["title/10-14",[10,19.733,322,40.793,552,28.716,555,42.828]],["name/10-14",[]],["text/10-14",[]],["component/10-14",[]],["title/10-15",[10,15.171,22,15.387,154,5.971,341,18.062,481,20.592,558,34.887,559,32.928]],["name/10-15",[]],["text/10-15",[]],["component/10-15",[]],["title/10-16",[22,20.014,341,23.492,552,28.716,555,42.828]],["name/10-16",[]],["text/10-16",[]],["component/10-16",[]],["title/10-17",[22,18.191,341,21.352,526,35.826,552,26.1,555,38.927]],["name/10-17",[]],["text/10-17",[]],["component/10-17",[]],["title/10-18",[1,27.529,22,18.191,26,32.851,341,21.352,552,26.1]],["name/10-18",[]],["text/10-18",[]],["component/10-18",[]],["title/10-19",[1,25.231,22,16.672,26,30.109,341,19.57,526,32.835,552,23.921]],["name/10-19",[]],["text/10-19",[]],["component/10-19",[]],["title/10-20",[1,27.529,26,32.851,341,21.352,552,26.1,571,41.243]],["name/10-20",[]],["text/10-20",[]],["component/10-20",[]],["title/10-21",[22,16.672,241,36.463,481,22.312,526,32.835,559,35.677,573,39.991]],["name/10-21",[]],["text/10-21",[]],["component/10-21",[]],["title/10-22",[154,8.632,481,29.767,526,43.807]],["name/10-22",[]],["text/10-22",[]],["component/10-22",[]],["title/10-23",[154,7.767,481,26.784,526,39.416,548,30.826]],["name/10-23",[]],["text/10-23",[]],["component/10-23",[]],["title/10-24",[10,19.733,154,7.767,481,26.784,526,39.416]],["name/10-24",[]],["text/10-24",[]],["component/10-24",[]],["title/10-25",[10,21.931,27,46.188,563,42.781]],["name/10-25",[]],["text/10-25",[]],["component/10-25",[]],["title/10-26",[10,19.733,154,7.767,481,26.784,526,39.416]],["name/10-26",[]],["text/10-26",[]],["component/10-26",[]],["title/10-27",[1,30.288,56,48.787,290,41.169,532,39.743]],["name/10-27",[]],["text/10-27",[]],["component/10-27",[]],["title/10-28",[154,7.767,163,28.065,481,26.784,526,39.416]],["name/10-28",[]],["text/10-28",[]],["component/10-28",[]],["title/10-29",[154,7.767,481,26.784,526,39.416,552,28.716]],["name/10-29",[]],["text/10-29",[]],["component/10-29",[]],["title/10-30",[154,7.767,341,23.492,481,26.784,526,39.416]],["name/10-30",[]],["text/10-30",[]],["component/10-30",[]],["title/10-31",[552,35.915,555,53.564]],["name/10-31",[]],["text/10-31",[]],["component/10-31",[]],["title/10-32",[1,37.881,552,35.915]],["name/10-32",[]],["text/10-32",[]],["component/10-32",[]],["title/10-33",[22,20.014,154,7.767,481,26.784,586,36.868]],["name/10-33",[]],["text/10-33",[]],["component/10-33",[]],["title/10-34",[22,18.191,154,7.059,481,24.344,548,28.018,586,33.51]],["name/10-34",[]],["text/10-34",[]],["component/10-34",[]],["title/10-35",[10,17.935,22,18.191,154,7.059,481,24.344,586,33.51]],["name/10-35",[]],["text/10-35",[]],["component/10-35",[]],["title/10-36",[22,18.191,154,7.059,163,25.509,481,24.344,586,33.51]],["name/10-36",[]],["text/10-36",[]],["component/10-36",[]],["title/10-37",[22,18.191,154,7.059,481,24.344,552,26.1,586,33.51]],["name/10-37",[]],["text/10-37",[]],["component/10-37",[]],["title/10-38",[22,18.191,154,7.059,341,21.352,481,24.344,586,33.51]],["name/10-38",[]],["text/10-38",[]],["component/10-38",[]],["title/10-39",[22,20.014,341,23.492,552,28.716,555,42.828]],["name/10-39",[]],["text/10-39",[]],["component/10-39",[]],["title/10-40",[1,30.288,22,20.014,341,23.492,552,28.716]],["name/10-40",[]],["text/10-40",[]],["component/10-40",[]],["title/10-41",[22,20.014,154,7.767,474,35.041,586,36.868]],["name/10-41",[]],["text/10-41",[]],["component/10-41",[]],["title/10-42",[22,18.191,154,7.059,474,31.849,548,28.018,586,33.51]],["name/10-42",[]],["text/10-42",[]],["component/10-42",[]],["title/10-43",[10,17.935,22,18.191,154,7.059,474,31.849,586,33.51]],["name/10-43",[]],["text/10-43",[]],["component/10-43",[]],["title/10-44",[22,18.191,154,7.059,163,25.509,474,31.849,586,33.51]],["name/10-44",[]],["text/10-44",[]],["component/10-44",[]],["title/10-45",[22,18.191,154,7.059,474,31.849,552,26.1,586,33.51]],["name/10-45",[]],["text/10-45",[]],["component/10-45",[]],["title/10-46",[22,18.191,154,7.059,341,21.352,474,31.849,586,33.51]],["name/10-46",[]],["text/10-46",[]],["component/10-46",[]],["title/10-47",[1,30.288,22,20.014,341,23.492,552,28.716]],["name/10-47",[]],["text/10-47",[]],["component/10-47",[]],["title/10-48",[22,20.014,341,23.492,552,28.716,555,42.828]],["name/10-48",[]],["text/10-48",[]],["component/10-48",[]],["title/10-49",[154,9.713,603,49.707]],["name/10-49",[]],["text/10-49",[]],["component/10-49",[]],["title/10-50",[22,20.014,154,7.767,481,26.784,603,39.743]],["name/10-50",[]],["text/10-50",[]],["component/10-50",[]],["title/10-51",[22,18.191,154,7.059,481,24.344,548,28.018,603,36.123]],["name/10-51",[]],["text/10-51",[]],["component/10-51",[]],["title/10-52",[10,17.935,22,18.191,154,7.059,481,24.344,603,36.123]],["name/10-52",[]],["text/10-52",[]],["component/10-52",[]],["title/10-53",[22,18.191,154,7.059,163,25.509,481,24.344,603,36.123]],["name/10-53",[]],["text/10-53",[]],["component/10-53",[]],["title/10-54",[22,18.191,154,7.059,481,24.344,552,26.1,603,36.123]],["name/10-54",[]],["text/10-54",[]],["component/10-54",[]],["title/10-55",[22,18.191,154,7.059,341,21.352,481,24.344,603,36.123]],["name/10-55",[]],["text/10-55",[]],["component/10-55",[]],["title/10-56",[53,27.103,65,34.043,154,5.971,215,26.031,573,36.91,611,40.516,612,42.607]],["name/10-56",[]],["text/10-56",[]],["component/10-56",[]],["title/10-57",[22,20.014,154,7.767,474,35.041,603,39.743]],["name/10-57",[]],["text/10-57",[]],["component/10-57",[]],["title/10-58",[22,18.191,154,7.059,474,31.849,548,28.018,603,36.123]],["name/10-58",[]],["text/10-58",[]],["component/10-58",[]],["title/10-59",[10,17.935,22,18.191,154,7.059,474,31.849,603,36.123]],["name/10-59",[]],["text/10-59",[]],["component/10-59",[]],["title/10-60",[22,18.191,154,7.059,163,25.509,474,31.849,603,36.123]],["name/10-60",[]],["text/10-60",[]],["component/10-60",[]],["title/10-61",[22,18.191,154,7.059,474,31.849,552,26.1,603,36.123]],["name/10-61",[]],["text/10-61",[]],["component/10-61",[]],["title/10-62",[22,18.191,154,7.059,341,21.352,474,31.849,603,36.123]],["name/10-62",[]],["text/10-62",[]],["component/10-62",[]],["title/10-63",[154,8.632,305,40.432,620,53.354]],["name/10-63",[]],["text/10-63",[]],["component/10-63",[]],["title/10-64",[22,18.191,154,7.059,227,33.285,384,29.221,481,24.344]],["name/10-64",[]],["text/10-64",[]],["component/10-64",[]],["title/10-65",[22,16.672,154,6.47,205,32.315,227,30.506,384,26.782,481,22.312]],["name/10-65",[]],["text/10-65",[]],["component/10-65",[]],["title/10-66",[22,15.387,154,5.971,205,29.825,227,28.156,384,24.718,481,20.592,548,23.7]],["name/10-66",[]],["text/10-66",[]],["component/10-66",[]],["title/10-67",[10,15.171,22,15.387,154,5.971,205,29.825,227,28.156,384,24.718,481,20.592]],["name/10-67",[]],["text/10-67",[]],["component/10-67",[]],["title/10-68",[22,15.387,154,5.971,163,21.578,205,29.825,227,28.156,384,24.718,481,20.592]],["name/10-68",[]],["text/10-68",[]],["component/10-68",[]],["title/10-69",[22,15.387,154,5.971,205,29.825,227,28.156,384,24.718,481,20.592,552,22.078]],["name/10-69",[]],["text/10-69",[]],["component/10-69",[]],["title/10-70",[22,15.387,154,5.971,205,29.825,227,28.156,341,18.062,384,24.718,481,20.592]],["name/10-70",[]],["text/10-70",[]],["component/10-70",[]],["title/10-71",[22,18.191,154,7.059,227,33.285,384,29.221,481,24.344]],["name/10-71",[]],["text/10-71",[]],["component/10-71",[]],["title/10-72",[22,16.672,154,6.47,227,30.506,384,26.782,481,22.312,548,25.679]],["name/10-72",[]],["text/10-72",[]],["component/10-72",[]],["title/10-73",[10,16.438,22,16.672,154,6.47,227,30.506,384,26.782,481,22.312]],["name/10-73",[]],["text/10-73",[]],["component/10-73",[]],["title/10-74",[22,16.672,154,6.47,163,23.379,227,30.506,384,26.782,481,22.312]],["name/10-74",[]],["text/10-74",[]],["component/10-74",[]],["title/10-75",[22,16.672,154,6.47,227,30.506,384,26.782,481,22.312,552,23.921]],["name/10-75",[]],["text/10-75",[]],["component/10-75",[]],["title/10-76",[22,16.672,154,6.47,227,30.506,341,19.57,384,26.782,481,22.312]],["name/10-76",[]],["text/10-76",[]],["component/10-76",[]],["title/10-77",[22,18.191,171,39.784,227,33.285,336,28.667,635,46.872]],["name/10-77",[]],["text/10-77",[]],["component/10-77",[]],["title/10-78",[89,51.489,336,39.446]],["name/10-78",[]],["text/10-78",[]],["component/10-78",[]],["title/10-79",[364,59.136,638,73.973]],["name/10-79",[]],["text/10-79",[]],["component/10-79",[]],["title/10-80",[27,51.977,125,56.751]],["name/10-80",[]],["text/10-80",[]],["component/10-80",[]],["title/10-81",[336,35.053,641,56.186,642,56.186]],["name/10-81",[]],["text/10-81",[]],["component/10-81",[]],["title/10-82",[336,35.053,644,59.978,645,58.567]],["name/10-82",[]],["text/10-82",[]],["component/10-82",[]],["title/10-83",[27,37.773,46,30.28,113,35.538,154,7.059,303,24.687]],["name/10-83",[]],["text/10-83",[]],["component/10-83",[]],["title/10-84",[10,19.733,127,38.494,154,7.767,648,57.111]],["name/10-84",[]],["text/10-84",[]],["component/10-84",[]],["title/10-85",[0,31.661,10,17.935,127,34.987,154,7.059,586,33.51]],["name/10-85",[]],["text/10-85",[]],["component/10-85",[]],["title/10-86",[10,21.931,154,8.632,651,61.59]],["name/10-86",[]],["text/10-86",[]],["component/10-86",[]],["title/10-87",[586,36.868,651,55.417,653,52.698,654,51.57]],["name/10-87",[]],["text/10-87",[]],["component/10-87",[]],["title/10-88",[3,38.792,586,36.868,653,52.698,656,44.812]],["name/10-88",[]],["text/10-88",[]],["component/10-88",[]],["title/10-89",[67,34.987,215,30.774,642,64.769,653,47.897]],["name/10-89",[]],["text/10-89",[]],["component/10-89",[]],["title/10-90",[10,17.935,27,37.773,65,40.245,154,7.059,303,24.687]],["name/10-90",[]],["text/10-90",[]],["component/10-90",[]],["title/10-91",[10,19.733,154,7.767,558,45.376,559,42.828]],["name/10-91",[]],["text/10-91",[]],["component/10-91",[]],["title/10",[13,39.178,27,46.188,154,8.632]],["name/10",[5193,0.152]],["text/10",[0,3.49,1,5.029,2,0.547,3,4.465,7,1.464,9,0.593,10,2.645,11,3.125,12,0.727,13,5.039,14,3.25,15,0.696,16,0.998,17,0.619,18,1.639,20,0.318,22,3.651,23,1.064,24,0.205,25,2.217,26,4.725,27,5.328,28,3.643,29,2.196,30,0.479,31,4.692,32,1.283,35,0.451,36,0.851,38,0.158,42,0.706,43,1.585,44,0.719,45,0.378,49,0.547,51,2.629,52,0.851,53,0.785,54,0.158,55,0.305,56,1.324,58,1.584,59,0.141,60,3.796,61,1.4,62,0.161,63,2.921,65,6.125,66,0.435,67,0.857,69,0.169,74,0.451,75,0.161,77,1.319,78,0.526,79,0.102,80,0.158,85,4.889,89,1.214,94,5.64,96,0.867,98,0.884,99,2.751,100,0.998,102,0.326,103,0.46,104,4.87,108,0.593,109,0.158,110,1.464,111,0.903,112,3.452,113,0.349,118,1.521,119,0.165,121,0.161,125,3.406,126,0.152,127,5.013,129,0.115,132,0.719,133,0.294,134,2.006,135,2.301,137,0.334,139,2.335,140,0.874,141,3.131,142,0.311,143,1.188,144,1.902,145,2.593,148,1.754,150,0.732,151,0.98,152,2.343,153,0.428,154,1.384,155,0.732,156,1.83,157,0.998,158,2.316,159,1.829,163,3.191,164,0.155,166,1.833,167,0.583,168,0.149,170,0.158,171,2.273,172,2.677,173,0.161,178,3.749,179,0.326,180,0.372,181,0.161,182,1.701,185,1.216,186,1.065,189,1.234,195,0.591,197,0.908,201,1.038,205,1.798,208,0.352,211,1.985,214,1.4,215,0.397,220,2.859,223,0.305,224,0.47,227,3.462,233,0.165,235,4.138,237,1.216,239,0.563,241,2.645,243,0.52,246,0.41,249,0.763,252,0.998,254,0.137,258,0.65,259,2.663,262,1.4,263,1.43,266,0.311,271,1.325,272,3.198,274,1.608,277,0.483,279,1.333,282,1.796,284,0.867,285,0.52,286,0.754,288,0.583,290,1.117,292,5.681,294,3.614,299,1.087,303,2.989,305,2.53,316,0.864,317,0.158,322,3.37,335,0.234,336,2.568,341,2.751,342,3.571,347,2.778,350,1.491,356,2.037,364,3.486,366,5.135,368,0.573,371,0.605,372,4.891,376,1.372,378,0.158,380,1.606,384,3.906,386,4.701,390,1.702,400,0.318,404,0.52,408,0.326,411,1.811,414,0.799,416,0.27,420,1.376,427,0.619,432,1.304,435,0.763,437,0.382,439,0.158,442,0.158,443,0.884,445,0.326,450,5.259,458,0.763,461,0.299,462,0.41,474,4.774,477,3.08,481,3.955,485,1.372,487,0.763,488,0.763,492,0.158,501,1.228,503,0.498,508,0.128,512,0.152,519,0.563,521,4.175,526,4.368,532,2.134,535,0.975,539,0.169,542,0.573,548,0.687,552,3.809,555,2.854,558,2.356,559,4.367,563,1.475,571,0.274,573,1.303,586,4.545,603,4.251,611,2.019,612,3.524,620,0.948,635,2.859,638,0.181,641,0.998,642,3.862,645,1.43,648,0.51,651,1.094,653,4.654,654,0.46,656,0.768,669,2.225,670,1.321,689,0.251,708,0.294,719,0.145,732,1.659,747,1.065,752,0.593,753,0.884,760,0.428,766,0.555,792,2.836,803,1.276,805,0.605,808,0.299,810,1.071,854,0.361,860,3.28,866,0.884,868,6.106,880,0.267,910,1.719,922,0.274,925,0.305,950,2.64,998,0.165,1022,0.885,1054,0.318,1091,0.155,1113,0.161,1129,3.98,1134,0.619,1142,2.917,1145,0.147,1153,1.321,1160,3.055,1161,0.619,1164,0.155,1174,0.732,1186,1.148,1211,0.451,1213,0.583,1250,2.188,1256,2.005,1258,0.326,1259,1.304,1261,0.311,1265,0.318,1266,0.165,1267,0.763,1270,0.95,1274,1.014,1276,0.344,1277,3.436,1278,2.129,1280,0.326,1286,0.169,1288,0.781,1293,2.34,1297,1.335,1298,0.189,1300,1.885,1302,0.181,1306,1.065,1308,2.005,1309,1.953,1312,0.605,1317,2.34,1321,4.822,1322,0.47,1323,0.95,1324,0.67,1325,0.165,1330,0.326,1333,0.326,1334,0.165,1335,0.165,1341,0.372,1344,0.326,1345,2.34,1347,0.47,1348,2.068,1349,0.65,1350,0.495,1351,0.175,1353,0.694,1354,1.272,1357,0.169,1359,0.633,1361,1.174,1362,0.318,1363,0.165,1366,0.326,1367,0.763,1368,0.169,1369,1.234,1370,0.169,1377,0.181,1378,0.334,1382,0.95,1385,0.326,1386,0.169,1387,0.165,1391,0.925,1394,0.169,1395,0.169,1398,1.942,1400,1.684,1403,1.317,1406,0.619,1409,0.495,1411,0.47,1414,0.169,1415,0.925,1416,0.65,1419,0.169,1420,0.747,1422,0.326,1423,1.234,1424,3.665,1425,1.907,1426,4.439,1427,0.175,1432,0.47,1433,0.175,1435,1.463,1441,0.46,1450,2.674,1453,0.619,1454,0.495,1474,1.014,1484,0.344,1487,0.344,1488,0.175,1489,1.591,1490,0.189,1491,0.311,1493,2.34,1496,2.39,1498,0.326,1499,0.67,1500,2.29,1501,0.326,1503,0.633,1506,0.165,1508,1.371,1509,0.495,1511,0.781,1514,0.326,1517,0.165,1518,0.165,1521,0.189,1525,1.504,1538,2.536,1540,0.334,1543,0.482,1544,0.334,1548,0.175,1556,0.181,1563,0.903,1566,0.165,1569,0.334,1571,0.165,1577,0.334,1579,0.161,1597,0.181,1598,0.334,1599,5.239,1600,0.334,1601,0.633,1603,1.202,1604,1.413,1605,2.129,1607,0.181,1613,0.372,1614,0.175,1616,0.344,1617,0.95,1620,1.761,1621,0.51,1622,0.495,1623,0.979,1625,0.51,1626,0.694,1631,0.189,1634,1.127,1636,0.189,1649,1.058,1659,0.318,1660,0.344,1661,0.51,1662,1.174,1666,0.175,1672,0.334,1680,0.344,1681,0.344,1688,0.189,1692,0.181,1714,0.169,1717,0.189,1722,4.122,1723,0.925,1725,1.43,1728,0.65,1731,0.65,1741,0.326,1744,0.169,1750,0.827,1754,0.181,1761,0.495,1765,0.175,1792,0.65,1794,1.168,1821,0.175,1825,0.495,1832,0.763,1838,0.357,1855,0.169,1884,0.528,1911,0.51,1912,0.979,1922,0.175,1962,0.318,1972,1.371,1975,0.67,1985,0.175,2007,0.357,2011,0.893,2042,0.344,2045,0.175,2050,1.317,2051,0.334,2052,0.181,2055,0.189,2061,0.334,2064,0.165,2068,0.827,2073,1.371,2078,0.334,2083,0.344,2093,0.344,2110,0.175,2112,0.169,2124,0.175,2134,0.925,2135,0.372,2155,0.357,2156,2.877,2158,0.344,2162,0.181,2169,1.317,2200,0.95,2225,0.372,2259,0.482,2269,0.344,2273,0.344,2283,0.344,2289,0.344,2293,0.495,2320,0.175,2321,0.344,2375,1.371,2383,0.181,2389,0.372,2394,0.181,2400,0.169,2418,0.344,2423,0.175,2426,0.181,2430,0.169,2433,0.189,2434,0.334,2437,0.169,2440,0.169,2449,0.165,2450,0.344,2452,2.627,2454,0.551,2459,0.334,2463,0.528,2470,1.065,2471,0.334,2476,0.175,2477,0.181,2479,0.357,2489,0.169,2491,0.169,2496,0.169,2500,0.51,2506,0.169,2512,0.175,2518,0.334,2519,0.189,2520,0.169,2530,0.357,2535,0.528,2546,0.67,2570,0.165,2577,0.344,2598,0.827,2599,1.335,2601,0.181,2675,0.181,2676,0.372,2682,0.175,2752,0.169,2757,0.181,2759,0.181,2761,0.344,2766,0.189,2799,1.55,2800,1.371,2827,0.181,2831,0.175,2836,0.318,2907,0.67,2912,0.189,2915,1.127,2935,0.189,2939,0.551,2941,0.528,2945,0.189,2958,0.181,2968,0.357,2971,0.334,2976,0.357,2985,0.189,2992,1.879,3012,0.357,3029,1.218,3030,0.175,3031,0.175,3047,0.344,3056,0.169,3062,0.169,3063,0.65,3149,0.67,3163,0.189,3195,0.827,3223,0.344,3225,0.724,3226,0.979,3236,0.344,3240,0.344,3241,0.694,3283,1.819,3292,0.175,3305,0.344,3358,0.181,3359,0.181,3396,0.551,3414,0.181,3416,0.199,3417,0.181,3418,0.393,3419,1.285,3420,0.942,3421,0.581,3422,1.058,3423,0.393,3424,0.199,3425,0.189,3426,1.45,3428,0.199,3429,0.189,3430,0.189,3431,0.372,3432,0.199,3433,0.199,3434,0.199,3435,0.189,3436,0.393,3437,0.199,3438,0.199,3439,0.393,3440,1.058,3441,0.199,3442,0.199,3443,0.764,3444,0.764,3445,0.942,3446,0.199,3448,0.393,3449,0.199,3450,0.199,3451,0.199,3452,0.199,3453,0.199,3454,0.199,3455,0.581,3456,0.199,3457,0.199,3458,0.199,3459,0.199,3460,0.199,3461,0.189,3462,0.175,3463,0.393,3464,0.393,3465,0.393,3466,0.372,3469,0.189,3470,0.393,3471,0.199,3472,0.199,3473,0.393,3474,0.199,3475,0.199,3476,0.199,3477,0.199,3478,0.199,3479,0.189,3480,0.181,3481,0.199,3482,0.189,3483,0.199,3484,1.218,3485,0.372,3486,0.199,3487,0.199,3489,0.581,3490,0.893,3491,0.199,3492,0.199,3493,0.199,3494,0.393,3495,0.581,3496,0.199,3497,0.581,3498,0.189,3499,0.942,3500,0.393,3501,0.199,3502,0.372,3503,0.199,3504,0.199,3505,0.764,3506,0.393,3507,0.189,3508,0.393,3509,0.393,3510,0.199,3511,0.393,3512,0.764,3513,0.393,3515,0.199,3517,0.764,3518,0.199,3519,1.744,3521,1.374,3522,0.724,3523,0.393,3524,1.45,3525,0.581,3526,0.764,3527,0.393,3528,0.942,3529,0.393,3530,1.45,3531,0.393,3533,0.724,3534,0.199,3535,0.199,3536,0.393,3537,0.199,3538,0.764,3540,0.393,3541,0.393,3542,0.199,3543,0.393,3544,0.199,3545,0.581,3546,0.581,3547,0.393,3548,0.357,3549,0.199,3550,0.181,3551,0.581,3552,0.199,3553,0.199,3554,0.199,3555,0.199,3556,0.199,3557,0.199,3558,0.199,3559,0.393,3560,0.199,3561,0.199,3562,0.199,3563,0.199,3564,1.116,3565,0.189,3566,0.199,3567,0.199,3568,0.357,3569,0.199,3570,0.199,3571,0.199,3572,0.199,3573,0.189,3574,0.199,3575,0.199,3577,0.199,3578,0.199,3579,0.199,3580,0.199,3581,0.181,3583,0.199,3584,0.393,3585,0.393,3586,0.393,3587,0.372,3588,0.724,3589,0.724,3590,0.724,3591,0.724,3592,0.694,3593,0.724,3594,0.724,3595,0.764,3596,0.372,3597,0.393,3598,0.764,3599,0.393,3600,0.393,3601,0.393,3602,0.393,3603,0.393,3604,0.372,3605,0.372,3606,0.393,3607,0.393,3608,0.393,3609,0.393,3610,0.979,3611,0.199,3613,0.199,3614,0.893,3615,0.199,3616,0.694,3617,0.199,3618,0.199,3619,0.199,3620,0.199,3621,0.199,3622,0.199,3623,0.199,3624,0.199,3625,0.199,3626,0.199,3627,0.581,3628,0.393,3629,0.199,3630,0.393,3631,0.199,3632,0.199,3633,0.199,3634,0.581,3635,0.189,3636,0.372,3637,0.199,3638,0.393,3639,0.724,3640,1.611,3641,0.393,3642,0.393,3643,0.393,3644,0.393,3645,0.199,3646,0.393,3647,0.942,3648,0.856,3649,0.581,3650,0.393,3651,0.189,3652,0.199,3653,0.393,3654,0.393,3655,0.581,3656,0.199,3657,0.581,3658,0.724,3659,0.393,3660,0.199,3661,0.393,3662,0.199,3663,0.189,3664,0.393,3665,0.551,3666,0.199,3667,0.199,3668,0.199,3669,0.393,3670,0.581,3671,0.189,3672,0.357,3673,0.393,3674,0.189,3675,0.189,3676,0.581,3677,0.199,3678,0.393,3679,0.199,3680,0.181,3681,0.199,3682,0.199,3683,0.199,3684,0.199,3685,0.581,3686,0.199,3687,1.218,3688,0.764,3689,0.181,3690,0.764,3691,0.199,3692,0.199,3693,0.199,3694,0.393,3695,0.199,3696,0.199,3697,0.199,3698,0.393,3699,0.199,3700,0.581,3701,0.393,3702,0.393,3703,0.393,3704,0.393,3705,0.189,3706,0.199,3707,0.393,3708,0.189,3709,0.199,3710,0.181,3711,0.199,3712,0.199,3713,0.199,3714,0.199,3715,0.199,3716,0.199,3717,0.199,3718,0.199,3719,0.199,3720,0.199,3721,0.199,3722,0.199,3723,0.199,3724,0.199,3725,0.393,3726,0.199,3727,0.189,3728,0.393]],["component/10",[0,0.065,1,0.056,146,0.091]],["title/11-1",[46,30.28,139,34.219,154,7.059,174,31.661,303,24.687]],["name/11-1",[]],["text/11-1",[]],["component/11-1",[]],["title/11-2",[85,50.43,154,8.632,372,48.11]],["name/11-2",[]],["text/11-2",[]],["component/11-2",[]],["title/11-3",[23,42.056]],["name/11-3",[]],["text/11-3",[]],["component/11-3",[]],["title/11-4",[10,16.438,23,24.501,154,6.47,174,29.017,303,22.626,336,26.274]],["name/11-4",[]],["text/11-4",[]],["component/11-4",[]],["title/11-5",[23,24.501,154,6.47,174,29.017,303,22.626,336,26.274,411,26.398]],["name/11-5",[]],["text/11-5",[]],["component/11-5",[]],["title/11-6",[222,67.61]],["name/11-6",[]],["text/11-6",[]],["component/11-6",[]],["title/11-7",[10,16.438,154,6.47,174,29.017,222,39.388,303,22.626,336,26.274]],["name/11-7",[]],["text/11-7",[]],["component/11-7",[]],["title/11-8",[154,6.47,174,29.017,222,39.388,303,22.626,336,26.274,411,26.398]],["name/11-8",[]],["text/11-8",[]],["component/11-8",[]],["title/11-9",[669,60.042,670,56.046]],["name/11-9",[]],["text/11-9",[]],["component/11-9",[]],["title/11-10",[10,15.171,154,5.971,174,26.782,303,20.883,336,24.249,669,36.91,670,34.454]],["name/11-10",[]],["text/11-10",[]],["component/11-10",[]],["title/11-11",[154,5.971,174,26.782,303,20.883,336,24.249,411,24.364,669,36.91,670,34.454]],["name/11-11",[]],["text/11-11",[]],["component/11-11",[]],["title/11-12",[25,42.581,285,55.379]],["name/11-12",[]],["text/11-12",[]],["component/11-12",[]],["title/11-13",[10,15.171,25,26.176,154,5.971,174,26.782,285,34.043,303,20.883,336,24.249]],["name/11-13",[]],["text/11-13",[]],["component/11-13",[]],["title/11-14",[25,26.176,154,5.971,174,26.782,285,34.043,303,20.883,336,24.249,411,24.364]],["name/11-14",[]],["text/11-14",[]],["component/11-14",[]],["title/11-15",[25,42.581,140,55.379]],["name/11-15",[]],["text/11-15",[]],["component/11-15",[]],["title/11-16",[10,15.171,25,26.176,140,34.043,154,5.971,174,26.782,303,20.883,336,24.249]],["name/11-16",[]],["text/11-16",[]],["component/11-16",[]],["title/11-17",[25,26.176,140,34.043,154,5.971,174,26.782,303,20.883,336,24.249,411,24.364]],["name/11-17",[]],["text/11-17",[]],["component/11-17",[]],["title/11-18",[25,37.838,670,49.804,680,57.314]],["name/11-18",[]],["text/11-18",[]],["component/11-18",[]],["title/11-19",[10,14.086,25,24.303,154,5.544,174,24.866,303,19.389,336,22.514,670,31.989,680,36.812]],["name/11-19",[]],["text/11-19",[]],["component/11-19",[]],["title/11-20",[25,24.303,154,5.544,174,24.866,303,19.389,336,22.514,411,22.621,670,31.989,680,36.812]],["name/11-20",[]],["text/11-20",[]],["component/11-20",[]],["title/11-21",[25,42.581,684,62.075]],["name/11-21",[]],["text/11-21",[]],["component/11-21",[]],["title/11-22",[10,15.171,25,26.176,154,5.971,174,26.782,303,20.883,336,24.249,684,38.16]],["name/11-22",[]],["text/11-22",[]],["component/11-22",[]],["title/11-23",[154,6.47,174,29.017,303,22.626,336,26.274,411,26.398,684,41.345]],["name/11-23",[]],["text/11-23",[]],["component/11-23",[]],["title/11-24",[22,28.618]],["name/11-24",[]],["text/11-24",[]],["component/11-24",[]],["title/11-25",[10,16.438,22,16.672,154,6.47,303,22.626,336,26.274,689,34.62]],["name/11-25",[]],["text/11-25",[]],["component/11-25",[]],["title/11-26",[22,16.672,154,6.47,303,22.626,336,26.274,411,26.398,689,34.62]],["name/11-26",[]],["text/11-26",[]],["component/11-26",[]],["title/11-27",[497,77.168]],["name/11-27",[]],["text/11-27",[]],["component/11-27",[]],["title/11-28",[22,25.031,501,62.075]],["name/11-28",[]],["text/11-28",[]],["component/11-28",[]],["title/11-29",[25,42.581,420,44.916]],["name/11-29",[]],["text/11-29",[]],["component/11-29",[]],["title/11-30",[10,16.438,154,6.47,303,22.626,336,26.274,420,29.917,535,36.463]],["name/11-30",[]],["text/11-30",[]],["component/11-30",[]],["title/11-31",[154,6.47,303,22.626,336,26.274,411,26.398,420,29.917,535,36.463]],["name/11-31",[]],["text/11-31",[]],["component/11-31",[]],["title/11-32",[154,7.767,535,43.772,536,48.787,697,48.787]],["name/11-32",[]],["text/11-32",[]],["component/11-32",[]],["title/11-33",[10,17.935,154,7.059,535,39.784,536,44.343,697,44.343]],["name/11-33",[]],["text/11-33",[]],["component/11-33",[]],["title/11-34",[154,7.059,411,28.802,535,39.784,536,44.343,697,44.343]],["name/11-34",[]],["text/11-34",[]],["component/11-34",[]],["title/11-35",[15,35.252,23,29.412,154,7.767,390,31.689]],["name/11-35",[]],["text/11-35",[]],["component/11-35",[]],["title/11-36",[10,17.935,15,32.041,23,26.732,154,7.059,390,28.802]],["name/11-36",[]],["text/11-36",[]],["component/11-36",[]],["title/11-37",[15,32.041,23,26.732,154,7.059,390,28.802,411,28.802]],["name/11-37",[]],["text/11-37",[]],["component/11-37",[]],["title/11-38",[23,29.412,154,7.767,390,31.689,704,45.972]],["name/11-38",[]],["text/11-38",[]],["component/11-38",[]],["title/11-39",[10,17.935,23,26.732,154,7.059,390,28.802,704,41.785]],["name/11-39",[]],["text/11-39",[]],["component/11-39",[]],["title/11-40",[23,26.732,154,7.059,390,28.802,411,28.802,704,41.785]],["name/11-40",[]],["text/11-40",[]],["component/11-40",[]],["title/11-41",[154,7.767,390,31.689,704,45.972,708,48.787]],["name/11-41",[]],["text/11-41",[]],["component/11-41",[]],["title/11-42",[10,17.935,154,7.059,390,28.802,704,41.785,708,44.343]],["name/11-42",[]],["text/11-42",[]],["component/11-42",[]],["title/11-43",[390,31.689,411,31.689,704,45.972,708,48.787]],["name/11-43",[]],["text/11-43",[]],["component/11-43",[]],["title/11-44",[15,32.041,22,18.191,154,7.059,336,28.667,390,28.802]],["name/11-44",[]],["text/11-44",[]],["component/11-44",[]],["title/11-45",[10,16.438,15,29.366,22,16.672,154,6.47,336,26.274,390,26.398]],["name/11-45",[]],["text/11-45",[]],["component/11-45",[]],["title/11-46",[22,18.191,154,7.059,197,37.077,209,39.784,390,28.802]],["name/11-46",[]],["text/11-46",[]],["component/11-46",[]],["title/11-47",[10,16.438,22,16.672,154,6.47,197,33.982,209,36.463,390,26.398]],["name/11-47",[]],["text/11-47",[]],["component/11-47",[]],["title/11-48",[22,16.672,154,6.47,197,33.982,209,36.463,390,26.398,411,26.398]],["name/11-48",[]],["text/11-48",[]],["component/11-48",[]],["title/11-49",[154,9.713,717,71.428]],["name/11-49",[]],["text/11-49",[]],["component/11-49",[]],["title/11-50",[28,33.662,474,38.943,719,52.549]],["name/11-50",[]],["text/11-50",[]],["component/11-50",[]],["title/11-51",[28,33.662,481,29.767,719,52.549]],["name/11-51",[]],["text/11-51",[]],["component/11-51",[]],["title/11-52",[43,39.663,474,38.943,719,52.549]],["name/11-52",[]],["text/11-52",[]],["component/11-52",[]],["title/11-53",[43,39.663,481,29.767,719,52.549]],["name/11-53",[]],["text/11-53",[]],["component/11-53",[]],["title/11-54",[154,8.632,724,61.59,725,61.59]],["name/11-54",[]],["text/11-54",[]],["component/11-54",[]],["title/11-55",[10,19.733,154,7.767,724,55.417,725,55.417]],["name/11-55",[]],["text/11-55",[]],["component/11-55",[]],["title/11-56",[15,39.178,30,45.337,154,8.632]],["name/11-56",[]],["text/11-56",[]],["component/11-56",[]],["title/11-57",[30,45.337,154,8.632,208,43.807]],["name/11-57",[]],["text/11-57",[]],["component/11-57",[]],["title/11-58",[10,19.733,30,40.793,154,7.767,208,39.416]],["name/11-58",[]],["text/11-58",[]],["component/11-58",[]],["title/11-59",[30,40.793,154,7.767,208,39.416,411,31.689]],["name/11-59",[]],["text/11-59",[]],["component/11-59",[]],["title/11-60",[22,20.014,154,7.767,732,48.787,733,49.633]],["name/11-60",[]],["text/11-60",[]],["component/11-60",[]],["title/11-61",[10,17.935,22,18.191,154,7.059,732,44.343,733,45.112]],["name/11-61",[]],["text/11-61",[]],["component/11-61",[]],["title/11-62",[22,18.191,154,7.059,411,28.802,732,44.343,733,45.112]],["name/11-62",[]],["text/11-62",[]],["component/11-62",[]],["title/11-63",[22,22.243,154,8.632,689,46.188]],["name/11-63",[]],["text/11-63",[]],["component/11-63",[]],["title/11-64",[10,19.733,22,20.014,154,7.767,689,41.559]],["name/11-64",[]],["text/11-64",[]],["component/11-64",[]],["title/11-65",[22,20.014,154,7.767,411,31.689,689,41.559]],["name/11-65",[]],["text/11-65",[]],["component/11-65",[]],["title/11-66",[46,30.28,113,35.538,154,7.059,174,31.661,303,24.687]],["name/11-66",[]],["text/11-66",[]],["component/11-66",[]],["title/11-67",[25,37.838,154,8.632,741,57.314]],["name/11-67",[]],["text/11-67",[]],["component/11-67",[]],["title/11-68",[10,19.733,25,34.046,154,7.767,741,51.57]],["name/11-68",[]],["text/11-68",[]],["component/11-68",[]],["title/11-69",[30,45.337,154,8.632,208,43.807]],["name/11-69",[]],["text/11-69",[]],["component/11-69",[]],["title/11-70",[10,19.733,30,40.793,154,7.767,208,39.416]],["name/11-70",[]],["text/11-70",[]],["component/11-70",[]],["title/11-71",[10,19.733,65,44.279,66,48.787,532,39.743]],["name/11-71",[]],["text/11-71",[]],["component/11-71",[]],["title/11-72",[90,57.314,259,51.797,747,59.978]],["name/11-72",[]],["text/11-72",[]],["component/11-72",[]],["title/11-73",[30,40.793,154,7.767,208,39.416,411,31.689]],["name/11-73",[]],["text/11-73",[]],["component/11-73",[]],["title/11-74",[30,40.793,154,7.767,208,39.416,750,50.555]],["name/11-74",[]],["text/11-74",[]],["component/11-74",[]],["title/11-75",[154,7.767,752,50.555,753,51.57,754,53.967]],["name/11-75",[]],["text/11-75",[]],["component/11-75",[]],["title/11-76",[10,17.935,154,7.059,752,45.95,753,46.872,754,49.051]],["name/11-76",[]],["text/11-76",[]],["component/11-76",[]],["title/11-77",[154,7.767,205,38.792,208,39.416,757,52.698]],["name/11-77",[]],["text/11-77",[]],["component/11-77",[]],["title/11-78",[10,17.935,154,7.059,205,35.259,208,35.826,757,47.897]],["name/11-78",[]],["text/11-78",[]],["component/11-78",[]],["title/11-79",[154,7.767,508,41.964,519,48.007,760,48.007]],["name/11-79",[]],["text/11-79",[]],["component/11-79",[]],["title/11-80",[10,17.935,154,7.059,508,38.142,519,43.634,760,43.634]],["name/11-80",[]],["text/11-80",[]],["component/11-80",[]],["title/11-81",[154,7.767,197,40.793,209,43.772,390,31.689]],["name/11-81",[]],["text/11-81",[]],["component/11-81",[]],["title/11-82",[10,17.935,154,7.059,197,37.077,209,39.784,390,28.802]],["name/11-82",[]],["text/11-82",[]],["component/11-82",[]],["title/11-83",[154,7.059,197,37.077,209,39.784,390,28.802,411,28.802]],["name/11-83",[]],["text/11-83",[]],["component/11-83",[]],["title/11-84",[154,8.632,243,49.211,766,52.549]],["name/11-84",[]],["text/11-84",[]],["component/11-84",[]],["title/11-85",[10,19.733,154,7.767,243,44.279,766,47.282]],["name/11-85",[]],["text/11-85",[]],["component/11-85",[]],["title/11-86",[154,7.767,243,44.279,750,50.555,766,47.282]],["name/11-86",[]],["text/11-86",[]],["component/11-86",[]],["title/11-87",[154,8.632,503,47.108,689,46.188]],["name/11-87",[]],["text/11-87",[]],["component/11-87",[]],["title/11-88",[10,19.733,154,7.767,503,42.387,689,41.559]],["name/11-88",[]],["text/11-88",[]],["component/11-88",[]],["title/11-89",[154,7.767,411,31.689,503,42.387,689,41.559]],["name/11-89",[]],["text/11-89",[]],["component/11-89",[]],["title/11-90",[154,7.767,503,42.387,689,41.559,750,50.555]],["name/11-90",[]],["text/11-90",[]],["component/11-90",[]],["title/11-91",[154,10.633,211,42.828,227,36.621]],["name/11-91",[]],["text/11-91",[]],["component/11-91",[]],["title/11-92",[10,17.935,154,9.95,211,38.927,227,33.285]],["name/11-92",[]],["text/11-92",[]],["component/11-92",[]],["title/11-93",[154,7.767,347,45.972,508,41.964,519,48.007]],["name/11-93",[]],["text/11-93",[]],["component/11-93",[]],["title/11-94",[10,19.733,154,7.767,347,45.972,777,59.146]],["name/11-94",[]],["text/11-94",[]],["component/11-94",[]],["title/11-95",[154,7.767,420,35.913,779,48.787,780,48.787]],["name/11-95",[]],["text/11-95",[]],["component/11-95",[]],["title/11-96",[10,15.171,43,27.438,154,5.971,158,36.91,420,27.612,779,37.51,780,37.51]],["name/11-96",[]],["text/11-96",[]],["component/11-96",[]],["title/11-97",[10,15.171,28,23.287,154,5.971,158,36.91,420,27.612,779,37.51,780,37.51]],["name/11-97",[]],["text/11-97",[]],["component/11-97",[]],["title/11",[13,39.178,154,8.632,174,38.713]],["name/11",[5194,0.152]],["text/11",[0,3.047,1,3.423,2,0.209,3,5.274,6,0.249,7,0.934,9,0.227,10,2.881,11,4.238,12,1.109,13,4.258,14,1.527,15,3.054,16,0.298,17,0.463,18,0.343,20,0.119,22,3.29,23,3.526,24,2.306,25,4.081,26,2.779,28,3.439,29,2.555,30,4.336,31,5.124,32,0.514,35,0.115,36,2.103,37,0.107,38,0.231,42,1.01,43,3.446,44,2.655,45,2.322,46,0.222,47,0.111,48,1.713,49,0.106,51,2.155,52,0.641,53,0.796,56,0.531,57,0.474,58,1.789,59,1.037,60,2.374,61,2.336,63,1.91,65,3.487,66,2.914,70,0.129,73,0.265,74,0.444,75,0.119,77,1.216,78,0.394,79,0.872,80,1.258,84,1.183,85,5.376,89,2.876,90,0.117,96,1.99,97,0.122,98,0.343,99,2.103,100,0.227,102,0.587,104,4.075,108,2.142,109,0.117,110,2.388,111,0.236,112,3.196,113,1.827,114,0.119,118,1.35,121,0.351,124,0.738,125,4.507,126,0.436,127,1.743,132,1.023,133,1.447,134,2.142,135,1.556,137,0.603,139,3,140,1.461,141,3.945,142,0.117,143,1.815,144,3.72,145,4.078,148,1.068,150,0.854,151,0.436,152,2.502,153,1.083,154,1.449,155,0.444,156,1.059,157,0.337,158,3.825,159,0.755,162,0.126,163,2.608,164,0.227,166,2.765,167,0.33,168,0.219,170,0.343,171,0.196,172,1.44,173,0.119,174,2.434,175,1.068,176,0.249,177,1.352,178,1.923,179,0.122,181,0.119,182,2.3,183,0.265,184,0.122,185,1.552,195,0.689,197,1.668,199,0.38,201,3.756,205,0.875,208,4.994,209,3.104,211,5.211,214,2.481,215,1.004,220,1.702,222,0.611,223,1.585,224,0.681,227,0.083,230,1.825,233,0.122,235,5.287,239,0.215,241,4.002,243,1.743,246,0.104,252,4.709,254,0.757,258,0.603,259,3.156,262,0.343,263,2.311,266,0.666,271,0.322,272,2.576,274,4.46,277,0.185,279,1.098,282,1.638,284,1.233,285,2.068,286,1.504,288,0.934,290,1.004,292,3.797,294,0.986,297,0.681,299,2.763,303,3.515,305,0.163,316,2.769,317,1.068,322,3.251,323,0.115,331,0.209,336,3.444,341,0.053,342,0.681,345,0.522,347,2.212,350,1.99,356,2.034,364,0.315,366,4.831,368,0.111,371,0.453,372,4.469,376,1.912,378,0.666,380,0.755,384,2.409,390,4.267,400,0.351,404,0.999,411,2.344,414,1.052,416,0.102,420,2.894,422,2.69,427,0.573,432,0.351,437,0.192,442,0.666,443,0.343,445,0.242,450,2.69,458,3.148,461,0.54,474,1.379,477,5.427,481,1.467,485,1.668,488,0.463,492,2.03,497,0.912,501,1.21,503,5.249,508,0.709,512,1.299,519,0.717,521,4.058,523,0.757,526,1.841,532,2.56,535,3.407,536,2.48,542,1.01,552,0.485,555,0.097,558,0.302,559,1.196,571,1.267,573,0.215,586,0.623,611,0.992,620,0.32,635,1.44,641,0.854,642,0.854,644,1.016,645,0.119,654,5.745,656,0.579,669,0.62,670,0.757,680,0.231,684,0.436,689,3.831,697,0.728,704,2.746,708,0.918,717,0.738,719,2.004,724,0.249,725,2.008,732,1.768,733,2.319,741,0.77,747,2.287,750,2.362,752,0.55,753,2.261,754,1.316,757,0.787,760,0.903,766,4.174,777,0.394,779,0.918,780,2.545,787,0.126,792,2.103,803,3.018,805,0.453,810,0.731,813,0.227,854,0.44,855,0.188,860,2.622,866,4.062,868,4.831,880,0.572,910,1.141,913,1.95,922,0.302,925,1.141,926,0.738,950,0.681,952,0.122,1013,0.236,1054,0.573,1088,0.119,1091,1.585,1094,0.119,1113,0.463,1129,3.72,1134,0.351,1142,0.196,1160,3.739,1161,0.89,1164,1.141,1174,0.653,1186,0.117,1211,0.755,1213,0.33,1244,0.134,1250,2.622,1251,0.126,1252,0.369,1256,0.827,1258,0.359,1259,1.091,1261,2.03,1265,1.379,1266,0.587,1267,1.189,1270,1.251,1276,0.38,1277,5.191,1278,2.074,1280,0.242,1281,0.126,1286,1.548,1288,2.206,1293,2.886,1296,0.134,1297,3.024,1299,0.134,1300,0.126,1304,0.249,1305,2.16,1306,1.316,1308,0.827,1309,2.671,1312,1.529,1315,0.134,1316,2.366,1317,2.233,1321,1.739,1322,1.285,1323,0.126,1324,1.885,1328,1.075,1329,0.502,1330,0.474,1331,0.369,1332,0.38,1333,2.366,1334,0.122,1335,2.671,1337,0.621,1340,2.904,1344,3.024,1345,1.652,1347,0.119,1348,0.912,1349,1.829,1350,0.126,1352,1.442,1354,1.393,1356,0.134,1357,3.175,1358,0.129,1359,0.359,1361,0.787,1362,0.787,1363,0.122,1367,0.236,1368,0.936,1369,0.126,1371,0.603,1374,0.827,1375,0.52,1378,0.369,1380,0.965,1382,0.249,1384,0.764,1386,0.487,1388,0.129,1391,0.587,1393,0.502,1394,0.249,1395,0.603,1396,0.256,1401,0.134,1402,0.134,1403,2.049,1404,0.256,1405,0.256,1406,2.074,1407,0.797,1408,0.256,1409,2.181,1411,1.825,1412,0.134,1413,0.265,1414,0.487,1415,0.912,1416,0.126,1418,0.277,1420,2.185,1422,0.805,1423,0.369,1424,2.535,1425,1.285,1426,2.261,1428,0.14,1429,0.38,1430,0.249,1432,0.236,1434,0.369,1441,0.117,1443,0.134,1444,0.277,1448,0.738,1450,1.148,1453,0.573,1454,1.352,1461,0.249,1463,2.98,1469,2.763,1477,3.536,1487,0.129,1488,0.129,1489,0.359,1491,1.068,1492,0.369,1493,0.463,1496,3.603,1498,3.414,1499,3.412,1500,0.77,1501,0.359,1502,0.256,1503,0.122,1505,0.621,1506,0.122,1508,0.369,1509,1.043,1511,0.359,1512,0.129,1514,0.474,1517,0.697,1518,1.956,1519,1.075,1525,0.716,1527,0.265,1531,0.256,1538,1.183,1543,0.359,1544,0.126,1545,1.548,1546,0.134,1548,0.129,1549,0.265,1550,0.265,1557,0.14,1561,0.134,1563,2.535,1564,0.129,1566,0.697,1570,0.965,1571,0.359,1574,0.134,1578,0.265,1579,0.787,1583,0.277,1593,0.256,1598,0.249,1599,4.207,1600,1.737,1601,0.474,1603,1.413,1604,0.502,1605,0.787,1608,0.249,1617,1.043,1618,0.487,1619,0.394,1620,0.249,1621,0.129,1627,0.249,1628,0.134,1632,0.129,1633,0.52,1634,1.075,1651,0.738,1655,0.265,1659,1.825,1660,0.129,1662,0.992,1672,0.126,1674,0.129,1675,1.643,1677,0.14,1679,0.621,1681,0.129,1700,1.075,1710,0.134,1711,0.52,1714,0.126,1716,0.126,1722,2.041,1723,1.218,1724,0.129,1725,0.573,1726,0.277,1728,1.352,1731,1.451,1734,0.134,1735,0.126,1737,0.134,1739,0.126,1740,0.14,1741,0.242,1744,0.126,1760,0.883,1764,0.134,1767,0.134,1787,0.38,1792,0.126,1808,0.394,1821,0.256,1825,1.352,1832,0.236,1834,0.52,1852,0.129,1881,0.277,1885,0.394,1894,0.394,1904,0.487,1905,2.587,1917,0.394,1945,0.14,1962,1.285,1972,0.249,1975,0.256,1985,0.256,1986,0.134,1989,0.14,1993,0.999,1994,1.289,2028,0.265,2033,0.14,2050,0.394,2051,0.126,2056,0.52,2061,0.603,2064,0.122,2073,1.148,2078,0.126,2083,0.129,2093,1.075,2105,0.369,2112,1.148,2120,2.036,2122,0.999,2124,0.965,2134,0.242,2142,0.265,2156,0.716,2158,0.965,2200,0.126,2220,0.256,2234,1.113,2243,0.643,2252,0.394,2253,0.265,2259,0.122,2282,0.134,2283,0.256,2284,0.502,2285,0.52,2289,1.075,2293,0.369,2320,0.129,2321,0.965,2323,0.394,2364,0.134,2365,0.249,2366,0.134,2375,0.126,2402,0.394,2418,0.129,2423,0.256,2428,0.14,2430,0.249,2434,0.369,2437,0.249,2440,4.153,2441,1.161,2445,0.256,2448,0.242,2449,0.122,2450,0.38,2453,0.411,2455,0.14,2456,0.134,2457,0.277,2459,0.249,2461,0.738,2465,0.256,2466,0.134,2470,2.287,2471,1.043,2479,0.134,2482,0.14,2486,0.129,2487,0.265,2489,0.126,2490,0.394,2491,0.249,2495,1.934,2496,0.126,2497,0.14,2498,0.14,2499,0.14,2506,0.126,2518,0.126,2520,0.249,2526,0.134,2546,0.129,2561,0.394,2570,0.122,2571,0.14,2577,0.965,2582,0.14,2598,0.129,2599,1.316,2606,0.129,2616,0.129,2654,0.265,2665,0.134,2723,0.643,2772,0.14,2780,0.134,2800,1.451,2831,0.129,2836,1.379,2837,0.129,2908,0.643,2915,0.256,2925,0.394,2942,0.129,2947,0.643,2955,0.14,2965,0.921,2966,0.134,2971,0.126,2995,1.183,3004,0.643,3013,0.14,3031,0.256,3044,0.277,3056,0.249,3057,0.14,3062,0.249,3063,0.487,3113,0.14,3149,0.852,3164,0.265,3196,2.794,3199,0.277,3221,0.14,3223,0.38,3234,0.394,3236,1.495,3238,0.129,3247,0.256,3260,0.134,3273,0.411,3276,0.134,3281,0.14,3288,0.277,3301,0.542,3305,0.256,3310,0.38,3320,0.134,3338,0.14,3365,0.134,3380,2.593,3383,0.14,3410,0.14,3417,0.134,3462,0.129,3467,0.572,3469,0.14,3485,0.14,3519,0.265,3520,0.14,3521,0.542,3522,0.277,3548,0.134,3568,0.134,3581,0.134,3604,0.14,3610,0.129,3636,0.14,3639,0.14,3665,0.542,3672,0.134,3680,0.265,3689,0.134,3729,0.148,3730,0.148,3732,0.292,3733,0.14,3734,0.14,3735,2.041,3736,1.1,3737,0.148,3738,1.1,3739,0.972,3740,0.277,3741,0.148,3743,0.148,3744,0.148,3745,0.148,3746,0.148,3748,0.148,3749,0.148,3750,0.148,3752,0.148,3753,0.148,3754,0.148,3755,0.148,3757,0.292,3758,0.148,3759,0.148,3760,0.148,3761,0.148,3762,0.148,3764,0.148,3765,0.148,3766,0.148,3768,0.148,3769,0.148,3770,0.148,3771,0.148,3773,0.148,3774,0.14,3775,0.148,3777,0.708,3778,0.292,3779,0.292,3780,0.292,3781,0.292,3782,0.148,3783,0.14,3784,0.433,3785,0.148,3786,0.277,3788,0.14,3790,0.148,3791,0.148,3792,0.292,3793,0.148,3794,0.292,3795,0.148,3796,0.148,3797,0.148,3798,0.148,3799,0.148,3800,0.148,3801,0.148,3802,0.148,3804,0.148,3805,0.148,3806,0.277,3807,0.148,3808,0.708,3809,0.708,3810,0.433,3811,0.708,3812,0.708,3813,0.148,3814,0.14,3815,0.148,3816,0.148,3817,0.148,3819,0.148,3820,0.148,3821,0.148,3822,0.148,3824,0.292,3825,0.134,3826,0.411,3827,0.148,3828,0.148,3829,0.292,3830,0.14,3831,0.433,3832,0.14,3833,0.148,3834,0.148,3835,0.433,3836,0.148,3837,0.134,3838,0.148,3839,0.148,3840,0.148,3841,0.433,3842,0.708,3843,0.433,3844,0.14,3845,0.148,3846,0.572,3847,0.292,3848,0.292,3849,0.292,3850,0.277,3851,0.292,3852,0.292,3853,0.148,3854,0.148,3855,0.265,3856,0.148,3857,0.148,3858,0.411,3859,0.292,3860,0.292,3861,0.292,3862,0.292,3863,0.148,3864,0.148,3865,0.148,3866,0.134,3867,0.148,3868,0.148,3869,0.148,3870,0.148,3871,0.148,3872,0.148,3873,0.292,3874,0.433,3875,0.433,3876,0.433,3877,0.433,3878,0.643,3879,2.359,3880,1.348,3881,0.572,3882,0.572,3883,0.148,3884,0.292,3885,0.148,3886,0.292,3887,0.148,3888,0.148,3889,0.148,3890,0.572,3891,1.93,3892,0.292,3893,0.148,3894,0.433,3895,1.1,3896,0.841,3897,0.292,3898,0.292,3899,1.348,3900,0.292,3901,0.572,3902,0.411,3903,0.265,3904,0.148,3905,0.841,3906,0.14,3907,0.292,3938,0.134,3951,0.14,3960,0.134,3992,0.14,4007,0.134,4119,0.14,4150,0.14,4164,0.277,4231,0.134,4260,0.14,4340,0.542,4427,0.14,4586,0.14,4622,0.14,4638,0.134,4659,0.14,4678,0.265,4696,0.14,5000,0.265,5093,0.14,5100,0.14,5158,1.505,5161,0.277,5195,0.315,5196,0.315,5197,0.315,5198,0.315,5199,0.159,5200,0.468,5201,0.315,5202,0.159,5203,0.159,5204,0.159,5205,0.159,5206,0.159,5207,0.159,5208,0.159,5209,0.159,5210,0.159,5211,0.159,5212,0.159,5213,0.315,5214,0.159,5215,0.159,5216,0.159,5217,0.159,5218,0.315,5219,0.159,5220,0.315,5221,0.159,5222,0.159,5223,0.159,5224,0.159,5225,0.159,5226,0.159,5227,0.159,5228,0.159,5229,0.159,5230,0.159,5231,0.159,5232,0.159,5233,0.159,5234,0.159,5235,0.315,5236,0.315,5237,0.159,5238,0.468,5239,0.159,5240,0.159,5241,0.468,5242,0.159,5243,0.159,5244,0.159,5245,0.315,5246,0.618,5247,0.315,5248,0.159,5249,0.468,5250,0.159,5251,0.159,5252,0.159,5253,0.618,5254,0.159,5255,0.159,5256,0.315,5257,0.315,5258,0.159,5259,0.159,5260,0.315,5261,0.159,5262,0.159,5263,0.159,5264,0.159,5265,0.159,5266,0.159,5267,0.159,5268,0.159,5269,0.159,5270,0.159,5271,0.159,5272,0.159,5273,0.159,5274,0.315,5275,0.159,5276,0.159,5277,0.159,5278,0.159,5279,0.159,5280,0.159,5281,0.159,5282,0.159,5283,0.315,5284,0.159,5285,0.315,5286,0.159,5287,0.315,5288,0.159,5289,0.159,5290,0.159,5291,0.159,5292,0.618,5293,0.315,5294,0.148,5295,0.159,5296,0.159,5297,0.315,5298,0.315,5299,0.159,5300,0.159,5301,0.159,5302,0.159,5303,0.159,5304,0.159,5305,0.159,5306,0.159,5307,0.159,5308,0.159,5309,0.159,5310,0.159,5311,0.159,5312,0.159,5313,0.159,5314,0.315,5315,0.159,5316,0.159]],["component/11",[0,0.065,1,0.056,146,0.091]],["title/12-1",[29,27.066,52,45.112,154,7.059,182,27.893,784,45.112]],["name/12-1",[]],["text/12-1",[]],["component/12-1",[]],["title/12-2",[53,35.252,65,44.279,586,36.868,784,49.633]],["name/12-2",[]],["text/12-2",[]],["component/12-2",[]],["title/12-3",[42,48.787,586,36.868,784,49.633,787,55.417]],["name/12-3",[]],["text/12-3",[]],["component/12-3",[]],["title/12-4",[29,24.806,46,27.752,139,31.362,154,6.47,182,25.564,303,22.626]],["name/12-4",[]],["text/12-4",[]],["component/12-4",[]],["title/12-5",[51,53.013,420,44.916]],["name/12-5",[]],["text/12-5",[]],["component/12-5",[]],["title/12-6",[237,49.804,791,63.472,792,55.161]],["name/12-6",[]],["text/12-6",[]],["component/12-6",[]],["title/12-7",[28,37.881,29,37.243]],["name/12-7",[]],["text/12-7",[]],["component/12-7",[]],["title/12-8",[1,37.881,26,45.204]],["name/12-8",[]],["text/12-8",[]],["component/12-8",[]],["title/12-9",[10,19.733,252,44.812,796,57.111,797,59.146]],["name/12-9",[]],["text/12-9",[]],["component/12-9",[]],["title/12-10",[127,38.494,154,7.767,163,28.065,305,36.379]],["name/12-10",[]],["text/12-10",[]],["component/12-10",[]],["title/12-11",[79,33.315,154,7.767,305,36.379,548,30.826]],["name/12-11",[]],["text/12-11",[]],["component/12-11",[]],["title/12-12",[28,33.662,127,42.781,163,31.191]],["name/12-12",[]],["text/12-12",[]],["component/12-12",[]],["title/12-13",[10,19.733,29,29.778,182,30.689,305,36.379]],["name/12-13",[]],["text/12-13",[]],["component/12-13",[]],["title/12-14",[3,43.113,286,42.459,803,57.314]],["name/12-14",[]],["text/12-14",[]],["component/12-14",[]],["title/12-15",[366,46.428,805,64.498]],["name/12-15",[]],["text/12-15",[]],["component/12-15",[]],["title/12-16",[3,35.259,23,26.732,24,30.944,126,45.112,555,38.927]],["name/12-16",[]],["text/12-16",[]],["component/12-16",[]],["title/12-17",[3,38.792,286,38.204,303,27.161,808,49.633]],["name/12-17",[]],["text/12-17",[]],["component/12-17",[]],["title/12-18",[22,22.243,810,48.11,811,56.186]],["name/12-18",[]],["text/12-18",[]],["component/12-18",[]],["title/12-19",[14,35.259,811,45.95,813,45.95,814,50.369,815,50.369]],["name/12-19",[]],["text/12-19",[]],["component/12-19",[]],["title/12-20",[810,39.346,811,45.95,813,45.95,814,50.369,815,50.369]],["name/12-20",[]],["text/12-20",[]],["component/12-20",[]],["title/12-21",[3,38.792,286,38.204,303,27.161,818,55.417]],["name/12-21",[]],["text/12-21",[]],["component/12-21",[]],["title/12-22",[810,54.141,818,69.31]],["name/12-22",[]],["text/12-22",[]],["component/12-22",[]],["title/12-23",[154,8.632,163,31.191,305,40.432]],["name/12-23",[]],["text/12-23",[]],["component/12-23",[]],["title/12-24",[154,8.632,305,40.432,552,31.914]],["name/12-24",[]],["text/12-24",[]],["component/12-24",[]],["title/12-25",[154,8.632,305,40.432,341,26.109]],["name/12-25",[]],["text/12-25",[]],["component/12-25",[]],["title/12-26",[23,32.687,24,37.838,341,26.109]],["name/12-26",[]],["text/12-26",[]],["component/12-26",[]],["title/12-27",[341,29.381,390,39.633]],["name/12-27",[]],["text/12-27",[]],["component/12-27",[]],["title/12-28",[53,39.178,154,8.632,305,40.432]],["name/12-28",[]],["text/12-28",[]],["component/12-28",[]],["title/12-29",[154,8.632,305,40.432,335,43.113]],["name/12-29",[]],["text/12-29",[]],["component/12-29",[]],["title/12-30",[10,24.68,808,62.075]],["name/12-30",[]],["text/12-30",[]],["component/12-30",[]],["title/12-31",[67,42.781,211,47.598,829,59.978]],["name/12-31",[]],["text/12-31",[]],["component/12-31",[]],["title/12-32",[67,29.596,125,34.887,134,36.353,154,5.971,305,27.97,404,34.043,829,41.492]],["name/12-32",[]],["text/12-32",[]],["component/12-32",[]],["title/12-33",[15,39.178,620,53.354,792,55.161]],["name/12-33",[]],["text/12-33",[]],["component/12-33",[]],["title/12-34",[154,8.632,833,52.549,834,52.549]],["name/12-34",[]],["text/12-34",[]],["component/12-34",[]],["title/12-35",[79,33.315,548,30.826,833,47.282,834,47.282]],["name/12-35",[]],["text/12-35",[]],["component/12-35",[]],["title/12-36",[28,33.662,833,52.549,834,52.549]],["name/12-36",[]],["text/12-36",[]],["component/12-36",[]],["title/12-37",[10,17.935,29,27.066,182,27.893,833,42.976,834,42.976]],["name/12-37",[]],["text/12-37",[]],["component/12-37",[]],["title/12-38",[154,7.767,163,28.065,833,47.282,834,47.282]],["name/12-38",[]],["text/12-38",[]],["component/12-38",[]],["title/12-39",[552,31.914,833,52.549,834,52.549]],["name/12-39",[]],["text/12-39",[]],["component/12-39",[]],["title/12-40",[0,38.713,154,8.632,294,44.934]],["name/12-40",[]],["text/12-40",[]],["component/12-40",[]],["title/12-41",[13,39.178,29,33.095,182,34.107]],["name/12-41",[]],["text/12-41",[]],["component/12-41",[]],["title/12-42",[13,39.178,28,33.662,384,35.731]],["name/12-42",[]],["text/12-42",[]],["component/12-42",[]],["title/12-43",[154,8.632,844,49.804,845,48.647]],["name/12-43",[]],["text/12-43",[]],["component/12-43",[]],["title/12-44",[79,30.28,154,7.059,548,28.018,844,40.73,845,39.784]],["name/12-44",[]],["text/12-44",[]],["component/12-44",[]],["title/12-45",[3,35.259,154,7.059,656,40.73,844,40.73,845,39.784]],["name/12-45",[]],["text/12-45",[]],["component/12-45",[]],["title/12-46",[28,33.662,844,49.804,845,48.647]],["name/12-46",[]],["text/12-46",[]],["component/12-46",[]],["title/12-47",[154,7.767,163,28.065,844,44.812,845,43.772]],["name/12-47",[]],["text/12-47",[]],["component/12-47",[]],["title/12-48",[154,9.713,845,54.745]],["name/12-48",[]],["text/12-48",[]],["component/12-48",[]],["title/12-49",[154,7.767,552,28.716,844,44.812,845,43.772]],["name/12-49",[]],["text/12-49",[]],["component/12-49",[]],["title/12-50",[154,7.767,341,23.492,844,44.812,845,43.772]],["name/12-50",[]],["text/12-50",[]],["component/12-50",[]],["title/12-51",[854,50.567,855,52.484]],["name/12-51",[]],["text/12-51",[]],["component/12-51",[]],["title/12-52",[22,25.031,299,46.111]],["name/12-52",[]],["text/12-52",[]],["component/12-52",[]],["title/12-53",[858,88.217]],["name/12-53",[]],["text/12-53",[]],["component/12-53",[]],["title/12-54",[342,37.719,860,64.498]],["name/12-54",[]],["text/12-54",[]],["component/12-54",[]],["title/12-55",[342,37.719,368,61.018]],["name/12-55",[]],["text/12-55",[]],["component/12-55",[]],["title/12-56",[12,60.61]],["name/12-56",[]],["text/12-56",[]],["component/12-56",[]],["title/12-57",[53,35.252,154,7.767,844,44.812,845,43.772]],["name/12-57",[]],["text/12-57",[]],["component/12-57",[]],["title/12-58",[13,32.041,153,43.634,810,39.346,865,51.909,866,46.872]],["name/12-58",[]],["text/12-58",[]],["component/12-58",[]],["title/12-59",[1,27.529,303,24.687,462,41.785,474,31.849,868,46.872]],["name/12-59",[]],["text/12-59",[]],["component/12-59",[]],["title/12-60",[154,8.632,870,47.598,871,47.598]],["name/12-60",[]],["text/12-60",[]],["component/12-60",[]],["title/12-61",[79,30.28,154,7.059,548,28.018,870,38.927,871,38.927]],["name/12-61",[]],["text/12-61",[]],["component/12-61",[]],["title/12-62",[28,33.662,870,47.598,871,47.598]],["name/12-62",[]],["text/12-62",[]],["component/12-62",[]],["title/12-63",[10,17.935,29,27.066,182,27.893,870,38.927,871,38.927]],["name/12-63",[]],["text/12-63",[]],["component/12-63",[]],["title/12-64",[154,7.767,163,28.065,870,42.828,871,42.828]],["name/12-64",[]],["text/12-64",[]],["component/12-64",[]],["title/12-65",[552,31.914,870,47.598,871,47.598]],["name/12-65",[]],["text/12-65",[]],["component/12-65",[]],["title/12-66",[23,26.732,341,21.352,342,27.411,870,38.927,871,38.927]],["name/12-66",[]],["text/12-66",[]],["component/12-66",[]],["title/12-67",[24,30.944,341,21.352,342,27.411,870,38.927,871,38.927]],["name/12-67",[]],["text/12-67",[]],["component/12-67",[]],["title/12-68",[341,21.352,342,27.411,870,38.927,871,38.927,880,40.245]],["name/12-68",[]],["text/12-68",[]],["component/12-68",[]],["title/12-69",[341,21.352,342,27.411,571,41.243,870,38.927,871,38.927]],["name/12-69",[]],["text/12-69",[]],["component/12-69",[]],["title/12-70",[154,9.713,883,57.497]],["name/12-70",[]],["text/12-70",[]],["component/12-70",[]],["title/12-71",[79,33.315,154,7.767,548,30.826,883,45.972]],["name/12-71",[]],["text/12-71",[]],["component/12-71",[]],["title/12-72",[28,37.881,883,57.497]],["name/12-72",[]],["text/12-72",[]],["component/12-72",[]],["title/12-73",[10,19.733,29,29.778,182,30.689,883,45.972]],["name/12-73",[]],["text/12-73",[]],["component/12-73",[]],["title/12-74",[154,8.632,163,31.191,883,51.093]],["name/12-74",[]],["text/12-74",[]],["component/12-74",[]],["title/12-75",[552,35.915,883,57.497]],["name/12-75",[]],["text/12-75",[]],["component/12-75",[]],["title/12-76",[341,29.381,883,57.497]],["name/12-76",[]],["text/12-76",[]],["component/12-76",[]],["title/12-77",[854,50.567,855,52.484]],["name/12-77",[]],["text/12-77",[]],["component/12-77",[]],["title/12-78",[892,84.574]],["name/12-78",[]],["text/12-78",[]],["component/12-78",[]],["title/12-79",[23,42.056]],["name/12-79",[]],["text/12-79",[]],["component/12-79",[]],["title/12-80",[24,48.683]],["name/12-80",[]],["text/12-80",[]],["component/12-80",[]],["title/12-81",[341,29.381,390,39.633]],["name/12-81",[]],["text/12-81",[]],["component/12-81",[]],["title/12-82",[154,9.713,563,48.144]],["name/12-82",[]],["text/12-82",[]],["component/12-82",[]],["title/12-83",[79,33.315,154,7.767,548,30.826,563,38.494]],["name/12-83",[]],["text/12-83",[]],["component/12-83",[]],["title/12-84",[28,37.881,563,48.144]],["name/12-84",[]],["text/12-84",[]],["component/12-84",[]],["title/12-85",[10,19.733,29,29.778,182,30.689,563,38.494]],["name/12-85",[]],["text/12-85",[]],["component/12-85",[]],["title/12-86",[366,46.428,901,69.31]],["name/12-86",[]],["text/12-86",[]],["component/12-86",[]],["title/12-87",[154,8.632,163,31.191,563,42.781]],["name/12-87",[]],["text/12-87",[]],["component/12-87",[]],["title/12-88",[154,8.632,552,31.914,563,42.781]],["name/12-88",[]],["text/12-88",[]],["component/12-88",[]],["title/12-89",[154,8.632,341,26.109,563,42.781]],["name/12-89",[]],["text/12-89",[]],["component/12-89",[]],["title/12-90",[854,50.567,855,52.484]],["name/12-90",[]],["text/12-90",[]],["component/12-90",[]],["title/12-91",[345,68.646]],["name/12-91",[]],["text/12-91",[]],["component/12-91",[]],["title/12-92",[571,64.884]],["name/12-92",[]],["text/12-92",[]],["component/12-92",[]],["title/12-93",[53,39.178,154,8.632,563,42.781]],["name/12-93",[]],["text/12-93",[]],["component/12-93",[]],["title/12-94",[559,47.598,910,56.186,911,65.734]],["name/12-94",[]],["text/12-94",[]],["component/12-94",[]],["title/12-95",[26,40.169,523,49.804,913,57.314]],["name/12-95",[]],["text/12-95",[]],["component/12-95",[]],["title/12-96",[154,9.713,384,40.209]],["name/12-96",[]],["text/12-96",[]],["component/12-96",[]],["title/12-97",[79,33.315,154,7.767,384,32.15,548,30.826]],["name/12-97",[]],["text/12-97",[]],["component/12-97",[]],["title/12-98",[10,21.931,28,33.662,384,35.731]],["name/12-98",[]],["text/12-98",[]],["component/12-98",[]],["title/12-99",[10,19.733,29,29.778,182,30.689,384,32.15]],["name/12-99",[]],["text/12-99",[]],["component/12-99",[]],["title/12-100",[154,8.632,163,31.191,384,35.731]],["name/12-100",[]],["text/12-100",[]],["component/12-100",[]],["title/12-101",[154,8.632,384,35.731,552,31.914]],["name/12-101",[]],["text/12-101",[]],["component/12-101",[]],["title/12-102",[154,8.632,341,26.109,384,35.731]],["name/12-102",[]],["text/12-102",[]],["component/12-102",[]],["title/12-103",[23,26.732,24,30.944,167,45.112,341,21.352,922,41.243]],["name/12-103",[]],["text/12-103",[]],["component/12-103",[]],["title/12-104",[341,29.381,390,39.633]],["name/12-104",[]],["text/12-104",[]],["component/12-104",[]],["title/12-105",[925,56.186,926,63.472,927,63.472]],["name/12-105",[]],["text/12-105",[]],["component/12-105",[]],["title/12-106",[154,8.632,335,43.113,384,35.731]],["name/12-106",[]],["text/12-106",[]],["component/12-106",[]],["title/12-107",[77,43.113,154,8.632,930,58.567]],["name/12-107",[]],["text/12-107",[]],["component/12-107",[]],["title/12-108",[77,38.792,79,33.315,154,7.767,548,30.826]],["name/12-108",[]],["text/12-108",[]],["component/12-108",[]],["title/12-109",[10,21.931,77,43.113,154,8.632]],["name/12-109",[]],["text/12-109",[]],["component/12-109",[]],["title/12-110",[10,19.733,29,29.778,77,38.792,182,30.689]],["name/12-110",[]],["text/12-110",[]],["component/12-110",[]],["title/12-111",[77,43.113,154,8.632,163,31.191]],["name/12-111",[]],["text/12-111",[]],["component/12-111",[]],["title/12-112",[77,43.113,154,8.632,552,31.914]],["name/12-112",[]],["text/12-112",[]],["component/12-112",[]],["title/12-113",[77,43.113,154,8.632,341,26.109]],["name/12-113",[]],["text/12-113",[]],["component/12-113",[]],["title/12-114",[1,25.231,26,30.109,77,32.315,104,35.677,922,37.799,930,43.899]],["name/12-114",[]],["text/12-114",[]],["component/12-114",[]],["title/12-115",[1,25.231,26,30.109,77,32.315,104,35.677,922,37.799,930,43.899]],["name/12-115",[]],["text/12-115",[]],["component/12-115",[]],["title/12-116",[341,29.381,390,39.633]],["name/12-116",[]],["text/12-116",[]],["component/12-116",[]],["title/12-117",[154,9.713,941,57.497]],["name/12-117",[]],["text/12-117",[]],["component/12-117",[]],["title/12-118",[79,33.315,154,7.767,548,30.826,941,45.972]],["name/12-118",[]],["text/12-118",[]],["component/12-118",[]],["title/12-119",[10,21.931,154,8.632,941,51.093]],["name/12-119",[]],["text/12-119",[]],["component/12-119",[]],["title/12-120",[10,19.733,29,29.778,182,30.689,941,45.972]],["name/12-120",[]],["text/12-120",[]],["component/12-120",[]],["title/12-121",[154,8.632,163,31.191,941,51.093]],["name/12-121",[]],["text/12-121",[]],["component/12-121",[]],["title/12-122",[154,8.632,552,31.914,941,51.093]],["name/12-122",[]],["text/12-122",[]],["component/12-122",[]],["title/12-123",[154,8.632,341,26.109,941,51.093]],["name/12-123",[]],["text/12-123",[]],["component/12-123",[]],["title/12-124",[854,50.567,855,52.484]],["name/12-124",[]],["text/12-124",[]],["component/12-124",[]],["title/12-125",[950,75.353]],["name/12-125",[]],["text/12-125",[]],["component/12-125",[]],["title/12-126",[952,77.168]],["name/12-126",[]],["text/12-126",[]],["component/12-126",[]],["title/12-127",[341,29.381,390,39.633]],["name/12-127",[]],["text/12-127",[]],["component/12-127",[]],["title/12-128",[154,8.632,955,47.598,956,51.093]],["name/12-128",[]],["text/12-128",[]],["component/12-128",[]],["title/12-129",[79,30.28,154,7.059,548,28.018,955,38.927,956,41.785]],["name/12-129",[]],["text/12-129",[]],["component/12-129",[]],["title/12-130",[28,33.662,955,47.598,956,51.093]],["name/12-130",[]],["text/12-130",[]],["component/12-130",[]],["title/12-131",[10,17.935,29,27.066,182,27.893,955,38.927,956,41.785]],["name/12-131",[]],["text/12-131",[]],["component/12-131",[]],["title/12-132",[154,7.767,163,28.065,955,42.828,956,45.972]],["name/12-132",[]],["text/12-132",[]],["component/12-132",[]],["title/12-133",[154,7.767,552,28.716,955,42.828,956,45.972]],["name/12-133",[]],["text/12-133",[]],["component/12-133",[]],["title/12-134",[154,7.767,341,23.492,955,42.828,956,45.972]],["name/12-134",[]],["text/12-134",[]],["component/12-134",[]],["title/12-135",[23,42.056]],["name/12-135",[]],["text/12-135",[]],["component/12-135",[]],["title/12-136",[24,48.683]],["name/12-136",[]],["text/12-136",[]],["component/12-136",[]],["title/12-137",[526,56.362]],["name/12-137",[]],["text/12-137",[]],["component/12-137",[]],["title/12-138",[532,49.707,967,73.973]],["name/12-138",[]],["text/12-138",[]],["component/12-138",[]],["title/12-139",[341,29.381,390,39.633]],["name/12-139",[]],["text/12-139",[]],["component/12-139",[]],["title/12-140",[341,29.381,880,55.379]],["name/12-140",[]],["text/12-140",[]],["component/12-140",[]],["title/12-141",[23,26.732,132,38.142,154,7.059,437,38.927,971,35.826]],["name/12-141",[]],["text/12-141",[]],["component/12-141",[]],["title/12-142",[23,22.613,79,25.614,132,32.264,154,5.971,437,32.928,548,23.7,971,30.305]],["name/12-142",[]],["text/12-142",[]],["component/12-142",[]],["title/12-143",[23,26.732,28,27.529,29,27.066,132,38.142,437,38.927]],["name/12-143",[]],["text/12-143",[]],["component/12-143",[]],["title/12-144",[10,15.171,23,22.613,29,22.895,132,32.264,182,23.595,437,32.928,971,30.305]],["name/12-144",[]],["text/12-144",[]],["component/12-144",[]],["title/12-145",[23,24.501,132,34.958,154,6.47,163,23.379,437,35.677,971,32.835]],["name/12-145",[]],["text/12-145",[]],["component/12-145",[]],["title/12-146",[23,24.501,132,34.958,154,6.47,437,35.677,552,23.921,971,32.835]],["name/12-146",[]],["text/12-146",[]],["component/12-146",[]],["title/12-147",[23,24.501,132,34.958,154,6.47,341,19.57,437,35.677,971,32.835]],["name/12-147",[]],["text/12-147",[]],["component/12-147",[]],["title/12-148",[23,42.056]],["name/12-148",[]],["text/12-148",[]],["component/12-148",[]],["title/12-149",[24,48.683]],["name/12-149",[]],["text/12-149",[]],["component/12-149",[]],["title/12-150",[880,63.315]],["name/12-150",[]],["text/12-150",[]],["component/12-150",[]],["title/12-151",[571,64.884]],["name/12-151",[]],["text/12-151",[]],["component/12-151",[]],["title/12-152",[154,9.713,983,58.29]],["name/12-152",[]],["text/12-152",[]],["component/12-152",[]],["title/12-153",[79,41.666,548,38.553]],["name/12-153",[]],["text/12-153",[]],["component/12-153",[]],["title/12-154",[10,19.733,29,29.778,182,30.689,983,46.606]],["name/12-154",[]],["text/12-154",[]],["component/12-154",[]],["title/12-155",[10,21.931,28,33.662,983,51.797]],["name/12-155",[]],["text/12-155",[]],["component/12-155",[]],["title/12-156",[10,21.931,28,33.662,127,42.781]],["name/12-156",[]],["text/12-156",[]],["component/12-156",[]],["title/12-157",[154,8.632,552,31.914,983,51.797]],["name/12-157",[]],["text/12-157",[]],["component/12-157",[]],["title/12-158",[154,8.632,341,26.109,983,51.797]],["name/12-158",[]],["text/12-158",[]],["component/12-158",[]],["title/12-159",[23,36.785,341,29.381]],["name/12-159",[]],["text/12-159",[]],["component/12-159",[]],["title/12-160",[24,42.581,341,29.381]],["name/12-160",[]],["text/12-160",[]],["component/12-160",[]],["title/12-161",[341,29.381,880,55.379]],["name/12-161",[]],["text/12-161",[]],["component/12-161",[]],["title/12-162",[341,29.381,571,56.751]],["name/12-162",[]],["text/12-162",[]],["component/12-162",[]],["title/12-163",[154,9.713,995,57.497]],["name/12-163",[]],["text/12-163",[]],["component/12-163",[]],["title/12-164",[79,33.315,154,7.767,548,30.826,995,45.972]],["name/12-164",[]],["text/12-164",[]],["component/12-164",[]],["title/12-165",[12,42.387,294,40.431,620,48.007,998,53.967]],["name/12-165",[]],["text/12-165",[]],["component/12-165",[]],["title/12-166",[14,43.113,366,41.256,1000,65.734]],["name/12-166",[]],["text/12-166",[]],["component/12-166",[]],["title/12-167",[79,37.025,154,8.632,995,51.093]],["name/12-167",[]],["text/12-167",[]],["component/12-167",[]],["title/12-168",[10,21.931,154,8.632,995,51.093]],["name/12-168",[]],["text/12-168",[]],["component/12-168",[]],["title/12-169",[10,19.733,29,29.778,182,30.689,995,45.972]],["name/12-169",[]],["text/12-169",[]],["component/12-169",[]],["title/12-170",[154,8.632,163,31.191,995,51.093]],["name/12-170",[]],["text/12-170",[]],["component/12-170",[]],["title/12-171",[154,8.632,552,31.914,995,51.093]],["name/12-171",[]],["text/12-171",[]],["component/12-171",[]],["title/12-172",[22,18.191,23,26.732,341,21.352,342,27.411,1007,39.784]],["name/12-172",[]],["text/12-172",[]],["component/12-172",[]],["title/12-173",[24,30.944,341,21.352,342,27.411,1007,39.784,1009,50.369]],["name/12-173",[]],["text/12-173",[]],["component/12-173",[]],["title/12-174",[24,30.944,341,21.352,342,27.411,414,42.361,1007,39.784]],["name/12-174",[]],["text/12-174",[]],["component/12-174",[]],["title/12-175",[23,29.412,341,23.492,342,30.158,1007,43.772]],["name/12-175",[]],["text/12-175",[]],["component/12-175",[]],["title/12-176",[341,23.492,342,30.158,1007,43.772,1013,52.698]],["name/12-176",[]],["text/12-176",[]],["component/12-176",[]],["title/12-177",[22,18.191,341,21.352,342,27.411,880,40.245,1007,39.784]],["name/12-177",[]],["text/12-177",[]],["component/12-177",[]],["title/12-178",[22,18.191,341,21.352,342,27.411,571,41.243,1007,39.784]],["name/12-178",[]],["text/12-178",[]],["component/12-178",[]],["title/12-179",[1,25.231,23,35.408,26,30.109,341,19.57,342,25.123]],["name/12-179",[]],["text/12-179",[]],["component/12-179",[]],["title/12-180",[1,25.231,24,28.361,26,30.109,341,19.57,342,25.123,414,38.824]],["name/12-180",[]],["text/12-180",[]],["component/12-180",[]],["title/12-181",[1,25.231,24,28.361,26,30.109,341,19.57,342,25.123,1009,46.164]],["name/12-181",[]],["text/12-181",[]],["component/12-181",[]],["title/12-182",[1,23.287,23,22.613,26,27.789,222,36.353,341,18.062,342,23.187,1007,33.653]],["name/12-182",[]],["text/12-182",[]],["component/12-182",[]],["title/12-183",[1,23.287,22,15.387,26,27.789,341,18.062,342,23.187,1007,33.653,1013,40.516]],["name/12-183",[]],["text/12-183",[]],["component/12-183",[]],["title/12-184",[154,7.059,1022,40.73,1023,51.909,1024,41.785,1025,41.243]],["name/12-184",[]],["text/12-184",[]],["component/12-184",[]],["title/12-185",[79,27.752,154,6.47,548,25.679,1022,37.33,1024,38.296,1025,37.799]],["name/12-185",[]],["text/12-185",[]],["component/12-185",[]],["title/12-186",[10,16.438,29,24.806,182,25.564,1022,37.33,1024,38.296,1025,37.799]],["name/12-186",[]],["text/12-186",[]],["component/12-186",[]],["title/12-187",[154,7.059,163,25.509,1022,40.73,1024,41.785,1025,41.243]],["name/12-187",[]],["text/12-187",[]],["component/12-187",[]],["title/12-188",[154,7.059,552,26.1,1022,40.73,1024,41.785,1025,41.243]],["name/12-188",[]],["text/12-188",[]],["component/12-188",[]],["title/12-189",[154,7.059,341,21.352,1022,40.73,1024,41.785,1025,41.243]],["name/12-189",[]],["text/12-189",[]],["component/12-189",[]],["title/12-190",[854,50.567,855,52.484]],["name/12-190",[]],["text/12-190",[]],["component/12-190",[]],["title/12-191",[23,42.056]],["name/12-191",[]],["text/12-191",[]],["component/12-191",[]],["title/12-192",[24,48.683]],["name/12-192",[]],["text/12-192",[]],["component/12-192",[]],["title/12-193",[345,68.646]],["name/12-193",[]],["text/12-193",[]],["component/12-193",[]],["title/12-194",[341,29.381,390,39.633]],["name/12-194",[]],["text/12-194",[]],["component/12-194",[]],["title/12-195",[53,32.041,154,7.059,1022,40.73,1024,41.785,1025,41.243]],["name/12-195",[]],["text/12-195",[]],["component/12-195",[]],["title/12-196",[15,39.178,154,8.632,532,44.17]],["name/12-196",[]],["text/12-196",[]],["component/12-196",[]],["title/12-197",[15,32.041,79,30.28,154,7.059,532,36.123,548,28.018]],["name/12-197",[]],["text/12-197",[]],["component/12-197",[]],["title/12-198",[10,19.733,15,35.252,154,7.767,532,39.743]],["name/12-198",[]],["text/12-198",[]],["component/12-198",[]],["title/12-199",[10,17.935,15,32.041,29,27.066,182,27.893,532,36.123]],["name/12-199",[]],["text/12-199",[]],["component/12-199",[]],["title/12-200",[15,35.252,154,7.767,163,28.065,532,39.743]],["name/12-200",[]],["text/12-200",[]],["component/12-200",[]],["title/12-201",[15,35.252,154,7.767,532,39.743,552,28.716]],["name/12-201",[]],["text/12-201",[]],["component/12-201",[]],["title/12-202",[15,35.252,154,7.767,341,23.492,532,39.743]],["name/12-202",[]],["text/12-202",[]],["component/12-202",[]],["title/12-203",[854,50.567,855,52.484]],["name/12-203",[]],["text/12-203",[]],["component/12-203",[]],["title/12-204",[23,42.056]],["name/12-204",[]],["text/12-204",[]],["component/12-204",[]],["title/12-205",[24,48.683]],["name/12-205",[]],["text/12-205",[]],["component/12-205",[]],["title/12-206",[154,9.713,1048,53.564]],["name/12-206",[]],["text/12-206",[]],["component/12-206",[]],["title/12-207",[79,33.315,154,7.767,548,30.826,1048,42.828]],["name/12-207",[]],["text/12-207",[]],["component/12-207",[]],["title/12-208",[10,17.935,28,27.529,154,7.059,542,44.343,1048,38.927]],["name/12-208",[]],["text/12-208",[]],["component/12-208",[]],["title/12-209",[14,35.259,29,27.066,182,27.893,542,44.343,1048,38.927]],["name/12-209",[]],["text/12-209",[]],["component/12-209",[]],["title/12-210",[10,21.931,154,8.632,1048,47.598]],["name/12-210",[]],["text/12-210",[]],["component/12-210",[]],["title/12-211",[10,19.733,28,30.288,1048,42.828,1054,52.698]],["name/12-211",[]],["text/12-211",[]],["component/12-211",[]],["title/12-212",[10,19.733,29,29.778,182,30.689,1048,42.828]],["name/12-212",[]],["text/12-212",[]],["component/12-212",[]],["title/12-213",[154,8.632,163,31.191,1048,47.598]],["name/12-213",[]],["text/12-213",[]],["component/12-213",[]],["title/12-214",[154,8.632,552,31.914,1048,47.598]],["name/12-214",[]],["text/12-214",[]],["component/12-214",[]],["title/12-215",[154,8.632,341,26.109,1048,47.598]],["name/12-215",[]],["text/12-215",[]],["component/12-215",[]],["title/12-216",[171,39.784,341,21.352,854,36.748,855,38.142,922,41.243]],["name/12-216",[]],["text/12-216",[]],["component/12-216",[]],["title/12-217",[24,48.683]],["name/12-217",[]],["text/12-217",[]],["component/12-217",[]],["title/12-218",[341,29.381,880,55.379]],["name/12-218",[]],["text/12-218",[]],["component/12-218",[]],["title/12-219",[154,8.632,955,47.598,1063,58.567]],["name/12-219",[]],["text/12-219",[]],["component/12-219",[]],["title/12-220",[79,41.666,548,38.553]],["name/12-220",[]],["text/12-220",[]],["component/12-220",[]],["title/12-221",[28,33.662,955,47.598,1063,58.567]],["name/12-221",[]],["text/12-221",[]],["component/12-221",[]],["title/12-222",[10,17.935,29,27.066,182,27.893,955,38.927,1063,47.897]],["name/12-222",[]],["text/12-222",[]],["component/12-222",[]],["title/12-223",[154,9.713,163,35.101]],["name/12-223",[]],["text/12-223",[]],["component/12-223",[]],["title/12-224",[154,9.713,552,35.915]],["name/12-224",[]],["text/12-224",[]],["component/12-224",[]],["title/12-225",[154,9.713,341,29.381]],["name/12-225",[]],["text/12-225",[]],["component/12-225",[]],["title/12-226",[23,42.056]],["name/12-226",[]],["text/12-226",[]],["component/12-226",[]],["title/12-227",[129,41.842,154,8.632,971,43.807]],["name/12-227",[]],["text/12-227",[]],["component/12-227",[]],["title/12-228",[79,33.315,129,37.649,548,30.826,971,39.416]],["name/12-228",[]],["text/12-228",[]],["component/12-228",[]],["title/12-229",[28,33.662,29,33.095,129,41.842]],["name/12-229",[]],["text/12-229",[]],["component/12-229",[]],["title/12-230",[3,29.825,139,28.946,252,34.454,303,20.883,386,34.043,656,34.454,971,30.305]],["name/12-230",[]],["text/12-230",[]],["component/12-230",[]],["title/12-231",[10,17.935,28,27.529,252,40.73,386,40.245,971,35.826]],["name/12-231",[]],["text/12-231",[]],["component/12-231",[]],["title/12-232",[10,17.935,29,27.066,129,34.219,182,27.893,971,35.826]],["name/12-232",[]],["text/12-232",[]],["component/12-232",[]],["title/12-233",[129,37.649,154,7.767,163,28.065,971,39.416]],["name/12-233",[]],["text/12-233",[]],["component/12-233",[]],["title/12-234",[129,37.649,154,7.767,552,28.716,971,39.416]],["name/12-234",[]],["text/12-234",[]],["component/12-234",[]],["title/12-235",[129,37.649,154,7.767,341,23.492,971,39.416]],["name/12-235",[]],["text/12-235",[]],["component/12-235",[]],["title/12-236",[854,50.567,855,52.484]],["name/12-236",[]],["text/12-236",[]],["component/12-236",[]],["title/12-237",[23,42.056]],["name/12-237",[]],["text/12-237",[]],["component/12-237",[]],["title/12-238",[24,48.683]],["name/12-238",[]],["text/12-238",[]],["component/12-238",[]],["title/12-239",[29,24.806,46,27.752,113,32.571,154,6.47,182,25.564,303,22.626]],["name/12-239",[]],["text/12-239",[]],["component/12-239",[]],["title/12-240",[29,29.778,89,41.169,154,7.767,182,30.689]],["name/12-240",[]],["text/12-240",[]],["component/12-240",[]],["title/12-241",[23,26.732,24,30.944,25,30.944,58,39.784,1086,53.758]],["name/12-241",[]],["text/12-241",[]],["component/12-241",[]],["title/12-242",[29,29.778,154,7.767,182,30.689,1088,52.698]],["name/12-242",[]],["text/12-242",[]],["component/12-242",[]],["title/12-243",[51,53.013,420,44.916]],["name/12-243",[]],["text/12-243",[]],["component/12-243",[]],["title/12-244",[51,53.013,1091,63.229]],["name/12-244",[]],["text/12-244",[]],["component/12-244",[]],["title/12-245",[51,53.013,450,57.497]],["name/12-245",[]],["text/12-245",[]],["component/12-245",[]],["title/12-246",[29,27.066,154,7.059,182,27.893,1088,47.897,1094,47.897]],["name/12-246",[]],["text/12-246",[]],["component/12-246",[]],["title/12-247",[450,57.497,1091,63.229]],["name/12-247",[]],["text/12-247",[]],["component/12-247",[]],["title/12-248",[29,27.066,58,39.784,182,27.893,450,41.785,1097,53.758]],["name/12-248",[]],["text/12-248",[]],["component/12-248",[]],["title/12-249",[154,9.713,1099,50.567]],["name/12-249",[]],["text/12-249",[]],["component/12-249",[]],["title/12-250",[79,41.666,548,38.553]],["name/12-250",[]],["text/12-250",[]],["component/12-250",[]],["title/12-251",[10,21.931,154,8.632,1102,65.734]],["name/12-251",[]],["text/12-251",[]],["component/12-251",[]],["title/12-252",[59,41.785,127,34.987,163,25.509,474,31.849,1104,53.758]],["name/12-252",[]],["text/12-252",[]],["component/12-252",[]],["title/12-253",[78,49.804,420,39.913,548,34.259]],["name/12-253",[]],["text/12-253",[]],["component/12-253",[]],["title/12-254",[47,61.018,411,39.633]],["name/12-254",[]],["text/12-254",[]],["component/12-254",[]],["title/12-255",[29,29.778,60,39.743,620,48.007,1099,40.431]],["name/12-255",[]],["text/12-255",[]],["component/12-255",[]],["title/12-256",[59,41.785,127,34.987,163,25.509,481,24.344,1109,53.758]],["name/12-256",[]],["text/12-256",[]],["component/12-256",[]],["title/12-257",[78,49.804,420,39.913,548,34.259]],["name/12-257",[]],["text/12-257",[]],["component/12-257",[]],["title/12-258",[47,61.018,411,39.633]],["name/12-258",[]],["text/12-258",[]],["component/12-258",[]],["title/12-259",[215,37.629,372,48.11,1113,58.567]],["name/12-259",[]],["text/12-259",[]],["component/12-259",[]],["title/12-260",[3,38.792,16,44.812,656,44.812,1099,40.431]],["name/12-260",[]],["text/12-260",[]],["component/12-260",[]],["title/12-261",[15,27.103,22,15.387,237,34.454,922,34.887,1099,31.085,1116,40.516,1117,42.607]],["name/12-261",[]],["text/12-261",[]],["component/12-261",[]],["title/12-262",[16,40.73,810,39.346,1099,36.748,1119,53.758,1120,53.758]],["name/12-262",[]],["text/12-262",[]],["component/12-262",[]],["title/12-263",[16,40.73,165,47.897,1099,36.748,1122,53.758,1123,53.758]],["name/12-263",[]],["text/12-263",[]],["component/12-263",[]],["title/12-264",[422,60.042,474,43.825]],["name/12-264",[]],["text/12-264",[]],["component/12-264",[]],["title/12-265",[59,45.972,127,38.494,145,45.376,372,43.289]],["name/12-265",[]],["text/12-265",[]],["component/12-265",[]],["title/12-266",[145,50.43,372,48.11,1099,44.934]],["name/12-266",[]],["text/12-266",[]],["component/12-266",[]],["title/12-267",[145,45.376,1099,40.431,1128,53.967,1129,49.633]],["name/12-267",[]],["text/12-267",[]],["component/12-267",[]],["title/12-268",[1099,44.934,1129,55.161,1131,61.59]],["name/12-268",[]],["text/12-268",[]],["component/12-268",[]],["title/12-269",[53,39.178,154,8.632,1099,44.934]],["name/12-269",[]],["text/12-269",[]],["component/12-269",[]],["title/12-270",[277,51.489,1134,65.908]],["name/12-270",[]],["text/12-270",[]],["component/12-270",[]],["title/12-271",[27,29.666,182,21.907,235,47.022,366,39.878,1136,37.617,1137,39.559]],["name/12-271",[]],["text/12-271",[]],["component/12-271",[]],["title/12-272",[342,33.517,366,41.256,1136,58.567]],["name/12-272",[]],["text/12-272",[]],["component/12-272",[]],["title/12-273",[286,42.459,474,38.943,1136,58.567]],["name/12-273",[]],["text/12-273",[]],["component/12-273",[]],["title/12-274",[342,33.517,366,41.256,1137,61.59]],["name/12-274",[]],["text/12-274",[]],["component/12-274",[]],["title/12-275",[1099,50.567,1142,54.745]],["name/12-275",[]],["text/12-275",[]],["component/12-275",[]],["title/12-276",[537,57.111,1142,43.772,1144,51.57,1145,48.007]],["name/12-276",[]],["text/12-276",[]],["component/12-276",[]],["title/12-277",[1142,43.772,1144,51.57,1145,48.007,1147,59.146]],["name/12-277",[]],["text/12-277",[]],["component/12-277",[]],["title/12-278",[646,57.111,1142,43.772,1144,51.57,1145,48.007]],["name/12-278",[]],["text/12-278",[]],["component/12-278",[]],["title/12-279",[15,29.366,1099,33.68,1116,43.899,1142,36.463,1145,39.991,1150,49.27]],["name/12-279",[]],["text/12-279",[]],["component/12-279",[]],["title/12-280",[15,29.366,1099,33.68,1116,43.899,1117,46.164,1142,36.463,1145,39.991]],["name/12-280",[]],["text/12-280",[]],["component/12-280",[]],["title/12-281",[154,9.713,1153,56.046]],["name/12-281",[]],["text/12-281",[]],["component/12-281",[]],["title/12-282",[79,41.666,548,38.553]],["name/12-282",[]],["text/12-282",[]],["component/12-282",[]],["title/12-283",[154,8.632,1153,49.804,1156,55.161]],["name/12-283",[]],["text/12-283",[]],["component/12-283",[]],["title/12-284",[366,46.428,901,69.31]],["name/12-284",[]],["text/12-284",[]],["component/12-284",[]],["title/12-285",[10,24.68,366,46.428]],["name/12-285",[]],["text/12-285",[]],["component/12-285",[]],["title/12-286",[1,21.621,366,26.499,442,55.4,1153,31.989,1160,36.088,1161,37.617,1162,40.768]],["name/12-286",[]],["text/12-286",[]],["component/12-286",[]],["title/12-287",[154,8.632,1153,49.804,1164,56.186]],["name/12-287",[]],["text/12-287",[]],["component/12-287",[]],["title/12-288",[154,9.713,163,35.101]],["name/12-288",[]],["text/12-288",[]],["component/12-288",[]],["title/12-289",[0,34.834,1,30.288,215,33.858,1167,59.146]],["name/12-289",[]],["text/12-289",[]],["component/12-289",[]],["title/12-290",[154,8.632,171,48.647,1153,49.804]],["name/12-290",[]],["text/12-290",[]],["component/12-290",[]],["title/12-291",[154,9.713,163,35.101]],["name/12-291",[]],["text/12-291",[]],["component/12-291",[]],["title/12-292",[26,32.851,48,42.976,154,7.059,523,40.73,573,43.634]],["name/12-292",[]],["text/12-292",[]],["component/12-292",[]],["title/12-293",[26,36.144,48,47.282,154,7.767,523,44.812]],["name/12-293",[]],["text/12-293",[]],["component/12-293",[]],["title/12-294",[53,39.178,154,8.632,1153,49.804]],["name/12-294",[]],["text/12-294",[]],["component/12-294",[]],["title/12-295",[13,39.178,366,41.256,1174,56.186]],["name/12-295",[]],["text/12-295",[]],["component/12-295",[]],["title/12-296",[13,32.041,153,43.634,195,37.077,559,38.927,1153,40.73]],["name/12-296",[]],["text/12-296",[]],["component/12-296",[]],["title/12-297",[154,9.713,983,58.29]],["name/12-297",[]],["text/12-297",[]],["component/12-297",[]],["title/12-298",[154,9.713,1178,73.973]],["name/12-298",[]],["text/12-298",[]],["component/12-298",[]],["title/12",[13,32.041,29,27.066,43,32.437,154,7.059,182,27.893]],["name/12",[5317,0.152]],["text/12",[0,3.821,1,4.643,2,0.558,3,4.63,6,0.149,7,2.325,8,0.051,9,0.523,10,2.133,11,3.251,12,2.125,13,4.81,14,3.2,15,1.95,16,1.239,17,0.545,18,0.093,19,0.051,20,0.048,21,0.192,22,2.569,23,4.467,24,4.944,25,4.213,26,4.655,27,1.345,28,3.506,29,4.52,30,0.251,31,4.575,32,0.489,34,1.128,35,0.224,36,1.95,37,1.242,38,0.448,41,0.159,42,1.61,43,3.191,44,0.905,45,0.188,46,0.234,47,0.424,48,0.969,49,0.815,50,0.332,51,2.258,52,1.766,53,1.164,54,0.273,55,0.18,56,0.505,57,0.145,58,1.693,59,0.908,60,0.725,61,1.133,62,1.565,63,0.799,64,0.246,65,2.515,66,0.505,67,2.692,69,0.1,71,0.05,72,0.141,74,0.605,75,1.384,76,0.239,77,3.173,78,0.276,79,0.531,80,1.208,85,4.196,89,2.703,90,0.361,93,0.253,94,1.781,96,1.036,97,0.286,98,0.534,99,3.471,100,0.136,102,0.145,103,0.138,104,5.634,107,0.211,108,0.999,109,0.273,110,1.198,111,0.188,112,3.825,113,0.531,114,0.141,115,0.253,118,0.318,119,0.049,121,0.674,125,4.644,126,0.713,127,3.93,129,2.101,132,2.279,133,0.131,134,2.319,135,2.745,137,0.05,138,0.053,139,2.405,140,1.037,141,1.917,142,0.138,143,1.738,144,2.514,145,3.79,148,1.354,150,0.136,151,0.674,152,2.167,153,1.36,154,1.22,155,0.564,156,2.54,157,1.256,158,0.417,159,1.894,161,0.097,162,0.05,163,1.818,164,0.439,165,0.458,166,0.616,167,1.198,168,0.383,170,0.273,171,3.502,172,2.853,173,0.279,174,0.063,175,0.093,177,0.197,178,1.317,179,0.239,181,0.279,182,3.998,184,0.239,185,0.918,186,0.145,189,0.149,195,0.521,201,1.599,205,0.648,208,1.249,209,0.079,211,2.557,214,0.273,215,1.923,217,0.043,220,0.741,222,0.566,223,0.18,224,0.458,227,0.288,230,0.414,231,0.203,233,0.145,235,1.72,237,1.361,239,0.69,241,2.332,243,0.94,246,0.697,249,0.141,252,4.337,254,0.352,259,1.352,261,0.424,262,2.18,263,1.384,266,0.901,271,0.379,272,2.473,274,1.572,277,0.323,279,1.131,282,1.233,284,0.268,285,0.119,286,1.083,288,0.554,290,0.426,292,2.005,294,2.005,297,0.369,299,1.808,302,0.234,303,1.866,305,1.919,307,0.153,316,1.15,317,0.741,322,2.152,323,0.046,331,0.52,335,1.355,336,0.784,341,2.172,342,3.52,344,0.153,345,2.935,347,0.697,350,0.481,356,0.213,359,0.684,364,2.395,366,6.171,368,0.424,371,0.448,372,4.129,376,2.078,378,0.741,380,1.184,384,1.995,386,3.637,390,2.902,400,0.141,404,0.841,408,0.192,411,1.769,414,3.317,416,0.314,420,2.04,422,0.652,427,0.141,432,0.545,435,1.705,437,1.064,439,0.273,442,0.941,443,1.133,445,0.192,450,3.383,458,0.369,461,0.868,462,1.606,474,1.831,477,1.949,481,0.867,485,1.036,487,0.234,488,0.188,492,0.405,501,1.198,503,0.114,508,0.075,512,0.674,517,0.049,521,3.766,523,1.537,526,1.402,528,0.921,532,2.539,535,0.765,537,0.103,542,1,543,0.056,548,0.419,552,1.53,555,1.358,558,2.024,559,1.836,563,1.345,571,0.543,573,0.652,586,0.131,603,0.071,611,2.228,612,0.796,620,2.355,635,0.7,641,0.523,642,1.036,644,0.286,645,0.188,646,0.496,648,0.051,654,1.171,656,1.537,669,0.614,670,0.609,684,0.177,689,0.148,697,0.216,704,0.4,708,0.044,717,0.103,719,0.21,732,0.131,733,0.177,741,0.093,747,0.733,752,0.136,760,1.055,766,0.21,779,0.383,784,2.069,787,1.136,791,0.303,792,1.54,796,0.91,797,1.512,803,1.318,805,1.245,808,2.04,810,2.666,811,2.897,813,1.669,814,0.708,815,0.664,818,1.177,829,1.781,833,1.209,834,1.073,844,1.082,845,1.501,854,0.799,855,0.113,860,3.52,865,0.303,866,1.426,868,1.963,870,2.03,871,1.657,880,2.29,883,2.449,892,1.385,901,0.1,910,1.148,911,0.053,913,1.899,922,3.078,925,1.074,926,0.4,927,0.73,930,0.545,941,1.889,950,1.384,952,0.902,955,2.996,956,2.402,967,1.124,971,2.773,983,2.131,995,3.918,998,0.558,1000,0.159,1007,2.099,1009,0.753,1013,0.84,1022,1.678,1023,0.203,1024,1.303,1025,0.828,1048,3.169,1054,0.881,1063,1.565,1086,0.106,1088,0.674,1091,0.727,1094,0.757,1097,0.053,1099,3.391,1102,0.159,1104,0.053,1109,0.053,1113,0.458,1116,0.631,1117,0.294,1119,0.415,1120,0.612,1122,0.85,1123,0.563,1128,0.69,1129,2.868,1131,0.197,1134,0.716,1136,0.095,1137,0.149,1142,2.593,1144,2.15,1145,0.086,1147,0.106,1150,0.364,1153,1.973,1156,0.177,1160,5.287,1161,1.196,1162,0.449,1164,2.615,1167,0.106,1174,1.148,1178,1.079,1179,0.103,1182,0.203,1186,0.184,1203,1.258,1211,0.727,1213,1.09,1221,0.051,1226,0.048,1229,0.038,1244,0.106,1247,0.053,1250,1.531,1251,0.05,1252,0.294,1254,0.106,1256,0.341,1257,0.165,1258,0.145,1259,2.527,1260,0.563,1261,1.566,1262,0.053,1264,0.165,1265,1.08,1266,0.239,1267,0.84,1270,0.435,1274,0.106,1276,0.051,1277,2.445,1278,1.635,1280,0.902,1281,0.708,1284,0.211,1286,0.796,1288,0.985,1289,0.053,1290,0.149,1291,0.056,1293,1.457,1294,0.111,1295,0.056,1296,0.106,1297,1.341,1299,0.159,1300,0.246,1302,0.053,1303,0.111,1304,0.246,1305,0.496,1306,1.264,1307,0.106,1308,0.619,1309,1.264,1312,2.211,1315,0.053,1316,0.86,1317,1.158,1319,0.051,1321,2.197,1322,0.324,1323,0.528,1325,0.286,1326,0.111,1328,0.103,1329,0.103,1330,0.332,1331,0.883,1332,0.051,1333,1.225,1334,0.514,1335,1.225,1336,0.053,1337,0.103,1338,0.313,1340,0.153,1344,0.902,1345,3.147,1346,0.056,1347,0.757,1348,1.781,1349,0.796,1351,0.051,1352,0.053,1353,0.313,1356,0.612,1357,0.197,1358,0.103,1359,0.424,1360,0.056,1361,0.716,1362,0.881,1363,0.514,1365,0.327,1366,0.378,1367,0.757,1368,0.197,1369,0.388,1370,0.708,1371,0.197,1372,0.053,1374,0.84,1375,0.514,1377,0.415,1378,0.435,1379,0.056,1380,0.496,1381,0.056,1382,0.435,1384,0.106,1385,0.86,1386,0.05,1387,1.303,1388,0.051,1390,0.103,1391,0.943,1393,0.496,1394,0.197,1395,0.05,1396,0.253,1398,1.042,1400,0.203,1402,0.211,1404,0.4,1405,0.051,1406,0.881,1409,0.573,1410,0.056,1411,0.881,1412,0.053,1413,0.053,1414,0.05,1415,0.332,1416,0.05,1419,0.1,1420,1.245,1422,0.602,1423,0.197,1424,3.147,1425,0.799,1426,3.607,1427,0.051,1429,0.153,1430,0.05,1432,0.324,1433,0.103,1434,0.753,1435,0.053,1440,0.056,1441,0.7,1442,0.053,1443,0.053,1446,0.111,1448,0.051,1450,0.796,1453,1.272,1454,0.528,1455,0.056,1461,0.05,1463,0.103,1465,0.4,1469,0.159,1474,0.514,1477,1.264,1479,0.056,1484,0.153,1486,0.415,1487,0.203,1488,0.153,1489,0.943,1491,0.491,1492,0.149,1493,1.635,1496,1.39,1497,0.056,1498,0.985,1499,0.449,1500,1.019,1501,0.943,1502,0.051,1503,0.049,1505,0.103,1506,0.378,1507,0.1,1508,0.341,1509,1.416,1511,0.602,1512,0.051,1513,0.274,1514,0.602,1517,0.86,1518,0.097,1519,0.051,1525,0.197,1526,0.053,1527,0.313,1531,0.352,1536,0.056,1538,0.591,1539,0.053,1540,0.926,1542,0.159,1543,0.332,1544,1.646,1545,0.246,1546,0.262,1548,0.153,1553,0.056,1561,0.313,1563,1.529,1564,0.103,1566,0.097,1568,0.056,1569,0.197,1570,0.352,1571,0.192,1573,0.056,1577,0.573,1578,0.106,1579,0.458,1590,0.056,1593,0.449,1596,0.106,1597,0.053,1598,0.05,1599,1.095,1600,0.197,1601,0.424,1602,0.838,1603,0.332,1604,0.4,1605,0.631,1607,0.053,1608,0.619,1609,0.056,1610,0.056,1611,0.053,1612,0.246,1614,0.73,1615,0.111,1616,0.153,1617,0.753,1619,0.053,1620,1.338,1621,0.051,1622,0.435,1623,0.544,1625,0.203,1626,0.563,1627,0.753,1628,0.106,1632,0.103,1634,1.922,1638,0.056,1651,0.591,1655,0.053,1656,0.211,1659,1.119,1660,0.153,1661,0.352,1662,0.588,1663,0.056,1666,0.051,1670,1.042,1672,0.246,1673,0.197,1674,0.449,1675,0.1,1676,0.056,1679,0.998,1680,0.203,1681,0.352,1682,0.165,1692,0.313,1699,0.364,1700,0.153,1708,0.056,1711,0.943,1714,0.619,1715,0.638,1716,0.482,1719,0.165,1722,1.781,1723,0.733,1724,0.203,1725,1.739,1727,0.22,1728,0.341,1730,0.514,1731,0.341,1732,0.4,1735,0.341,1736,0.22,1737,0.106,1739,0.197,1741,0.192,1744,0.149,1745,0.106,1747,0.056,1750,0.776,1753,0.165,1754,0.211,1760,1.47,1761,1.218,1764,0.053,1765,0.4,1766,0.053,1767,0.159,1769,0.056,1774,0.056,1787,1.419,1792,0.1,1794,0.159,1797,0.056,1799,0.056,1803,0.262,1808,0.415,1821,0.051,1825,0.294,1827,0.056,1828,0.684,1831,0.38,1832,0.716,1838,0.053,1852,0.153,1855,0.388,1861,0.203,1870,0.165,1877,0.22,1884,0.313,1885,0.756,1889,0.165,1894,0.159,1899,0.056,1900,0.165,1904,0.149,1905,0.303,1911,0.954,1912,0.203,1917,0.364,1922,0.153,1933,0.056,1937,0.274,1949,0.111,1953,0.111,1955,0.056,1962,0.961,1963,0.111,1965,0.159,1972,1.377,1975,0.303,1977,0.056,1978,0.211,1985,0.203,1986,0.159,1993,0.159,1994,0.496,2003,0.165,2005,0.203,2007,0.106,2024,0.097,2026,0.111,2030,0.106,2034,0.056,2042,0.051,2045,1.734,2051,0.573,2052,0.053,2056,0.211,2058,0.056,2061,0.388,2064,0.514,2068,1.213,2071,0.464,2073,1.377,2078,0.05,2083,0.153,2084,0.056,2091,0.111,2092,0.111,2093,1.042,2101,0.106,2105,0.197,2106,0.056,2110,0.051,2112,0.1,2114,0.22,2117,0.159,2124,0.203,2132,0.111,2134,1.851,2136,0.274,2142,0.053,2155,0.053,2156,0.753,2158,0.051,2162,0.211,2169,0.514,2199,0.056,2200,0.573,2205,0.165,2220,0.153,2221,0.756,2233,0.056,2234,0.106,2237,0.165,2239,0.053,2243,0.313,2245,0.056,2252,0.211,2253,0.211,2256,0.274,2259,0.424,2260,0.053,2267,0.056,2269,0.051,2270,0.056,2273,0.253,2283,0.103,2284,0.203,2285,0.211,2293,0.197,2310,0.056,2320,0.051,2323,0.159,2352,0.563,2364,0.415,2365,0.246,2366,0.053,2368,0.056,2375,0.435,2381,0.056,2383,0.053,2394,0.106,2400,0.573,2402,0.053,2408,0.464,2418,0.544,2423,0.153,2426,0.262,2429,0.159,2430,0.05,2431,0.313,2434,0.197,2437,0.341,2440,0.197,2445,0.153,2447,0.22,2448,0.049,2449,0.192,2452,0.262,2456,0.211,2458,0.056,2459,0.246,2460,0.22,2461,0.638,2462,0.253,2463,0.563,2465,0.153,2466,0.211,2468,0.165,2469,0.111,2470,0.145,2471,0.435,2472,0.056,2473,0.056,2475,0.66,2476,0.153,2477,0.106,2483,0.364,2484,0.111,2486,0.103,2488,0.053,2489,0.246,2490,0.053,2491,0.246,2492,0.587,2496,0.246,2500,0.051,2501,0.056,2502,0.103,2505,0.432,2506,0.246,2512,0.051,2517,0.053,2518,0.05,2520,0.435,2527,0.097,2529,0.165,2530,0.464,2535,0.415,2540,0.165,2541,0.211,2543,0.514,2545,0.274,2546,0.253,2547,0.352,2548,0.056,2549,0.22,2550,0.22,2551,0.056,2552,0.056,2553,0.38,2555,0.165,2556,0.165,2561,0.159,2562,0.056,2564,0.274,2565,0.111,2569,0.056,2570,0.332,2580,0.056,2593,0.111,2596,0.056,2598,0.051,2599,1.851,2600,0.262,2601,0.313,2605,0.165,2606,0.4,2613,0.056,2622,0.91,2624,0.111,2629,0.22,2632,0.563,2641,0.111,2643,0.056,2644,0.536,2654,0.053,2668,0.22,2674,0.22,2682,0.051,2714,0.111,2723,0.053,2732,0.056,2734,0.056,2741,0.111,2752,0.246,2753,0.274,2754,0.85,2757,0.053,2759,0.053,2761,1.042,2778,0.274,2795,0.111,2796,0.056,2799,1.128,2800,0.294,2801,0.111,2827,0.106,2828,0.056,2831,0.203,2833,0.056,2834,0.106,2836,0.234,2837,0.203,2841,0.056,2842,0.327,2844,0.056,2846,0.38,2850,0.153,2852,0.056,2853,0.106,2854,0.274,2855,0.485,2856,0.22,2863,0.821,2864,0.111,2869,0.056,2870,0.056,2873,0.053,2889,0.053,2895,0.056,2896,0.056,2903,0.274,2905,0.053,2906,0.111,2907,0.4,2908,0.159,2911,0.056,2915,0.103,2917,0.056,2925,0.262,2926,0.327,2930,0.274,2937,0.274,2938,0.159,2941,0.262,2942,0.103,2946,0.22,2961,0.053,2966,0.262,2971,0.664,2976,0.159,2991,0.274,2992,0.563,2995,0.103,2998,0.274,3005,0.38,3009,0.056,3010,0.056,3012,0.211,3016,0.056,3022,0.432,3023,0.111,3024,0.165,3026,0.165,3030,0.051,3031,0.153,3035,0.22,3038,0.111,3047,0.051,3048,0.053,3056,0.05,3058,0.327,3062,0.388,3063,0.05,3069,0.056,3095,0.056,3106,0.364,3114,0.053,3120,0.056,3127,0.689,3142,0.111,3143,0.274,3149,0.4,3164,0.106,3173,0.111,3174,0.056,3180,0.056,3190,0.165,3195,0.051,3223,0.153,3227,0.056,3234,0.262,3237,0.106,3239,0.111,3240,0.153,3241,0.563,3247,0.153,3248,0.111,3259,0.274,3260,0.106,3261,0.103,3264,0.232,3267,0.175,3269,0.117,3270,0.059,3275,0.056,3276,0.106,3282,0.059,3289,0.159,3292,0.153,3296,0.059,3299,0.327,3302,0.059,3305,0.051,3307,0.056,3309,0.22,3310,0.303,3317,0.053,3320,0.415,3321,0.056,3331,0.563,3332,0.22,3340,0.056,3342,0.22,3344,0.536,3346,0.106,3349,0.364,3354,0.165,3358,0.053,3359,0.159,3361,0.165,3365,0.053,3370,0.165,3380,0.313,3381,0.327,3385,0.485,3386,2.029,3395,0.165,3398,1.264,3407,0.053,3414,0.053,3417,0.053,3422,0.38,3425,0.165,3429,0.056,3430,0.056,3431,1.078,3435,0.056,3440,0.274,3461,0.111,3462,0.103,3466,0.056,3479,0.111,3480,0.106,3482,0.056,3484,0.274,3488,0.059,3498,0.056,3502,0.056,3514,0.117,3516,0.175,3519,0.159,3520,0.165,3532,0.175,3533,0.22,3539,0.175,3548,0.053,3550,0.053,3565,0.056,3568,0.159,3573,0.056,3576,0.117,3581,1.635,3582,0.059,3587,0.111,3588,0.22,3589,0.056,3590,0.111,3591,0.056,3592,0.053,3593,0.111,3594,0.274,3596,0.056,3605,0.38,3610,3.464,3612,0.059,3616,0.053,3635,0.22,3648,0.159,3651,0.056,3658,0.165,3663,0.22,3671,0.056,3672,0.211,3674,0.485,3675,0.111,3680,0.053,3687,0.056,3689,0.415,3705,0.22,3708,0.111,3710,0.464,3731,0.059,3733,0.056,3734,0.22,3740,0.432,3742,0.059,3747,0.111,3751,0.059,3756,0.059,3763,0.059,3767,0.059,3772,0.059,3776,0.059,3783,0.056,3786,0.056,3787,0.117,3789,0.059,3803,0.059,3806,0.056,3814,0.056,3818,0.059,3823,0.059,3825,0.211,3826,0.22,3830,0.22,3837,0.053,3844,0.22,3850,0.38,3855,0.106,3858,0.38,3866,0.211,3878,0.364,3902,0.056,3903,1.512,3906,0.056,3909,0.175,3910,0.289,3911,0.117,3912,0.059,3913,0.117,3914,0.739,3915,1.355,3916,0.175,3917,0.175,3918,0.059,3919,0.059,3920,0.511,3921,0.059,3922,0.059,3923,0.059,3924,0.059,3925,0.059,3926,0.117,3927,0.059,3928,0.059,3929,0.059,3930,0.059,3931,0.117,3932,0.059,3933,1.138,3934,0.059,3935,0.059,3936,0.059,3937,1.038,3938,1.212,3939,0.832,3940,0.059,3941,0.289,3942,0.059,3943,0.059,3944,0.117,3945,0.059,3946,0.274,3947,0.059,3948,0.059,3949,0.117,3950,0.059,3951,0.111,3952,0.175,3953,0.059,3954,0.059,3955,0.059,3956,0.059,3957,0.289,3958,0.289,3960,0.803,3961,0.059,3962,0.059,3963,0.638,3964,0.059,3965,0.059,3966,0.059,3967,0.117,3968,0.175,3969,0.401,3970,0.059,3971,0.059,3972,0.059,3973,0.059,3974,0.059,3975,0.401,3976,0.059,3977,0.117,3978,0.117,3979,0.059,3980,0.059,3981,2.753,3982,0.175,3983,0.117,3984,0.059,3985,0.059,3986,0.059,3987,0.22,3990,0.056,3991,0.059,3992,0.056,3993,0.117,3994,0.232,3995,0.059,3996,0.936,3997,0.345,4000,0.059,4001,0.059,4002,0.117,4003,0.117,4004,0.117,4005,0.059,4006,0.059,4007,0.262,4008,0.117,4009,0.059,4010,0.117,4011,0.175,4012,0.175,4013,0.456,4014,0.485,4015,0.345,4016,0.289,4017,0.059,4018,0.117,4019,0.117,4020,0.059,4021,0.117,4022,0.117,4023,0.059,4024,0.059,4025,0.059,4026,0.059,4027,0.059,4028,0.175,4029,0.232,4030,0.175,4031,0.175,4032,0.175,4033,0.511,4034,0.117,4035,0.117,4036,0.059,4037,0.059,4038,0.059,4039,0.059,4040,0.059,4041,0.059,4042,0.059,4043,0.059,4044,0.059,4045,0.059,4046,0.638,4047,0.059,4048,0.059,4049,0.059,4050,0.059,4051,0.059,4052,0.059,4053,0.175,4054,0.289,4055,0.175,4056,0.117,4057,0.117,4058,0.345,4059,0.117,4060,0.117,4061,0.456,4062,0.059,4063,0.232,4064,0.117,4065,0.117,4066,0.117,4067,0.117,4068,0.232,4069,0.117,4070,0.117,4071,0.117,4072,0.566,4073,0.175,4074,0.117,4075,0.117,4076,0.117,4077,0.117,4078,0.117,4079,0.289,4080,0.117,4081,0.117,4082,0.117,4083,0.117,4084,0.117,4085,0.117,4086,0.117,4087,0.117,4088,0.117,4089,0.117,4090,0.117,4091,0.117,4092,0.059,4093,0.059,4094,0.059,4095,0.059,4096,0.059,4097,0.059,4098,0.117,4099,0.117,4100,0.059,4101,0.059,4102,0.059,4103,0.059,4104,0.117,4105,0.059,4106,0.117,4107,0.059,4108,0.059,4109,0.059,4110,0.059,4111,0.117,4112,0.059,4113,0.059,4114,0.059,4115,0.059,4116,0.059,4117,0.059,4118,0.059,4119,0.056,4120,0.059,4121,0.059,4122,0.059,4123,0.059,4124,0.059,4125,0.059,4126,0.059,4127,0.059,4128,0.117,4129,0.059,4130,0.62,4131,0.059,4132,0.345,4133,0.117,4134,0.566,4136,0.289,4137,0.117,4138,0.117,4139,0.117,4140,0.059,4141,0.059,4142,0.059,4143,0.232,4144,0.117,4145,0.059,4146,0.059,4147,0.059,4148,0.059,4149,0.117,4150,0.22,4151,0.117,4152,0.456,4153,0.175,4155,0.175,4156,0.175,4157,0.059,4158,0.059,4159,0.117,4160,0.059,4161,0.117,4162,0.059,4163,0.175,4164,0.38,4165,0.059,4166,0.059,4167,0.059,4168,0.175,4169,0.289,4170,0.401,4171,0.175,4172,0.059,4173,0.175,4174,0.117,4175,0.117,4176,0.175,4177,0.232,4178,0.832,4179,0.175,4180,0.289,4181,0.175,4182,0.059,4183,0.059,4184,0.059,4185,0.059,4186,0.059,4187,0.059,4188,0.059,4189,0.117,4190,0.059,4191,0.175,4192,0.059,4193,0.059,4194,0.059,4195,0.059,4196,0.117,4197,0.059,4198,0.059,4199,0.059,4200,0.059,4201,0.059,4202,0.059,4203,0.059,4204,0.059,4205,0.059,4206,0.059,4207,0.059,4208,0.059,4209,0.059,4210,0.059,4211,0.059,4212,0.059,4213,0.175,4214,0.289,4215,0.117,4216,0.059,4217,0.059,4218,0.117,4219,0.232,4220,0.117,4221,0.117,4222,0.059,4223,0.059,4224,0.059,4225,0.117,4226,0.117,4227,0.059,4228,0.059,4229,0.117,4230,0.232,4231,0.106,4232,0.059,4233,0.059,4234,0.059,4235,0.059,4236,0.117,4237,0.117,4239,0.059,4240,0.117,4241,0.674,4242,0.059,4243,0.059,4244,0.059,4245,0.059,4246,0.059,4247,0.059,4248,0.059,4249,0.727,4250,0.059,4251,0.289,4252,0.117,4253,0.117,4254,0.117,4255,0.117,4256,0.289,4257,0.117,4258,0.175,4259,0.059,4260,0.111,4261,0.117,4262,0.059,4263,0.059,4264,0.117,4265,0.059,4266,0.117,4267,0.056,4269,0.832,4270,0.059,4271,0.059,4272,0.059,4273,0.059,4274,0.175,4275,0.059,4276,0.056,4277,0.059,4278,0.059,4280,0.117,4281,0.059,4282,0.175,4283,0.059,4284,0.059,4285,0.059,4286,0.059,4287,0.059,4288,0.059,4289,0.059,4290,0.059,4291,0.059,4292,0.059,4293,0.059,4294,0.059,4295,0.059,4296,0.059,4297,0.059,4298,0.059,4299,0.059,4300,0.117,4301,0.059,4302,0.059,4303,0.059,4304,0.059,4305,0.059,4306,0.566,4307,0.059,4308,0.059,4309,0.059,4310,0.059,4311,0.059,4312,0.059,4313,0.059,4314,0.059,4315,0.059,4316,0.059,4317,0.059,4318,0.059,4319,0.117,4320,0.059,4321,0.059,4322,0.175,4323,0.111,4324,0.232,4325,0.059,4326,0.059,4327,0.117,4328,0.059,4329,0.059,4330,0.059,4331,0.117,4332,0.059,4333,0.059,4334,0.456,4335,0.232,4336,0.059,4337,0.117,4338,0.059,4339,0.674,4340,0.056,4341,0.059,4342,0.059,4343,0.059,4344,0.059,4345,0.059,4346,0.345,4347,0.059,4348,0.059,4349,0.059,4350,0.059,4351,0.117,4352,0.117,4353,0.059,4354,0.059,4355,0.059,4356,0.059,4357,0.059,4358,0.059,4359,0.059,4360,0.059,4361,0.059,4362,0.059,4363,0.059,4364,0.059,4365,0.401,4366,0.117,4367,0.059,4368,0.289,4369,0.059,4370,0.059,4371,0.117,4372,0.059,4373,0.232,4374,0.62,4375,0.117,4376,0.059,4377,0.059,4378,0.059,4379,0.059,4380,0.345,4381,0.111,4382,0.059,4383,0.117,4384,0.059,4385,0.059,4386,0.117,4387,0.059,4388,0.059,4389,0.059,4390,0.059,4391,0.059,4392,0.059,4393,0.059,4394,0.175,4395,0.62,4396,0.059,4397,0.059,4398,0.232,4399,0.059,4400,0.117,4401,0.059,4402,0.059,4403,0.059,4404,0.059,4405,0.059,4406,0.059,4407,0.059,4408,0.232,4409,0.059,4410,0.059,4411,0.175,4412,0.059,4413,0.059,4414,0.059,4415,0.059,4416,0.059,4417,0.175,4418,0.059,4419,0.059,4420,0.059,4421,0.059,4422,0.059,4423,0.059,4424,0.175,4425,0.175,4426,0.059,4427,0.056,4428,0.059,4429,0.059,4430,0.059,4431,0.059,4432,0.117,4433,0.117,4434,0.059,4435,0.059,4436,0.117,4437,0.059,4438,0.345,4439,0.059,4440,0.059,4441,0.401,4442,0.232,4443,0.401,4444,0.175,4445,0.232,4446,0.059,4447,0.059,4448,0.345,4449,0.059,4450,0.117,4451,0.117,4452,0.059,4453,0.059,4454,0.059,4455,0.232,4456,0.059,4457,0.117,4458,0.175,4459,0.232,4460,0.059,4461,0.175,4462,0.059,4463,0.059,4464,0.059,4465,0.059,4466,0.059,4467,0.059,4468,0.059,4469,0.059,4470,0.117,4471,0.059,4472,0.059,4473,0.059,4474,0.059,4475,0.059,4476,0.175,4477,0.059,4478,0.059,4479,0.059,4480,0.059,4481,0.059,4482,0.117,4483,0.059,4484,0.059,4485,0.117,4486,0.117,4487,0.059,4488,0.059,4489,0.059,4490,0.059,4491,0.232,4492,0.117,4493,0.059,4494,0.059,4495,0.059,4496,0.456,4497,0.232,4499,0.117,4500,0.059,4501,0.117,4502,0.059,4503,0.059,4504,0.059,4505,0.059,4506,0.059,4507,0.059,4508,0.059,4509,0.059,4510,0.059,4511,0.059,4512,0.059,4513,0.117,4514,0.059,4516,0.165,4517,0.175,4518,0.566,4519,0.059,4520,0.456,4521,0.059,4522,0.117,4523,0.117,4525,0.059,4526,0.587,4527,0.274,4528,0.274,4529,0.165,4530,0.117,4531,0.117,4532,0.059,4533,0.059,4534,0.059,4535,0.117,4536,0.059,4537,0.059,4538,0.059,4539,0.117,4540,0.117,4541,0.117,4542,0.117,4543,0.117,4544,0.059,4545,0.059,4546,0.059,4547,0.117,4548,0.059,4549,0.117,4550,0.117,4551,0.175,4552,0.059,4553,0.117,4554,0.059,4555,0.059,4556,0.059,4557,0.345,4558,0.059,4559,0.289,4560,0.059,4561,0.289,4562,0.117,4563,0.232,4564,0.117,4565,0.117,4566,0.117,4567,0.117,4568,0.059,4569,0.345,4570,0.117,4571,0.059,4572,0.059,4574,0.059,4575,0.111,4576,0.117,4577,0.059,4578,0.059,4579,0.059,4580,0.059,4581,0.059,4582,0.059,4583,0.059,4584,0.059,4585,0.059,4586,0.056,4587,0.059,4588,0.059,4589,0.059,4590,0.059,4591,0.175,4592,0.117,4593,0.059,4594,0.117,4595,0.059,4596,0.059,4597,0.059,4598,0.232,4599,0.059,4600,0.117,4601,0.232,4602,0.22,4603,0.059,4604,0.674,4605,0.059,4606,0.059,4607,0.059,4609,0.059,4610,0.059,4611,0.059,4612,0.059,4613,0.059,4614,0.059,4615,0.059,4617,0.059,4618,0.059,4619,0.175,4621,0.175,4622,0.056,4623,0.059,4625,0.056,4626,0.056,4627,0.175,4628,0.117,4629,0.117,4630,0.059,4631,0.059,4632,0.059,4633,0.059,4634,0.059,4635,0.059,4636,0.059,4637,0.059,4638,0.053,4639,0.059,4640,0.117,4641,0.059,4642,0.117,4643,0.059,4644,0.059,4645,0.117,4646,0.117,4647,0.059,4648,0.059,4650,0.059,4651,0.059,4652,0.056,4653,0.056,4654,0.117,4655,0.232,4656,0.401,4657,0.059,4658,0.059,4659,0.056,4660,0.059,4661,0.345,4662,0.78,4663,0.059,4664,0.059,4665,0.059,4666,0.511,4667,0.674,4668,0.345,4669,0.289,4670,0.289,4671,0.232,4672,0.727,4673,0.62,4674,0.511,4675,0.511,4676,0.232,4677,0.059,4678,0.053,4679,0.289,4680,0.059,4681,0.232,4682,0.059,4683,0.345,4684,0.345,4685,0.175,4686,0.117,4687,0.345,4688,0.059,4689,0.059,4690,0.117,4691,0.059,4692,0.059,4693,0.117,4694,0.059,4695,0.059,4696,0.056,4697,0.059,4698,0.059,4699,0.117,4700,0.059,4701,0.059,4702,0.059,4703,0.059,4704,0.059,4705,0.059,4706,0.175,4707,0.059,4708,0.727,4709,0.117,4710,0.059,4711,0.059,4712,0.059,4713,0.059,4714,0.059,4715,0.936,4716,0.117,4717,0.345,4718,0.059,4719,0.117,4720,0.289,4721,0.175,4722,1.038,4723,0.727,4724,0.175,4725,0.511,4726,0.175,4727,0.117,4728,0.884,4729,0.117,4730,0.456,4731,0.175,4732,0.059,4733,0.175,4734,0.117,4735,0.059,4736,0.175,4737,0.175,4738,0.117,4739,0.117,4740,0.117,4741,0.456,4742,0.117,4743,0.289,4744,0.117,4745,0.117,4746,0.117,4747,0.117,4748,0.232,4749,0.232,4750,0.117,4751,0.117,4752,0.117,4753,0.232,4754,0.059,4755,0.175,4756,0.059,4757,0.059,4758,0.059,4759,0.059,4760,0.059,4761,0.059,4762,0.059,4763,0.059,4764,0.117,4765,0.345,4766,0.059,4767,0.117,4768,0.059,4769,0.059,4770,0.059,4771,0.175,4772,0.059,4773,0.175,4774,0.059,4775,0.117,4776,0.117,4777,0.059,4778,0.117,4779,0.059,4780,0.232,4781,0.117,4782,0.456,4783,0.117,4784,0.059,4785,0.345,4786,0.117,4787,0.059,4788,0.059,4789,0.059,4790,0.289,4791,0.289,4792,0.456,4793,0.456,4794,0.456,4795,0.289,4796,0.175,4797,0.232,4798,0.232,4799,0.175,4800,0.232,4801,0.175,4802,0.175,4803,0.175,4804,0.175,4805,0.456,4806,0.232,4807,0.232,4808,0.232,4809,0.232,4810,0.232,4811,0.232,4812,0.232,4813,0.232,4814,0.232,4815,0.232,4816,0.232,4817,0.232,4818,0.345,4819,0.232,4820,0.232,4821,0.175,4822,0.175,4823,0.175,4824,0.175,4825,0.232,4826,0.175,4827,0.175,4828,0.345,4829,0.345,4830,0.175,4831,0.175,4832,0.117,4833,0.117,4834,0.117,4835,0.175,4836,0.059,4837,0.232,4838,0.232,4839,0.059,4840,0.117,4841,0.117,4842,0.117,4843,0.232,4844,0.117,4845,0.117,4846,0.232,4847,0.232,4848,0.117,4849,0.117,4850,0.117,4851,0.059,4852,0.059,4853,0.059,4854,0.059,4855,0.059,4856,0.059,4857,0.059,4858,0.059,4859,0.059,4860,0.059,4861,0.059,4862,0.059,4863,0.059,4864,0.059,4865,0.059,4866,0.059,4867,0.059,4868,0.059,4869,0.059,4870,0.059,4871,0.059,4872,0.059,4873,0.059,4874,0.059,4875,0.059,4876,0.059,4877,0.059,4878,0.059,4879,0.059,4880,0.059,4881,0.059,4882,0.059,4883,0.059,4884,0.059,4885,0.059,4886,0.059,4887,0.059,4888,0.059,4889,0.059,4890,0.117,4891,0.059,4892,0.059,4893,0.059,4894,0.059,4895,0.059,4896,0.059,4897,0.059,4898,0.059,4899,0.059,4900,0.059,4901,0.059,4902,0.059,4903,0.059,4904,0.059,4905,0.059,4906,0.059,4907,0.059,4908,0.059,4909,0.059,4910,0.059,4911,0.059,4912,0.117,4913,0.117,4914,0.059,4915,0.059,4916,0.175,4917,0.059,4918,0.117,4919,0.059,4920,0.059,4921,0.056,4922,0.117,4923,0.111,4924,0.111,4925,0.059,4926,0.111,4927,0.059,4928,0.059,4929,0.175,4930,0.059,4931,0.059,4932,0.059,4933,0.059,4934,0.059,4935,0.059,4936,0.059,4937,0.059,4938,0.059,4939,0.059,4940,0.059,4941,0.059,4942,0.059,4943,0.059,4944,0.059,4945,0.059,4946,0.059,4947,0.117,4948,0.059,4949,0.059,4950,0.059,4951,0.059,4952,0.059,4953,0.059,4954,0.117,4955,0.059,4956,0.059,4957,0.059,4958,0.059,4959,0.059,4960,0.059,4961,0.059,4962,0.059,4963,0.117,4964,0.059,4965,0.059,4966,0.059,4967,0.059,4968,0.059,4969,0.059,4970,0.059,4971,0.059,4972,0.059,4973,0.059,4974,0.059,4975,0.059,4976,0.059,4977,0.059,4978,0.059,4979,0.059,4980,0.056,4981,0.059,4982,0.059,4983,0.059,4984,0.059,4985,0.059,4986,0.059,4987,0.059,4988,0.117,4989,0.059,4990,0.059,4991,0.059,4992,0.059,4993,0.059,4994,0.059,4995,0.117,4996,0.059,4997,0.059,4998,0.059,4999,0.059,5000,0.106,5001,0.059,5002,0.059,5003,0.175,5004,0.175,5005,0.059,5006,0.059,5007,0.059,5009,0.165,5012,0.111,5016,0.056,5019,0.165,5020,0.111,5160,0.056,5294,0.059,5318,0.063,5319,0.063,5320,0.063,5321,0.063,5322,0.063,5323,0.063,5324,0.063,5325,0.063,5326,0.063,5327,0.063,5328,0.063,5329,0.063,5330,0.063,5331,0.063,5332,0.063,5333,0.063,5334,0.063,5335,0.372,5336,0.063,5337,0.063,5338,0.25,5339,0.189,5340,0.063,5341,0.372,5342,0.433,5343,0.126,5344,0.063,5345,0.25,5346,0.063,5347,0.126,5348,0.063,5349,0.063,5350,0.063,5351,0.063,5352,0.063,5353,0.063,5354,0.063,5355,0.063,5356,0.126,5357,0.189,5358,0.063,5359,0.126,5360,0.063,5361,0.063,5362,0.126,5363,1.282,5364,0.189,5365,0.063,5366,0.433,5367,0.063,5368,0.063,5369,0.25,5370,0.126,5371,0.063,5372,0.063,5373,0.25,5374,0.126,5375,1.544,5376,0.189,5377,0.063,5378,0.126,5379,0.063,5380,0.126,5381,0.25,5382,0.126,5383,0.063,5384,0.063,5385,0.063,5386,0.126,5387,0.063,5388,0.063,5389,0.063,5390,0.063,5391,0.063,5392,0.126,5393,0.126,5394,0.126,5395,0.063,5396,0.063,5397,0.063,5398,0.063,5399,0.063,5400,0.063,5401,0.25,5402,0.063,5403,0.063,5404,0.063,5405,0.063,5406,0.063,5407,0.063,5408,0.063,5409,0.25,5410,0.063,5411,0.189,5412,0.126,5413,0.063,5414,0.312,5415,0.063,5416,0.063,5417,0.063,5418,0.063,5419,0.063,5420,0.063,5421,0.063,5422,0.063,5423,0.063,5424,0.063,5425,0.063,5426,0.189,5427,0.063,5428,0.126,5429,0.063,5430,0.063,5431,0.063,5432,0.063,5433,0.126,5434,0.063,5435,0.126,5436,0.063,5437,0.126,5438,0.063,5439,0.126,5440,0.063,5441,0.063,5442,0.063,5443,0.126,5444,0.189,5445,0.063,5446,0.063,5447,0.063,5448,0.189,5449,0.126,5450,0.063,5451,0.126,5452,0.126,5453,0.063,5454,0.312,5455,0.189,5456,0.189,5457,0.063,5458,0.063,5459,0.063,5460,0.063,5461,0.063,5462,0.063,5463,0.063,5464,0.063,5465,0.063,5466,0.063,5467,0.063,5468,0.063,5469,0.063,5470,0.126,5471,0.063,5472,0.189,5473,0.063,5474,0.063,5475,0.063,5476,0.063,5477,0.063,5478,0.063,5479,0.063,5480,0.063,5481,0.063,5482,0.063,5483,0.126,5484,0.063,5485,0.063,5486,0.063,5487,0.063,5488,0.063,5489,0.063]],["component/12",[0,0.065,1,0.056,146,0.091]]],"invertedIndex":[["",{"_index":104,"title":{"3-187":{},"3-530":{},"3-531":{},"3-742":{},"3-745":{},"5-27":{},"5-30":{},"6-181":{},"12-114":{},"12-115":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["0",{"_index":1374,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["000",{"_index":1559,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["02",{"_index":1936,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["03",{"_index":4748,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["039",{"_index":1467,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["07",{"_index":5248,"title":{},"name":{},"text":{"11":{}},"component":{}}],["0~11",{"_index":5262,"title":{},"name":{},"text":{"11":{}},"component":{}}],["0~23",{"_index":5251,"title":{},"name":{},"text":{"11":{}},"component":{}}],["1",{"_index":151,"title":{"3-6":{}},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["1.0.pdf",{"_index":3622,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["1.1",{"_index":190,"title":{"3-7":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1",{"_index":191,"title":{"3-8":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1.0",{"_index":4627,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["1.1.1.1",{"_index":192,"title":{"3-9":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1.10",{"_index":242,"title":{"3-33":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1.2",{"_index":193,"title":{"3-10":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1.3",{"_index":196,"title":{"3-11":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1.4",{"_index":198,"title":{"3-12":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1.5",{"_index":200,"title":{"3-13":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1.5.1",{"_index":202,"title":{"3-14":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1.5.2",{"_index":203,"title":{"3-15":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1.6",{"_index":204,"title":{"3-16":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1.6.1",{"_index":207,"title":{"3-17":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1.6.2",{"_index":210,"title":{"3-18":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1.6.3",{"_index":212,"title":{"3-19":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1.7",{"_index":213,"title":{"3-20":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1.8",{"_index":216,"title":{"3-21":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1.8.1",{"_index":218,"title":{"3-22":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1.8.2",{"_index":219,"title":{"3-23":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1.8.3",{"_index":221,"title":{"3-24":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1.8.4",{"_index":225,"title":{"3-25":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1.8.5",{"_index":226,"title":{"3-26":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1.8.6",{"_index":229,"title":{"3-27":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1.8.7",{"_index":232,"title":{"3-28":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1.9",{"_index":234,"title":{"3-29":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1.9.1",{"_index":236,"title":{"3-30":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1.9.2",{"_index":238,"title":{"3-31":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1.9.3",{"_index":240,"title":{"3-32":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.1970",{"_index":1836,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["1.1.2",{"_index":244,"title":{"3-34":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.1",{"_index":245,"title":{"3-35":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.1.1",{"_index":248,"title":{"3-36":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.1.10",{"_index":267,"title":{"3-45":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.1.2",{"_index":250,"title":{"3-37":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.1.3",{"_index":251,"title":{"3-38":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.1.4",{"_index":253,"title":{"3-39":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.1.5",{"_index":255,"title":{"3-40":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.1.6",{"_index":256,"title":{"3-41":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.1.7",{"_index":257,"title":{"3-42":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.1.8",{"_index":260,"title":{"3-43":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.1.9",{"_index":264,"title":{"3-44":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.2",{"_index":270,"title":{"3-46":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.2.1",{"_index":273,"title":{"3-47":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.2.10",{"_index":291,"title":{"3-56":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.2.11",{"_index":293,"title":{"3-57":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.2.12",{"_index":295,"title":{"3-58":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.2.13",{"_index":298,"title":{"3-59":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.2.2",{"_index":275,"title":{"3-48":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.2.3",{"_index":276,"title":{"3-49":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.2.4",{"_index":278,"title":{"3-50":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.2.5",{"_index":280,"title":{"3-51":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.2.6",{"_index":281,"title":{"3-52":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.2.7",{"_index":283,"title":{"3-53":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.2.8",{"_index":287,"title":{"3-54":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.2.9",{"_index":289,"title":{"3-55":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.3",{"_index":301,"title":{"3-60":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.3.1",{"_index":304,"title":{"3-61":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.3.2",{"_index":306,"title":{"3-62":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.3.3",{"_index":308,"title":{"3-63":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.3.4",{"_index":309,"title":{"3-64":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.3.5",{"_index":310,"title":{"3-65":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.3.6",{"_index":311,"title":{"3-66":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.3.7",{"_index":312,"title":{"3-67":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.3.8",{"_index":313,"title":{"3-68":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.3.9",{"_index":314,"title":{"3-69":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.4",{"_index":315,"title":{"3-70":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.4.1",{"_index":318,"title":{"3-71":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.4.2",{"_index":319,"title":{"3-72":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.4.3",{"_index":320,"title":{"3-73":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.5",{"_index":321,"title":{"3-74":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.5.1",{"_index":324,"title":{"3-75":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.5.2",{"_index":325,"title":{"3-76":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.5.3",{"_index":326,"title":{"3-77":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.5.4",{"_index":328,"title":{"3-78":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.2.5.5",{"_index":329,"title":{"3-79":{}},"name":{},"text":{"3":{}},"component":{}}],["1.1.3",{"_index":330,"title":{"3-80":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2",{"_index":332,"title":{"3-81":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.1",{"_index":333,"title":{"3-82":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.1.1",{"_index":334,"title":{"3-83":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.1.2",{"_index":337,"title":{"3-84":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.1.3",{"_index":338,"title":{"3-85":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.1.4",{"_index":339,"title":{"3-86":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.1.5",{"_index":340,"title":{"3-87":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.1.6",{"_index":343,"title":{"3-88":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.1.7",{"_index":346,"title":{"3-89":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.1.7.1",{"_index":348,"title":{"3-90":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.1.7.2",{"_index":349,"title":{"3-91":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.1.7.3",{"_index":351,"title":{"3-92":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.2",{"_index":352,"title":{"3-93":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.2.1",{"_index":353,"title":{"3-94":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.2.1.1",{"_index":354,"title":{"3-95":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.2.1.2",{"_index":355,"title":{"3-96":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.2.1.3",{"_index":357,"title":{"3-97":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.2.1.4",{"_index":358,"title":{"3-98":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.2.1.5",{"_index":360,"title":{"3-99":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.2.1.6",{"_index":361,"title":{"3-100":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.2.2",{"_index":362,"title":{"3-101":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.2.2.1",{"_index":363,"title":{"3-102":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.2.2.2",{"_index":365,"title":{"3-103":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.2.2.3",{"_index":367,"title":{"3-104":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.2.2.4",{"_index":369,"title":{"3-105":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.2.2.5",{"_index":370,"title":{"3-106":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.2.2.6",{"_index":373,"title":{"3-107":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.2.2.7",{"_index":374,"title":{"3-108":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.2.2.8",{"_index":375,"title":{"3-109":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.2.2.9",{"_index":377,"title":{"3-110":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.2.3",{"_index":379,"title":{"3-111":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.2.3.1",{"_index":381,"title":{"3-112":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.2.3.2",{"_index":382,"title":{"3-113":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.2.3.3",{"_index":383,"title":{"3-114":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.2.4",{"_index":385,"title":{"3-115":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.2.4.1",{"_index":387,"title":{"3-116":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.2.4.2",{"_index":388,"title":{"3-117":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.3",{"_index":389,"title":{"3-118":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.3.1",{"_index":391,"title":{"3-119":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.3.2",{"_index":392,"title":{"3-120":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.3.3",{"_index":393,"title":{"3-121":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.4",{"_index":394,"title":{"3-122":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.4.1",{"_index":395,"title":{"3-123":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.4.2",{"_index":396,"title":{"3-124":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.4.3",{"_index":397,"title":{"3-125":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.4.4",{"_index":398,"title":{"3-126":{}},"name":{},"text":{"3":{}},"component":{}}],["1.2.5",{"_index":399,"title":{"3-127":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3",{"_index":401,"title":{"3-128":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1",{"_index":402,"title":{"3-129":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.1",{"_index":403,"title":{"3-130":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.1.1",{"_index":405,"title":{"3-131":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.1.2",{"_index":407,"title":{"3-132":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.10",{"_index":446,"title":{"3-157":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.10.1",{"_index":447,"title":{"3-158":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.10.2",{"_index":448,"title":{"3-159":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.10.3",{"_index":449,"title":{"3-160":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.11",{"_index":451,"title":{"3-161":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.11.1",{"_index":452,"title":{"3-162":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.11.2",{"_index":453,"title":{"3-163":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.12",{"_index":454,"title":{"3-164":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.2",{"_index":409,"title":{"3-133":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.3",{"_index":410,"title":{"3-134":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.3.1",{"_index":412,"title":{"3-135":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.3.2",{"_index":413,"title":{"3-136":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.4",{"_index":415,"title":{"3-137":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.4.1",{"_index":417,"title":{"3-138":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.4.2",{"_index":418,"title":{"3-139":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.4.3",{"_index":419,"title":{"3-140":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.4.4",{"_index":421,"title":{"3-141":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.4.5",{"_index":423,"title":{"3-142":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.4.6",{"_index":424,"title":{"3-143":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.4.7",{"_index":425,"title":{"3-144":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.4.8",{"_index":426,"title":{"3-145":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.4.9",{"_index":428,"title":{"3-146":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.5",{"_index":429,"title":{"3-147":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.5.1",{"_index":430,"title":{"3-148":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.5.2",{"_index":431,"title":{"3-149":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.6",{"_index":433,"title":{"3-150":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.7",{"_index":434,"title":{"3-151":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.7.1",{"_index":436,"title":{"3-152":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.7.2",{"_index":438,"title":{"3-153":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.7.3",{"_index":440,"title":{"3-154":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.8",{"_index":441,"title":{"3-155":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.1.9",{"_index":444,"title":{"3-156":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.12",{"_index":3863,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["1.3.2",{"_index":455,"title":{"3-165":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.2.1",{"_index":456,"title":{"3-166":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.2.1.1",{"_index":457,"title":{"3-167":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.2.1.2",{"_index":460,"title":{"3-168":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.2.1.3",{"_index":463,"title":{"3-169":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.2.1.4",{"_index":464,"title":{"3-170":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.2.1.5",{"_index":465,"title":{"3-171":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.2.1.6",{"_index":466,"title":{"3-172":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.2.1.7",{"_index":468,"title":{"3-173":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.2.2",{"_index":469,"title":{"3-174":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.2.2.1",{"_index":470,"title":{"3-175":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.2.2.2",{"_index":471,"title":{"3-176":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.3",{"_index":472,"title":{"3-177":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.3.1",{"_index":473,"title":{"3-178":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.3.1.1",{"_index":475,"title":{"3-179":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.3.1.2",{"_index":476,"title":{"3-180":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.3.1.3",{"_index":478,"title":{"3-181":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.3.1.4",{"_index":479,"title":{"3-182":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.3.2",{"_index":480,"title":{"3-183":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.3.2.1",{"_index":482,"title":{"3-184":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.3.2.2",{"_index":483,"title":{"3-185":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.3.2.3",{"_index":484,"title":{"3-186":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.3.2.4",{"_index":486,"title":{"3-187":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.3.2.5",{"_index":489,"title":{"3-188":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.3.2.6",{"_index":490,"title":{"3-189":{}},"name":{},"text":{"3":{}},"component":{}}],["1.3.3.2.7",{"_index":491,"title":{"3-190":{}},"name":{},"text":{"3":{}},"component":{}}],["1.4.0.0",{"_index":4378,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["10",{"_index":2459,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["10,000",{"_index":4659,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["100",{"_index":4231,"title":{},"name":{},"text":{"3":{},"5":{},"11":{},"12":{}},"component":{}}],["1000",{"_index":5097,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["10000",{"_index":3881,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["1000000",{"_index":3084,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["101",{"_index":4382,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["102",{"_index":4386,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["103",{"_index":4426,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["104",{"_index":4439,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["105",{"_index":4493,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["106",{"_index":4498,"title":{},"name":{},"text":{"3":{}},"component":{}}],["107",{"_index":4515,"title":{},"name":{},"text":{"3":{}},"component":{}}],["1072872000",{"_index":3099,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["1073741824",{"_index":5033,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["108",{"_index":4524,"title":{},"name":{},"text":{"3":{}},"component":{}}],["109",{"_index":4573,"title":{},"name":{},"text":{"3":{}},"component":{}}],["10px",{"_index":1464,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["11",{"_index":2489,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["110",{"_index":4608,"title":{},"name":{},"text":{"3":{}},"component":{}}],["111",{"_index":4616,"title":{},"name":{},"text":{"3":{}},"component":{}}],["1113;+49",{"_index":3558,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["112",{"_index":4620,"title":{},"name":{},"text":{"3":{}},"component":{}}],["113",{"_index":4624,"title":{},"name":{},"text":{"3":{}},"component":{}}],["114",{"_index":4649,"title":{},"name":{},"text":{"3":{}},"component":{}}],["115",{"_index":5036,"title":{},"name":{},"text":{"3":{}},"component":{}}],["116",{"_index":5043,"title":{},"name":{},"text":{"3":{}},"component":{}}],["117",{"_index":5048,"title":{},"name":{},"text":{"3":{}},"component":{}}],["118",{"_index":5057,"title":{},"name":{},"text":{"3":{}},"component":{}}],["119",{"_index":5060,"title":{},"name":{},"text":{"3":{}},"component":{}}],["11:30:21.323",{"_index":5272,"title":{},"name":{},"text":{"11":{}},"component":{}}],["12",{"_index":2491,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["120",{"_index":5175,"title":{},"name":{},"text":{"3":{}},"component":{}}],["121",{"_index":5184,"title":{},"name":{},"text":{"3":{}},"component":{}}],["121222f6f42—​7fb8",{"_index":3266,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["123",{"_index":4699,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["1234",{"_index":1776,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["12345",{"_index":3024,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["12:51:48",{"_index":1693,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["13",{"_index":2496,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["130",{"_index":2848,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["14",{"_index":2506,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["14:00:13.00",{"_index":4749,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["15",{"_index":1692,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["150",{"_index":5288,"title":{},"name":{},"text":{"11":{}},"component":{}}],["16",{"_index":2553,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["17",{"_index":2753,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["18",{"_index":2778,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["1800",{"_index":1558,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["1800000",{"_index":1555,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["189",{"_index":5255,"title":{},"name":{},"text":{"11":{}},"component":{}}],["19",{"_index":1937,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["1970",{"_index":1935,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["19700112134640z",{"_index":3085,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["19700218230000z",{"_index":1934,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["1996",{"_index":5244,"title":{},"name":{},"text":{"11":{}},"component":{}}],["1:1",{"_index":3609,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["1;0",{"_index":4752,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["1;1",{"_index":4750,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["1;select",{"_index":4742,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["1px",{"_index":1459,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["1~12",{"_index":5250,"title":{},"name":{},"text":{"11":{}},"component":{}}],["1~24",{"_index":5261,"title":{},"name":{},"text":{"11":{}},"component":{}}],["2",{"_index":155,"title":{"3-191":{}},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["2.0",{"_index":3944,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["2.1",{"_index":493,"title":{"3-192":{}},"name":{},"text":{"3":{}},"component":{}}],["2.1.1",{"_index":494,"title":{"3-193":{}},"name":{},"text":{"3":{}},"component":{}}],["2.1.2",{"_index":495,"title":{"3-194":{}},"name":{},"text":{"3":{}},"component":{}}],["2.1.3",{"_index":496,"title":{"3-195":{}},"name":{},"text":{"3":{}},"component":{}}],["2.1.4",{"_index":498,"title":{"3-196":{}},"name":{},"text":{"3":{}},"component":{}}],["2.1.5",{"_index":500,"title":{"3-197":{}},"name":{},"text":{"3":{}},"component":{}}],["2.1.6",{"_index":502,"title":{"3-198":{}},"name":{},"text":{"3":{}},"component":{}}],["2.147.483.647",{"_index":2999,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["2.2",{"_index":504,"title":{"3-199":{}},"name":{},"text":{"3":{}},"component":{}}],["2.2.1",{"_index":505,"title":{"3-200":{}},"name":{},"text":{"3":{}},"component":{}}],["2.3",{"_index":506,"title":{"3-201":{}},"name":{},"text":{"3":{}},"component":{}}],["2.3.1",{"_index":507,"title":{"3-202":{}},"name":{},"text":{"3":{}},"component":{}}],["2.3.1.1",{"_index":509,"title":{"3-203":{}},"name":{},"text":{"3":{}},"component":{}}],["2.3.1.2",{"_index":511,"title":{"3-204":{}},"name":{},"text":{"3":{}},"component":{}}],["2.3.1.3",{"_index":513,"title":{"3-205":{}},"name":{},"text":{"3":{}},"component":{}}],["2.3.2",{"_index":515,"title":{"3-206":{}},"name":{},"text":{"3":{}},"component":{}}],["2.3.3",{"_index":516,"title":{"3-207":{}},"name":{},"text":{"3":{}},"component":{}}],["2.3.4",{"_index":518,"title":{"3-208":{}},"name":{},"text":{"3":{}},"component":{}}],["2.4",{"_index":520,"title":{"3-209":{}},"name":{},"text":{"3":{}},"component":{}}],["2.4.1",{"_index":522,"title":{"3-210":{}},"name":{},"text":{"3":{}},"component":{}}],["2.4.2",{"_index":524,"title":{"3-211":{}},"name":{},"text":{"3":{}},"component":{}}],["2.4.3",{"_index":525,"title":{"3-212":{}},"name":{},"text":{"3":{}},"component":{}}],["2.5",{"_index":527,"title":{"3-213":{}},"name":{},"text":{"3":{},"6":{}},"component":{}}],["2.5.1",{"_index":529,"title":{"3-214":{}},"name":{},"text":{"3":{}},"component":{}}],["2.6",{"_index":531,"title":{"3-215":{}},"name":{},"text":{"3":{}},"component":{}}],["2.6.1",{"_index":533,"title":{"3-216":{}},"name":{},"text":{"3":{}},"component":{}}],["2.6.2",{"_index":534,"title":{"3-217":{}},"name":{},"text":{"3":{}},"component":{}}],["2.x",{"_index":5471,"title":{},"name":{},"text":{"12":{}},"component":{}}],["20",{"_index":2842,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["200",{"_index":5289,"title":{},"name":{},"text":{"11":{}},"component":{}}],["2000",{"_index":3850,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["2000/2003",{"_index":5023,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["2003",{"_index":5009,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["20031231120000z",{"_index":3098,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["2004",{"_index":5273,"title":{},"name":{},"text":{"11":{}},"component":{}}],["2005",{"_index":4123,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["2007",{"_index":1182,"title":{"3-717":{},"5-2":{}},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["2008",{"_index":5418,"title":{},"name":{},"text":{"12":{}},"component":{}}],["2009",{"_index":1695,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["2010",{"_index":4517,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["2012",{"_index":5420,"title":{},"name":{},"text":{"12":{}},"component":{}}],["2013",{"_index":4518,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["2016",{"_index":4519,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["2016/2019",{"_index":5401,"title":{},"name":{},"text":{"12":{}},"component":{}}],["2024",{"_index":1248,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["20xx",{"_index":3725,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["21",{"_index":2854,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["22",{"_index":2855,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["22.0",{"_index":4415,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["23",{"_index":2903,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["2307",{"_index":5173,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["24",{"_index":2925,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["25",{"_index":2930,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["250",{"_index":5290,"title":{},"name":{},"text":{"11":{}},"component":{}}],["250,000",{"_index":3235,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["26",{"_index":2937,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["27",{"_index":2966,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["28",{"_index":3035,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["29",{"_index":4820,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["2nd",{"_index":4119,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["3",{"_index":164,"title":{"3-218":{}},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["3.1",{"_index":537,"title":{"3-219":{},"3-692":{},"12-276":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["3.2",{"_index":538,"title":{"3-220":{}},"name":{},"text":{"3":{}},"component":{}}],["3.3",{"_index":540,"title":{"3-221":{}},"name":{},"text":{"3":{}},"component":{}}],["3.4",{"_index":541,"title":{"3-222":{}},"name":{},"text":{"3":{}},"component":{}}],["3.6",{"_index":1147,"title":{"3-693":{},"12-277":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["3.x",{"_index":4671,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["30",{"_index":1561,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["300",{"_index":3890,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["31",{"_index":4825,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["31.12.2037",{"_index":2960,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["32",{"_index":3259,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["323",{"_index":3559,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["32bit",{"_index":3501,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["33",{"_index":3264,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["34",{"_index":3267,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["34526",{"_index":3019,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["35",{"_index":3269,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["36",{"_index":3270,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["3600",{"_index":3695,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["3600000",{"_index":1565,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["365",{"_index":956,"title":{"3-544":{},"3-545":{},"3-546":{},"3-547":{},"3-548":{},"3-549":{},"3-550":{},"12-128":{},"12-129":{},"12-130":{},"12-131":{},"12-132":{},"12-133":{},"12-134":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["37",{"_index":3282,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["38",{"_index":3296,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["38500|de|pqr",{"_index":4751,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["389",{"_index":5231,"title":{},"name":{},"text":{"11":{}},"component":{}}],["39",{"_index":3302,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["4",{"_index":168,"title":{"3-203":{},"3-223":{},"7-12":{}},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["4.1",{"_index":543,"title":{"3-224":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["4.2",{"_index":544,"title":{"3-225":{}},"name":{},"text":{"3":{}},"component":{}}],["40",{"_index":3304,"title":{},"name":{},"text":{"3":{}},"component":{}}],["4000",{"_index":1116,"title":{"3-677":{},"3-695":{},"3-696":{},"12-261":{},"12-279":{},"12-280":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["40000",{"_index":4509,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["40443",{"_index":4510,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["4096",{"_index":3046,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["41",{"_index":3306,"title":{},"name":{},"text":{"3":{}},"component":{}}],["42",{"_index":3328,"title":{},"name":{},"text":{"3":{}},"component":{}}],["42111;;sales;manag",{"_index":3560,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["43",{"_index":3333,"title":{},"name":{},"text":{"3":{}},"component":{}}],["43257",{"_index":3027,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["44",{"_index":3345,"title":{},"name":{},"text":{"3":{}},"component":{}}],["44220983382016",{"_index":5413,"title":{},"name":{},"text":{"12":{}},"component":{}}],["443",{"_index":3994,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["45",{"_index":3348,"title":{},"name":{},"text":{"3":{}},"component":{}}],["4515",{"_index":3065,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["4535486012416",{"_index":5032,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["45667",{"_index":3014,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["45668",{"_index":3021,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["46",{"_index":3415,"title":{},"name":{},"text":{"3":{}},"component":{}}],["47",{"_index":3427,"title":{},"name":{},"text":{"3":{}},"component":{}}],["48",{"_index":3447,"title":{},"name":{},"text":{"3":{}},"component":{}}],["4852",{"_index":3064,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["49",{"_index":3023,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["5",{"_index":170,"title":{"3-226":{}},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["5.1",{"_index":545,"title":{"3-227":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.1",{"_index":546,"title":{"3-228":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.1.1",{"_index":547,"title":{"3-229":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.1.2",{"_index":549,"title":{"3-230":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.1.3",{"_index":550,"title":{"3-231":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.1.4",{"_index":551,"title":{"3-232":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.1.5",{"_index":553,"title":{"3-233":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.1.5.1",{"_index":554,"title":{"3-234":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.1.5.2",{"_index":556,"title":{"3-235":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.2",{"_index":557,"title":{"3-236":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.2.1",{"_index":560,"title":{"3-237":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.2.2",{"_index":561,"title":{"3-238":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.2.2.1",{"_index":562,"title":{"3-239":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.2.2.2",{"_index":564,"title":{"3-240":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.2.3",{"_index":565,"title":{"3-241":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.2.3.1",{"_index":566,"title":{"3-242":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.2.3.2",{"_index":567,"title":{"3-243":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.2.3.3",{"_index":568,"title":{"3-244":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.2.3.4",{"_index":569,"title":{"3-245":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.2.3.5",{"_index":570,"title":{"3-246":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.2.4",{"_index":572,"title":{"3-247":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.3",{"_index":574,"title":{"3-248":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.3.1",{"_index":575,"title":{"3-249":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.3.2",{"_index":576,"title":{"3-250":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.3.2.1",{"_index":577,"title":{"3-251":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.3.2.2",{"_index":578,"title":{"3-252":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.3.2.3",{"_index":579,"title":{"3-253":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.3.3",{"_index":580,"title":{"3-254":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.3.4",{"_index":581,"title":{"3-255":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.3.5",{"_index":582,"title":{"3-256":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.3.5.1",{"_index":583,"title":{"3-257":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.3.5.2",{"_index":584,"title":{"3-258":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.4",{"_index":585,"title":{"3-259":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.4.1",{"_index":587,"title":{"3-260":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.4.2",{"_index":588,"title":{"3-261":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.4.3",{"_index":589,"title":{"3-262":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.4.4",{"_index":590,"title":{"3-263":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.4.5",{"_index":591,"title":{"3-264":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.4.5.1",{"_index":592,"title":{"3-265":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.4.5.2",{"_index":593,"title":{"3-266":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.5",{"_index":594,"title":{"3-267":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.5.1",{"_index":595,"title":{"3-268":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.5.2",{"_index":596,"title":{"3-269":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.5.3",{"_index":597,"title":{"3-270":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.5.4",{"_index":598,"title":{"3-271":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.5.5",{"_index":599,"title":{"3-272":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.5.5.1",{"_index":600,"title":{"3-273":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.5.5.2",{"_index":601,"title":{"3-274":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.6",{"_index":602,"title":{"3-275":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.6.1",{"_index":604,"title":{"3-276":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.6.1.1",{"_index":605,"title":{"3-277":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.6.1.2",{"_index":606,"title":{"3-278":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.6.1.3",{"_index":607,"title":{"3-279":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.6.1.4",{"_index":608,"title":{"3-280":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.6.1.5",{"_index":609,"title":{"3-281":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.6.1.6",{"_index":610,"title":{"3-282":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.6.2",{"_index":613,"title":{"3-283":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.6.2.1",{"_index":614,"title":{"3-284":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.6.2.2",{"_index":615,"title":{"3-285":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.6.2.3",{"_index":616,"title":{"3-286":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.6.2.4",{"_index":617,"title":{"3-287":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.6.2.5",{"_index":618,"title":{"3-288":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.7",{"_index":619,"title":{"3-289":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.8",{"_index":621,"title":{"3-290":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.8.1",{"_index":622,"title":{"3-291":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.8.1.1",{"_index":623,"title":{"3-292":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.8.1.2",{"_index":624,"title":{"3-293":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.8.1.3",{"_index":625,"title":{"3-294":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.8.1.4",{"_index":626,"title":{"3-295":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.8.1.5",{"_index":627,"title":{"3-296":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.8.2",{"_index":628,"title":{"3-297":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.8.2.1",{"_index":629,"title":{"3-298":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.8.2.2",{"_index":630,"title":{"3-299":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.8.2.3",{"_index":631,"title":{"3-300":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.8.2.4",{"_index":632,"title":{"3-301":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.8.2.5",{"_index":633,"title":{"3-302":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.8.3",{"_index":634,"title":{"3-303":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.8.3.1",{"_index":636,"title":{"3-304":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.8.3.2",{"_index":637,"title":{"3-305":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.8.3.3",{"_index":639,"title":{"3-306":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.8.3.4",{"_index":640,"title":{"3-307":{}},"name":{},"text":{"3":{}},"component":{}}],["5.1.8.3.5",{"_index":643,"title":{"3-308":{}},"name":{},"text":{"3":{}},"component":{}}],["5.2",{"_index":646,"title":{"3-309":{},"3-694":{},"12-278":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["5.2.1",{"_index":647,"title":{"3-310":{}},"name":{},"text":{"3":{}},"component":{}}],["5.2.2",{"_index":649,"title":{"3-311":{}},"name":{},"text":{"3":{}},"component":{}}],["5.2.3",{"_index":650,"title":{"3-312":{}},"name":{},"text":{"3":{}},"component":{}}],["5.2.3.1",{"_index":652,"title":{"3-313":{}},"name":{},"text":{"3":{}},"component":{}}],["5.2.3.2",{"_index":655,"title":{"3-314":{}},"name":{},"text":{"3":{}},"component":{}}],["5.2.3.2.1",{"_index":657,"title":{"3-315":{}},"name":{},"text":{"3":{}},"component":{}}],["5.2.4",{"_index":658,"title":{"3-316":{}},"name":{},"text":{"3":{}},"component":{}}],["5.2.5",{"_index":659,"title":{"3-317":{}},"name":{},"text":{"3":{}},"component":{}}],["50",{"_index":3467,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["500",{"_index":1407,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["500,000",{"_index":3239,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["51",{"_index":3468,"title":{},"name":{},"text":{"3":{}},"component":{}}],["52",{"_index":3488,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["53",{"_index":3514,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["54",{"_index":3516,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["55",{"_index":3520,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["550",{"_index":1987,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["56",{"_index":3532,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["57",{"_index":3539,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["58",{"_index":3576,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["58564;new",{"_index":3563,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["59",{"_index":3582,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["5900",{"_index":4390,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["6",{"_index":173,"title":{"3-318":{}},"name":{},"text":{"2":{},"3":{},"5":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["6.1",{"_index":660,"title":{"3-319":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1",{"_index":661,"title":{"3-320":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.1",{"_index":662,"title":{"3-321":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.1.1",{"_index":663,"title":{"3-322":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.1.2",{"_index":664,"title":{"3-323":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.10",{"_index":692,"title":{"3-346":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.11",{"_index":693,"title":{"3-347":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.11.1",{"_index":694,"title":{"3-348":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.11.2",{"_index":695,"title":{"3-349":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.2",{"_index":665,"title":{"3-324":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.2.1",{"_index":666,"title":{"3-325":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.2.2",{"_index":667,"title":{"3-326":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.3",{"_index":668,"title":{"3-327":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.3.1",{"_index":671,"title":{"3-328":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.3.2",{"_index":672,"title":{"3-329":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.4",{"_index":673,"title":{"3-330":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.4.1",{"_index":674,"title":{"3-331":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.4.2",{"_index":675,"title":{"3-332":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.5",{"_index":676,"title":{"3-333":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.5.1",{"_index":677,"title":{"3-334":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.5.2",{"_index":678,"title":{"3-335":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.6",{"_index":679,"title":{"3-336":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.6.1",{"_index":681,"title":{"3-337":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.6.2",{"_index":682,"title":{"3-338":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.7",{"_index":683,"title":{"3-339":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.7.1",{"_index":685,"title":{"3-340":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.7.2",{"_index":686,"title":{"3-341":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.8",{"_index":687,"title":{"3-342":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.8.1",{"_index":688,"title":{"3-343":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.8.2",{"_index":690,"title":{"3-344":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.1.9",{"_index":691,"title":{"3-345":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.10",{"_index":727,"title":{"3-374":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.10.1",{"_index":728,"title":{"3-375":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.10.1.1",{"_index":729,"title":{"3-376":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.10.1.2",{"_index":730,"title":{"3-377":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.10.2",{"_index":731,"title":{"3-378":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.10.2.1",{"_index":734,"title":{"3-379":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.10.2.2",{"_index":735,"title":{"3-380":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.10.3",{"_index":736,"title":{"3-381":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.10.3.1",{"_index":737,"title":{"3-382":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.10.3.2",{"_index":738,"title":{"3-383":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.2",{"_index":696,"title":{"3-350":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.2.1",{"_index":698,"title":{"3-351":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.2.2",{"_index":699,"title":{"3-352":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.3",{"_index":700,"title":{"3-353":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.3.1",{"_index":701,"title":{"3-354":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.3.2",{"_index":702,"title":{"3-355":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.4",{"_index":703,"title":{"3-356":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.4.1",{"_index":705,"title":{"3-357":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.4.2",{"_index":706,"title":{"3-358":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.5",{"_index":707,"title":{"3-359":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.5.1",{"_index":709,"title":{"3-360":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.5.2",{"_index":710,"title":{"3-361":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.6",{"_index":711,"title":{"3-362":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.6.1",{"_index":712,"title":{"3-363":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.7",{"_index":713,"title":{"3-364":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.7.1",{"_index":714,"title":{"3-365":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.7.2",{"_index":715,"title":{"3-366":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.8",{"_index":716,"title":{"3-367":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.8.1",{"_index":718,"title":{"3-368":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.8.2",{"_index":720,"title":{"3-369":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.8.3",{"_index":721,"title":{"3-370":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.8.4",{"_index":722,"title":{"3-371":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.9",{"_index":723,"title":{"3-372":{}},"name":{},"text":{"3":{}},"component":{}}],["6.1.9.1",{"_index":726,"title":{"3-373":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2",{"_index":739,"title":{"3-384":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.1",{"_index":740,"title":{"3-385":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.1.1",{"_index":742,"title":{"3-386":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.10",{"_index":775,"title":{"3-411":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.10.1",{"_index":776,"title":{"3-412":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.11",{"_index":778,"title":{"3-413":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.11.1",{"_index":781,"title":{"3-414":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.11.2",{"_index":782,"title":{"3-415":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.2",{"_index":743,"title":{"3-387":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.2.1",{"_index":744,"title":{"3-388":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.2.2",{"_index":745,"title":{"3-389":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.2.3",{"_index":746,"title":{"3-390":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.2.4",{"_index":748,"title":{"3-391":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.2.5",{"_index":749,"title":{"3-392":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.3",{"_index":751,"title":{"3-393":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.3.1",{"_index":755,"title":{"3-394":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.4",{"_index":756,"title":{"3-395":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.4.1",{"_index":758,"title":{"3-396":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.5",{"_index":759,"title":{"3-397":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.5.1",{"_index":761,"title":{"3-398":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.6",{"_index":762,"title":{"3-399":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.6.1",{"_index":763,"title":{"3-400":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.6.2",{"_index":764,"title":{"3-401":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.7",{"_index":765,"title":{"3-402":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.7.1",{"_index":767,"title":{"3-403":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.7.2",{"_index":768,"title":{"3-404":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.8",{"_index":769,"title":{"3-405":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.8.1",{"_index":770,"title":{"3-406":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.8.2",{"_index":771,"title":{"3-407":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.8.3",{"_index":772,"title":{"3-408":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.9",{"_index":773,"title":{"3-409":{}},"name":{},"text":{"3":{}},"component":{}}],["6.2.9.1",{"_index":774,"title":{"3-410":{}},"name":{},"text":{"3":{}},"component":{}}],["60",{"_index":2828,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["61",{"_index":3612,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["62",{"_index":3731,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["63",{"_index":3742,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["636",{"_index":3013,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["64",{"_index":3747,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["644",{"_index":4719,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["64bit",{"_index":3503,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["65",{"_index":3751,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["65432",{"_index":4702,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["66",{"_index":3756,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["67",{"_index":3763,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["68",{"_index":3767,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["69",{"_index":3772,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["7",{"_index":181,"title":{"3-416":{}},"name":{},"text":{"2":{},"3":{},"5":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["7.0.2",{"_index":4158,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["7.1",{"_index":783,"title":{"3-417":{}},"name":{},"text":{"3":{}},"component":{}}],["7.1.1",{"_index":785,"title":{"3-418":{}},"name":{},"text":{"3":{}},"component":{}}],["7.1.2",{"_index":786,"title":{"3-419":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2",{"_index":788,"title":{"3-420":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.1",{"_index":789,"title":{"3-421":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.1.1",{"_index":790,"title":{"3-422":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.1.1.1",{"_index":793,"title":{"3-423":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.1.1.2",{"_index":794,"title":{"3-424":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.1.2",{"_index":795,"title":{"3-425":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.10",{"_index":929,"title":{"3-523":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.10.1",{"_index":931,"title":{"3-524":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.10.2",{"_index":932,"title":{"3-525":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.10.3",{"_index":933,"title":{"3-526":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.10.4",{"_index":934,"title":{"3-527":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.10.5",{"_index":935,"title":{"3-528":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.10.6",{"_index":936,"title":{"3-529":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.10.6.1",{"_index":937,"title":{"3-530":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.10.6.2",{"_index":938,"title":{"3-531":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.10.6.3",{"_index":939,"title":{"3-532":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.11",{"_index":940,"title":{"3-533":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.11.1",{"_index":942,"title":{"3-534":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.11.2",{"_index":943,"title":{"3-535":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.11.3",{"_index":944,"title":{"3-536":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.11.4",{"_index":945,"title":{"3-537":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.11.5",{"_index":946,"title":{"3-538":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.11.6",{"_index":947,"title":{"3-539":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.11.6.1",{"_index":948,"title":{"3-540":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.11.6.2",{"_index":949,"title":{"3-541":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.11.6.3",{"_index":951,"title":{"3-542":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.11.6.4",{"_index":953,"title":{"3-543":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.12",{"_index":954,"title":{"3-544":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.12.1",{"_index":957,"title":{"3-545":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.12.2",{"_index":958,"title":{"3-546":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.12.3",{"_index":959,"title":{"3-547":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.12.4",{"_index":960,"title":{"3-548":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.12.5",{"_index":961,"title":{"3-549":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.12.6",{"_index":962,"title":{"3-550":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.12.6.1",{"_index":963,"title":{"3-551":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.12.6.2",{"_index":964,"title":{"3-552":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.12.6.3",{"_index":965,"title":{"3-553":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.12.6.4",{"_index":966,"title":{"3-554":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.12.6.5",{"_index":968,"title":{"3-555":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.12.6.6",{"_index":969,"title":{"3-556":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.13",{"_index":970,"title":{"3-557":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.13.1",{"_index":972,"title":{"3-558":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.13.2",{"_index":973,"title":{"3-559":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.13.3",{"_index":974,"title":{"3-560":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.13.4",{"_index":975,"title":{"3-561":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.13.5",{"_index":976,"title":{"3-562":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.13.6",{"_index":977,"title":{"3-563":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.13.6.1",{"_index":978,"title":{"3-564":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.13.6.2",{"_index":979,"title":{"3-565":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.13.6.3",{"_index":980,"title":{"3-566":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.13.6.4",{"_index":981,"title":{"3-567":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.14",{"_index":982,"title":{"3-568":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.14.1",{"_index":984,"title":{"3-569":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.14.2",{"_index":985,"title":{"3-570":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.14.3",{"_index":986,"title":{"3-571":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.14.4",{"_index":987,"title":{"3-572":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.14.5",{"_index":988,"title":{"3-573":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.14.6",{"_index":989,"title":{"3-574":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.14.6.1",{"_index":990,"title":{"3-575":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.14.6.2",{"_index":991,"title":{"3-576":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.14.6.3",{"_index":992,"title":{"3-577":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.14.6.4",{"_index":993,"title":{"3-578":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.15",{"_index":994,"title":{"3-579":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.15.1",{"_index":996,"title":{"3-580":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.15.1.1",{"_index":997,"title":{"3-581":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.15.1.2",{"_index":999,"title":{"3-582":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.15.1.3",{"_index":1001,"title":{"3-583":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.15.10",{"_index":1012,"title":{"3-592":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.15.11",{"_index":1014,"title":{"3-593":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.15.12",{"_index":1015,"title":{"3-594":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.15.13",{"_index":1016,"title":{"3-595":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.15.14",{"_index":1017,"title":{"3-596":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.15.15",{"_index":1018,"title":{"3-597":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.15.16",{"_index":1019,"title":{"3-598":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.15.17",{"_index":1020,"title":{"3-599":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.15.2",{"_index":1002,"title":{"3-584":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.15.3",{"_index":1003,"title":{"3-585":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.15.4",{"_index":1004,"title":{"3-586":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.15.5",{"_index":1005,"title":{"3-587":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.15.6",{"_index":1006,"title":{"3-588":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.15.7",{"_index":1008,"title":{"3-589":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.15.8",{"_index":1010,"title":{"3-590":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.15.9",{"_index":1011,"title":{"3-591":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.16",{"_index":1021,"title":{"3-600":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.16.1",{"_index":1026,"title":{"3-601":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.16.2",{"_index":1027,"title":{"3-602":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.16.3",{"_index":1028,"title":{"3-603":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.16.4",{"_index":1029,"title":{"3-604":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.16.5",{"_index":1030,"title":{"3-605":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.16.5.1",{"_index":1031,"title":{"3-606":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.16.5.2",{"_index":1032,"title":{"3-607":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.16.5.3",{"_index":1033,"title":{"3-608":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.16.5.4",{"_index":1034,"title":{"3-609":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.16.5.5",{"_index":1035,"title":{"3-610":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.16.6",{"_index":1036,"title":{"3-611":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.17",{"_index":1037,"title":{"3-612":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.17.1",{"_index":1038,"title":{"3-613":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.17.2",{"_index":1039,"title":{"3-614":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.17.3",{"_index":1040,"title":{"3-615":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.17.4",{"_index":1041,"title":{"3-616":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.17.5",{"_index":1042,"title":{"3-617":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.17.6",{"_index":1043,"title":{"3-618":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.17.6.1",{"_index":1044,"title":{"3-619":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.17.6.2",{"_index":1045,"title":{"3-620":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.17.6.3",{"_index":1046,"title":{"3-621":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.18",{"_index":1047,"title":{"3-622":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.18.1",{"_index":1049,"title":{"3-623":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.18.2",{"_index":1050,"title":{"3-624":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.18.2.1",{"_index":1051,"title":{"3-625":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.18.2.2",{"_index":1052,"title":{"3-626":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.18.2.3",{"_index":1053,"title":{"3-627":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.18.3",{"_index":1055,"title":{"3-628":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.18.4",{"_index":1056,"title":{"3-629":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.18.5",{"_index":1057,"title":{"3-630":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.18.6",{"_index":1058,"title":{"3-631":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.18.6.1",{"_index":1059,"title":{"3-632":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.18.6.2",{"_index":1060,"title":{"3-633":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.18.6.3",{"_index":1061,"title":{"3-634":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.19",{"_index":1062,"title":{"3-635":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.19.1",{"_index":1064,"title":{"3-636":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.19.2",{"_index":1065,"title":{"3-637":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.19.3",{"_index":1066,"title":{"3-638":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.19.4",{"_index":1067,"title":{"3-639":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.19.5",{"_index":1068,"title":{"3-640":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.19.6",{"_index":1069,"title":{"3-641":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.19.6.1",{"_index":1070,"title":{"3-642":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.2",{"_index":798,"title":{"3-426":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.2.1",{"_index":799,"title":{"3-427":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.2.2",{"_index":800,"title":{"3-428":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.2.3",{"_index":801,"title":{"3-429":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.2.3.1",{"_index":802,"title":{"3-430":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.2.3.2",{"_index":804,"title":{"3-431":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.2.3.3",{"_index":806,"title":{"3-432":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.2.3.4",{"_index":807,"title":{"3-433":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.2.3.5",{"_index":809,"title":{"3-434":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.2.3.6",{"_index":812,"title":{"3-435":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.2.3.7",{"_index":816,"title":{"3-436":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.2.3.8",{"_index":817,"title":{"3-437":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.2.3.9",{"_index":819,"title":{"3-438":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.2.4",{"_index":820,"title":{"3-439":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.2.5",{"_index":821,"title":{"3-440":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.2.6",{"_index":822,"title":{"3-441":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.2.6.1",{"_index":823,"title":{"3-442":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.2.6.2",{"_index":824,"title":{"3-443":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.2.7",{"_index":825,"title":{"3-444":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.2.7.1",{"_index":826,"title":{"3-445":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.2.7.2",{"_index":827,"title":{"3-446":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.2.7.3",{"_index":828,"title":{"3-447":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.2.7.4",{"_index":830,"title":{"3-448":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.2.7.5",{"_index":831,"title":{"3-449":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.20",{"_index":1071,"title":{"3-643":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.20.1",{"_index":1072,"title":{"3-644":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.20.2",{"_index":1073,"title":{"3-645":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.20.2.1",{"_index":1074,"title":{"3-646":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.20.2.2",{"_index":1075,"title":{"3-647":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.20.3",{"_index":1076,"title":{"3-648":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.20.4",{"_index":1077,"title":{"3-649":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.20.5",{"_index":1078,"title":{"3-650":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.20.6",{"_index":1079,"title":{"3-651":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.20.6.1",{"_index":1080,"title":{"3-652":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.20.6.2",{"_index":1081,"title":{"3-653":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.20.6.3",{"_index":1082,"title":{"3-654":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.3",{"_index":832,"title":{"3-450":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.3.1",{"_index":835,"title":{"3-451":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.3.2",{"_index":836,"title":{"3-452":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.3.3",{"_index":837,"title":{"3-453":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.3.4",{"_index":838,"title":{"3-454":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.3.5",{"_index":839,"title":{"3-455":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.4",{"_index":840,"title":{"3-456":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.4.1",{"_index":841,"title":{"3-457":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.4.2",{"_index":842,"title":{"3-458":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.5",{"_index":843,"title":{"3-459":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.5.1",{"_index":846,"title":{"3-460":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.5.2",{"_index":847,"title":{"3-461":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.5.3",{"_index":848,"title":{"3-462":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.5.4",{"_index":849,"title":{"3-463":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.5.5",{"_index":850,"title":{"3-464":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.5.6",{"_index":851,"title":{"3-465":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.5.7",{"_index":852,"title":{"3-466":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.5.7.1",{"_index":853,"title":{"3-467":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.5.7.2",{"_index":856,"title":{"3-468":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.5.7.3",{"_index":857,"title":{"3-469":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.5.7.4",{"_index":859,"title":{"3-470":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.5.7.5",{"_index":861,"title":{"3-471":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.5.7.6",{"_index":862,"title":{"3-472":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.5.8",{"_index":863,"title":{"3-473":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.5.8.1",{"_index":864,"title":{"3-474":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.5.8.2",{"_index":867,"title":{"3-475":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.6",{"_index":869,"title":{"3-476":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.6.1",{"_index":872,"title":{"3-477":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.6.2",{"_index":873,"title":{"3-478":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.6.3",{"_index":874,"title":{"3-479":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.6.4",{"_index":875,"title":{"3-480":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.6.5",{"_index":876,"title":{"3-481":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.6.6",{"_index":877,"title":{"3-482":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.6.7",{"_index":878,"title":{"3-483":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.6.8",{"_index":879,"title":{"3-484":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.6.9",{"_index":881,"title":{"3-485":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.7",{"_index":882,"title":{"3-486":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.7.1",{"_index":884,"title":{"3-487":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.7.2",{"_index":885,"title":{"3-488":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.7.3",{"_index":886,"title":{"3-489":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.7.4",{"_index":887,"title":{"3-490":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.7.5",{"_index":888,"title":{"3-491":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.7.6",{"_index":889,"title":{"3-492":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.7.6.1",{"_index":890,"title":{"3-493":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.7.6.2",{"_index":891,"title":{"3-494":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.7.6.3",{"_index":893,"title":{"3-495":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.7.6.4",{"_index":894,"title":{"3-496":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.7.6.5",{"_index":895,"title":{"3-497":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.8",{"_index":896,"title":{"3-498":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.8.1",{"_index":897,"title":{"3-499":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.8.2",{"_index":898,"title":{"3-500":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.8.3",{"_index":899,"title":{"3-501":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.8.3.1",{"_index":900,"title":{"3-502":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.8.4",{"_index":902,"title":{"3-503":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.8.5",{"_index":903,"title":{"3-504":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.8.6",{"_index":904,"title":{"3-505":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.8.6.1",{"_index":905,"title":{"3-506":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.8.6.2",{"_index":906,"title":{"3-507":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.8.6.3",{"_index":907,"title":{"3-508":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.8.7",{"_index":908,"title":{"3-509":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.8.7.1",{"_index":909,"title":{"3-510":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.8.7.2",{"_index":912,"title":{"3-511":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.9",{"_index":914,"title":{"3-512":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.9.1",{"_index":915,"title":{"3-513":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.9.2",{"_index":916,"title":{"3-514":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.9.3",{"_index":917,"title":{"3-515":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.9.4",{"_index":918,"title":{"3-516":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.9.5",{"_index":919,"title":{"3-517":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.9.6",{"_index":920,"title":{"3-518":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.9.6.1",{"_index":921,"title":{"3-519":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.9.6.2",{"_index":923,"title":{"3-520":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.9.6.3",{"_index":924,"title":{"3-521":{}},"name":{},"text":{"3":{}},"component":{}}],["7.2.9.7",{"_index":928,"title":{"3-522":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3",{"_index":1083,"title":{"3-655":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.1",{"_index":1084,"title":{"3-656":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.2",{"_index":1085,"title":{"3-657":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.2.1",{"_index":1087,"title":{"3-658":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.2.1.1",{"_index":1089,"title":{"3-659":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.2.1.2",{"_index":1090,"title":{"3-660":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.2.1.3",{"_index":1092,"title":{"3-661":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.2.2",{"_index":1093,"title":{"3-662":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.2.2.1",{"_index":1095,"title":{"3-663":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.3",{"_index":1096,"title":{"3-664":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4",{"_index":1098,"title":{"3-665":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.1",{"_index":1100,"title":{"3-666":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.2",{"_index":1101,"title":{"3-667":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.3",{"_index":1103,"title":{"3-668":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.3.1",{"_index":1105,"title":{"3-669":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.3.2",{"_index":1106,"title":{"3-670":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.3.3",{"_index":1107,"title":{"3-671":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.4",{"_index":1108,"title":{"3-672":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.4.1",{"_index":1110,"title":{"3-673":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.4.2",{"_index":1111,"title":{"3-674":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.5",{"_index":1112,"title":{"3-675":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.6",{"_index":1114,"title":{"3-676":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.6.1",{"_index":1115,"title":{"3-677":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.6.2",{"_index":1118,"title":{"3-678":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.6.3",{"_index":1121,"title":{"3-679":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.7",{"_index":1124,"title":{"3-680":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.7.1",{"_index":1125,"title":{"3-681":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.7.2",{"_index":1126,"title":{"3-682":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.7.3",{"_index":1127,"title":{"3-683":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.7.4",{"_index":1130,"title":{"3-684":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.8",{"_index":1132,"title":{"3-685":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.8.1",{"_index":1133,"title":{"3-686":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.8.2",{"_index":1135,"title":{"3-687":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.8.3",{"_index":1138,"title":{"3-688":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.8.4",{"_index":1139,"title":{"3-689":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.8.5",{"_index":1140,"title":{"3-690":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.9",{"_index":1141,"title":{"3-691":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.9.1",{"_index":1143,"title":{"3-692":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.9.2",{"_index":1146,"title":{"3-693":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.9.3",{"_index":1148,"title":{"3-694":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.9.4",{"_index":1149,"title":{"3-695":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.4.9.5",{"_index":1151,"title":{"3-696":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.5",{"_index":1152,"title":{"3-697":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.5.1",{"_index":1154,"title":{"3-698":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.5.2",{"_index":1155,"title":{"3-699":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.5.2.1",{"_index":1157,"title":{"3-700":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.5.2.2",{"_index":1158,"title":{"3-701":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.5.2.3",{"_index":1159,"title":{"3-702":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.5.3",{"_index":1163,"title":{"3-703":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.5.3.1",{"_index":1165,"title":{"3-704":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.5.3.2",{"_index":1166,"title":{"3-705":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.5.4",{"_index":1168,"title":{"3-706":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.5.4.1",{"_index":1169,"title":{"3-707":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.5.4.2",{"_index":1170,"title":{"3-708":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.5.4.3",{"_index":1171,"title":{"3-709":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.5.5",{"_index":1172,"title":{"3-710":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.5.5.1",{"_index":1173,"title":{"3-711":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.5.5.2",{"_index":1175,"title":{"3-712":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.6",{"_index":1176,"title":{"3-713":{}},"name":{},"text":{"3":{}},"component":{}}],["7.3.7",{"_index":1177,"title":{"3-714":{}},"name":{},"text":{"3":{}},"component":{}}],["70",{"_index":3776,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["71",{"_index":3787,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["72",{"_index":3789,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["722",{"_index":3016,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["73",{"_index":3803,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["74",{"_index":3818,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["75",{"_index":3823,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["76",{"_index":4883,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["77",{"_index":4886,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["78",{"_index":4889,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["79",{"_index":4891,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["8",{"_index":3062,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["8.0c",{"_index":5298,"title":{},"name":{},"text":{"11":{}},"component":{}}],["8.2a",{"_index":1964,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["80",{"_index":4551,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["81",{"_index":3912,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["82",{"_index":3943,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["82736",{"_index":3017,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["83",{"_index":3959,"title":{},"name":{},"text":{"3":{}},"component":{}}],["84",{"_index":3988,"title":{},"name":{},"text":{"3":{}},"component":{}}],["85",{"_index":3989,"title":{},"name":{},"text":{"3":{}},"component":{}}],["86",{"_index":3998,"title":{},"name":{},"text":{"3":{}},"component":{}}],["87",{"_index":3999,"title":{},"name":{},"text":{"3":{}},"component":{}}],["88",{"_index":3670,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["8859",{"_index":3684,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["89",{"_index":3012,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["9",{"_index":2437,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["90",{"_index":2581,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["91",{"_index":4135,"title":{},"name":{},"text":{"3":{}},"component":{}}],["92",{"_index":4154,"title":{},"name":{},"text":{"3":{}},"component":{}}],["93",{"_index":4238,"title":{},"name":{},"text":{"3":{}},"component":{}}],["94",{"_index":4268,"title":{},"name":{},"text":{"3":{}},"component":{}}],["95",{"_index":4279,"title":{},"name":{},"text":{"3":{}},"component":{}}],["96",{"_index":4293,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["97",{"_index":4328,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["978",{"_index":5252,"title":{},"name":{},"text":{"11":{}},"component":{}}],["98",{"_index":4349,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["987",{"_index":4701,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["9876",{"_index":1779,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["99",{"_index":4367,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["_attributenam",{"_index":2140,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["_attributevalu",{"_index":2184,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["_cfg.getact",{"_index":2148,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["_cfg.getnode(\"param",{"_index":2138,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["_map",{"_index":2203,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["_modifysubject",{"_index":2144,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["_nation",{"_index":1701,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["_tgtenv.get(\"dxm.uh.connectorconfbyname.t",{"_index":2589,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["a.1",{"_index":1180,"title":{"3-716":{}},"name":{},"text":{"3":{}},"component":{}}],["a.1.1",{"_index":1181,"title":{"3-717":{}},"name":{},"text":{"3":{}},"component":{}}],["a.2",{"_index":1183,"title":{"3-718":{}},"name":{},"text":{"3":{}},"component":{}}],["a.2.1",{"_index":1185,"title":{"3-719":{}},"name":{},"text":{"3":{}},"component":{}}],["a.2.2",{"_index":1187,"title":{"3-720":{}},"name":{},"text":{"3":{}},"component":{}}],["a.2.3",{"_index":1188,"title":{"3-721":{}},"name":{},"text":{"3":{}},"component":{}}],["a.2.4",{"_index":1189,"title":{"3-722":{}},"name":{},"text":{"3":{}},"component":{}}],["a.3",{"_index":1190,"title":{"3-723":{}},"name":{},"text":{"3":{}},"component":{}}],["a.3.1",{"_index":1191,"title":{"3-724":{}},"name":{},"text":{"3":{}},"component":{}}],["a.3.2",{"_index":1192,"title":{"3-725":{}},"name":{},"text":{"3":{}},"component":{}}],["a.3.3",{"_index":1193,"title":{"3-726":{}},"name":{},"text":{"3":{}},"component":{}}],["a.3.4",{"_index":1194,"title":{"3-727":{}},"name":{},"text":{"3":{}},"component":{}}],["a.3.5",{"_index":1195,"title":{"3-728":{}},"name":{},"text":{"3":{}},"component":{}}],["a.3.6",{"_index":1196,"title":{"3-729":{}},"name":{},"text":{"3":{}},"component":{}}],["a.3.6.1",{"_index":1197,"title":{"3-730":{}},"name":{},"text":{"3":{}},"component":{}}],["a.3.6.2",{"_index":1198,"title":{"3-731":{}},"name":{},"text":{"3":{}},"component":{}}],["a.3.6.3",{"_index":1199,"title":{"3-732":{}},"name":{},"text":{"3":{}},"component":{}}],["a.4",{"_index":1200,"title":{"3-733":{}},"name":{},"text":{"3":{}},"component":{}}],["a.4.1",{"_index":1201,"title":{"3-734":{}},"name":{},"text":{"3":{}},"component":{}}],["a.4.2",{"_index":1202,"title":{"3-735":{}},"name":{},"text":{"3":{}},"component":{}}],["a.4.3",{"_index":1204,"title":{"3-736":{}},"name":{},"text":{"3":{}},"component":{}}],["a.4.4",{"_index":1205,"title":{"3-737":{}},"name":{},"text":{"3":{}},"component":{}}],["a.4.5",{"_index":1206,"title":{"3-738":{}},"name":{},"text":{"3":{}},"component":{}}],["a.5",{"_index":1208,"title":{"3-739":{}},"name":{},"text":{"3":{}},"component":{}}],["a.5.1",{"_index":1209,"title":{"3-740":{}},"name":{},"text":{"3":{}},"component":{}}],["a.5.1.1",{"_index":1210,"title":{"3-741":{}},"name":{},"text":{"3":{}},"component":{}}],["a.5.1.2",{"_index":1212,"title":{"3-742":{}},"name":{},"text":{"3":{}},"component":{}}],["a.5.2",{"_index":1214,"title":{"3-743":{}},"name":{},"text":{"3":{}},"component":{}}],["a.5.2.1",{"_index":1215,"title":{"3-744":{}},"name":{},"text":{"3":{}},"component":{}}],["a.5.2.2",{"_index":1216,"title":{"3-745":{}},"name":{},"text":{"3":{}},"component":{}}],["a.6",{"_index":1217,"title":{"3-746":{}},"name":{},"text":{"3":{}},"component":{}}],["a.6.1",{"_index":1219,"title":{"3-747":{}},"name":{},"text":{"3":{}},"component":{}}],["a.6.2",{"_index":1220,"title":{"3-748":{}},"name":{},"text":{"3":{}},"component":{}}],["a.6.2.1",{"_index":1222,"title":{"3-749":{}},"name":{},"text":{"3":{}},"component":{}}],["a.6.2.2",{"_index":1223,"title":{"3-750":{}},"name":{},"text":{"3":{}},"component":{}}],["a.6.3",{"_index":1224,"title":{"3-751":{}},"name":{},"text":{"3":{}},"component":{}}],["a.7",{"_index":1225,"title":{"3-752":{}},"name":{},"text":{"3":{}},"component":{}}],["a.7.1",{"_index":1227,"title":{"3-753":{}},"name":{},"text":{"3":{}},"component":{}}],["a.8",{"_index":1228,"title":{"3-754":{}},"name":{},"text":{"3":{}},"component":{}}],["a.8.1",{"_index":1230,"title":{"3-755":{}},"name":{},"text":{"3":{}},"component":{}}],["a.8.2",{"_index":1231,"title":{"3-756":{}},"name":{},"text":{"3":{}},"component":{}}],["a.9",{"_index":1232,"title":{"3-757":{}},"name":{},"text":{"3":{}},"component":{}}],["a.9.1",{"_index":1233,"title":{"3-758":{}},"name":{},"text":{"3":{}},"component":{}}],["a.9.2",{"_index":1234,"title":{"3-759":{}},"name":{},"text":{"3":{}},"component":{}}],["a.9.3",{"_index":1235,"title":{"3-760":{}},"name":{},"text":{"3":{}},"component":{}}],["a.9.4",{"_index":1236,"title":{"3-761":{}},"name":{},"text":{"3":{}},"component":{}}],["a.9.5",{"_index":1237,"title":{"3-762":{}},"name":{},"text":{"3":{}},"component":{}}],["a.9.6",{"_index":1238,"title":{"3-763":{}},"name":{},"text":{"3":{}},"component":{}}],["a.9.6.1",{"_index":1239,"title":{"3-764":{}},"name":{},"text":{"3":{}},"component":{}}],["a.9.6.2",{"_index":1240,"title":{"3-765":{}},"name":{},"text":{"3":{}},"component":{}}],["a.9.6.3",{"_index":1241,"title":{"3-766":{}},"name":{},"text":{"3":{}},"component":{}}],["abbrevi",{"_index":4046,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["abil",{"_index":1718,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["abort",{"_index":1574,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"11":{}},"component":{}}],["abov",{"_index":2061,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["absent",{"_index":4446,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["absolut",{"_index":1610,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["absolutedisplaynam",{"_index":1822,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["abstract",{"_index":2065,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ac",{"_index":4258,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["accctrl",{"_index":4823,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["accen",{"_index":2858,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["accept",{"_index":1505,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["access",{"_index":294,"title":{"3-57":{},"3-456":{},"3-581":{},"3-723":{},"3-724":{},"3-725":{},"3-726":{},"3-727":{},"3-728":{},"3-729":{},"5-8":{},"5-9":{},"5-10":{},"5-11":{},"5-12":{},"5-13":{},"5-14":{},"6-51":{},"12-40":{},"12-165":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["access_control",{"_index":4824,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["accesstocua=fals",{"_index":3391,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["accnum",{"_index":4838,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["accomplish",{"_index":3991,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["accord",{"_index":1361,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["accordingli",{"_index":1618,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"11":{}},"component":{}}],["account",{"_index":23,"title":{"3-321":{},"3-322":{},"3-323":{},"3-353":{},"3-354":{},"3-355":{},"3-356":{},"3-357":{},"3-358":{},"3-432":{},"3-442":{},"3-482":{},"3-495":{},"3-519":{},"3-551":{},"3-557":{},"3-558":{},"3-559":{},"3-560":{},"3-561":{},"3-562":{},"3-563":{},"3-564":{},"3-575":{},"3-588":{},"3-591":{},"3-595":{},"3-598":{},"3-607":{},"3-620":{},"3-642":{},"3-653":{},"3-657":{},"3-731":{},"3-742":{},"3-745":{},"3-765":{},"5-16":{},"5-27":{},"5-30":{},"5-50":{},"11-3":{},"11-4":{},"11-5":{},"11-35":{},"11-36":{},"11-37":{},"11-38":{},"11-39":{},"11-40":{},"12-16":{},"12-26":{},"12-66":{},"12-79":{},"12-103":{},"12-135":{},"12-141":{},"12-142":{},"12-143":{},"12-144":{},"12-145":{},"12-146":{},"12-147":{},"12-148":{},"12-159":{},"12-172":{},"12-175":{},"12-179":{},"12-182":{},"12-191":{},"12-204":{},"12-226":{},"12-237":{},"12-241":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["account/group",{"_index":4965,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["account_nam",{"_index":4632,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["accountattr",{"_index":3808,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["accountdesc,accountdxrname,accountid,accountodbcnam",{"_index":4942,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["accountdn",{"_index":5137,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["accountdxrnam",{"_index":4923,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["accounten",{"_index":2856,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["accounteventcontrol",{"_index":3737,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["accountgidnumber.j",{"_index":5183,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["accountid",{"_index":4015,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["accountid/groupid",{"_index":4039,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["accountid=\"$\\{source.dxrprimarykey}\",table=membership",{"_index":4023,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["accountid=\"+${source.dxrprimarykey}+\",table=account",{"_index":4049,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["accountnameatt",{"_index":4021,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["accountnameattribut",{"_index":4576,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["accountprimarygroup.j",{"_index":4647,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["accountrootint",{"_index":2895,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["accounts.id",{"_index":4043,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["accounts.id=memberships.accountid",{"_index":4938,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["accounts/group",{"_index":3902,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["accountskuid.j",{"_index":4347,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["accountstateatt",{"_index":4052,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["account’",{"_index":3740,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["accumul",{"_index":3878,"title":{},"name":{},"text":{"3":{},"5":{},"11":{},"12":{}},"component":{}}],["achiev",{"_index":4553,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["acknowledg",{"_index":1360,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["act",{"_index":1912,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["action",{"_index":1362,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["activ",{"_index":163,"title":{"3-9":{},"3-10":{},"3-15":{},"3-17":{},"3-40":{},"3-42":{},"3-46":{},"3-59":{},"3-60":{},"3-61":{},"3-228":{},"3-231":{},"3-254":{},"3-262":{},"3-270":{},"3-279":{},"3-286":{},"3-294":{},"3-300":{},"3-426":{},"3-428":{},"3-439":{},"3-454":{},"3-463":{},"3-480":{},"3-490":{},"3-503":{},"3-516":{},"3-527":{},"3-537":{},"3-548":{},"3-561":{},"3-586":{},"3-603":{},"3-616":{},"3-629":{},"3-639":{},"3-649":{},"3-668":{},"3-672":{},"3-704":{},"3-707":{},"3-727":{},"3-761":{},"5-12":{},"5-46":{},"6-3":{},"6-4":{},"6-9":{},"6-11":{},"6-34":{},"6-36":{},"6-40":{},"6-53":{},"6-54":{},"6-55":{},"10-2":{},"10-5":{},"10-28":{},"10-36":{},"10-44":{},"10-53":{},"10-60":{},"10-68":{},"10-74":{},"12-10":{},"12-12":{},"12-23":{},"12-38":{},"12-47":{},"12-64":{},"12-74":{},"12-87":{},"12-100":{},"12-111":{},"12-121":{},"12-132":{},"12-145":{},"12-170":{},"12-187":{},"12-200":{},"12-213":{},"12-223":{},"12-233":{},"12-252":{},"12-256":{},"12-288":{},"12-291":{}},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["activity'",{"_index":2292,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["activity.getworkflow",{"_index":2150,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["activity.nam",{"_index":1591,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["activity.reason",{"_index":1594,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["activitygroups.agr_nam",{"_index":4504,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["activitysubtyp",{"_index":1860,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["activitytyp",{"_index":1856,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["activity’",{"_index":1444,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["actual",{"_index":114,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"8":{},"11":{},"12":{}},"component":{}}],["ad",{"_index":305,"title":{"3-61":{},"3-228":{},"3-229":{},"3-230":{},"3-231":{},"3-232":{},"3-233":{},"3-289":{},"3-426":{},"3-427":{},"3-429":{},"3-439":{},"3-440":{},"3-441":{},"3-444":{},"3-445":{},"3-448":{},"3-716":{},"5-1":{},"6-55":{},"10-2":{},"10-3":{},"10-4":{},"10-5":{},"10-6":{},"10-7":{},"10-63":{},"12-10":{},"12-11":{},"12-13":{},"12-23":{},"12-24":{},"12-25":{},"12-28":{},"12-29":{},"12-32":{}},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["adapt",{"_index":910,"title":{"3-510":{},"12-94":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["adaptor",{"_index":3982,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["add",{"_index":1348,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["add/delet",{"_index":1207,"title":{"3-738":{},"5-23":{}},"name":{},"text":{"3":{},"5":{}},"component":{}}],["add_entri",{"_index":3128,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["add_memb",{"_index":5147,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["addaccountinrol",{"_index":2862,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["addattr",{"_index":5109,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["addgroupinrol",{"_index":2868,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["addgroupstatesinrol",{"_index":5106,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["adding/remov",{"_index":4240,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["addit",{"_index":1174,"title":{"3-711":{},"12-295":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["addition",{"_index":1350,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"10":{},"11":{}},"component":{}}],["additions/eventmaintenanceworkflow",{"_index":2777,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["additions/realtimeworkflows/samples/map",{"_index":2609,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["additions/requestworkflows/sampl",{"_index":2314,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["additions/servicelayerconnector",{"_index":3463,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["additions\\realtimeworkflow",{"_index":5480,"title":{},"name":{},"text":{"12":{}},"component":{}}],["additions\\realtimeworkflows\\sampl",{"_index":2539,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["additions\\requestworkflows\\sampl",{"_index":2049,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["additions\\sampleconnectorfilt",{"_index":2767,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["additions\\socketedjob\\api",{"_index":2324,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["additions\\socketedjob\\sampl",{"_index":2325,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["addmemb",{"_index":4912,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["addntf",{"_index":2950,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["addorderrequest",{"_index":2230,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["addr",{"_index":4839,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["addr(ess",{"_index":4166,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["address",{"_index":262,"title":{"3-43":{},"6-37":{}},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["address.street",{"_index":4500,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["address/port",{"_index":3397,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["addsharedmailboxpermission.ps1",{"_index":5373,"title":{},"name":{},"text":{"12":{}},"component":{}}],["adequ",{"_index":2681,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["adjust",{"_index":3380,"title":{},"name":{},"text":{"3":{},"8":{},"11":{},"12":{}},"component":{}}],["admin",{"_index":1711,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["administ",{"_index":3866,"title":{},"name":{},"text":{"3":{},"5":{},"11":{},"12":{}},"component":{}}],["administr",{"_index":44,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["adminp",{"_index":4247,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ads/ldap",{"_index":3920,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ads_ident_realtime_delta",{"_index":5391,"title":{},"name":{},"text":{"12":{}},"component":{}}],["adsag",{"_index":5014,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["adsconnector",{"_index":5446,"title":{},"name":{},"text":{"12":{}},"component":{}}],["adsi",{"_index":5405,"title":{},"name":{},"text":{"12":{}},"component":{}}],["adsuserdn",{"_index":3926,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["advanc",{"_index":2365,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"11":{},"12":{}},"component":{}}],["advantag",{"_index":2853,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["advis",{"_index":2467,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["affect",{"_index":733,"title":{"3-378":{},"3-379":{},"3-380":{},"11-60":{},"11-61":{},"11-62":{}},"name":{},"text":{"3":{},"6":{},"9":{},"11":{},"12":{}},"component":{}}],["aforement",{"_index":1417,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["afterward",{"_index":3190,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["ag",{"_index":3811,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["again",{"_index":1432,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["against",{"_index":1736,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["agent",{"_index":66,"title":{"3-389":{},"3-737":{},"5-22":{},"11-71":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["agents.lik",{"_index":1283,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["agent’",{"_index":3727,"title":{},"name":{},"text":{"3":{},"5":{},"10":{}},"component":{}}],["agreement",{"_index":653,"title":{"3-313":{},"3-314":{},"3-315":{},"10-87":{},"10-88":{},"10-89":{}},"name":{},"text":{"3":{},"10":{}},"component":{}}],["agrenv.tcl",{"_index":3698,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["agtsessionex",{"_index":2730,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ai",{"_index":4264,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["algorithm",{"_index":1726,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["algorithm’",{"_index":2944,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["alia",{"_index":4132,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["allow",{"_index":1265,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["allowedparticip",{"_index":2405,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["allowedparticipants.add(particip",{"_index":2413,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["along",{"_index":2426,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["alongsid",{"_index":3399,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["alphabet",{"_index":1652,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["alreadi",{"_index":1367,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["alter",{"_index":4124,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["altern",{"_index":1598,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["although",{"_index":1490,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["alway",{"_index":1434,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["am/pm",{"_index":5249,"title":{},"name":{},"text":{"11":{}},"component":{}}],["ambigu",{"_index":2991,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["amount",{"_index":1654,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["analog",{"_index":2682,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"12":{}},"component":{}}],["analyz",{"_index":1340,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["anchor",{"_index":5069,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["and/or",{"_index":2283,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["anforderung",{"_index":1646,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["anoth",{"_index":1391,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["answer",{"_index":4482,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["anymor",{"_index":5018,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["anyon",{"_index":3256,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["anyth",{"_index":2757,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["anywher",{"_index":3382,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["apegrno",{"_index":4904,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["apg_group_no",{"_index":4905,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["api",{"_index":2045,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"12":{}},"component":{}}],["api.jar",{"_index":2127,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["api/callback",{"_index":4454,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["app",{"_index":871,"title":{"3-476":{},"3-477":{},"3-478":{},"3-479":{},"3-480":{},"3-481":{},"3-482":{},"3-483":{},"3-484":{},"3-485":{},"12-60":{},"12-61":{},"12-62":{},"12-63":{},"12-64":{},"12-65":{},"12-66":{},"12-67":{},"12-68":{},"12-69":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["appa_depr",{"_index":5188,"title":{},"name":{"5":{}},"text":{},"component":{}}],["appear",{"_index":115,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"12":{}},"component":{}}],["append",{"_index":2606,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["appendix",{"_index":183,"title":{"3-715":{}},"name":{},"text":{"2":{},"3":{},"11":{}},"component":{}}],["appendmv",{"_index":4916,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["appends/cr",{"_index":5104,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["appl",{"_index":1242,"title":{},"name":{"3":{}},"text":{},"component":{}}],["appli",{"_index":1344,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["applianc",{"_index":3983,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["applic",{"_index":12,"title":{"3":{},"6":{},"9":{},"3-6":{},"3-147":{},"3-223":{},"3-224":{},"3-472":{},"3-581":{},"6-141":{},"9-1":{},"12-56":{},"12-165":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["application=\"+application+\",role=dirxident",{"_index":3930,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["applicationpassword",{"_index":4000,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["applicationst",{"_index":1823,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["application’",{"_index":1862,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["applychang",{"_index":300,"title":{"3-59":{},"6-53":{}},"name":{},"text":{"3":{},"6":{}},"component":{}}],["applychangescontext",{"_index":2298,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["applychangesexcept",{"_index":2291,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["applychangesuserhook",{"_index":2288,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["applymandatoryproperti",{"_index":5026,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["approach",{"_index":2005,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"12":{}},"component":{}}],["appropri",{"_index":1509,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["approv",{"_index":508,"title":{"3-202":{},"3-203":{},"3-204":{},"3-205":{},"3-207":{},"3-208":{},"3-397":{},"3-398":{},"3-411":{},"7-11":{},"7-12":{},"7-13":{},"7-14":{},"7-16":{},"7-17":{},"11-79":{},"11-80":{},"11-93":{}},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["approvalresult",{"_index":1863,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["approvecr",{"_index":1858,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["approved/reject",{"_index":1865,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["approver(",{"_index":3298,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["approvers.request",{"_index":1263,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["architectur",{"_index":37,"title":{"3-8":{},"3-82":{},"3-129":{},"6-2":{},"6-76":{},"6-123":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"8":{},"11":{},"12":{}},"component":{}}],["archive.html",{"_index":4635,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["area",{"_index":2836,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["argument",{"_index":3127,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["arial,san",{"_index":1470,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["aris",{"_index":4248,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["around",{"_index":2485,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["array",{"_index":2030,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["arraylist",{"_index":2187,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["arraylist(1",{"_index":2384,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["arriv",{"_index":3565,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["arrow",{"_index":4429,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["artifici",{"_index":4397,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ascend",{"_index":3196,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["ascii",{"_index":5242,"title":{},"name":{},"text":{"11":{}},"component":{}}],["asfcontact",{"_index":4436,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["asforgan",{"_index":4433,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ask",{"_index":1329,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"11":{},"12":{}},"component":{}}],["aspect",{"_index":855,"title":{"3-467":{},"3-493":{},"3-506":{},"3-540":{},"3-606":{},"3-619":{},"3-632":{},"3-652":{},"3-730":{},"3-764":{},"5-15":{},"5-49":{},"12-51":{},"12-77":{},"12-90":{},"12-124":{},"12-190":{},"12-203":{},"12-216":{},"12-236":{}},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["assert",{"_index":4704,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["assign",{"_index":241,"title":{"3-32":{},"3-201":{},"3-206":{},"3-207":{},"3-208":{},"3-247":{},"6-26":{},"7-10":{},"7-15":{},"7-16":{},"7-17":{},"10-21":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["assignment.th",{"_index":3286,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["assignments.in",{"_index":3295,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["assignmentt",{"_index":3452,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["assist",{"_index":3413,"title":{},"name":{},"text":{"3":{},"5":{},"9":{}},"component":{}}],["associ",{"_index":61,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["assum",{"_index":1540,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"10":{},"12":{}},"component":{}}],["assumpt",{"_index":3705,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["assur",{"_index":2652,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["astat",{"_index":2304,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["asterisk",{"_index":5040,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["asynchron",{"_index":2580,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["at",{"_index":3634,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["ato",{"_index":3421,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["att",{"_index":4079,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["attach",{"_index":2429,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["attarr",{"_index":4073,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["attarr[0",{"_index":4089,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["attempt",{"_index":4764,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["attent",{"_index":2092,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["attr",{"_index":4082,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["attr_fil",{"_index":3158,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["attr_file_localcod",{"_index":3159,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["attr_list",{"_index":3160,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["attribut",{"_index":366,"title":{"3-103":{},"3-146":{},"3-155":{},"3-179":{},"3-184":{},"3-431":{},"3-502":{},"3-582":{},"3-687":{},"3-688":{},"3-690":{},"3-700":{},"3-701":{},"3-702":{},"3-711":{},"6-97":{},"6-140":{},"6-149":{},"6-173":{},"6-178":{},"12-15":{},"12-86":{},"12-166":{},"12-271":{},"12-272":{},"12-274":{},"12-284":{},"12-285":{},"12-286":{},"12-295":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["attribute\"descript",{"_index":2249,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["attribute(",{"_index":2857,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["attribute,",{"_index":2666,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["attribute.for",{"_index":3285,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["attribute_nam",{"_index":3009,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["attribute_valu",{"_index":3010,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["attributes/map",{"_index":4966,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["attributes[1",{"_index":4074,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["attributetyp",{"_index":5327,"title":{},"name":{},"text":{"12":{}},"component":{}}],["attribute’",{"_index":2653,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["attrnam",{"_index":2178,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["attruibut",{"_index":4474,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["atts.addattr(id",{"_index":4080,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["atts.addattr(pw",{"_index":4087,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["audit",{"_index":753,"title":{"3-393":{},"3-394":{},"11-75":{},"11-76":{}},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{}},"component":{}}],["auth",{"_index":3949,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["authent",{"_index":1134,"title":{"3-686":{},"12-270":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["author",{"_index":1260,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["authorized_key",{"_index":4762,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["auto",{"_index":4010,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["autogeneratedkey=fals",{"_index":4048,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["autom",{"_index":1326,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["automat",{"_index":512,"title":{"3-204":{},"7-13":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["automaticact",{"_index":2081,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["avail",{"_index":157,"title":{},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["avoid",{"_index":2520,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["awar",{"_index":1507,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"9":{},"12":{}},"component":{}}],["azur",{"_index":4322,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["b",{"_index":1727,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["back",{"_index":1670,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"9":{},"12":{}},"component":{}}],["backup",{"_index":725,"title":{"3-372":{},"3-373":{},"11-54":{},"11-55":{}},"name":{},"text":{"3":{},"11":{}},"component":{}}],["backward",{"_index":2431,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["bankcod",{"_index":4837,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["bapi",{"_index":4495,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["bar",{"_index":117,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{}},"component":{}}],["baschclass",{"_index":4853,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["base",{"_index":303,"title":{"3-60":{},"3-81":{},"3-82":{},"3-83":{},"3-85":{},"3-89":{},"3-90":{},"3-93":{},"3-122":{},"3-123":{},"3-124":{},"3-126":{},"3-128":{},"3-129":{},"3-148":{},"3-177":{},"3-180":{},"3-185":{},"3-227":{},"3-309":{},"3-316":{},"3-319":{},"3-322":{},"3-323":{},"3-325":{},"3-326":{},"3-328":{},"3-329":{},"3-331":{},"3-332":{},"3-334":{},"3-335":{},"3-337":{},"3-338":{},"3-340":{},"3-341":{},"3-343":{},"3-344":{},"3-348":{},"3-349":{},"3-384":{},"3-420":{},"3-433":{},"3-437":{},"3-475":{},"3-646":{},"3-655":{},"3-753":{},"5-38":{},"6-54":{},"6-75":{},"6-76":{},"6-77":{},"6-79":{},"6-83":{},"6-84":{},"6-87":{},"6-116":{},"6-117":{},"6-118":{},"6-120":{},"6-122":{},"6-123":{},"6-142":{},"6-171":{},"6-174":{},"6-179":{},"10-1":{},"10-83":{},"10-90":{},"11-1":{},"11-4":{},"11-5":{},"11-7":{},"11-8":{},"11-10":{},"11-11":{},"11-13":{},"11-14":{},"11-16":{},"11-17":{},"11-19":{},"11-20":{},"11-22":{},"11-23":{},"11-25":{},"11-26":{},"11-30":{},"11-31":{},"11-66":{},"12-4":{},"12-17":{},"12-21":{},"12-59":{},"12-230":{},"12-239":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["base64",{"_index":2654,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["base=/ou=mthb/ou=sal",{"_index":3696,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["base_obj",{"_index":2968,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{}},"component":{}}],["base_object",{"_index":3211,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["based.anoth",{"_index":3316,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["basenam",{"_index":1872,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["baseobject",{"_index":3186,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["basi",{"_index":1550,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"11":{}},"component":{}}],["basic",{"_index":47,"title":{"3-670":{},"3-674":{},"12-254":{},"12-258":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["basic_charge_class",{"_index":4854,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["batch",{"_index":2723,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["batch.accumulator.s",{"_index":5235,"title":{},"name":{},"text":{"11":{}},"component":{}}],["bcc",{"_index":1984,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["bcd",{"_index":1458,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["be",{"_index":1739,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["becom",{"_index":3305,"title":{},"name":{},"text":{"3":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["bed",{"_index":4275,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["befor",{"_index":1406,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["beforehand",{"_index":4506,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["begin",{"_index":1488,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["behavior",{"_index":1569,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"9":{},"10":{},"12":{}},"component":{}}],["belong",{"_index":2752,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"9":{},"10":{},"12":{}},"component":{}}],["below",{"_index":1792,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["beneath",{"_index":1700,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"11":{},"12":{}},"component":{}}],["benutz",{"_index":1647,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["berechtigung",{"_index":1648,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["berlin",{"_index":3644,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["berner",{"_index":1908,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["besid",{"_index":1346,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["best",{"_index":3310,"title":{},"name":{},"text":{"3":{},"5":{},"7":{},"11":{},"12":{}},"component":{}}],["better",{"_index":187,"title":{},"name":{},"text":{"2":{},"3":{},"5":{}},"component":{}}],["between",{"_index":1278,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["bi",{"_index":4660,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["bin",{"_index":4731,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["bin/remote_hdm",{"_index":4745,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["binari",{"_index":2641,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["binaryvalu",{"_index":2656,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["bind",{"_index":2599,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["bind_id",{"_index":3176,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["bindaccount",{"_index":3384,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["bindid",{"_index":5120,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["bindprofile.authenticationtyp",{"_index":5234,"title":{},"name":{},"text":{"11":{}},"component":{}}],["bindprofile.hostnam",{"_index":5227,"title":{},"name":{},"text":{"11":{}},"component":{}}],["bindprofile.isssl",{"_index":5228,"title":{},"name":{},"text":{"11":{}},"component":{}}],["bindprofile.port",{"_index":5230,"title":{},"name":{},"text":{"11":{}},"component":{}}],["bindprofile.pwd",{"_index":5233,"title":{},"name":{},"text":{"11":{}},"component":{}}],["bindprofile.secureport",{"_index":5229,"title":{},"name":{},"text":{"11":{}},"component":{}}],["bindprofile.us",{"_index":5232,"title":{},"name":{},"text":{"11":{}},"component":{}}],["bindus",{"_index":5432,"title":{},"name":{},"text":{"12":{}},"component":{}}],["binvalu",{"_index":2658,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["bit",{"_index":2502,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"12":{}},"component":{}}],["bitt",{"_index":1641,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["bj099999",{"_index":5078,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["blank",{"_index":1884,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["blindli",{"_index":4216,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["block",{"_index":3000,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["block_siz",{"_index":5113,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["blocksiz",{"_index":3140,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["bo",{"_index":4478,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["bodi",{"_index":1583,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["bold",{"_index":91,"title":{},"name":{},"text":{"1":{},"2":{},"3":{}},"component":{}}],["boldfac",{"_index":88,"title":{},"name":{},"text":{"1":{},"2":{},"3":{}},"component":{}}],["book",{"_index":34,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"12":{}},"component":{}}],["boolean",{"_index":2136,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["boolean.valueof(",{"_index":2145,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["border",{"_index":1457,"title":{},"name":{},"text":{"3":{},"6":{},"9":{}},"component":{}}],["both",{"_index":167,"title":{"3-519":{},"12-103":{}},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["bottom",{"_index":1468,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["bound",{"_index":4323,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["box",{"_index":2101,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"12":{}},"component":{}}],["brace",{"_index":106,"title":{},"name":{},"text":{"1":{},"2":{},"3":{}},"component":{}}],["bracket",{"_index":4427,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["branch",{"_index":3107,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["brand",{"_index":2044,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["break",{"_index":2806,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["briefli",{"_index":3330,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["broken",{"_index":2495,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["browser",{"_index":1677,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["build",{"_index":1281,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["build.xml",{"_index":2727,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["buildimp",{"_index":4674,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["built",{"_index":1548,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["bundl",{"_index":3398,"title":{},"name":{},"text":{"3":{},"8":{},"12":{}},"component":{}}],["busi",{"_index":1716,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["businesscategori",{"_index":3599,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["button",{"_index":1734,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"11":{}},"component":{}}],["bypass",{"_index":2760,"title":{},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["byte",{"_index":2657,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["c",{"_index":1286,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["c).like",{"_index":1287,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["c/c",{"_index":4155,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["c/metahubdata/datatest.csv",{"_index":3544,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["c0a8e480—​4b5b380c",{"_index":3265,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["c:/metahubdata",{"_index":3499,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["c:/metahubdata/data.ldif",{"_index":3529,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["c:/metahubdata/data_out.ldif",{"_index":3527,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["c:/metahubdata/datatest.csv",{"_index":3577,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["c:/metahubdata/datatest_out.csv",{"_index":3543,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["c:/metahubdata/users.csv",{"_index":3569,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["c:/windows/syswow64/odbcad32.ex",{"_index":3504,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["c:\\>set",{"_index":5027,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["c:\\document",{"_index":5428,"title":{},"name":{},"text":{"12":{}},"component":{}}],["c:\\myconfigdata\\findparticipant.properti",{"_index":2369,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["c:\\program",{"_index":130,"title":{},"name":{},"text":{"1":{},"2":{},"3":{}},"component":{}}],["c=\"de",{"_index":3228,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["c=\"it",{"_index":3229,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["c=\"u",{"_index":3230,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["c=de",{"_index":5346,"title":{},"name":{},"text":{"12":{}},"component":{}}],["ca",{"_index":3910,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["cacert",{"_index":3911,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["cach",{"_index":3879,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["cache.mru.s",{"_index":5238,"title":{},"name":{},"text":{"11":{}},"component":{}}],["cache.upd",{"_index":5237,"title":{},"name":{},"text":{"11":{}},"component":{}}],["cacl",{"_index":5469,"title":{},"name":{},"text":{"12":{}},"component":{}}],["calcdxrnameacc.j",{"_index":4284,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["calcdxrnamegroup.j",{"_index":4285,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["calcprimarykeyacc.j",{"_index":4286,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["calcprimarykeygroup.j",{"_index":4287,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["calcul",{"_index":266,"title":{"3-44":{},"6-38":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["calculateidinjdbc",{"_index":4019,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["call",{"_index":913,"title":{"3-511":{},"12-95":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"11":{},"12":{}},"component":{}}],["callback",{"_index":4452,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["caller",{"_index":5121,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["campaign",{"_index":530,"title":{"3-214":{},"7-23":{}},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["cancel",{"_index":1524,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["can’t",{"_index":3058,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["capabl",{"_index":3414,"title":{},"name":{},"text":{"3":{},"9":{},"10":{},"12":{}},"component":{}}],["captur",{"_index":2493,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["cardhold",{"_index":5005,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["cardnumb",{"_index":5004,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["care",{"_index":2381,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["carefulli",{"_index":3604,"title":{},"name":{},"text":{"3":{},"10":{},"11":{}},"component":{}}],["carri",{"_index":2921,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["case",{"_index":925,"title":{"3-521":{},"12-105":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["caseexactrdncomparison",{"_index":4145,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["cast",{"_index":2151,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["cat",{"_index":4759,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["catalog",{"_index":1613,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["catch",{"_index":1955,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["categor",{"_index":2076,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["categori",{"_index":1866,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["caus",{"_index":1673,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"12":{}},"component":{}}],["caution",{"_index":2199,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["cc",{"_index":1983,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["cd",{"_index":4033,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["cell",{"_index":1667,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["center",{"_index":57,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["center’",{"_index":1580,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["central",{"_index":439,"title":{"3-153":{},"3-158":{},"6-147":{},"6-152":{}},"name":{},"text":{"3":{},"6":{},"9":{},"10":{},"12":{}},"component":{}}],["central.tcl",{"_index":2898,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["cer",{"_index":4539,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["cert.id",{"_index":5155,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["certain",{"_index":2460,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["certif",{"_index":528,"title":{"3-213":{},"3-214":{},"7-22":{},"7-23":{}},"name":{},"text":{"3":{},"6":{},"7":{},"12":{}},"component":{}}],["certifi",{"_index":1336,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"12":{}},"component":{}}],["certificate/priv",{"_index":4131,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["certificate_filenam",{"_index":4543,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["certifierstructur",{"_index":4190,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["cet",{"_index":1694,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["cf",{"_index":3914,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["cfg",{"_index":2104,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ch1_applsref",{"_index":5189,"title":{},"name":{"6":{}},"text":{},"component":{}}],["ch2_reqwf",{"_index":5190,"title":{},"name":{"7":{}},"text":{},"component":{}}],["ch3_configscen",{"_index":5191,"title":{},"name":{"8":{}},"text":{},"component":{}}],["ch4_defappl",{"_index":5192,"title":{},"name":{"9":{}},"text":{},"component":{}}],["ch5_sourcewf",{"_index":5193,"title":{},"name":{"10":{}},"text":{},"component":{}}],["ch6_maintwf",{"_index":5194,"title":{},"name":{"11":{}},"text":{},"component":{}}],["ch7_targetwf",{"_index":5317,"title":{},"name":{"12":{}},"text":{},"component":{}}],["chain",{"_index":2021,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["chang",{"_index":85,"title":{"3-54":{},"3-68":{},"3-320":{},"6-48":{},"6-62":{},"11-2":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["changed.y",{"_index":3277,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["changedentri",{"_index":2787,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["changedentry.getvalues(\"own",{"_index":2790,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["changedentry.setproperty(\"own",{"_index":2792,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["changelog",{"_index":3179,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["changem",{"_index":4546,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["changepassword",{"_index":4057,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["changetyp",{"_index":2926,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["channel",{"_index":341,"title":{"3-87":{},"3-97":{},"3-114":{},"3-143":{},"3-145":{},"3-233":{},"3-241":{},"3-242":{},"3-243":{},"3-244":{},"3-245":{},"3-246":{},"3-256":{},"3-264":{},"3-265":{},"3-266":{},"3-272":{},"3-273":{},"3-274":{},"3-281":{},"3-288":{},"3-296":{},"3-302":{},"3-441":{},"3-442":{},"3-443":{},"3-466":{},"3-482":{},"3-483":{},"3-484":{},"3-485":{},"3-492":{},"3-497":{},"3-505":{},"3-518":{},"3-519":{},"3-520":{},"3-529":{},"3-532":{},"3-539":{},"3-543":{},"3-550":{},"3-555":{},"3-556":{},"3-563":{},"3-574":{},"3-575":{},"3-576":{},"3-577":{},"3-578":{},"3-588":{},"3-589":{},"3-590":{},"3-591":{},"3-592":{},"3-593":{},"3-594":{},"3-595":{},"3-596":{},"3-597":{},"3-598":{},"3-599":{},"3-605":{},"3-610":{},"3-618":{},"3-631":{},"3-632":{},"3-634":{},"3-641":{},"3-651":{},"3-729":{},"3-763":{},"5-14":{},"5-48":{},"6-81":{},"6-91":{},"6-108":{},"6-137":{},"6-139":{},"10-7":{},"10-15":{},"10-16":{},"10-17":{},"10-18":{},"10-19":{},"10-20":{},"10-30":{},"10-38":{},"10-39":{},"10-40":{},"10-46":{},"10-47":{},"10-48":{},"10-55":{},"10-62":{},"10-70":{},"10-76":{},"12-25":{},"12-26":{},"12-27":{},"12-50":{},"12-66":{},"12-67":{},"12-68":{},"12-69":{},"12-76":{},"12-81":{},"12-89":{},"12-102":{},"12-103":{},"12-104":{},"12-113":{},"12-116":{},"12-123":{},"12-127":{},"12-134":{},"12-139":{},"12-140":{},"12-147":{},"12-158":{},"12-159":{},"12-160":{},"12-161":{},"12-162":{},"12-172":{},"12-173":{},"12-174":{},"12-175":{},"12-176":{},"12-177":{},"12-178":{},"12-179":{},"12-180":{},"12-181":{},"12-182":{},"12-183":{},"12-189":{},"12-194":{},"12-202":{},"12-215":{},"12-216":{},"12-218":{},"12-225":{},"12-235":{}},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["channel(",{"_index":2464,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["channel’",{"_index":2438,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["chapter",{"_index":150,"title":{},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["charact",{"_index":93,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"12":{}},"component":{}}],["character",{"_index":3632,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["charg",{"_index":4494,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["charge_id",{"_index":4836,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["chargeid",{"_index":4835,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["chatter",{"_index":4442,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["check",{"_index":208,"title":{"3-17":{},"3-18":{},"3-375":{},"3-376":{},"3-377":{},"3-387":{},"3-388":{},"3-391":{},"3-392":{},"3-395":{},"3-396":{},"6-11":{},"6-12":{},"11-57":{},"11-58":{},"11-59":{},"11-69":{},"11-70":{},"11-73":{},"11-74":{},"11-77":{},"11-78":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["checkallinterv",{"_index":1551,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["checkconsist",{"_index":5213,"title":{},"name":{},"text":{"11":{}},"component":{}}],["checker",{"_index":206,"title":{"3-16":{},"3-19":{},"6-10":{},"6-13":{}},"name":{},"text":{"3":{},"6":{}},"component":{}}],["checkmodif",{"_index":5386,"title":{},"name":{},"text":{"12":{}},"component":{}}],["checkparticipantconstraint",{"_index":2425,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["checkparticipantsconstraint",{"_index":2396,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["child",{"_index":1351,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["chn",{"_index":4797,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["choic",{"_index":119,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"8":{},"10":{},"12":{}},"component":{}}],["choos",{"_index":111,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["chosen",{"_index":3289,"title":{},"name":{},"text":{"3":{},"5":{},"7":{},"12":{}},"component":{}}],["christiannam",{"_index":4785,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["chroot",{"_index":5166,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["cic",{"_index":4989,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["citrix",{"_index":833,"title":{"3-450":{},"3-451":{},"3-452":{},"3-453":{},"3-454":{},"3-455":{},"12-34":{},"12-35":{},"12-36":{},"12-37":{},"12-38":{},"12-39":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["claim",{"_index":4520,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["claims_based_prefixdomain*\\*account",{"_index":4571,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["class",{"_index":316,"title":{"3-70":{},"3-72":{},"3-73":{},"3-101":{},"3-105":{},"3-111":{},"3-150":{},"6-64":{},"6-66":{},"6-67":{},"6-95":{},"6-99":{},"6-105":{},"6-144":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["classifi",{"_index":2566,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["classnam",{"_index":1875,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["classpath",{"_index":2125,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["classx",{"_index":1913,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["claus",{"_index":4941,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["clean",{"_index":3004,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"11":{}},"component":{}}],["cleanup",{"_index":741,"title":{"3-385":{},"3-386":{},"11-67":{},"11-68":{}},"name":{},"text":{"3":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["cleanupdeletedobject",{"_index":5207,"title":{},"name":{},"text":{"11":{}},"component":{}}],["cleanupobject",{"_index":3338,"title":{},"name":{},"text":{"3":{},"7":{},"11":{}},"component":{}}],["cleanupoutdateddeleg",{"_index":5208,"title":{},"name":{},"text":{"11":{}},"component":{}}],["cleanupoutdatedrequwflowinst",{"_index":5210,"title":{},"name":{},"text":{"11":{}},"component":{}}],["clear",{"_index":2831,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["clearcas",{"_index":3849,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["clearli",{"_index":2070,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["cli",{"_index":5449,"title":{},"name":{},"text":{"12":{}},"component":{}}],["click",{"_index":1599,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["client",{"_index":461,"title":{"3-168":{},"3-170":{},"6-162":{},"6-164":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["client=800",{"_index":3390,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["clienttyp",{"_index":4192,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["clone",{"_index":2277,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["close",{"_index":1443,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["cloud",{"_index":3422,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["cluster",{"_index":542,"title":{"3-222":{},"3-624":{},"3-625":{},"8-4":{},"12-208":{},"12-209":{}},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["cluster_contain",{"_index":3368,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["cmd",{"_index":4791,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["cmdlet",{"_index":5375,"title":{},"name":{},"text":{"12":{}},"component":{}}],["cn",{"_index":2073,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["cn=\"${source.displayname}\",\"+${env.role_ts_account_bas",{"_index":4353,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["cn=\"${source.displayname}\",cn=roles,\"+${env.role_ts_group_bas",{"_index":4358,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["cn=\"${source.displayname}\",cn=secur",{"_index":4355,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["cn=\"${source.groupnam",{"_index":3979,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["cn=\"${source.serviceplanname}\",cn=servic",{"_index":4362,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["cn=\"${source.username}\",\"+${env.role_ts_account_bas",{"_index":3967,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["cn=${sn",{"_index":1392,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["cn=*account",{"_index":4584,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["cn=*your_domain",{"_index":3869,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["cn=abele,ou=sales,o=mi",{"_index":3628,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["cn=account",{"_index":3935,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["cn=accounts,\"${env.assoct",{"_index":3934,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["cn=activ",{"_index":2066,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["cn=admin,o=pqr",{"_index":3706,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["cn=berner",{"_index":2008,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["cn=custom",{"_index":2069,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["cn=defaultowner,cn=us",{"_index":2793,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["cn=domainadmin",{"_index":3868,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["cn=domainadmin,cn=*your_domain,dxmc=users,dxmc=dirxmetahub",{"_index":3867,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["cn=domainnam",{"_index":5083,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["cn=groups,*dn",{"_index":4572,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["cn=mi",{"_index":3733,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["cn=miller",{"_index":5343,"title":{},"name":{},"text":{"12":{}},"component":{}}],["cn=miller,ou=sal",{"_index":5355,"title":{},"name":{},"text":{"12":{}},"component":{}}],["cn=miller,ou=sales,o=mi",{"_index":5340,"title":{},"name":{},"text":{"12":{}},"component":{}}],["cn=no_memb",{"_index":5086,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["cn=permissions,cn=mi",{"_index":3885,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["cn=role",{"_index":5306,"title":{},"name":{},"text":{"11":{}},"component":{}}],["cn=rolecatalogue,cn=mi",{"_index":3883,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["cn=server_name/o=org_nam",{"_index":4162,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["cn=system",{"_index":3475,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["cn=targetsystems,cn=mi",{"_index":3887,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["cn=tsaccount.xml,cn=object",{"_index":4471,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["cn=users,cn=*domain",{"_index":3840,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["cn=users,cn=mi",{"_index":3522,"title":{},"name":{},"text":{"3":{},"10":{},"11":{}},"component":{}}],["cn=value_of_givennam",{"_index":4220,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["code",{"_index":1454,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["collect",{"_index":719,"title":{"3-368":{},"3-369":{},"3-370":{},"3-371":{},"11-50":{},"11-51":{},"11-52":{},"11-53":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["collector",{"_index":3301,"title":{},"name":{},"text":{"3":{},"7":{},"11":{}},"component":{}}],["collis",{"_index":2680,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["colon",{"_index":1657,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["color",{"_index":1466,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["column",{"_index":612,"title":{"3-282":{},"10-56":{}},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["com.mycompany.myorg.myjobimpl",{"_index":2054,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.date.generalizedtim",{"_index":1941,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.dxm.api.entry.entri",{"_index":2788,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.dxm.api.order.ord",{"_index":2159,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.dxm.connector.spmlv1tov2.handler.simplereferencehandl",{"_index":3510,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["com.siemens.dxm.join.api.iglobaluserhook",{"_index":2515,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.dxm.join.api.imapattribut",{"_index":2610,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.dxm.join.api.imapidentifi",{"_index":2602,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.dxm.join.api.ipassworduserhook",{"_index":2770,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.dxm.join.api.ipostmap",{"_index":2628,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.dxm.join.api.iuserhook",{"_index":2524,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.dxm.join.api.iuserhookext",{"_index":2525,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.dxm.join.api.iuserhookext#preupdate(siemens.dxm.connector.dxmrequestor",{"_index":4096,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["com.siemens.dxm.join.map.mappedentri",{"_index":4100,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["com.siemens.dxm.join.map.mappingentri",{"_index":2631,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.dxm.join.map.office365.accounts.from.userhookgetserviceplan",{"_index":4354,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["com.siemens.dxm.join.map.office365.accounts.to.userhooksyncserviceplansandskuid",{"_index":4350,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["com.siemens.dxm.join.map.office365.roles.to.userhookrolesto",{"_index":4357,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["com.siemens.dxm.join.userhook.ad",{"_index":5474,"title":{},"name":{},"text":{"12":{}},"component":{}}],["com.siemens.dxm.join.userhook.common.userhookrunexecut",{"_index":2548,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["com.siemens.dxm.join.userhook.esso.userhookaccountsto",{"_index":3919,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["com.siemens.dxm.join.userhook.jdbc.userhookaccountsto",{"_index":4095,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["com.siemens.dxm.join.userhook.medico.userhookaccountsfrom",{"_index":4320,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["com.siemens.dxm.join.userhook.medico.userhookaccountsto",{"_index":4318,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["com.siemens.dxm.join.userhook.notes.userhookaccountsfrom",{"_index":4265,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["com.siemens.dxm.join.userhook.notes.userhookaccountsto",{"_index":4259,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["com.siemens.dxm.join.userhook.sharepoint.userhookgroupsfrom",{"_index":4597,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["com.siemens.dxm.join.userhook.sharepoint.userhookgroupsto",{"_index":4587,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["com.siemens.dxm.join.util.request",{"_index":2700,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.api.custom.particip",{"_index":2370,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.api.custom.participantcontext",{"_index":2416,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.api.custom.participantsextend",{"_index":2371,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.api.job",{"_index":2063,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.api.job.st",{"_index":2342,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.api.nodes.idmact",{"_index":2147,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.api.nodes.idmworkflow",{"_index":2149,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.jini.util",{"_index":1939,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.jini.util.generalizedtime2iso8601",{"_index":1938,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.jini.util.logging.logsupport",{"_index":2417,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.jini.util.xml.xmlnodemapimpl(paramsnod",{"_index":2139,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.jobs.backup",{"_index":3870,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["com.siemens.idm.jobs.basicjob",{"_index":2264,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.jobs.consistencycheck",{"_index":3875,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["com.siemens.idm.jobs.ebr.api.eventcontext",{"_index":2812,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.jobs.ebr.api.ieventprocessor",{"_index":2776,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.jobs.sample.sampleapplychangesuserhook",{"_index":2286,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.jobs.socketed.api.customsocketjob",{"_index":2326,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.jobs.socketed.api.customsocketsvcsessionjob",{"_index":2327,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.participants.sample.findparticipantssampl",{"_index":2367,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.requestworkflow",{"_index":2128,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.requestworkflow.api.applicationst",{"_index":2341,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.requestworkflow.api.participantconstraint",{"_index":2395,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.requestworkflow.api.participantconstraintsextend",{"_index":2424,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.requestworkflow.api.participantsfilt",{"_index":2392,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.requestworkflow.api.participantsfilterextend",{"_index":2401,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.requestworkflow.api.requestworkflowinst",{"_index":2152,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.requestworkflow.jar",{"_index":2345,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.requestworkflow.tasks.fullcheck",{"_index":1554,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.serv",{"_index":2126,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.server.nation",{"_index":1712,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.text.parser.javaplugin",{"_index":1919,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.text.parser.javapluginext",{"_index":1942,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.text.parser.parserexcept",{"_index":1920,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.idm.text.parser.textpars",{"_index":1921,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siemens.map.ldap",{"_index":2683,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["com.siewmens.idm.api.custom.participantcontext",{"_index":2379,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["combin",{"_index":400,"title":{"3-127":{},"6-121":{}},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["combo",{"_index":2100,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["come",{"_index":1764,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["comfort",{"_index":1977,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["comimp",{"_index":4744,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["comma",{"_index":1621,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["command",{"_index":62,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"8":{},"10":{},"12":{}},"component":{}}],["comment",{"_index":2598,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["common",{"_index":854,"title":{"3-467":{},"3-493":{},"3-506":{},"3-540":{},"3-606":{},"3-619":{},"3-632":{},"3-652":{},"3-730":{},"3-749":{},"3-764":{},"5-15":{},"5-34":{},"5-49":{},"12-51":{},"12-77":{},"12-90":{},"12-124":{},"12-190":{},"12-203":{},"12-216":{},"12-236":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["common.tcl",{"_index":3216,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["commonli",{"_index":3122,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["commonprocsdxa.calculateidinident",{"_index":5061,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["commonprocsjdbc.calculateidinident",{"_index":4020,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["commonprocsjdbc.calculateidinjdbc",{"_index":4029,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["commonprocsldap.setaccountstateattr(\"employeetyp",{"_index":4141,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["commonprocsmedico.calculateidinident",{"_index":4305,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["commonprocsunixpam.calculateidinident",{"_index":5187,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["commun",{"_index":3938,"title":{},"name":{},"text":{"3":{},"5":{},"11":{},"12":{}},"component":{}}],["compani",{"_index":1450,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["company,,cn=accounts,cn=mi",{"_index":5358,"title":{},"name":{},"text":{"12":{}},"component":{}}],["company,c=d",{"_index":5345,"title":{},"name":{},"text":{"12":{}},"component":{}}],["company,cn=accounts,cn=mi",{"_index":5341,"title":{},"name":{},"text":{"12":{}},"component":{}}],["company,cn=users,cn=mi",{"_index":2011,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["company,dc=net",{"_index":5362,"title":{},"name":{},"text":{"12":{}},"component":{}}],["company.com",{"_index":1991,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["company.dxm.request.importtoidentity.ldap.cluster='external'.resource='extern",{"_index":3630,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["company;tel",{"_index":3556,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["companynam",{"_index":4484,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["compar",{"_index":1885,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["comparis",{"_index":4766,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["comparison",{"_index":2447,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["compat",{"_index":1753,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["compet",{"_index":3736,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["competitor",{"_index":4409,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["compil",{"_index":2123,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["compimp",{"_index":4672,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["complement",{"_index":5052,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["complet",{"_index":641,"title":{"3-307":{},"10-81":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["completely.thi",{"_index":3339,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["complex",{"_index":1290,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"12":{}},"component":{}}],["compli",{"_index":3260,"title":{},"name":{},"text":{"3":{},"7":{},"11":{},"12":{}},"component":{}}],["complianc",{"_index":3255,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["compliant",{"_index":3613,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["complic",{"_index":4092,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["compon",{"_index":38,"title":{"3-48":{},"6-42":{}},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["componentdescript",{"_index":3838,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["compos",{"_index":1794,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["comprehens",{"_index":3353,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["compris",{"_index":2527,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"12":{}},"component":{}}],["comput",{"_index":1370,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["concaten",{"_index":3047,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"12":{}},"component":{}}],["concept",{"_index":1156,"title":{"3-699":{},"3-740":{},"3-748":{},"5-25":{},"5-33":{},"12-283":{}},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"12":{}},"component":{}}],["concept.",{"_index":3412,"title":{},"name":{},"text":{"3":{},"9":{}},"component":{}}],["conceptu",{"_index":2488,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["concern",{"_index":1247,"title":{},"name":{},"text":{"3":{},"4":{},"6":{},"12":{}},"component":{}}],["concurr",{"_index":3990,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["condit",{"_index":1300,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["conf",{"_index":2782,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["conf.xml",{"_index":2738,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["confdb",{"_index":3044,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["confdb/common/lib",{"_index":2262,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["confdb/commons/lib",{"_index":2319,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["confdb/job",{"_index":2255,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["confdb/jobs/framework/lib",{"_index":2766,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["confdb/jobs/order/lib",{"_index":2274,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["confdb\\common\\lib",{"_index":4006,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["config.jar",{"_index":2346,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["configur",{"_index":10,"title":{"8":{},"3-19":{},"3-47":{},"3-50":{},"3-62":{},"3-64":{},"3-71":{},"3-77":{},"3-95":{},"3-114":{},"3-116":{},"3-119":{},"3-123":{},"3-146":{},"3-176":{},"3-218":{},"3-230":{},"3-238":{},"3-239":{},"3-240":{},"3-241":{},"3-250":{},"3-251":{},"3-252":{},"3-261":{},"3-269":{},"3-278":{},"3-285":{},"3-293":{},"3-299":{},"3-310":{},"3-311":{},"3-312":{},"3-316":{},"3-317":{},"3-322":{},"3-325":{},"3-328":{},"3-331":{},"3-334":{},"3-337":{},"3-340":{},"3-343":{},"3-348":{},"3-351":{},"3-354":{},"3-357":{},"3-360":{},"3-363":{},"3-365":{},"3-373":{},"3-376":{},"3-379":{},"3-382":{},"3-386":{},"3-388":{},"3-389":{},"3-394":{},"3-396":{},"3-398":{},"3-400":{},"3-403":{},"3-406":{},"3-410":{},"3-412":{},"3-414":{},"3-415":{},"3-425":{},"3-429":{},"3-446":{},"3-453":{},"3-479":{},"3-489":{},"3-501":{},"3-514":{},"3-515":{},"3-525":{},"3-526":{},"3-535":{},"3-536":{},"3-547":{},"3-560":{},"3-570":{},"3-571":{},"3-572":{},"3-584":{},"3-585":{},"3-602":{},"3-614":{},"3-615":{},"3-624":{},"3-626":{},"3-627":{},"3-628":{},"3-638":{},"3-647":{},"3-648":{},"3-667":{},"3-701":{},"3-725":{},"3-726":{},"3-736":{},"3-743":{},"3-759":{},"3-760":{},"5-10":{},"5-11":{},"5-21":{},"5-28":{},"5-44":{},"5-45":{},"6-13":{},"6-41":{},"6-44":{},"6-56":{},"6-58":{},"6-65":{},"6-71":{},"6-89":{},"6-108":{},"6-110":{},"6-113":{},"6-117":{},"6-140":{},"6-170":{},"10-4":{},"10-12":{},"10-13":{},"10-14":{},"10-15":{},"10-24":{},"10-25":{},"10-26":{},"10-35":{},"10-43":{},"10-52":{},"10-59":{},"10-67":{},"10-73":{},"10-84":{},"10-85":{},"10-86":{},"10-90":{},"10-91":{},"11-4":{},"11-7":{},"11-10":{},"11-13":{},"11-16":{},"11-19":{},"11-22":{},"11-25":{},"11-30":{},"11-33":{},"11-36":{},"11-39":{},"11-42":{},"11-45":{},"11-47":{},"11-55":{},"11-58":{},"11-61":{},"11-64":{},"11-68":{},"11-70":{},"11-71":{},"11-76":{},"11-78":{},"11-80":{},"11-82":{},"11-85":{},"11-88":{},"11-92":{},"11-94":{},"11-96":{},"11-97":{},"12-9":{},"12-13":{},"12-30":{},"12-37":{},"12-63":{},"12-73":{},"12-85":{},"12-98":{},"12-99":{},"12-109":{},"12-110":{},"12-119":{},"12-120":{},"12-131":{},"12-144":{},"12-154":{},"12-155":{},"12-156":{},"12-168":{},"12-169":{},"12-186":{},"12-198":{},"12-199":{},"12-208":{},"12-210":{},"12-211":{},"12-212":{},"12-222":{},"12-231":{},"12-232":{},"12-251":{},"12-285":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["confirm",{"_index":3262,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["conflict",{"_index":3275,"title":{},"name":{},"text":{"3":{},"7":{},"12":{}},"component":{}}],["conform",{"_index":2052,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["confus",{"_index":3638,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["conjunct",{"_index":1352,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["conn:configuration/nationalization/attribut",{"_index":1650,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["conndir.xml",{"_index":2845,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["connect",{"_index":28,"title":{"9":{},"3-56":{},"3-129":{},"3-130":{},"3-131":{},"3-132":{},"3-134":{},"3-137":{},"3-147":{},"3-223":{},"3-224":{},"3-225":{},"3-239":{},"3-368":{},"3-369":{},"3-415":{},"3-423":{},"3-428":{},"3-452":{},"3-458":{},"3-462":{},"3-478":{},"3-488":{},"3-500":{},"3-514":{},"3-546":{},"3-559":{},"3-571":{},"3-572":{},"3-624":{},"3-627":{},"3-637":{},"3-645":{},"3-647":{},"6-50":{},"6-123":{},"6-124":{},"6-125":{},"6-126":{},"6-128":{},"6-131":{},"6-141":{},"9-1":{},"9-2":{},"10-13":{},"11-50":{},"11-51":{},"11-97":{},"12-7":{},"12-12":{},"12-36":{},"12-42":{},"12-46":{},"12-62":{},"12-72":{},"12-84":{},"12-98":{},"12-130":{},"12-143":{},"12-155":{},"12-156":{},"12-208":{},"12-211":{},"12-221":{},"12-229":{},"12-231":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["connect_bas",{"_index":4393,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["connectionconfig",{"_index":2586,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["connectionconfig.getpassword",{"_index":2597,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["connectionconfig.getserv",{"_index":2592,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["connectionconfig.getus",{"_index":2595,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["connectivity/provis",{"_index":5487,"title":{},"name":{},"text":{"12":{}},"component":{}}],["connectmailbox.ps1",{"_index":5439,"title":{},"name":{},"text":{"12":{}},"component":{}}],["connecto",{"_index":5404,"title":{},"name":{},"text":{"12":{}},"component":{}}],["connector",{"_index":386,"title":{"3-115":{},"3-116":{},"3-117":{},"3-239":{},"3-646":{},"3-647":{},"6-109":{},"6-110":{},"6-111":{},"10-13":{},"12-230":{},"12-231":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"12":{}},"component":{}}],["connectorconfig",{"_index":2588,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["connectorconfig.getconnections().firstel",{"_index":2591,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["connectorfilterconfig",{"_index":2762,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["connector’",{"_index":3498,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["consecut",{"_index":3457,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["consent",{"_index":1255,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["consequ",{"_index":2273,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"12":{}},"component":{}}],["consid",{"_index":2293,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["consider",{"_index":5294,"title":{},"name":{},"text":{"11":{},"12":{}},"component":{}}],["consist",{"_index":30,"title":{"3-374":{},"3-375":{},"3-376":{},"3-377":{},"3-387":{},"3-388":{},"3-391":{},"3-392":{},"11-56":{},"11-57":{},"11-58":{},"11-59":{},"11-69":{},"11-70":{},"11-73":{},"11-74":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["consistencycheck",{"_index":3873,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["consol",{"_index":3946,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["constant",{"_index":1390,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"12":{}},"component":{}}],["constitut",{"_index":4779,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["constraint",{"_index":323,"title":{"3-74":{},"3-76":{},"3-79":{},"6-68":{},"6-70":{},"6-73":{}},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["constraintviolationexcept",{"_index":1528,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["construct",{"_index":1257,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["constructor",{"_index":2102,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["consult",{"_index":2046,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["consum",{"_index":3320,"title":{},"name":{},"text":{"3":{},"7":{},"11":{},"12":{}},"component":{}}],["consumpt",{"_index":2957,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["consvr",{"_index":4161,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["contact",{"_index":1013,"title":{"3-592":{},"3-599":{},"12-176":{},"12-183":{}},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["contactid",{"_index":4411,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["contain",{"_index":1426,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["content",{"_index":1256,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["content/chang",{"_index":3677,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["context",{"_index":285,"title":{"3-53":{},"3-67":{},"3-125":{},"3-330":{},"3-331":{},"3-332":{},"6-47":{},"6-61":{},"6-119":{},"11-12":{},"11-13":{},"11-14":{}},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["contextattribut",{"_index":1829,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["contexteventcontrol",{"_index":3754,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["continu",{"_index":1418,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["contractor",{"_index":3350,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["contrast",{"_index":3651,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["control",{"_index":60,"title":{"3-41":{},"3-86":{},"3-135":{},"3-138":{},"3-139":{},"3-141":{},"3-162":{},"3-174":{},"3-175":{},"3-671":{},"6-35":{},"6-80":{},"6-129":{},"6-132":{},"6-133":{},"6-135":{},"6-156":{},"6-168":{},"6-169":{},"12-255":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["control.tcl",{"_index":3034,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["controller’",{"_index":3113,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["conveni",{"_index":2132,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["convent",{"_index":5,"title":{"1-2":{},"2-3":{},"3-5":{}},"name":{},"text":{"3":{}},"component":{}}],["convers",{"_index":1145,"title":{"3-692":{},"3-693":{},"3-694":{},"3-695":{},"3-696":{},"12-276":{},"12-277":{},"12-278":{},"12-279":{},"12-280":{}},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["convert",{"_index":1730,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"12":{}},"component":{}}],["cooki",{"_index":1676,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["copi",{"_index":1496,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["copy/mov",{"_index":5447,"title":{},"name":{},"text":{"12":{}},"component":{}}],["copyright",{"_index":188,"title":{"4":{},"3-1":{}},"name":{"4":{}},"text":{"3":{}},"component":{}}],["core",{"_index":3621,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["core.jar",{"_index":2347,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["corpdir",{"_index":3666,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["corpdir2id",{"_index":3655,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["corpor",{"_index":648,"title":{"3-310":{},"10-84":{}},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["correct",{"_index":1411,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["correctli",{"_index":1363,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["correl",{"_index":901,"title":{"3-502":{},"3-700":{},"12-86":{},"12-284":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["correspond",{"_index":1345,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["corrupt",{"_index":3500,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["cost",{"_index":680,"title":{"3-336":{},"3-337":{},"3-338":{},"11-18":{},"11-19":{},"11-20":{}},"name":{},"text":{"3":{},"7":{},"11":{}},"component":{}}],["costcentr",{"_index":4834,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["costuniteventcontrol",{"_index":3765,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["count",{"_index":3120,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["counter",{"_index":3142,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["counterpart",{"_index":3906,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["countri",{"_index":3332,"title":{},"name":{},"text":{"3":{},"7":{},"12":{}},"component":{}}],["cours",{"_index":2500,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"12":{}},"component":{}}],["cover",{"_index":3030,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["cr",{"_index":4294,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["crash",{"_index":2451,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["creat",{"_index":14,"title":{"3-194":{},"3-195":{},"3-196":{},"3-197":{},"3-198":{},"3-219":{},"3-221":{},"3-222":{},"3-435":{},"3-582":{},"3-625":{},"7-3":{},"7-4":{},"7-5":{},"7-6":{},"7-7":{},"8-1":{},"8-3":{},"8-4":{},"12-19":{},"12-166":{},"12-209":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["create.adm",{"_index":3700,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["create/modifi",{"_index":5116,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["created/delet",{"_index":4460,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["created_in_t",{"_index":2865,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["createidfil",{"_index":4182,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["createmaildatabas",{"_index":4183,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["createmaildbnow",{"_index":4184,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["createnorthamericanid",{"_index":4185,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["createpasswordfile.ps1",{"_index":5434,"title":{},"name":{},"text":{"12":{}},"component":{}}],["creates/updates/remov",{"_index":4481,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["createserviceprincipal.ps1",{"_index":4336,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["createtimestamp",{"_index":2468,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["creation",{"_index":237,"title":{"3-30":{},"3-192":{},"3-221":{},"3-422":{},"3-677":{},"6-24":{},"7-1":{},"8-3":{},"12-6":{},"12-261":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{}},"component":{}}],["creation/modif",{"_index":4692,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["creationtimestamp",{"_index":4681,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["creator",{"_index":2157,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["cred.txt",{"_index":5433,"title":{},"name":{},"text":{"12":{}},"component":{}}],["credenti",{"_index":2761,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"12":{}},"component":{}}],["criteria",{"_index":3519,"title":{},"name":{},"text":{"3":{},"10":{},"11":{},"12":{}},"component":{}}],["critic",{"_index":3276,"title":{},"name":{},"text":{"3":{},"7":{},"11":{},"12":{}},"component":{}}],["crm",{"_index":3418,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["cross",{"_index":344,"title":{"3-88":{},"6-82":{}},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["crypt",{"_index":3915,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["csuser",{"_index":5444,"title":{},"name":{},"text":{"12":{}},"component":{}}],["csv",{"_index":603,"title":{"3-275":{},"3-276":{},"3-277":{},"3-278":{},"3-279":{},"3-280":{},"3-281":{},"3-283":{},"3-284":{},"3-285":{},"3-286":{},"3-287":{},"3-288":{},"10-49":{},"10-50":{},"10-51":{},"10-52":{},"10-53":{},"10-54":{},"10-55":{},"10-57":{},"10-58":{},"10-59":{},"10-60":{},"10-61":{},"10-62":{}},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["csvfile",{"_index":3538,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["csvfile2id",{"_index":3643,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["ctrl",{"_index":3055,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ctx",{"_index":2109,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ctx.get*(\"testtest",{"_index":2226,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ctx.put*(\"testtest",{"_index":2223,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ctxlocat",{"_index":3762,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["ctxorgan",{"_index":3746,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["ctxorganizationalunit",{"_index":3732,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["cua",{"_index":4496,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["current",{"_index":80,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["current_dn",{"_index":3109,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["current_tim",{"_index":3081,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["currtsmemb",{"_index":5144,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["cursor",{"_index":1606,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["custom",{"_index":53,"title":{"8":{},"3-25":{},"3-34":{},"3-93":{},"3-118":{},"3-122":{},"3-177":{},"3-178":{},"3-183":{},"3-218":{},"3-282":{},"3-418":{},"3-444":{},"3-473":{},"3-509":{},"3-611":{},"3-685":{},"3-710":{},"3-751":{},"5-36":{},"6-19":{},"6-28":{},"6-87":{},"6-112":{},"6-116":{},"6-171":{},"6-172":{},"6-177":{},"10-56":{},"12-2":{},"12-28":{},"12-57":{},"12-93":{},"12-195":{},"12-269":{},"12-294":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["customer_commun",{"_index":4420,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["customer_community_login",{"_index":4421,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["customerstatu",{"_index":2927,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["customer’",{"_index":5287,"title":{},"name":{},"text":{"11":{}},"component":{}}],["customiz",{"_index":5085,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["cycl",{"_index":4682,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["d",{"_index":2453,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["daili",{"_index":5212,"title":{},"name":{},"text":{"11":{}},"component":{}}],["dash",{"_index":4428,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dashboard",{"_index":1184,"title":{"3-718":{},"3-719":{},"3-721":{},"3-722":{},"5-3":{},"5-4":{},"5-6":{},"5-7":{}},"name":{},"text":{"3":{},"5":{}},"component":{}}],["dashboard’",{"_index":5035,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["data",{"_index":178,"title":{"3-51":{},"3-52":{},"3-65":{},"3-66":{},"6-45":{},"6-46":{},"6-59":{},"6-60":{}},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["data.csv",{"_index":3714,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["data.ldif",{"_index":3525,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["data_dir",{"_index":4712,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["data_fil",{"_index":3165,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["databas",{"_index":559,"title":{"3-236":{},"3-237":{},"3-238":{},"3-241":{},"3-247":{},"3-317":{},"3-510":{},"3-712":{},"10-10":{},"10-11":{},"10-12":{},"10-15":{},"10-21":{},"10-91":{},"12-94":{},"12-296":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["dataschema",{"_index":4772,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["datatest.csv",{"_index":3541,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["dataview",{"_index":3485,"title":{},"name":{},"text":{"3":{},"10":{},"11":{}},"component":{}}],["date",{"_index":458,"title":{"3-167":{},"6-161":{}},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["date=date;pendingoperation=operation;pathfilecertid=value;pathfiletargetcertid=value;fullname=valu",{"_index":4263,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dateformat",{"_index":1958,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dateformat.format(t.getd",{"_index":1960,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["datum",{"_index":1637,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["day",{"_index":1324,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"11":{}},"component":{}}],["dayofbirth",{"_index":1933,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["daystoexpir",{"_index":3845,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["db",{"_index":4013,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dbconfig_opt",{"_index":5328,"title":{},"name":{},"text":{"12":{}},"component":{}}],["dbkey",{"_index":4963,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dbo].[changepassword",{"_index":4125,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dbquotasizelimit",{"_index":4193,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dbquotawarningthreshold",{"_index":4194,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dc",{"_index":3430,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["dc=domain1,dc=munich,dc=mi",{"_index":5396,"title":{},"name":{},"text":{"12":{}},"component":{}}],["dc=your",{"_index":5361,"title":{},"name":{},"text":{"12":{}},"component":{}}],["dce",{"_index":4992,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dd",{"_index":1947,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ddn",{"_index":3195,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"12":{}},"component":{}}],["de",{"_index":1582,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["deactiv",{"_index":1435,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["deal",{"_index":5406,"title":{},"name":{},"text":{"12":{}},"component":{}}],["dearuser_body=dear",{"_index":1698,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["debug",{"_index":2423,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["debug_command",{"_index":3074,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["debug_in_fil",{"_index":3092,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["debug_level1",{"_index":3090,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["debug_level2",{"_index":3093,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["debug_level3",{"_index":3094,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["debug_level4",{"_index":3091,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["debug_to_screen",{"_index":4578,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["debug_trac",{"_index":3061,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["debug_vari",{"_index":3089,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["decid",{"_index":1302,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["decreas",{"_index":4695,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["decrypt",{"_index":2754,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["deduc",{"_index":3956,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["default",{"_index":11,"title":{"6":{},"9":{},"3-6":{},"3-147":{},"3-159":{},"3-223":{},"3-224":{},"3-225":{},"6-141":{},"6-153":{},"9-1":{},"9-2":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["default/sourc",{"_index":5310,"title":{},"name":{},"text":{"11":{}},"component":{}}],["default=10000",{"_index":5291,"title":{},"name":{},"text":{"11":{}},"component":{}}],["default=50",{"_index":5281,"title":{},"name":{},"text":{"11":{}},"component":{}}],["default=500",{"_index":5279,"title":{},"name":{},"text":{"11":{}},"component":{}}],["default_owner_identifi",{"_index":4593,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["default_owner_typ",{"_index":4570,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["default_userloginnam",{"_index":4566,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["defaultmailserv",{"_index":4195,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["defaultuserloginnam",{"_index":4567,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["defer",{"_index":3775,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["defin",{"_index":141,"title":{"3-47":{},"3-71":{},"3-154":{},"6-41":{},"6-65":{},"6-148":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["definit",{"_index":1306,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["definition.thi",{"_index":3272,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["degre",{"_index":2963,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["del",{"_index":2919,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["del_ts2rol",{"_index":2897,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["delattr",{"_index":5112,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["delay",{"_index":3340,"title":{},"name":{},"text":{"3":{},"7":{},"12":{}},"component":{}}],["deleg",{"_index":162,"title":{},"name":{},"text":{"2":{},"3":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["delet",{"_index":521,"title":{"3-209":{},"3-210":{},"3-212":{},"7-18":{},"7-19":{},"7-21":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["delete.adm",{"_index":3704,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["delete_entri",{"_index":3130,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["delete_filt",{"_index":3213,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["delete_group_en",{"_index":4577,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["deleted",{"_index":3895,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["deleted.instead",{"_index":3336,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["deletedate=today+ticketlifetim",{"_index":3801,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["deletemailfil",{"_index":4189,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["deleteorderrequest",{"_index":2232,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["deletepassword",{"_index":2883,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["deletion.up",{"_index":3334,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["deletion_mod",{"_index":3100,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["deletions.y",{"_index":3324,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["delimit",{"_index":1628,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["deliv",{"_index":1398,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"12":{}},"component":{}}],["deliveri",{"_index":5481,"title":{},"name":{},"text":{"12":{}},"component":{}}],["delmemb",{"_index":4913,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["delmember/addmemb",{"_index":4919,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["delntf",{"_index":2952,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["delta",{"_index":335,"title":{"3-83":{},"3-84":{},"3-165":{},"3-166":{},"3-167":{},"3-170":{},"3-171":{},"3-172":{},"3-173":{},"3-174":{},"3-175":{},"3-176":{},"3-445":{},"3-522":{},"6-77":{},"6-78":{},"6-159":{},"6-160":{},"6-161":{},"6-164":{},"6-165":{},"6-166":{},"6-167":{},"6-168":{},"6-169":{},"6-170":{},"12-29":{},"12-106":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"12":{}},"component":{}}],["delta_check",{"_index":3131,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["delta_d",{"_index":3132,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["deltainputdata",{"_index":3133,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["deltaoutputdata.txt",{"_index":3222,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["deltasynconeway2ident",{"_index":4148,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["demograph",{"_index":3425,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["demonstr",{"_index":2206,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["deni",{"_index":1989,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["denot",{"_index":2394,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["dent2csvfil",{"_index":3645,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["depart",{"_index":1738,"title":{},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["department;de;hr;hr.;80157;+49",{"_index":3562,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["depend",{"_index":1659,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["dependson",{"_index":4138,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["deploy",{"_index":290,"title":{"3-55":{},"3-69":{},"3-73":{},"3-79":{},"3-99":{},"3-105":{},"3-117":{},"3-121":{},"3-126":{},"3-253":{},"6-49":{},"6-63":{},"6-67":{},"6-73":{},"6-93":{},"6-99":{},"6-111":{},"6-115":{},"6-120":{},"10-27":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["deprec",{"_index":1179,"title":{"5":{},"3-715":{}},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["der",{"_index":4537,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["deriv",{"_index":1128,"title":{"3-683":{},"12-267":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"12":{}},"component":{}}],["descend",{"_index":3197,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["describ",{"_index":152,"title":{},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["descript",{"_index":36,"title":{"3-48":{},"6-42":{}},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["descriptions,cn=salesforce,cn=targetsystems,cn=configuration,cn",{"_index":4472,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["descriptor",{"_index":4392,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["deselect",{"_index":3567,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["design",{"_index":20,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["desir",{"_index":2112,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["despit",{"_index":3426,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["destin",{"_index":2428,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["destroy",{"_index":1668,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["detail",{"_index":143,"title":{"3-751":{},"5-36":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["detect",{"_index":1387,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"12":{}},"component":{}}],["determin",{"_index":230,"title":{"3-27":{},"6-21":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["dev",{"_index":1243,"title":{},"name":{"3":{}},"text":{},"component":{}}],["develop",{"_index":50,"title":{"3":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"12":{}},"component":{}}],["deviat",{"_index":3734,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["dfp",{"_index":4998,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dialog",{"_index":1625,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["die",{"_index":1644,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["differ",{"_index":153,"title":{"3-474":{},"3-712":{},"12-58":{},"12-296":{}},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["differenti",{"_index":2458,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["difficult",{"_index":2974,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dir",{"_index":5467,"title":{},"name":{},"text":{"12":{}},"component":{}}],["dir_subtyp",{"_index":3068,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dir_typ",{"_index":3161,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dir_type=fil",{"_index":3166,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["direct",{"_index":922,"title":{"3-519":{},"3-530":{},"3-531":{},"3-632":{},"3-677":{},"12-103":{},"12-114":{},"12-115":{},"12-216":{},"12-261":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["direct_trunc_acc",{"_index":4817,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["directli",{"_index":1441,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["directori",{"_index":127,"title":{"3-142":{},"3-144":{},"3-228":{},"3-239":{},"3-310":{},"3-311":{},"3-426":{},"3-428":{},"3-572":{},"3-668":{},"3-672":{},"3-681":{},"6-136":{},"6-138":{},"10-2":{},"10-13":{},"10-84":{},"10-85":{},"12-10":{},"12-12":{},"12-156":{},"12-252":{},"12-256":{},"12-265":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["directory/servic",{"_index":3402,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["directory_subtyp",{"_index":3067,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["directorytyp",{"_index":2167,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["directory’",{"_index":2827,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["dirsync",{"_index":5394,"title":{},"name":{},"text":{"12":{}},"component":{}}],["dirtracc",{"_index":4816,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dirx",{"_index":0,"title":{"1":{},"1-1":{},"2-1":{},"2-2":{},"3-3":{},"3-4":{},"3-311":{},"3-456":{},"3-705":{},"3-723":{},"3-724":{},"3-725":{},"3-726":{},"3-727":{},"3-728":{},"3-729":{},"5-8":{},"5-9":{},"5-10":{},"5-11":{},"5-12":{},"5-13":{},"5-14":{},"10-85":{},"12-40":{},"12-289":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}}}],["dirx.nt.ldif",{"_index":5326,"title":{},"name":{},"text":{"12":{}},"component":{}}],["dirx_install_path*/server/ldif",{"_index":3668,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["dirxadm",{"_index":3687,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["dirxdelta",{"_index":651,"title":{"3-312":{},"3-313":{},"10-86":{},"10-87":{}},"name":{},"text":{"3":{},"10":{}},"component":{}}],["dirxdelta2id",{"_index":3669,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["dirxdirx1",{"_index":4470,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dirxident",{"_index":3918,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dirxidentityconnector",{"_index":4451,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dirxldif",{"_index":3667,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["dirxldif2id",{"_index":3657,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["dirxmanag",{"_index":3688,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["dirxmetahub",{"_index":5329,"title":{},"name":{},"text":{"12":{}},"component":{}}],["dirxmetarol",{"_index":3357,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["dirxohn",{"_index":4316,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["disabl",{"_index":1213,"title":{"3-742":{},"3-745":{},"5-27":{},"5-30":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["disabledplan",{"_index":4352,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["disableendd",{"_index":3898,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["disablemailbox.ps1",{"_index":5435,"title":{},"name":{},"text":{"12":{}},"component":{}}],["disablestartd",{"_index":3897,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["disappear",{"_index":5296,"title":{},"name":{},"text":{"11":{}},"component":{}}],["discard",{"_index":4683,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["disconnect",{"_index":5437,"title":{},"name":{},"text":{"12":{}},"component":{}}],["discontinu",{"_index":2533,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["discov",{"_index":1521,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["discuss",{"_index":1318,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["disk",{"_index":5000,"title":{},"name":{},"text":{"3":{},"5":{},"11":{},"12":{}},"component":{}}],["display",{"_index":708,"title":{"3-359":{},"3-360":{},"3-361":{},"11-41":{},"11-42":{},"11-43":{}},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["displaynam",{"_index":1833,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["distinguish",{"_index":1741,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["distribut",{"_index":1252,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["dit",{"_index":3108,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["divers",{"_index":5038,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["divid",{"_index":1494,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dm",{"_index":4666,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dms_dir",{"_index":4711,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dmsid",{"_index":4676,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dmsid=12345",{"_index":4705,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dmsidval",{"_index":4786,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dmsie",{"_index":4716,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dmsieproc",{"_index":4688,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dn",{"_index":611,"title":{"3-282":{},"10-56":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["dn:dxrgroupname=verynew,table=group",{"_index":5071,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["dn:membershipgroupid=1,membershipaccountid=26,table=membership",{"_index":5072,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["do",{"_index":4461,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["doc",{"_index":146,"title":{},"name":{},"text":{},"component":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}}}],["doctyp",{"_index":1485,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["document",{"_index":2,"title":{"1":{},"1-1":{},"2-1":{},"2-2":{},"3-3":{},"3-4":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["documentation/dirx",{"_index":3464,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["documentation/dirxidentity/realtimeworkflow",{"_index":2537,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["documentation\\dirxidentity\\requestworkflows\\index.html",{"_index":2048,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["doesn’t",{"_index":1681,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["dofilt",{"_index":2755,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["domain",{"_index":292,"title":{"3-56":{},"3-57":{},"6-50":{},"6-51":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["domain**account",{"_index":4563,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["domain**loginnam",{"_index":4534,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["domain*\\*account",{"_index":4565,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["domain*\\*us",{"_index":3387,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["domain*\\account",{"_index":4552,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["domain.orig",{"_index":5324,"title":{},"name":{},"text":{"12":{}},"component":{}}],["domain.th",{"_index":3356,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["domain1\\admin",{"_index":4535,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["domain\\userloginnam",{"_index":4562,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["domain_root",{"_index":4169,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["domainname_account",{"_index":4588,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["domainname_account_",{"_index":4590,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["domainnameattribut",{"_index":4557,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["domainrootdn",{"_index":5225,"title":{},"name":{},"text":{"11":{}},"component":{}}],["domainsessionaccessor",{"_index":296,"title":{"3-58":{},"6-52":{}},"name":{},"text":{"3":{},"6":{}},"component":{}}],["domainsessionaccessor.getclone(50000",{"_index":2278,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["domain’",{"_index":2498,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["domino",{"_index":4153,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["donald",{"_index":1782,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["done",{"_index":1378,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["donegan",{"_index":1775,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["don’t",{"_index":2169,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["dopostmapping(mappedentri",{"_index":2630,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["doubl",{"_index":1660,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["doubt",{"_index":2033,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["down",{"_index":70,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"11":{}},"component":{}}],["download",{"_index":2846,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["downstream",{"_index":2202,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dozen",{"_index":4768,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["draw",{"_index":3566,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["drawback",{"_index":4769,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dri",{"_index":3852,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["drive",{"_index":3871,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["driver",{"_index":3440,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["driverdbtyp",{"_index":3448,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["driver’",{"_index":4009,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["drop",{"_index":2007,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["drxdeleted",{"_index":5209,"title":{},"name":{},"text":{"11":{}},"component":{}}],["dryrun",{"_index":3851,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dsml",{"_index":3627,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["dsml_data.xml",{"_index":3715,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["dsmlattr",{"_index":2644,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["dsmlfile2id",{"_index":3653,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["dsmlmodif",{"_index":2624,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["dsmlvalue.base64binary_type.equalsignorecase(membertyp",{"_index":2663,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dsn",{"_index":3505,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["dstopattr",{"_index":2709,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dstopattr.addvalue(userbas",{"_index":2710,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dstopattr.setname(\"myoperationalattribut",{"_index":2711,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["duck",{"_index":1783,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["due",{"_index":1527,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["dummi",{"_index":3568,"title":{},"name":{},"text":{"3":{},"10":{},"11":{},"12":{}},"component":{}}],["dure",{"_index":133,"title":{"3-28":{},"6-22":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["duti",{"_index":1743,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dvd",{"_index":2047,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxclogging.jar",{"_index":2348,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxi",{"_index":4408,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxi.cfg",{"_index":1630,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxi_java_hom",{"_index":138,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"12":{}},"component":{}}],["dxisocketedjob.jar",{"_index":2349,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxm",{"_index":3033,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxm.delta",{"_index":2473,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["dxm.event.ebr",{"_index":4432,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxm.event.svctsaccount.pwd.chang",{"_index":3805,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxm.event.svctsaccount.pwd.expir",{"_index":3804,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxm.request.importtoidentity..cluster=''.resourc",{"_index":3629,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["dxm.setpasswordrequest",{"_index":2435,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxm_add_objclass",{"_index":2981,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxm_rem_objclass",{"_index":2982,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxm_sourc",{"_index":2899,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxmactivitytyp",{"_index":2079,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxmactualguidvalu",{"_index":2994,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxmaddress",{"_index":2970,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxmadsdomain",{"_index":4579,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxmadsextensionattribute1",{"_index":5369,"title":{},"name":{},"text":{"12":{}},"component":{}}],["dxmadsextensionattribute2",{"_index":5367,"title":{},"name":{},"text":{"12":{}},"component":{}}],["dxmadsextensionattribute3",{"_index":5371,"title":{},"name":{},"text":{"12":{}},"component":{}}],["dxmadsguid",{"_index":3433,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["dxmadssamaccountnam",{"_index":3434,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["dxmadsus",{"_index":2986,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxmadsuserprincipalnam",{"_index":4348,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxmapi.jar",{"_index":2129,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxmcomponentdescript",{"_index":2072,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxmcomponenttyp",{"_index":2074,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxmconnectionconfig",{"_index":2585,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxmconnectorconfig",{"_index":2587,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxmconnectorexcept",{"_index":4117,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxmconnectorextend",{"_index":4111,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxmconnectorextended)tgtconn",{"_index":4113,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxmcontent",{"_index":2080,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxmdataport",{"_index":1757,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxmdshexternalapp",{"_index":5051,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["dxmdshexternalappdel",{"_index":5053,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["dxmentryd",{"_index":2962,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxmex2013extensionattribute16",{"_index":5407,"title":{},"name":{},"text":{"12":{}},"component":{}}],["dxmex2kproxyaddress",{"_index":5383,"title":{},"name":{},"text":{"12":{}},"component":{}}],["dxmex2kshowinaddressbook",{"_index":5409,"title":{},"name":{},"text":{"12":{}},"component":{}}],["dxmguid",{"_index":3635,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["dxmguidid",{"_index":2993,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxmidmworkflow",{"_index":3848,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxmjoin.jar",{"_index":3596,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["dxmlncreateinaddressbook=tru",{"_index":4208,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxmlnregisterus",{"_index":4262,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxmlnregisteruser=tru",{"_index":4209,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxmlnshortnam",{"_index":4214,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxmlnuniqueorgunit",{"_index":4213,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxmlnuserinaddressbook=fals",{"_index":4211,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxmlnuserregistered=fals",{"_index":4210,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxmmasternam",{"_index":2969,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxmoprattribut",{"_index":4787,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxmoprmast",{"_index":2958,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{}},"component":{}}],["dxmoprmasternam",{"_index":2959,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxmoprorigin",{"_index":3005,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["dxmoprstatu",{"_index":4677,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxmorder.jar",{"_index":2131,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxmpassword",{"_index":3385,"title":{},"name":{},"text":{"3":{},"8":{},"12":{}},"component":{}}],["dxmpasswordexpir",{"_index":4143,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxmrequestor",{"_index":4103,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxmsecureport",{"_index":1758,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxmselectedattribut",{"_index":3536,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["dxmservic",{"_index":1755,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxmslsf",{"_index":4486,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxmslsfaccount",{"_index":4434,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxmslsfcontactt",{"_index":4437,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxmslsfotherphon",{"_index":4490,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxmslsfsite",{"_index":4487,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxmslsfuserlicenseid",{"_index":4485,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxmslsfwebsit",{"_index":4479,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxmspecificattribut",{"_index":1830,"title":{},"name":{},"text":{"3":{},"6":{},"8":{}},"component":{}}],["dxmspecificattributes(ssl",{"_index":1756,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxmstatusexpirationtim",{"_index":5211,"title":{},"name":{},"text":{"11":{}},"component":{}}],["dxmsystem",{"_index":1759,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxmtestmap",{"_index":2720,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxmtype",{"_index":2075,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxmunixprimarygroup",{"_index":4646,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxmutil.jar",{"_index":2130,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxr",{"_index":5363,"title":{},"name":{},"text":{"12":{}},"component":{}}],["dxraccountnam",{"_index":4016,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxrcardnumb",{"_index":5006,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxrcontext",{"_index":3755,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrcontextlink",{"_index":3757,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrcostunit",{"_index":3766,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrcostunitlink",{"_index":3768,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrcreateobjdefaults(mail",{"_index":4215,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxrcreateobjdefaults(uniqu",{"_index":4225,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxrdefaultgrouptyp",{"_index":4600,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxrdeleted",{"_index":3598,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["dxrdisableendd",{"_index":3438,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["dxrdisablestartd",{"_index":3437,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["dxrenddat",{"_index":2939,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["dxrenddate=)(dxrstartd",{"_index":5276,"title":{},"name":{},"text":{"11":{}},"component":{}}],["dxrenvironmentproperti",{"_index":3394,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["dxrexpirationd",{"_index":1552,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxrextensionlink",{"_index":3760,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrextensionlink1",{"_index":3758,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrextensionlink10",{"_index":3759,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrgroupmemb",{"_index":3855,"title":{},"name":{},"text":{"3":{},"5":{},"11":{},"12":{}},"component":{}}],["dxrgroupmemberaadd",{"_index":4914,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxrgroupmemberadd",{"_index":3346,"title":{},"name":{},"text":{"3":{},"5":{},"7":{},"12":{}},"component":{}}],["dxrgroupmemberdelet",{"_index":4459,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxrgroupmemberimport",{"_index":2870,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["dxrgroupmemberok",{"_index":3347,"title":{},"name":{},"text":{"3":{},"5":{},"7":{}},"component":{}}],["dxrgroupmemberremot",{"_index":4601,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxrgroupnam",{"_index":4012,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxrhistori",{"_index":3329,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["dxrhistoryremov",{"_index":4594,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxrlastvalid",{"_index":2894,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxrlicens",{"_index":4345,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxrlocationlink",{"_index":3281,"title":{},"name":{},"text":{"3":{},"7":{},"11":{}},"component":{}}],["dxrname",{"_index":3386,"title":{},"name":{},"text":{"3":{},"5":{},"8":{},"12":{}},"component":{}}],["dxrname/dxrprimarykey/dxrprimarykeyold",{"_index":4036,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxrnameforaccount",{"_index":4383,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxrnameforaccounts.j",{"_index":4381,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["dxroclint",{"_index":5338,"title":{},"name":{},"text":{"12":{}},"component":{}}],["dxroption",{"_index":5339,"title":{},"name":{},"text":{"12":{}},"component":{}}],["dxroption(enableesso",{"_index":3932,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxroptions(enablesso",{"_index":5489,"title":{},"name":{},"text":{"12":{}},"component":{}}],["dxroptions(targetcertifi",{"_index":4226,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxrorganizationalunitlink",{"_index":3752,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrorganizationlink",{"_index":3748,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxroulink",{"_index":3280,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["dxrpendingrequest",{"_index":4249,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxrpermissionlink",{"_index":3508,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["dxrprimari",{"_index":4929,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxrprimarykey",{"_index":3610,"title":{},"name":{},"text":{"3":{},"5":{},"10":{},"11":{},"12":{}},"component":{}}],["dxrprimarykeyattribut",{"_index":4944,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxrprimarykeyold",{"_index":2668,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["dxrprofess",{"_index":4292,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxrprofil",{"_index":4218,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxrprofilelink",{"_index":4178,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxrprofileslink",{"_index":4212,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxrproject",{"_index":3771,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrprojectlink",{"_index":3773,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrpwdcantchang",{"_index":2887,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxrpwdchangedtim",{"_index":3812,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrpwdchangedtime\",\"dxrpwdpolicylink\",\"dxrtsstate\",\"dxrnam",{"_index":3817,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrpwdchangedtime+dxrpwdmaxag",{"_index":3847,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrpwdchangedtime+pwdmaxag",{"_index":3813,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrpwddisplaytim",{"_index":3824,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrpwdexpirewarn",{"_index":3846,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrpwdexpirynotifi",{"_index":3842,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrpwdmaxag",{"_index":3810,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrpwdneverexpir",{"_index":2880,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxrpwdnotrequir",{"_index":2885,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxrpwdpolicylink",{"_index":3809,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrpwdreset",{"_index":3482,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["dxrrdnint",{"_index":5352,"title":{},"name":{},"text":{"12":{}},"component":{}}],["dxrrefer",{"_index":3515,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["dxrrole",{"_index":3784,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrrole.nam",{"_index":4505,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxrroleid",{"_index":3512,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["dxrrolelink",{"_index":3509,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["dxrrpvalu",{"_index":3288,"title":{},"name":{},"text":{"3":{},"7":{},"11":{}},"component":{}}],["dxrrpvalues(c",{"_index":3290,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["dxrrpvalues(l",{"_index":3291,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["dxrseccostunitlink",{"_index":3769,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrseclocationlink",{"_index":3764,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrsecorganizationalunitlink",{"_index":3753,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrsecorganizationlink",{"_index":3749,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrservices.jar",{"_index":2318,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxrsponsor",{"_index":3782,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrstartdat",{"_index":1636,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["dxrstate",{"_index":2799,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"12":{}},"component":{}}],["dxrstate\".equalsignorecase(mod.getnam",{"_index":2803,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxrstate=delet",{"_index":4384,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxrstate=“tbdel",{"_index":3583,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["dxrstate=”tbdel",{"_index":3611,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["dxrt",{"_index":5156,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["dxrtargetsystemaccount",{"_index":3819,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrtba",{"_index":3777,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrtba=tru",{"_index":3636,"title":{},"name":{},"text":{"3":{},"10":{},"11":{}},"component":{}}],["dxrtodo",{"_index":2864,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["dxrtslocal",{"_index":2869,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["dxrtsstate",{"_index":2863,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"12":{}},"component":{}}],["dxrtsstate=\"delet",{"_index":3232,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["dxrtsstate=non",{"_index":4947,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxrtsstateattr",{"_index":5091,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["dxrtype",{"_index":4282,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxrtype=dxrtsaccountgroupcontain",{"_index":5348,"title":{},"name":{},"text":{"12":{}},"component":{}}],["dxrtype=login",{"_index":4281,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["dxrtype=person",{"_index":3821,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxrtype=privileg",{"_index":3820,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["dxruser",{"_index":1737,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["dxruserlink",{"_index":4529,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["dynam",{"_index":1295,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["e",{"_index":1308,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["e.g",{"_index":3106,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["each",{"_index":1312,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["earlier",{"_index":4260,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["eas",{"_index":1658,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["easi",{"_index":1307,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"12":{}},"component":{}}],["easier",{"_index":1421,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["easiest",{"_index":5408,"title":{},"name":{},"text":{"12":{}},"component":{}}],["easili",{"_index":1666,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"12":{}},"component":{}}],["ecc",{"_index":1023,"title":{"3-600":{},"12-184":{}},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["echo",{"_index":4746,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["eclips",{"_index":2719,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["edirectori",{"_index":3360,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["edit",{"_index":1601,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["editor",{"_index":228,"title":{"3-26":{},"6-20":{}},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["ee",{"_index":3708,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["effect",{"_index":1429,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["effici",{"_index":3379,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["effort",{"_index":1708,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["eight",{"_index":3962,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["elaps",{"_index":2578,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["element",{"_index":249,"title":{"3-36":{},"6-30":{}},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"10":{},"12":{}},"component":{}}],["elementnam",{"_index":2088,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["elimin",{"_index":5016,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["ellips",{"_index":120,"title":{},"name":{},"text":{"1":{},"2":{},"3":{}},"component":{}}],["email",{"_index":359,"title":{"3-98":{},"6-92":{}},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["emailencodingkey",{"_index":4466,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["embed",{"_index":2809,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["emerg",{"_index":4272,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["empl",{"_index":3443,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["employe",{"_index":3309,"title":{},"name":{},"text":{"3":{},"7":{},"12":{}},"component":{}}],["employeeid",{"_index":3471,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["employeenr",{"_index":3473,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["employeenumb",{"_index":2992,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["employeenumber=*)(ou=procur",{"_index":3540,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["employeetyp",{"_index":3349,"title":{},"name":{},"text":{"3":{},"5":{},"7":{},"12":{}},"component":{}}],["employeetype=internal.approv",{"_index":3312,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["employeetypesource.java",{"_index":2735,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["emplrol",{"_index":3444,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["emplroles.personalnr",{"_index":3472,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["empti",{"_index":1211,"title":{"3-741":{},"3-744":{},"5-26":{},"5-29":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["en",{"_index":1581,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["enabl",{"_index":810,"title":{"3-434":{},"3-436":{},"3-438":{},"3-474":{},"3-678":{},"3-742":{},"3-745":{},"5-27":{},"5-30":{},"12-18":{},"12-20":{},"12-22":{},"12-58":{},"12-262":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["enable/dis",{"_index":5360,"title":{},"name":{},"text":{"12":{}},"component":{}}],["enablemailbox.ps1",{"_index":5441,"title":{},"name":{},"text":{"12":{}},"component":{}}],["enclos",{"_index":107,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"12":{}},"component":{}}],["encod",{"_index":2906,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["encount",{"_index":2534,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["encrypt",{"_index":2601,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["end",{"_index":1825,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["enddat",{"_index":3899,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["endpoint",{"_index":3937,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["endtim",{"_index":1835,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["enforc",{"_index":1412,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["engin",{"_index":1538,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["english",{"_index":1590,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["engr",{"_index":4713,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["enhanc",{"_index":2834,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["enough",{"_index":1410,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["ensur",{"_index":177,"title":{},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["enter",{"_index":96,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["enterattribut",{"_index":1857,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["enterpris",{"_index":4630,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["entir",{"_index":1430,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["entri",{"_index":372,"title":{"3-106":{},"3-108":{},"3-188":{},"3-320":{},"3-675":{},"3-681":{},"3-682":{},"6-100":{},"6-102":{},"6-182":{},"11-2":{},"12-259":{},"12-265":{},"12-266":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["entries/delet",{"_index":3243,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["entries/modifi",{"_index":3242,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["entry_typ",{"_index":4031,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["entrydelet",{"_index":2805,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["entrymappingcontrol",{"_index":2737,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["entry’",{"_index":2441,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["enumer",{"_index":2699,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["env",{"_index":2555,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["env.domain",{"_index":2559,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["env.dxm.uh.wfinstid",{"_index":2572,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["env.dxm.uh.wfnam",{"_index":2573,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["env.essoappl",{"_index":3924,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["env.essous",{"_index":3923,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["env.get(\"essoappl",{"_index":3928,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["env.get(\"essous",{"_index":3927,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["env.role_ts_account_bas",{"_index":3600,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["env.role_ts_group_bas",{"_index":3980,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["env.role_user_bas",{"_index":3571,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["env.script",{"_index":2562,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["env.user_bas",{"_index":3396,"title":{},"name":{},"text":{"3":{},"8":{},"10":{}},"component":{}}],["environ",{"_index":16,"title":{"3-107":{},"3-676":{},"3-678":{},"3-679":{},"6-101":{},"12-260":{},"12-262":{},"12-263":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["environment.put(\"com.siemens.map.ldap.myenvproperti",{"_index":2678,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ep",{"_index":4655,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["epilog",{"_index":2523,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["eq",{"_index":1889,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["equal",{"_index":1861,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"12":{}},"component":{}}],["equip",{"_index":815,"title":{"3-435":{},"3-436":{},"12-19":{},"12-20":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["equival",{"_index":1799,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["era",{"_index":5243,"title":{},"name":{},"text":{"11":{}},"component":{}}],["erron",{"_index":1826,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["error",{"_index":214,"title":{"3-20":{},"6-14":{}},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["errorcod",{"_index":3052,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["errorexpirationd",{"_index":3900,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["errorhandl",{"_index":1576,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["errors/warn",{"_index":3072,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["escal",{"_index":1311,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["escalationlevel",{"_index":1869,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["escap",{"_index":5266,"title":{},"name":{},"text":{"11":{}},"component":{}}],["especi",{"_index":2078,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["essenti",{"_index":2759,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["esso",{"_index":845,"title":{"3-459":{},"3-460":{},"3-461":{},"3-462":{},"3-463":{},"3-464":{},"3-465":{},"3-466":{},"3-473":{},"12-43":{},"12-44":{},"12-45":{},"12-46":{},"12-47":{},"12-48":{},"12-49":{},"12-50":{},"12-57":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["essoappl",{"_index":3917,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["essous",{"_index":3916,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["essousercsst",{"_index":3922,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["essouserst",{"_index":3921,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["establish",{"_index":1719,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["establish.adm",{"_index":3701,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["etc",{"_index":1859,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["eu1",{"_index":3374,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["eu2",{"_index":3375,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["europ",{"_index":3373,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["europe,o=mi",{"_index":5357,"title":{},"name":{},"text":{"12":{}},"component":{}}],["evalu",{"_index":371,"title":{"3-106":{},"6-100":{}},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["even",{"_index":2449,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["event",{"_index":336,"title":{"3-83":{},"3-90":{},"3-122":{},"3-123":{},"3-124":{},"3-125":{},"3-126":{},"3-303":{},"3-304":{},"3-307":{},"3-308":{},"3-322":{},"3-323":{},"3-325":{},"3-326":{},"3-328":{},"3-329":{},"3-331":{},"3-332":{},"3-334":{},"3-335":{},"3-337":{},"3-338":{},"3-340":{},"3-341":{},"3-343":{},"3-344":{},"3-348":{},"3-349":{},"3-362":{},"3-363":{},"6-77":{},"6-84":{},"6-116":{},"6-117":{},"6-118":{},"6-119":{},"6-120":{},"10-77":{},"10-78":{},"10-81":{},"10-82":{},"11-4":{},"11-5":{},"11-7":{},"11-8":{},"11-10":{},"11-11":{},"11-13":{},"11-14":{},"11-16":{},"11-17":{},"11-19":{},"11-20":{},"11-22":{},"11-23":{},"11-25":{},"11-26":{},"11-30":{},"11-31":{},"11-44":{},"11-45":{}},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["event.getmodifications().getmodif",{"_index":2802,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["eventctx.getdomainroot",{"_index":2794,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["eventu",{"_index":2446,"title":{},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["event’",{"_index":3780,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["everyth",{"_index":2905,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"12":{}},"component":{}}],["eviden",{"_index":1249,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["evidian",{"_index":844,"title":{"3-459":{},"3-460":{},"3-461":{},"3-462":{},"3-463":{},"3-465":{},"3-466":{},"3-473":{},"12-43":{},"12-44":{},"12-45":{},"12-46":{},"12-47":{},"12-49":{},"12-50":{},"12-57":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["exact",{"_index":124,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"11":{}},"component":{}}],["exact_act",{"_index":3134,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["exactli",{"_index":97,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["examin",{"_index":2239,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"12":{}},"component":{}}],["exampl",{"_index":99,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["exce",{"_index":5096,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["exceed",{"_index":4299,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["excel",{"_index":1624,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["except",{"_index":1284,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"12":{}},"component":{}}],["exchang",{"_index":808,"title":{"3-433":{},"3-446":{},"3-717":{},"5-2":{},"12-17":{},"12-30":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"12":{}},"component":{}}],["exclud",{"_index":2404,"title":{},"name":{},"text":{"3":{},"6":{},"8":{}},"component":{}}],["exclus",{"_index":2912,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["exec_cmd",{"_index":3053,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["execut",{"_index":243,"title":{"3-33":{},"3-100":{},"3-402":{},"3-403":{},"3-404":{},"6-27":{},"6-94":{},"11-84":{},"11-85":{},"11-86":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["executable’",{"_index":2563,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["execute(textpars",{"_index":1925,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["executesocketjob(taskcontext",{"_index":2336,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["executionpolici",{"_index":5423,"title":{},"name":{},"text":{"12":{}},"component":{}}],["exist",{"_index":172,"title":{},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["exit",{"_index":2564,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["expand",{"_index":1774,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["expect",{"_index":1400,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"12":{}},"component":{}}],["experiment",{"_index":5186,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["expert",{"_index":2470,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["expir",{"_index":209,"title":{"3-17":{},"3-364":{},"3-365":{},"3-366":{},"3-399":{},"3-400":{},"3-401":{},"6-11":{},"11-46":{},"11-47":{},"11-48":{},"11-81":{},"11-82":{},"11-83":{}},"name":{},"text":{"3":{},"6":{},"7":{},"9":{},"11":{},"12":{}},"component":{}}],["expirationd",{"_index":3221,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["expirationtim",{"_index":1837,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["explain",{"_index":1319,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"12":{}},"component":{}}],["explan",{"_index":3234,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["explicit",{"_index":1439,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["explicitli",{"_index":1754,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["explorer’",{"_index":4536,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["export",{"_index":474,"title":{"3-178":{},"3-180":{},"3-181":{},"3-267":{},"3-268":{},"3-269":{},"3-270":{},"3-271":{},"3-272":{},"3-283":{},"3-284":{},"3-285":{},"3-286":{},"3-287":{},"3-288":{},"3-368":{},"3-370":{},"3-475":{},"3-668":{},"3-680":{},"3-689":{},"6-172":{},"6-174":{},"6-175":{},"10-41":{},"10-42":{},"10-43":{},"10-44":{},"10-45":{},"10-46":{},"10-57":{},"10-58":{},"10-59":{},"10-60":{},"10-61":{},"10-62":{},"11-50":{},"11-52":{},"12-59":{},"12-252":{},"12-264":{},"12-273":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["export/import",{"_index":4967,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["export/join",{"_index":858,"title":{"3-469":{},"12-53":{}},"name":{},"text":{"3":{}},"component":{}}],["export_fil",{"_index":3526,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["express",{"_index":432,"title":{"3-149":{},"6-143":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["ext",{"_index":4802,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ext_areacod",{"_index":4807,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ext_cc",{"_index":4833,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ext_ext",{"_index":4811,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ext_netcod",{"_index":4809,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["extarea",{"_index":4806,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["extcc",{"_index":4832,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["extend",{"_index":52,"title":{"3-417":{},"12-1":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["extendedrequest",{"_index":4058,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["extendedrespons",{"_index":4114,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["extens",{"_index":787,"title":{"3-419":{},"12-3":{}},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["extensionsnam",{"_index":1876,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["extern",{"_index":227,"title":{"3-26":{},"3-290":{},"3-291":{},"3-292":{},"3-293":{},"3-294":{},"3-295":{},"3-296":{},"3-297":{},"3-298":{},"3-299":{},"3-300":{},"3-301":{},"3-302":{},"3-303":{},"3-409":{},"3-410":{},"6-20":{},"10-64":{},"10-65":{},"10-66":{},"10-67":{},"10-68":{},"10-69":{},"10-70":{},"10-71":{},"10-72":{},"10-73":{},"10-74":{},"10-75":{},"10-76":{},"10-77":{},"11-91":{},"11-92":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["external,cn=users,cn=mi",{"_index":3608,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["externalid",{"_index":3978,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["extext",{"_index":4810,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["extnet",{"_index":4808,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["extra",{"_index":2547,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"12":{}},"component":{}}],["extract",{"_index":752,"title":{"3-393":{},"3-394":{},"11-75":{},"11-76":{}},"name":{},"text":{"3":{},"5":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["extractaudittrail",{"_index":5199,"title":{},"name":{},"text":{"11":{}},"component":{}}],["extranet",{"_index":2540,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["extreq",{"_index":4059,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["extreq.setattributes(attarr",{"_index":4090,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["extreq.setoperationidentifier(opid",{"_index":4067,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["extreq.setprovideridentifier(provid",{"_index":4071,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["extreq.setrequestid(\"spcal",{"_index":4062,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["extreq.setrequestid(\"spcall4setpassword",{"_index":4108,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ey",{"_index":510,"title":{"3-203":{},"7-12":{}},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["f",{"_index":2455,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["face",{"_index":2481,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["facet",{"_index":499,"title":{"3-196":{},"7-5":{}},"name":{},"text":{"3":{},"5":{},"7":{}},"component":{}}],["facil",{"_index":2113,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["facsimiletelephonenumb",{"_index":3588,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["fact",{"_index":4266,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["factori",{"_index":2195,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["factory.create(r",{"_index":2197,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["fail",{"_index":1369,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["failed.*st",{"_index":1515,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["failed.abort",{"_index":1523,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["failed.expir",{"_index":1343,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["failed.incomplet",{"_index":1520,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["failed.prepar",{"_index":1516,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["failed.st",{"_index":1572,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["failed.temporari",{"_index":1529,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["failur",{"_index":1428,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["fairli",{"_index":3321,"title":{},"name":{},"text":{"3":{},"7":{},"12":{}},"component":{}}],["fals",{"_index":1808,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["famili",{"_index":1469,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["familiar",{"_index":40,"title":{},"name":{},"text":{"1":{},"2":{},"3":{}},"component":{}}],["familynam",{"_index":3964,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["far",{"_index":2402,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["fashion",{"_index":2118,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["fast",{"_index":3253,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["faster",{"_index":2482,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["fatal",{"_index":5284,"title":{},"name":{},"text":{"11":{}},"component":{}}],["fax",{"_index":3026,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["faxnumb",{"_index":4813,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["featur",{"_index":78,"title":{"5":{},"3-669":{},"3-673":{},"3-715":{},"3-721":{},"5-6":{},"12-253":{},"12-257":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["feb",{"_index":1691,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["femal",{"_index":1902,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["fetch",{"_index":3224,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["few",{"_index":2162,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["fewer",{"_index":4979,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["fictiti",{"_index":2667,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["fictiv",{"_index":2655,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["field",{"_index":263,"title":{"3-43":{},"6-37":{}},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["figur",{"_index":1424,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["file",{"_index":65,"title":{"3-173":{},"3-282":{},"3-316":{},"3-389":{},"3-418":{},"6-167":{},"10-56":{},"10-90":{},"11-71":{},"12-2":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["file_attr_list",{"_index":4773,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["file_attr_list_tpl($hdms_vers",{"_index":4775,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["file_format",{"_index":3167,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["file_localcod",{"_index":3169,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["file_mod",{"_index":3168,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["filenam",{"_index":2368,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["files\\dirx\\ident",{"_index":131,"title":{},"name":{},"text":{"1":{},"2":{},"3":{}},"component":{}}],["fill",{"_index":261,"title":{"3-43":{},"6-37":{}},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"12":{}},"component":{}}],["filter",{"_index":322,"title":{"3-74":{},"3-75":{},"3-79":{},"3-115":{},"3-116":{},"3-117":{},"3-149":{},"3-181":{},"3-187":{},"3-240":{},"6-68":{},"6-69":{},"6-73":{},"6-109":{},"6-110":{},"6-111":{},"6-143":{},"6-175":{},"6-181":{},"10-14":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["filter_typ",{"_index":3136,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["filterblocks",{"_index":4585,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["filterparticip",{"_index":2393,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["final",{"_index":1512,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["find",{"_index":317,"title":{"3-70":{},"6-64":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["finder",{"_index":2377,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["findparticip",{"_index":2373,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["fine",{"_index":5042,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["finest",{"_index":1713,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["finish",{"_index":1415,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["fire",{"_index":5240,"title":{},"name":{},"text":{"11":{}},"component":{}}],["firewal",{"_index":5422,"title":{},"name":{},"text":{"12":{}},"component":{}}],["first",{"_index":1493,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["firstnam",{"_index":4253,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["fit",{"_index":1745,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"12":{}},"component":{}}],["fix",{"_index":1419,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"10":{},"12":{}},"component":{}}],["fixgroupmemb",{"_index":5089,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["flag",{"_index":866,"title":{"3-474":{},"12-58":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["flat",{"_index":4575,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["flavor",{"_index":4644,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["flexibl",{"_index":2964,"title":{},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["flow",{"_index":1767,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["folder",{"_index":792,"title":{"3-422":{},"3-449":{},"12-6":{},"12-33":{}},"name":{},"text":{"3":{},"6":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["foldermanager.java",{"_index":5479,"title":{},"name":{},"text":{"12":{}},"component":{}}],["folgend",{"_index":1645,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["follow",{"_index":31,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["font",{"_index":1462,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["forbid",{"_index":3244,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["forc",{"_index":1379,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["foreign",{"_index":3469,"title":{},"name":{},"text":{"3":{},"10":{},"11":{}},"component":{}}],["forest",{"_index":5012,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["forget",{"_index":2225,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["form",{"_index":1732,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"12":{}},"component":{}}],["formal",{"_index":1510,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["format",{"_index":747,"title":{"3-390":{},"11-72":{}},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["former",{"_index":5410,"title":{},"name":{},"text":{"12":{}},"component":{}}],["formerli",{"_index":4152,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["formul",{"_index":2474,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["forward",{"_index":5359,"title":{},"name":{},"text":{"12":{}},"component":{}}],["found",{"_index":1723,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["found_entry(memb",{"_index":5150,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["found_entry(uniquememb",{"_index":5149,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["four",{"_index":3238,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"11":{}},"component":{}}],["fourth",{"_index":3245,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["fragment",{"_index":1971,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["frame",{"_index":2582,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["framework",{"_index":55,"title":{"3-60":{},"3-61":{},"6-54":{},"6-55":{}},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"10":{},"12":{}},"component":{}}],["frankfurt",{"_index":3647,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["frau",{"_index":2040,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["fred",{"_index":1780,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["free",{"_index":3143,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["freeli",{"_index":3048,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["freewar",{"_index":5455,"title":{},"name":{},"text":{"12":{}},"component":{}}],["frequenc",{"_index":5302,"title":{},"name":{},"text":{"11":{}},"component":{}}],["frequent",{"_index":3904,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["frequently.thu",{"_index":3322,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["fritz",{"_index":1907,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["from=(group",{"_index":4936,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["from=account",{"_index":4943,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ftn",{"_index":4812,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ftp",{"_index":4706,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["fulfil",{"_index":3788,"title":{},"name":{},"text":{"3":{},"5":{},"11":{}},"component":{}}],["full",{"_index":205,"title":{"3-16":{},"3-17":{},"3-18":{},"3-19":{},"3-83":{},"3-291":{},"3-292":{},"3-293":{},"3-294":{},"3-295":{},"3-296":{},"3-395":{},"3-396":{},"6-10":{},"6-11":{},"6-12":{},"6-13":{},"6-77":{},"10-65":{},"10-66":{},"10-67":{},"10-68":{},"10-69":{},"10-70":{},"11-77":{},"11-78":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["fulli",{"_index":2284,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"11":{},"12":{}},"component":{}}],["fullimport",{"_index":2454,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["fullnam",{"_index":2483,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["fullsodcheck",{"_index":5200,"title":{},"name":{},"text":{"11":{}},"component":{}}],["function",{"_index":501,"title":{"3-197":{},"3-346":{},"7-6":{},"11-28":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["functionaluserresolvercontrol",{"_index":3781,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["further",{"_index":1414,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["furthermor",{"_index":2466,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["futur",{"_index":2889,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["g",{"_index":2456,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["gain",{"_index":2768,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["gap",{"_index":2824,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["garbag",{"_index":5292,"title":{},"name":{},"text":{"11":{}},"component":{}}],["gc",{"_index":4586,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["ge",{"_index":1897,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["geehrt",{"_index":2039,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["geehrter",{"_index":2037,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["gen",{"_index":1687,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["gender",{"_index":1899,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["genehmigen",{"_index":1642,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["gener",{"_index":420,"title":{"3-140":{},"3-151":{},"3-152":{},"3-153":{},"3-154":{},"3-347":{},"3-348":{},"3-349":{},"3-413":{},"3-414":{},"3-415":{},"3-421":{},"3-659":{},"3-669":{},"3-673":{},"3-719":{},"3-734":{},"3-747":{},"5-4":{},"5-19":{},"5-32":{},"6-134":{},"6-145":{},"6-146":{},"6-147":{},"6-148":{},"11-29":{},"11-30":{},"11-31":{},"11-95":{},"11-96":{},"11-97":{},"12-5":{},"12-243":{},"12-253":{},"12-257":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["generalized_tim",{"_index":3079,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["generalizedtim",{"_index":1944,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["generalizedtime(",{"_index":1954,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["generalizedtime2iso8601",{"_index":1943,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["generatereport",{"_index":5220,"title":{},"name":{},"text":{"11":{}},"component":{}}],["genericeventbasedprocess",{"_index":3785,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["german",{"_index":3640,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["germany,o=mi",{"_index":5354,"title":{},"name":{},"text":{"12":{}},"component":{}}],["germany,ou=sal",{"_index":5356,"title":{},"name":{},"text":{"12":{}},"component":{}}],["get",{"_index":2024,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"12":{}},"component":{}}],["get(getnextmemb",{"_index":5114,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["getactivityapplicationst",{"_index":2306,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["getauditmasteruid",{"_index":2307,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["getcalldelet",{"_index":2444,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["getcurrenttimegmt",{"_index":3078,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["getcurrenttsmemb",{"_index":5135,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["getdomainroot",{"_index":2815,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["getentry(str",{"_index":2816,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["getid",{"_index":2236,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["getldapconnect",{"_index":2380,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["getproperti",{"_index":2246,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["getresourceasstr",{"_index":2186,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["getsessionclon",{"_index":2275,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["getsrcenviron",{"_index":2532,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["getter",{"_index":2161,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["gettgtenviron",{"_index":2528,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["gettyp",{"_index":2235,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["getuniquecount",{"_index":4237,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["getuniqueorgunit",{"_index":4228,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["getvalu",{"_index":2247,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["getvalues(*propertynam",{"_index":2238,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["getwfinstid",{"_index":2313,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["getworkflowcontext",{"_index":2308,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["gi",{"_index":4596,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["gid",{"_index":4645,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["gidnumb",{"_index":5182,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["give",{"_index":2110,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["given",{"_index":1380,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["givennam",{"_index":1393,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["global",{"_index":356,"title":{"3-96":{},"3-151":{},"3-161":{},"6-90":{},"6-145":{},"6-155":{}},"name":{},"text":{"3":{},"6":{},"7":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["gn",{"_index":3589,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["go",{"_index":1525,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["goal",{"_index":4514,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["goe",{"_index":1431,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["good",{"_index":2577,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{}},"component":{}}],["googl",{"_index":870,"title":{"3-476":{},"3-477":{},"3-478":{},"3-479":{},"3-480":{},"3-481":{},"3-482":{},"3-483":{},"3-484":{},"3-485":{},"12-60":{},"12-61":{},"12-62":{},"12-63":{},"12-64":{},"12-65":{},"12-66":{},"12-67":{},"12-68":{},"12-69":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["googleapp",{"_index":3941,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["google’",{"_index":3977,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["goto",{"_index":3853,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["grace",{"_index":2575,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["grant",{"_index":3689,"title":{},"name":{},"text":{"3":{},"10":{},"11":{},"12":{}},"component":{}}],["granular",{"_index":2954,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["graph",{"_index":4331,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["graph.microsoft.com",{"_index":4329,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["graphic",{"_index":1292,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["gray",{"_index":1438,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["greater",{"_index":1894,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["group",{"_index":24,"title":{"3-432":{},"3-442":{},"3-483":{},"3-496":{},"3-519":{},"3-552":{},"3-565":{},"3-576":{},"3-589":{},"3-590":{},"3-596":{},"3-597":{},"3-608":{},"3-621":{},"3-633":{},"3-654":{},"3-657":{},"3-732":{},"3-741":{},"3-744":{},"3-766":{},"5-17":{},"5-26":{},"5-29":{},"5-51":{},"12-16":{},"12-26":{},"12-67":{},"12-80":{},"12-103":{},"12-136":{},"12-149":{},"12-160":{},"12-173":{},"12-174":{},"12-180":{},"12-181":{},"12-192":{},"12-205":{},"12-217":{},"12-238":{},"12-241":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["group(",{"_index":3744,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["group.xml",{"_index":4173,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["groupdesc",{"_index":5074,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["groupdxrnam",{"_index":4924,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["groupid",{"_index":4014,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["groupid=1,view=memb",{"_index":5073,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["groupid=dxrname,type=group",{"_index":4289,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["groupmemb",{"_index":4955,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["groupnam",{"_index":4591,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["groupnameatt",{"_index":4022,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["groupodbcnam",{"_index":5077,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["groupofnam",{"_index":5082,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["groupofuniquenam",{"_index":5133,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["grouprootint",{"_index":2896,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["groups,\"${env.assoct",{"_index":3936,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["groups,\"+${env.role_ts_group_bas",{"_index":4356,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["groups.dxrgroupnam",{"_index":4940,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["groups.id",{"_index":4044,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["groups/account",{"_index":4945,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["groups/membership",{"_index":1167,"title":{"3-705":{},"12-289":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["groups/rol",{"_index":4343,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["groups/secur",{"_index":4342,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["groups/servic",{"_index":4344,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["groupsassign",{"_index":3477,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["group’",{"_index":4241,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["grp",{"_index":4032,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["gt",{"_index":1893,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["guarante",{"_index":1965,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"12":{}},"component":{}}],["guess",{"_index":4679,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["gui",{"_index":3837,"title":{},"name":{},"text":{"3":{},"5":{},"11":{},"12":{}},"component":{}}],["guid",{"_index":45,"title":{"3":{},"3-140":{},"3-151":{},"3-152":{},"3-153":{},"3-154":{},"6-134":{},"6-145":{},"6-146":{},"6-147":{},"6-148":{}},"name":{"3":{}},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["guide.th",{"_index":3405,"title":{},"name":{},"text":{"3":{},"9":{}},"component":{}}],["guidelin",{"_index":517,"title":{"3-207":{},"3-208":{},"7-16":{},"7-17":{}},"name":{},"text":{"3":{},"7":{},"12":{}},"component":{}}],["guidparam",{"_index":2953,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["gzip",{"_index":3862,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["gzip.ex",{"_index":3865,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["h",{"_index":2457,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["half",{"_index":3364,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["han",{"_index":1909,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["hand",{"_index":2105,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"11":{},"12":{}},"component":{}}],["handl",{"_index":215,"title":{"3-20":{},"3-28":{},"3-107":{},"3-108":{},"3-146":{},"3-150":{},"3-164":{},"3-165":{},"3-166":{},"3-167":{},"3-168":{},"3-169":{},"3-170":{},"3-171":{},"3-172":{},"3-173":{},"3-174":{},"3-176":{},"3-188":{},"3-282":{},"3-315":{},"3-675":{},"3-705":{},"6-14":{},"6-22":{},"6-101":{},"6-102":{},"6-140":{},"6-144":{},"6-158":{},"6-159":{},"6-160":{},"6-161":{},"6-162":{},"6-163":{},"6-164":{},"6-165":{},"6-166":{},"6-167":{},"6-168":{},"6-170":{},"6-182":{},"10-56":{},"10-89":{},"12-259":{},"12-289":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["handler",{"_index":1341,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["hans,ou=human",{"_index":2009,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["hard",{"_index":3462,"title":{},"name":{},"text":{"3":{},"5":{},"10":{},"11":{},"12":{}},"component":{}}],["hardcod",{"_index":4663,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["hardwar",{"_index":5010,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["has_head",{"_index":3546,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["hash",{"_index":1827,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["hashmap",{"_index":2605,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["have",{"_index":2445,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["hdm",{"_index":1144,"title":{"3-692":{},"3-693":{},"3-694":{},"12-276":{},"12-277":{},"12-278":{}},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["hdms#12345#telephonenumber#+49",{"_index":4698,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["hdms#23456#facsimiletelephonenumber#+49",{"_index":4700,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["hdms#34567",{"_index":4703,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["hdms/hipath",{"_index":4771,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["hdms1",{"_index":3025,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["hdms1#12345#faxnumber#+49",{"_index":3020,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["hdms1#12345#telephonenumber#+49",{"_index":3011,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["hdms1#34526#telephonenumber#+49",{"_index":3015,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["hdmsagent",{"_index":4684,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["hdmsuser",{"_index":4715,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["hdmsuser'",{"_index":4736,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["hdmsuser:req",{"_index":4735,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["hdmsuser@:req",{"_index":4734,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["hdmsuser@:req/xxx",{"_index":4737,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["hdmsuser’",{"_index":4732,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["head",{"_index":1451,"title":{},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["header",{"_index":1649,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["healthcar",{"_index":5336,"title":{},"name":{},"text":{"12":{}},"component":{}}],["heap",{"_index":5283,"title":{},"name":{},"text":{"11":{}},"component":{}}],["held",{"_index":4007,"title":{},"name":{},"text":{"3":{},"5":{},"11":{},"12":{}},"component":{}}],["hello",{"_index":1915,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["help",{"_index":175,"title":{},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"11":{},"12":{}},"component":{}}],["helper",{"_index":2814,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["henc",{"_index":2484,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["henry;5208;internal;de;mi",{"_index":3554,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["here",{"_index":1489,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["herr",{"_index":2038,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["hh:mm:ss.sss",{"_index":5270,"title":{},"name":{},"text":{"11":{}},"component":{}}],["hicom",{"_index":4661,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["hide",{"_index":2967,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["hierarch",{"_index":1088,"title":{"3-658":{},"3-662":{},"12-242":{},"12-246":{}},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["hierarchi",{"_index":3774,"title":{},"name":{},"text":{"3":{},"5":{},"11":{}},"component":{}}],["high",{"_index":179,"title":{},"name":{},"text":{"2":{},"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["higher",{"_index":3164,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["highest",{"_index":1747,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["highli",{"_index":2839,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{}},"component":{}}],["hint",{"_index":1656,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"12":{}},"component":{}}],["hipath",{"_index":1099,"title":{"3-665":{},"3-671":{},"3-676":{},"3-677":{},"3-678":{},"3-679":{},"3-682":{},"3-683":{},"3-684":{},"3-685":{},"3-691":{},"3-695":{},"3-696":{},"12-249":{},"12-255":{},"12-260":{},"12-261":{},"12-262":{},"12-263":{},"12-266":{},"12-267":{},"12-268":{},"12-269":{},"12-275":{},"12-279":{},"12-280":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["hipath2id",{"_index":1137,"title":{"3-687":{},"3-690":{},"12-271":{},"12-274":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["hipath2ident_hipath",{"_index":1109,"title":{"3-672":{},"12-256":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["hipath2meta_hipath",{"_index":4665,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["histor",{"_index":4277,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["histori",{"_index":84,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"7":{},"11":{}},"component":{}}],["historyofchanges.doc",{"_index":87,"title":{},"name":{},"text":{"1":{},"2":{},"3":{}},"component":{}}],["historyofchanges.txt",{"_index":86,"title":{},"name":{},"text":{"1":{},"2":{},"3":{}},"component":{}}],["hit",{"_index":2955,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["hold",{"_index":2134,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["home",{"_index":4728,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["home/.ssh",{"_index":4758,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["home/.ssh/authorized_key",{"_index":4761,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["home/metapublickey.txt",{"_index":4760,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["home/req/xxx.req",{"_index":4739,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["home/req/xxx.rsp",{"_index":4747,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["homefold",{"_index":5476,"title":{},"name":{},"text":{"12":{}},"component":{}}],["homemta",{"_index":5412,"title":{},"name":{},"text":{"12":{}},"component":{}}],["homogen",{"_index":2503,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["hook",{"_index":299,"title":{"3-59":{},"3-94":{},"3-95":{},"3-96":{},"3-97":{},"3-98":{},"3-99":{},"3-100":{},"3-119":{},"3-120":{},"3-121":{},"3-123":{},"3-124":{},"3-126":{},"3-157":{},"3-159":{},"3-468":{},"6-53":{},"6-88":{},"6-89":{},"6-90":{},"6-91":{},"6-92":{},"6-93":{},"6-94":{},"6-113":{},"6-114":{},"6-115":{},"6-117":{},"6-118":{},"6-120":{},"6-151":{},"6-153":{},"12-52":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["hooks.th",{"_index":3417,"title":{},"name":{},"text":{"3":{},"10":{},"11":{},"12":{}},"component":{}}],["hook’",{"_index":2443,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["host",{"_index":1760,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["host1",{"_index":4722,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["host2",{"_index":4725,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["host’",{"_index":4369,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["hour",{"_index":3236,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"11":{}},"component":{}}],["housekeep",{"_index":2811,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["hr",{"_index":3283,"title":{},"name":{},"text":{"3":{},"7":{},"10":{}},"component":{}}],["hr.mdb",{"_index":3497,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["hr2ident",{"_index":3659,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["html",{"_index":199,"title":{"3-12":{},"6-6":{}},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["http",{"_index":796,"title":{"3-425":{},"12-9":{}},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["http/http",{"_index":3957,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["http/soap",{"_index":3297,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["http://$(dxmaddress):$(dxmdataport)//requestworkflow/reqwfsvc",{"_index":1762,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["http://openicf.forgerock.org/connector",{"_index":4636,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["http://setacl.sourceforge.net",{"_index":5473,"title":{},"name":{},"text":{"12":{}},"component":{}}],["http://sourceforge.net/projects/winex",{"_index":5463,"title":{},"name":{},"text":{"12":{}},"component":{}}],["http://technet.microsoft.com/en",{"_index":5460,"title":{},"name":{},"text":{"12":{}},"component":{}}],["http://www.codeguru.com/cpp/i",{"_index":5457,"title":{},"name":{},"text":{"12":{}},"component":{}}],["http://www.forgerock.org/openicf",{"_index":4634,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["http://www.gnu.org",{"_index":3864,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["httppassword",{"_index":4244,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["https://$(dxmaddress):$(dxmsecureport)//requestworkflow/reqwfsvc",{"_index":1763,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["https://admin.google.com",{"_index":3953,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["https://console.developers.google.com",{"_index":3947,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["https://developer.salesforce.com/page/getting_started_with_the_force.com_rest_api",{"_index":4449,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["https://developers.google.com/accounts/docs/oauth2login",{"_index":3945,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["https://developers.ringcentral.com",{"_index":4615,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["https://graph.microsoft.com",{"_index":4332,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["https://localhost:88123/rest",{"_index":4453,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["https://login.microsoftonline.com/*tenantid/oauth2/token",{"_index":4330,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["https://login.microsoftonline.com/tenantid/oauth2/token",{"_index":4333,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["https://server:port/sites/sit",{"_index":4548,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["https://www.googleapis.com/auth/admin.directory.group",{"_index":3954,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["https://www.googleapis.com/auth/admin.directory.us",{"_index":3955,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["https://www.ibm.com/docs/en/zos/2.5.0?topic=inform",{"_index":4402,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["https://www.oasi",{"_index":3618,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["hub",{"_index":5151,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["huber",{"_index":1906,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["huge",{"_index":4440,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["human",{"_index":1262,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"12":{}},"component":{}}],["hundr",{"_index":5093,"title":{},"name":{},"text":{"3":{},"5":{},"11":{}},"component":{}}],["husid",{"_index":4894,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["hyphen",{"_index":4447,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["i.",{"_index":2801,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["i:0#.w",{"_index":4564,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["i:0#.w|domain1",{"_index":4580,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ibm",{"_index":930,"title":{"3-523":{},"3-530":{},"3-531":{},"12-107":{},"12-114":{},"12-115":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ibm’",{"_index":4983,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["icon",{"_index":3223,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["id",{"_index":860,"title":{"3-470":{},"12-54":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["id!=nul",{"_index":2637,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["id\",fals",{"_index":4047,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["id.adddsmlvalue(pkey.getdsmlvalue(0",{"_index":4078,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["id.getidentifierchoice().getid",{"_index":2640,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["id.gettyp",{"_index":2639,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["id.setname(\"id",{"_index":4077,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["id=\"+resource.getid",{"_index":2177,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["idattr",{"_index":3843,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["idattr(mail",{"_index":3816,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["idea",{"_index":2321,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{}},"component":{}}],["ideal",{"_index":2990,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ident",{"_index":1,"title":{"1":{},"1-1":{},"2-1":{},"2-2":{},"3-3":{},"3-4":{},"3-56":{},"3-57":{},"3-178":{},"3-183":{},"3-221":{},"3-235":{},"3-244":{},"3-245":{},"3-246":{},"3-253":{},"3-258":{},"3-266":{},"3-273":{},"3-424":{},"3-475":{},"3-530":{},"3-531":{},"3-595":{},"3-596":{},"3-597":{},"3-598":{},"3-599":{},"3-702":{},"3-705":{},"6-50":{},"6-51":{},"6-172":{},"6-177":{},"8-3":{},"10-9":{},"10-18":{},"10-19":{},"10-20":{},"10-27":{},"10-32":{},"10-40":{},"10-47":{},"12-8":{},"12-59":{},"12-114":{},"12-115":{},"12-179":{},"12-180":{},"12-181":{},"12-182":{},"12-183":{},"12-286":{},"12-289":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}}}],["ident2ad",{"_index":2979,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ident2csvfil",{"_index":3718,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["ident2dsmlfil",{"_index":3654,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["ident2hipath",{"_index":1136,"title":{"3-687":{},"3-688":{},"3-689":{},"12-271":{},"12-272":{},"12-273":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ident2hipath_hipath",{"_index":1104,"title":{"3-668":{},"12-252":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ident2jdbc",{"_index":3724,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["ident2ldap_valid",{"_index":5092,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["ident2ldiffil",{"_index":3642,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["ident2odbc",{"_index":3721,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["ident2odbc_",{"_index":4948,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ident2odbc_syncaccount_metacp",{"_index":4946,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ident2odbc_syncaccountdel",{"_index":4957,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ident2odbc_syncgroup_metacp",{"_index":4951,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ident2odbc_syncgroupdel",{"_index":4958,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ident2odbc_syncgroupmembers_metacp",{"_index":4954,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ident2odbc_syncgroupmembers_odbcimport",{"_index":4956,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ident2report",{"_index":5316,"title":{},"name":{},"text":{"11":{}},"component":{}}],["ident2xmlfil",{"_index":3649,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["ident2xslt",{"_index":3650,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["ident_citrix",{"_index":5482,"title":{},"name":{},"text":{"12":{}},"component":{}}],["ident_dashboard_sync",{"_index":5034,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["ident_dxa_realtim",{"_index":5058,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["ident_googleapps_realtim",{"_index":3940,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ident_hipath",{"_index":1102,"title":{"3-667":{},"12-251":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ident_imprivata_realtim",{"_index":3984,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ident_imprivataextranetportal_realtim",{"_index":3985,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ident_jdbc_sync",{"_index":5065,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["ident_ldap_sync",{"_index":5081,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["ident_ldapxxl_sync",{"_index":5099,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["ident_notes_realtim",{"_index":4239,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ident_notes_sync",{"_index":5153,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["ident_odbc_sync",{"_index":4911,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ident_office365_realtim",{"_index":4326,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ident_racf_realtim",{"_index":4387,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ident_racf_sync",{"_index":4982,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ident_salesforce_realtim",{"_index":4430,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ident_salesforce_slsfaccounts_realtim",{"_index":4431,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ident_salesforce_slsfcontacts_realtim",{"_index":4435,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ident_sharepoint_realtime_clust",{"_index":4522,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ident_sipass_sync",{"_index":5002,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ident_svcmgmt_realtim",{"_index":4507,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ident_unifyoffice_realtim",{"_index":4607,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ident_unix",{"_index":4625,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["ident_winla",{"_index":4372,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["identif",{"_index":1086,"title":{"3-657":{},"12-241":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["identifi",{"_index":364,"title":{"3-102":{},"3-151":{},"3-305":{},"6-96":{},"6-145":{},"10-79":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["identifier:dn",{"_index":3572,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["identifier=88",{"_index":3692,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["identifiertyp",{"_index":2638,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["identity/servicelayerconnector",{"_index":3465,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["identity_ldap_sync",{"_index":5087,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["identitydomain",{"_index":2452,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["identitystor",{"_index":2433,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["identityt",{"_index":5046,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["identitytroubleshoot",{"_index":68,"title":{},"name":{},"text":{"1":{},"2":{},"3":{}},"component":{}}],["identity’",{"_index":1503,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["identodbc_syncgroup_odbcimport",{"_index":4952,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["idf",{"_index":4843,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["idf_cable_pair",{"_index":4845,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["idfcablepair",{"_index":4844,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["idmaa",{"_index":3423,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["idmact",{"_index":2215,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["idmap",{"_index":4027,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["idmapping.java",{"_index":2608,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["idmjob",{"_index":2399,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["idmworkflow",{"_index":2216,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["idmworkflowcontext",{"_index":2217,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["idvalu",{"_index":2634,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ieventprocessor",{"_index":2813,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["if(connectorconfig",{"_index":2590,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["iglobaluserhook",{"_index":2509,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ignor",{"_index":1994,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["illustr",{"_index":1425,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["immedi",{"_index":1724,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["immutablejob",{"_index":1871,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["impdata",{"_index":4821,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["implement",{"_index":271,"title":{"3-46":{},"3-49":{},"3-57":{},"3-59":{},"3-60":{},"3-63":{},"3-70":{},"3-72":{},"3-74":{},"3-75":{},"3-76":{},"3-78":{},"3-96":{},"3-97":{},"3-98":{},"3-120":{},"3-124":{},"6-40":{},"6-43":{},"6-51":{},"6-53":{},"6-54":{},"6-57":{},"6-64":{},"6-66":{},"6-68":{},"6-69":{},"6-70":{},"6-72":{},"6-90":{},"6-91":{},"6-92":{},"6-114":{},"6-118":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["implementationlanguag",{"_index":2511,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["impli",{"_index":3825,"title":{},"name":{},"text":{"3":{},"5":{},"11":{},"12":{}},"component":{}}],["implicit",{"_index":1440,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["implicitli",{"_index":3960,"title":{},"name":{},"text":{"3":{},"5":{},"11":{},"12":{}},"component":{}}],["import",{"_index":481,"title":{"3-183":{},"3-185":{},"3-186":{},"3-187":{},"3-228":{},"3-229":{},"3-230":{},"3-231":{},"3-232":{},"3-233":{},"3-236":{},"3-237":{},"3-238":{},"3-241":{},"3-247":{},"3-248":{},"3-249":{},"3-250":{},"3-252":{},"3-254":{},"3-255":{},"3-256":{},"3-259":{},"3-260":{},"3-261":{},"3-262":{},"3-263":{},"3-264":{},"3-276":{},"3-277":{},"3-278":{},"3-279":{},"3-280":{},"3-281":{},"3-290":{},"3-291":{},"3-292":{},"3-293":{},"3-294":{},"3-295":{},"3-296":{},"3-297":{},"3-298":{},"3-299":{},"3-300":{},"3-301":{},"3-302":{},"3-369":{},"3-371":{},"3-672":{},"6-177":{},"6-179":{},"6-180":{},"6-181":{},"10-2":{},"10-3":{},"10-4":{},"10-5":{},"10-6":{},"10-7":{},"10-10":{},"10-11":{},"10-12":{},"10-15":{},"10-21":{},"10-22":{},"10-23":{},"10-24":{},"10-26":{},"10-28":{},"10-29":{},"10-30":{},"10-33":{},"10-34":{},"10-35":{},"10-36":{},"10-37":{},"10-38":{},"10-50":{},"10-51":{},"10-52":{},"10-53":{},"10-54":{},"10-55":{},"10-64":{},"10-65":{},"10-66":{},"10-67":{},"10-68":{},"10-69":{},"10-70":{},"10-71":{},"10-72":{},"10-73":{},"10-74":{},"10-75":{},"10-76":{},"11-51":{},"11-53":{},"12-256":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["import.ini",{"_index":5028,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["import/export",{"_index":3674,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["import_dat",{"_index":4822,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["import_fil",{"_index":3528,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["imposs",{"_index":2996,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["imprivata",{"_index":883,"title":{"3-486":{},"3-487":{},"3-488":{},"3-489":{},"3-490":{},"3-491":{},"3-492":{},"12-70":{},"12-71":{},"12-72":{},"12-73":{},"12-74":{},"12-75":{},"12-76":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["imprivataextranetport",{"_index":3986,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["improv",{"_index":4638,"title":{},"name":{},"text":{"3":{},"5":{},"11":{},"12":{}},"component":{}}],["in/out",{"_index":3126,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["in_out",{"_index":4109,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["inact",{"_index":1437,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["includ",{"_index":1288,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["incom",{"_index":2434,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["incomplet",{"_index":1314,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["inconsist",{"_index":4678,"title":{},"name":{},"text":{"3":{},"5":{},"11":{},"12":{}},"component":{}}],["incorrect",{"_index":2922,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["increas",{"_index":2995,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["increment",{"_index":3680,"title":{},"name":{},"text":{"3":{},"10":{},"11":{},"12":{}},"component":{}}],["independ",{"_index":1358,"title":{},"name":{},"text":{"3":{},"6":{},"9":{},"11":{},"12":{}},"component":{}}],["index",{"_index":6,"title":{},"name":{"1":{}},"text":{"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["indic",{"_index":121,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["indirect",{"_index":3905,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["indirectli",{"_index":2111,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["individu",{"_index":1596,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"12":{}},"component":{}}],["inetorgperson",{"_index":2985,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["inf",{"_index":3258,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["influenc",{"_index":1729,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["info",{"_index":2158,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["info1",{"_index":4840,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["info19",{"_index":4847,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["info2",{"_index":4841,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["info3",{"_index":4668,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["info4",{"_index":4842,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["info5",{"_index":4846,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["infoorderrequest",{"_index":2229,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["inform",{"_index":51,"title":{"3-421":{},"3-659":{},"3-660":{},"3-661":{},"3-734":{},"3-747":{},"5-19":{},"5-32":{},"12-5":{},"12-243":{},"12-244":{},"12-245":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["infrastructur",{"_index":3579,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["infrequ",{"_index":5400,"title":{},"name":{},"text":{"12":{}},"component":{}}],["ing",{"_index":2478,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["inherit",{"_index":1513,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["ini",{"_index":2965,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["init",{"_index":2945,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["init_mod",{"_index":3147,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["initi",{"_index":760,"title":{"3-397":{},"3-398":{},"11-79":{},"11-80":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["initializeprivilegeforreapprov",{"_index":5301,"title":{},"name":{},"text":{"11":{}},"component":{}}],["initializereapprov",{"_index":5201,"title":{},"name":{},"text":{"11":{}},"component":{}}],["initialload",{"_index":4654,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["initiatorentri",{"_index":1839,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["initiator’",{"_index":2017,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["input",{"_index":100,"title":{"3-143":{},"6-137":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["inputchannel",{"_index":5139,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["insensit",{"_index":5384,"title":{},"name":{},"text":{"12":{}},"component":{}}],["insert",{"_index":1602,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["inserted/upd",{"_index":4690,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["insid",{"_index":1264,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["inspect",{"_index":2732,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["instal",{"_index":42,"title":{"3-419":{},"12-3":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["install_path",{"_index":123,"title":{},"name":{},"text":{"1":{},"2":{},"3":{}},"component":{}}],["install_path*/data/extension/new",{"_index":3496,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["install_path*/data/ldifagr/dirx",{"_index":3707,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["install_path*/data/personal.mdb",{"_index":3726,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["install_path*/id",{"_index":2059,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["install_path*/schema/tool",{"_index":5323,"title":{},"name":{},"text":{"12":{}},"component":{}}],["install_path*\\id",{"_index":1684,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["install_path*\\lib\\centraltcl",{"_index":2847,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["install_path*\\samples\\ads\\script",{"_index":5426,"title":{},"name":{},"text":{"12":{}},"component":{}}],["install_path*\\web\\webcenter\\web",{"_index":3257,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["install_path/*data/data.ldif",{"_index":3518,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["install_path/*data/datatest.csv",{"_index":3537,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["install_path/connectors/openicf/bundles/java",{"_index":4639,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["install_path/id",{"_index":3738,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["install_path/schema/tool",{"_index":5331,"title":{},"name":{},"text":{"12":{}},"component":{}}],["install_path\\*agents\\hdm",{"_index":4707,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["install_path\\samples\\ads\\script",{"_index":5378,"title":{},"name":{},"text":{"12":{}},"component":{}}],["install_path_*id",{"_index":1703,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["instanc",{"_index":254,"title":{"3-39":{},"3-40":{},"3-51":{},"3-52":{},"3-65":{},"3-66":{},"6-33":{},"6-34":{},"6-45":{},"6-46":{},"6-59":{},"6-60":{}},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["instanceof",{"_index":4110,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["instance’",{"_index":1824,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["instanti",{"_index":2780,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"11":{}},"component":{}}],["instead",{"_index":1347,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["instruct",{"_index":2400,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"9":{},"10":{},"12":{}},"component":{}}],["int",{"_index":2593,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["int2zulu",{"_index":3082,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["integ",{"_index":1870,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["integer(connectionconfig.getport",{"_index":2594,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["integr",{"_index":54,"title":{"3-750":{},"5-35":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"10":{},"12":{}},"component":{}}],["intend",{"_index":17,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["interact",{"_index":21,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"12":{}},"component":{}}],["interactiveattribut",{"_index":1880,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["interactivetaskdescript",{"_index":1879,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["intercept",{"_index":2504,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["interfac",{"_index":49,"title":{"3-158":{},"3-159":{},"3-160":{},"6-152":{},"6-153":{},"6-154":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["intermedi",{"_index":3665,"title":{},"name":{},"text":{"3":{},"10":{},"11":{}},"component":{}}],["intern",{"_index":697,"title":{"3-350":{},"3-351":{},"3-352":{},"11-32":{},"11-33":{},"11-34":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["internal/connector_server.html",{"_index":4637,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["internet",{"_index":4337,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["interop",{"_index":3948,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["interpret",{"_index":2569,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["interrupt",{"_index":2119,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["interruptedexcept",{"_index":2121,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["intersect",{"_index":3461,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["interv",{"_index":1556,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{}},"component":{}}],["intranet",{"_index":5486,"title":{},"name":{},"text":{"12":{}},"component":{}}],["intranet.thi",{"_index":3311,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["introduc",{"_index":3909,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["introduct",{"_index":33,"title":{},"name":{},"text":{"1":{},"2":{},"3":{}},"component":{}}],["invalid",{"_index":1949,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["invis",{"_index":5044,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["invision1",{"_index":5049,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["invision2",{"_index":5050,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["invok",{"_index":2323,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["involv",{"_index":2490,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["ip",{"_index":2971,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["ip1",{"_index":4724,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ip2",{"_index":4726,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ipassworduserhook",{"_index":2769,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ipc",{"_index":5448,"title":{},"name":{},"text":{"12":{}},"component":{}}],["iper.adm",{"_index":3685,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["is:_",{"_index":1702,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["isact",{"_index":4455,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["isapplyattributechang",{"_index":2301,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["isdelet",{"_index":5398,"title":{},"name":{},"text":{"12":{}},"component":{}}],["isevaluateassign",{"_index":2302,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["islocked.glob_lock",{"_index":4503,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["islocked.local_lock",{"_index":4502,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["iso",{"_index":3683,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["isstartapprovalworkflow",{"_index":2303,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["issu",{"_index":1186,"title":{"3-719":{},"5-4":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["istate.deleted.equalsignorecase(tgtst",{"_index":2701,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["it,o=mi",{"_index":2387,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["it.hasnext",{"_index":2191,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["it.next",{"_index":2409,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ital",{"_index":101,"title":{},"name":{},"text":{"1":{},"2":{},"3":{}},"component":{}}],["item",{"_index":109,"title":{"3-28":{},"6-22":{}},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["items.otherwis",{"_index":3318,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["iter",{"_index":2406,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["itself",{"_index":1571,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["it’",{"_index":1394,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["iuserhook",{"_index":2510,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["iuserhookext",{"_index":2531,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["j",{"_index":1499,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["j).the",{"_index":1282,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["jar",{"_index":2124,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["java",{"_index":139,"title":{"3-70":{},"3-72":{},"3-73":{},"3-81":{},"3-82":{},"3-85":{},"3-89":{},"3-93":{},"3-101":{},"3-227":{},"3-319":{},"3-420":{},"3-646":{},"6-64":{},"6-66":{},"6-67":{},"6-75":{},"6-76":{},"6-79":{},"6-83":{},"6-87":{},"6-95":{},"10-1":{},"11-1":{},"12-4":{},"12-230":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["java.io.printwrit",{"_index":1918,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["java.lang.boolean",{"_index":2089,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["java.lang.str",{"_index":2090,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["java.text.simpledateformat",{"_index":1940,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["java.util.hashmap",{"_index":4099,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["javadoc",{"_index":2155,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["javamap",{"_index":4037,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["javaplugin",{"_index":1914,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["javapluginext",{"_index":1931,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["javascript",{"_index":3331,"title":{},"name":{},"text":{"3":{},"5":{},"7":{},"12":{}},"component":{}}],["javascript.error",{"_index":4232,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["javasourc",{"_index":2747,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["jco",{"_index":4492,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["jdbc",{"_index":563,"title":{"3-239":{},"3-251":{},"3-498":{},"3-499":{},"3-500":{},"3-501":{},"3-503":{},"3-504":{},"3-505":{},"3-509":{},"3-733":{},"3-734":{},"3-735":{},"3-736":{},"3-737":{},"5-18":{},"5-19":{},"5-20":{},"5-21":{},"5-22":{},"10-13":{},"10-25":{},"12-82":{},"12-83":{},"12-84":{},"12-85":{},"12-87":{},"12-88":{},"12-89":{},"12-93":{}},"name":{},"text":{"3":{},"5":{},"10":{},"12":{}},"component":{}}],["jdbc2ident",{"_index":3723,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["jdbc2ident_syncgroup_jdbcexport",{"_index":5068,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["jdbc2ident_syncgroup_metacp",{"_index":5079,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["jdbc2ident_valid",{"_index":5064,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["jdbc:odbc:new",{"_index":3493,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["jf",{"_index":4017,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["jk",{"_index":4545,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["jm",{"_index":2772,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["job",{"_index":277,"title":{"3-49":{},"3-50":{},"3-55":{},"3-57":{},"3-60":{},"3-61":{},"3-63":{},"3-64":{},"3-69":{},"3-686":{},"6-43":{},"6-44":{},"6-49":{},"6-51":{},"6-54":{},"6-55":{},"6-57":{},"6-58":{},"6-63":{},"12-270":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["job.xml",{"_index":2334,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["job/param",{"_index":2095,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["job/params/param1",{"_index":2098,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["job/params/param2",{"_index":2099,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["job/port[@name='ts']/channel/mappingdefinit",{"_index":2736,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["joblet",{"_index":327,"title":{"3-77":{},"3-78":{},"6-71":{},"6-72":{}},"name":{},"text":{"3":{},"6":{}},"component":{}}],["job’",{"_index":1873,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["join",{"_index":450,"title":{"3-160":{},"3-661":{},"3-663":{},"3-664":{},"6-154":{},"12-245":{},"12-247":{},"12-248":{}},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["join_express",{"_index":3137,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["joinback",{"_index":4780,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["joined!=nul",{"_index":2635,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["joined.getid",{"_index":2636,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["joined_entri",{"_index":3118,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["joinedattr",{"_index":4107,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["joinedentri",{"_index":2556,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["joinedentry.cn",{"_index":2560,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["joinedentry.dxrnam",{"_index":3973,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["joinedentry.givennam",{"_index":3970,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["joinedentry.id",{"_index":3605,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["joinedentry.sn",{"_index":3971,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["joinedid",{"_index":4106,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["joint",{"_index":724,"title":{"3-372":{},"3-373":{},"11-54":{},"11-55":{}},"name":{},"text":{"3":{},"11":{}},"component":{}}],["json",{"_index":3479,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["juli",{"_index":5247,"title":{},"name":{},"text":{"11":{}},"component":{}}],["junior",{"_index":3901,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["junit",{"_index":2725,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["k",{"_index":5260,"title":{},"name":{},"text":{"11":{}},"component":{}}],["kb",{"_index":2849,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["keep",{"_index":1422,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["kept",{"_index":2600,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["kerbero",{"_index":5164,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["key",{"_index":1634,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["key_act_application_st",{"_index":2213,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["keygen",{"_index":4755,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["keys=groupdxrname,membershipgroupid,membershipaccountid",{"_index":4934,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["keystor",{"_index":4130,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["keystore_filenam",{"_index":4542,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["keytool",{"_index":3997,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["keyword",{"_index":95,"title":{},"name":{},"text":{"1":{},"2":{},"3":{}},"component":{}}],["kill",{"_index":2579,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["kind",{"_index":2004,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["know",{"_index":2476,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"12":{}},"component":{}}],["known",{"_index":3480,"title":{},"name":{},"text":{"3":{},"5":{},"10":{},"12":{}},"component":{}}],["l",{"_index":3975,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["l1",{"_index":4828,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["l20",{"_index":4829,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["l_prefix",{"_index":4831,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["label",{"_index":4457,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["landscap",{"_index":3856,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["languag",{"_index":231,"title":{"3-27":{},"6-21":{}},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["languagelocalekey",{"_index":4467,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["lappend",{"_index":4921,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["larg",{"_index":1564,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["last",{"_index":1651,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["lastdeltavalu",{"_index":2472,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["lastnam",{"_index":4252,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["later",{"_index":1672,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["latest",{"_index":3041,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["latin",{"_index":3682,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["latter",{"_index":3249,"title":{},"name":{},"text":{"3":{},"6":{},"8":{}},"component":{}}],["launch",{"_index":1769,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["lavina",{"_index":1481,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["lavina.pitton@mi",{"_index":1996,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["layer",{"_index":1735,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["layout",{"_index":1203,"title":{"3-735":{},"5-20":{}},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["layout=\"properti",{"_index":2097,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["lc",{"_index":4317,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ld",{"_index":2294,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ldap",{"_index":384,"title":{"3-114":{},"3-290":{},"3-291":{},"3-292":{},"3-293":{},"3-294":{},"3-295":{},"3-296":{},"3-297":{},"3-298":{},"3-299":{},"3-300":{},"3-301":{},"3-302":{},"3-458":{},"3-512":{},"3-513":{},"3-514":{},"3-515":{},"3-516":{},"3-517":{},"3-518":{},"3-522":{},"3-739":{},"3-740":{},"3-743":{},"3-746":{},"3-747":{},"5-24":{},"5-25":{},"5-28":{},"5-31":{},"5-32":{},"6-108":{},"10-64":{},"10-65":{},"10-66":{},"10-67":{},"10-68":{},"10-69":{},"10-70":{},"10-71":{},"10-72":{},"10-73":{},"10-74":{},"10-75":{},"10-76":{},"12-42":{},"12-96":{},"12-97":{},"12-98":{},"12-99":{},"12-100":{},"12-101":{},"12-102":{},"12-106":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["ldap.pages",{"_index":5236,"title":{},"name":{},"text":{"11":{}},"component":{}}],["ldap2_ident_valid",{"_index":5080,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["ldap_ident_realtime_delta",{"_index":4147,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ldap_oth",{"_index":3105,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ldapadmin",{"_index":3585,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["ldapcon",{"_index":2280,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ldapconfigur",{"_index":3859,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["ldapconnect",{"_index":2299,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ldapconnector",{"_index":5174,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["ldapextopadmin",{"_index":3861,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["ldapjdk.jar",{"_index":2350,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ldapxxl",{"_index":1221,"title":{"3-748":{},"5-33":{}},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["ldapxxl2_ident_valid",{"_index":5098,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["ldif",{"_index":586,"title":{"3-259":{},"3-260":{},"3-261":{},"3-262":{},"3-263":{},"3-264":{},"3-267":{},"3-268":{},"3-269":{},"3-270":{},"3-271":{},"3-272":{},"3-311":{},"3-313":{},"3-314":{},"3-418":{},"3-419":{},"10-33":{},"10-34":{},"10-35":{},"10-36":{},"10-37":{},"10-38":{},"10-41":{},"10-42":{},"10-43":{},"10-44":{},"10-45":{},"10-46":{},"10-85":{},"10-87":{},"10-88":{},"12-2":{},"12-3":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["ldifagreementfold",{"_index":3178,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ldifchangeoutput",{"_index":3177,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ldiffil",{"_index":3517,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["ldiffile2csvfil",{"_index":3664,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["ldiffile2id",{"_index":3639,"title":{},"name":{},"text":{"3":{},"10":{},"11":{}},"component":{}}],["le",{"_index":1895,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["lead",{"_index":1985,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["learn",{"_index":3410,"title":{},"name":{},"text":{"3":{},"9":{},"11":{}},"component":{}}],["leav",{"_index":2083,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["left",{"_index":1465,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"12":{}},"component":{}}],["legaci",{"_index":5022,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["length",{"_index":2243,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["less",{"_index":3237,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["let",{"_index":1388,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"11":{},"12":{}},"component":{}}],["letter",{"_index":4164,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["let’",{"_index":2439,"title":{},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["level",{"_index":1371,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"11":{},"12":{}},"component":{}}],["leverag",{"_index":2043,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["lexicograph",{"_index":2442,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["li",{"_index":4319,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["lib",{"_index":1874,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["lib/secur",{"_index":5163,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["librari",{"_index":2122,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"11":{}},"component":{}}],["licens",{"_index":1715,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["licenseid",{"_index":4476,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["life",{"_index":3802,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["lifetim",{"_index":1315,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["limit",{"_index":79,"title":{"3-427":{},"3-451":{},"3-460":{},"3-477":{},"3-487":{},"3-499":{},"3-513":{},"3-524":{},"3-534":{},"3-545":{},"3-558":{},"3-569":{},"3-580":{},"3-583":{},"3-601":{},"3-613":{},"3-623":{},"3-636":{},"3-644":{},"3-666":{},"3-698":{},"3-720":{},"3-724":{},"3-758":{},"5-5":{},"5-9":{},"5-43":{},"12-11":{},"12-35":{},"12-44":{},"12-61":{},"12-71":{},"12-83":{},"12-97":{},"12-108":{},"12-118":{},"12-129":{},"12-142":{},"12-153":{},"12-164":{},"12-167":{},"12-185":{},"12-197":{},"12-207":{},"12-220":{},"12-228":{},"12-250":{},"12-282":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["line",{"_index":63,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["link",{"_index":1477,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"9":{},"11":{},"12":{}},"component":{}}],["linux",{"_index":3370,"title":{},"name":{},"text":{"3":{},"8":{},"12":{}},"component":{}}],["linux1",{"_index":3371,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["linux2",{"_index":3372,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["linuxn",{"_index":3378,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["list",{"_index":110,"title":{"3-738":{},"5-23":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["listen",{"_index":2492,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["listnam",{"_index":4181,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["lite",{"_index":4008,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["liter",{"_index":5267,"title":{},"name":{},"text":{"11":{}},"component":{}}],["littl",{"_index":2501,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["llist",{"_index":4784,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["lname",{"_index":4801,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["lnfullnam",{"_index":4657,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["load",{"_index":1498,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["load/valid",{"_index":5318,"title":{},"name":{},"text":{"12":{}},"component":{}}],["loader",{"_index":2057,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["loc",{"_index":4800,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["local",{"_index":437,"title":{"3-152":{},"3-557":{},"3-558":{},"3-559":{},"3-560":{},"3-561":{},"3-562":{},"3-563":{},"6-146":{},"12-141":{},"12-142":{},"12-143":{},"12-144":{},"12-145":{},"12-146":{},"12-147":{}},"name":{},"text":{"3":{},"6":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["localadmin",{"_index":4197,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["localesidkey",{"_index":4468,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["localhost",{"_index":3400,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["localmemb",{"_index":4595,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["localsystem",{"_index":5475,"title":{},"name":{},"text":{"12":{}},"component":{}}],["locat",{"_index":140,"title":{"3-84":{},"3-333":{},"3-334":{},"3-335":{},"6-78":{},"11-15":{},"11-16":{},"11-17":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["locationeventcontrol",{"_index":3761,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["locimp",{"_index":4675,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["lock",{"_index":4401,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["lockout",{"_index":5390,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lockouttim",{"_index":5389,"title":{},"name":{},"text":{"12":{}},"component":{}}],["locmemb",{"_index":5138,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["log",{"_index":378,"title":{"3-110":{},"6-104":{}},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["log.error",{"_index":2419,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["log.finest",{"_index":2422,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["log.info",{"_index":2421,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["log.info(\"participantfiltersampl",{"_index":2412,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["log.info(\"resourc",{"_index":2174,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["log.info(\"value(",{"_index":2180,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["log.warn",{"_index":2420,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["logger",{"_index":2716,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["logger.debug(\"samplemapp",{"_index":2718,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["logger.debug(\"sp",{"_index":4054,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["logger.error(\"sp",{"_index":4118,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["logger.info(\"retriev",{"_index":2227,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["logic",{"_index":406,"title":{"3-131":{},"6-125":{}},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["login",{"_index":952,"title":{"3-542":{},"12-126":{}},"name":{},"text":{"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["login.salesforce.com",{"_index":4462,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["loginid",{"_index":4269,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["loginid=dxrname/employeenumber,type=login",{"_index":4288,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["loginnam",{"_index":5062,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["logsupport",{"_index":2715,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["logsupport.forname(samplemapper.class",{"_index":2717,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["long",{"_index":1986,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["longer",{"_index":186,"title":{},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"8":{},"10":{},"12":{}},"component":{}}],["longnam",{"_index":4669,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["look",{"_index":1632,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["loop",{"_index":1903,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["loopextrafunct",{"_index":4926,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["lose",{"_index":3227,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["lost",{"_index":2201,"title":{},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["lot",{"_index":2942,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["lotu",{"_index":1226,"title":{"3-752":{},"3-753":{},"5-37":{},"5-38":{}},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["low",{"_index":5293,"title":{},"name":{},"text":{"11":{}},"component":{}}],["lower",{"_index":2665,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"11":{}},"component":{}}],["lowercas",{"_index":2674,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["lprefix",{"_index":4830,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ls",{"_index":4738,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["lstringencrypt",{"_index":3039,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["lstringescapeldif",{"_index":3686,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["lync",{"_index":818,"title":{"3-437":{},"3-438":{},"12-21":{},"12-22":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["lyncenableuser.ps1",{"_index":5443,"title":{},"name":{},"text":{"12":{}},"component":{}}],["m",{"_index":5245,"title":{},"name":{},"text":{"11":{}},"component":{}}],["machin",{"_index":2221,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["machine’",{"_index":5415,"title":{},"name":{},"text":{"12":{}},"component":{}}],["made",{"_index":1674,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["mail",{"_index":1309,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["mail.j",{"_index":4176,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["mailaclmanag",{"_index":4198,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["mailbox",{"_index":811,"title":{"3-434":{},"3-435":{},"3-436":{},"12-18":{},"12-19":{},"12-20":{}},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["mailboxpermiss",{"_index":5374,"title":{},"name":{},"text":{"12":{}},"component":{}}],["mailconfigur",{"_index":5303,"title":{},"name":{},"text":{"11":{}},"component":{}}],["mailconnector",{"_index":3833,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["mailcont",{"_index":5304,"title":{},"name":{},"text":{"11":{}},"component":{}}],["mailforwardaddress",{"_index":4199,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["mailowneraccess",{"_index":4200,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["mailserv",{"_index":4196,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["mailsystem",{"_index":4201,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["mailtempl",{"_index":4202,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["main",{"_index":1427,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"12":{}},"component":{}}],["mainli",{"_index":1274,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["maintain",{"_index":176,"title":{},"name":{},"text":{"2":{},"3":{},"6":{},"7":{},"8":{},"11":{}},"component":{}}],["mainten",{"_index":174,"title":{"11":{},"3-122":{},"3-123":{},"3-124":{},"3-126":{},"3-318":{},"3-319":{},"3-322":{},"3-323":{},"3-325":{},"3-326":{},"3-328":{},"3-329":{},"3-331":{},"3-332":{},"3-334":{},"3-335":{},"3-337":{},"3-338":{},"3-340":{},"3-341":{},"3-384":{},"6-116":{},"6-117":{},"6-118":{},"6-120":{},"11-1":{},"11-4":{},"11-5":{},"11-7":{},"11-8":{},"11-10":{},"11-11":{},"11-13":{},"11-14":{},"11-16":{},"11-17":{},"11-19":{},"11-20":{},"11-22":{},"11-23":{},"11-66":{}},"name":{},"text":{"2":{},"3":{},"6":{},"8":{},"9":{},"11":{},"12":{}},"component":{}}],["make",{"_index":1420,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["male",{"_index":1901,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["manag",{"_index":15,"title":{"3-215":{},"3-353":{},"3-354":{},"3-355":{},"3-362":{},"3-363":{},"3-374":{},"3-449":{},"3-612":{},"3-613":{},"3-614":{},"3-615":{},"3-616":{},"3-617":{},"3-618":{},"3-677":{},"3-695":{},"3-696":{},"7-24":{},"11-35":{},"11-36":{},"11-37":{},"11-44":{},"11-45":{},"11-56":{},"12-33":{},"12-196":{},"12-197":{},"12-198":{},"12-199":{},"12-200":{},"12-201":{},"12-202":{},"12-261":{},"12-279":{},"12-280":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["manager(",{"_index":1785,"title":{},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["manager’",{"_index":1272,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"9":{}},"component":{}}],["mandatori",{"_index":1334,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["mani",{"_index":1608,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"11":{},"12":{}},"component":{}}],["manual",{"_index":32,"title":{"3-92":{},"3-216":{},"6-86":{},"7-25":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["manufactur",{"_index":1246,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["map",{"_index":342,"title":{"3-87":{},"3-101":{},"3-102":{},"3-103":{},"3-104":{},"3-105":{},"3-106":{},"3-108":{},"3-109":{},"3-111":{},"3-112":{},"3-113":{},"3-160":{},"3-179":{},"3-184":{},"3-470":{},"3-471":{},"3-482":{},"3-483":{},"3-484":{},"3-485":{},"3-588":{},"3-589":{},"3-590":{},"3-591":{},"3-592":{},"3-593":{},"3-594":{},"3-595":{},"3-596":{},"3-597":{},"3-598":{},"3-599":{},"3-688":{},"3-690":{},"6-81":{},"6-95":{},"6-96":{},"6-97":{},"6-98":{},"6-99":{},"6-100":{},"6-102":{},"6-103":{},"6-105":{},"6-106":{},"6-107":{},"6-154":{},"6-173":{},"6-178":{},"12-54":{},"12-55":{},"12-66":{},"12-67":{},"12-68":{},"12-69":{},"12-172":{},"12-173":{},"12-174":{},"12-175":{},"12-176":{},"12-177":{},"12-178":{},"12-179":{},"12-180":{},"12-181":{},"12-182":{},"12-183":{},"12-272":{},"12-274":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["mapattr(str",{"_index":2612,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mapattrdefaultmaxlength",{"_index":4301,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["mapattrmaxlength",{"_index":4298,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["mapid(mappingentri",{"_index":2603,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mapmailaddress",{"_index":5305,"title":{},"name":{},"text":{"11":{}},"component":{}}],["mapnamechr",{"_index":4314,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["mapnamechrnorm",{"_index":4315,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["mappedentri",{"_index":2629,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["mappedentry.addextendedrequest(extreq",{"_index":4060,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["mappedentry.getidentifi",{"_index":2684,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mappedentry.getmodif",{"_index":2689,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mappedentry.getmodification(\"pw",{"_index":4083,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["mappedentry.getmodification(\"sn",{"_index":2687,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mappedentry.getopattr",{"_index":2693,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mappedentry.getopattr(\"myoperationalattribut",{"_index":2695,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mappedentry.setidentifier(id",{"_index":2685,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mappedentry.setopattr(myopattr",{"_index":2697,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mappedentry.setrequesttype(reqtyp",{"_index":2698,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mappedentry.setrequesttype(request.type.non",{"_index":4091,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["mappedentry.updatemodification(snmod",{"_index":2691,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mapper",{"_index":2607,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mapping.techn",{"_index":3535,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["mappingentri",{"_index":2604,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mappingproblem",{"_index":3217,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mapresult",{"_index":2611,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mapvalidfromattr",{"_index":4302,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["mar",{"_index":5271,"title":{},"name":{},"text":{"11":{}},"component":{}}],["marietta",{"_index":1778,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mark",{"_index":732,"title":{"3-378":{},"3-379":{},"3-380":{},"11-60":{},"11-61":{},"11-62":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["marker",{"_index":5258,"title":{},"name":{},"text":{"11":{}},"component":{}}],["master",{"_index":443,"title":{"3-155":{},"6-149":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["master_nam",{"_index":3007,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["master_namemaster_rec_idattribute_name#attribute_valu",{"_index":3006,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["master_rec_id",{"_index":3008,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["masteredbi",{"_index":4139,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["masterkeyattribute_name#attribute_valu",{"_index":4697,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["masternamedmsidvalattributename#attributevalu",{"_index":4788,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["mastership",{"_index":2833,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["match",{"_index":803,"title":{"3-430":{},"12-14":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["max",{"_index":2948,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["max_trace_entri",{"_index":3148,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["maximum",{"_index":3149,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["mayb",{"_index":1910,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mc",{"_index":4997,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["mdb",{"_index":3506,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["mean",{"_index":1962,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["meaning",{"_index":5312,"title":{},"name":{},"text":{"11":{}},"component":{}}],["measur",{"_index":1709,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mechan",{"_index":1404,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["media",{"_index":3466,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["medico",{"_index":941,"title":{"3-533":{},"3-534":{},"3-535":{},"3-536":{},"3-537":{},"3-538":{},"3-539":{},"12-117":{},"12-118":{},"12-119":{},"12-120":{},"12-121":{},"12-122":{},"12-123":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["medico//",{"_index":4280,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["medicocrypt",{"_index":4296,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["meet",{"_index":1573,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["memb",{"_index":4974,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["member",{"_index":880,"title":{"3-484":{},"3-556":{},"3-566":{},"3-577":{},"3-593":{},"3-634":{},"12-68":{},"12-140":{},"12-150":{},"12-161":{},"12-177":{},"12-218":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["memberatt",{"_index":4040,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["memberof",{"_index":4364,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["membership",{"_index":345,"title":{"3-88":{},"3-507":{},"3-609":{},"3-738":{},"5-23":{},"6-82":{},"12-91":{},"12-193":{}},"name":{},"text":{"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["membershipaccountid",{"_index":4969,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["membershipgroupid",{"_index":4970,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["membershipid",{"_index":4971,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["memberships.accountid",{"_index":4024,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["memberships.groupid=groups.id",{"_index":4937,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["memberships.id",{"_index":4045,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["membersourceatt",{"_index":4041,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["membert",{"_index":4035,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["membertyp",{"_index":2661,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["memori",{"_index":2282,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"11":{}},"component":{}}],["men",{"_index":1981,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mention",{"_index":2479,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{}},"component":{}}],["menu",{"_index":1600,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["merg",{"_index":487,"title":{"3-187":{},"6-181":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["merge/replac",{"_index":3233,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["messag",{"_index":223,"title":{"3-24":{},"3-28":{},"6-18":{},"6-22":{}},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["messages_*locale*.properti",{"_index":1689,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["messages_de.properti",{"_index":1707,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["messages_en.properti",{"_index":1706,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["messageserv",{"_index":5313,"title":{},"name":{},"text":{"11":{}},"component":{}}],["met",{"_index":2929,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["meta",{"_index":59,"title":{"3-164":{},"3-668":{},"3-672":{},"3-681":{},"6-158":{},"12-252":{},"12-256":{},"12-265":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["meta2hipath_hipath",{"_index":4664,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["metacp",{"_index":645,"title":{"3-308":{},"10-82":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["metahubdata",{"_index":3717,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["metapublickey.txt",{"_index":4757,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["metastor",{"_index":2844,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["metaus",{"_index":4723,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["metauser@host1:.ssh/id_rsa.pub",{"_index":4756,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["method",{"_index":297,"title":{"3-58":{},"6-52":{}},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"11":{},"12":{}},"component":{}}],["mf",{"_index":4295,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["microsoft",{"_index":1623,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"12":{}},"component":{}}],["microsystem",{"_index":5162,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["middleiniti",{"_index":4254,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["migrat",{"_index":73,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"11":{}},"component":{}}],["migrateusersforsod",{"_index":5300,"title":{},"name":{},"text":{"11":{}},"component":{}}],["million",{"_index":5095,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["millisecond",{"_index":1557,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["min",{"_index":1562,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["min_source_entri",{"_index":3150,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mind",{"_index":1680,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"12":{}},"component":{}}],["minim",{"_index":2320,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["minimum",{"_index":1296,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["minpasswordlength",{"_index":4203,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["minut",{"_index":1408,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"11":{}},"component":{}}],["miscellan",{"_index":2838,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["miss",{"_index":2352,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["mistak",{"_index":2943,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mix",{"_index":1721,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mkdir",{"_index":5465,"title":{},"name":{},"text":{"12":{}},"component":{}}],["mktestmapping.bat",{"_index":2728,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mm",{"_index":1946,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mmm",{"_index":5269,"title":{},"name":{},"text":{"11":{}},"component":{}}],["mobil",{"_index":1638,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["mobilephon",{"_index":4488,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["mobiltelefonnumm",{"_index":1639,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mod",{"_index":2741,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["mod.length",{"_index":4084,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["mod/addgroupinrol",{"_index":5107,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["modaccountinrol",{"_index":2866,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["moddat",{"_index":4826,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["moddn",{"_index":2918,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mode",{"_index":485,"title":{"3-186":{},"3-190":{},"6-180":{},"6-184":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["model",{"_index":2632,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["modgroupinrol",{"_index":2871,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["modgroupstatesinrol",{"_index":5105,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["modif",{"_index":239,"title":{"3-31":{},"3-199":{},"3-200":{},"6-25":{},"7-8":{},"7-9":{}},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["modifi",{"_index":282,"title":{"3-52":{},"3-66":{},"6-46":{},"6-60":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["modifications.put(requestworkflowinstance.key_act_application_st",{"_index":2214,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["modifications.put(requestworkflowinstance.key_wf_resourc",{"_index":2210,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["modifications.put(requestworkflowinstance.key_wf_resourcestr",{"_index":2211,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["modifications.put(requestworkflowinstance.key_wf_subject",{"_index":2207,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["modifications.put(requestworkflowinstance.key_wf_subjectstr",{"_index":2208,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["modifications_",{"_index":2204,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["modify/cr",{"_index":5103,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["modify_d",{"_index":4827,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["modify_entri",{"_index":3151,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["modifydn",{"_index":2931,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["modifyentri",{"_index":3075,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["modifyorderrequest",{"_index":2231,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["modifyroleentri",{"_index":5143,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["modifysubject",{"_index":2182,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["modifytimestamp",{"_index":2469,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["modmap",{"_index":2688,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["modmap.get(\"sn",{"_index":2690,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["modntf",{"_index":2951,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["modul",{"_index":5158,"title":{},"name":{},"text":{"3":{},"5":{},"11":{}},"component":{}}],["moment",{"_index":4964,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["monitor",{"_index":2565,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["month",{"_index":5246,"title":{},"name":{},"text":{"11":{}},"component":{}}],["more",{"_index":1261,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["moreov",{"_index":4778,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["mostli",{"_index":5063,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["move",{"_index":2622,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"12":{}},"component":{}}],["move/copi",{"_index":5450,"title":{},"name":{},"text":{"12":{}},"component":{}}],["moveinhierachi",{"_index":4257,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["moveinhierarchi",{"_index":4251,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["mr",{"_index":1472,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mrs./mr",{"_index":1898,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mru",{"_index":3880,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["ms",{"_index":1560,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ms/do",{"_index":3709,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["msexchhidefromaddresslist",{"_index":5436,"title":{},"name":{},"text":{"12":{}},"component":{}}],["msexchmailboxguid",{"_index":5403,"title":{},"name":{},"text":{"12":{}},"component":{}}],["msexchmailboxsecuritydescriptor",{"_index":5402,"title":{},"name":{},"text":{"12":{}},"component":{}}],["msexchrecipientdisplaytyp",{"_index":5021,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["msexchrecipientdisplaytype=integ",{"_index":5031,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["msexchrecipienttypedetail",{"_index":5019,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["msexchrecipienttypedetails=integ",{"_index":5029,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["msexchvers",{"_index":5020,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["msexchversion=caseignorestr",{"_index":5030,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["much",{"_index":1615,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["multi",{"_index":442,"title":{"3-155":{},"3-702":{},"6-149":{},"12-286":{}},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["multipl",{"_index":1113,"title":{"3-675":{},"12-259":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["multivalu",{"_index":4018,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["munich",{"_index":3641,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["munich;mi",{"_index":3555,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["muster;henry;must",{"_index":3553,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["mv",{"_index":4988,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["myjob",{"_index":2053,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mymetacpjob",{"_index":2843,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["myopattr",{"_index":2694,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["myvar",{"_index":1868,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["n",{"_index":1881,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["n+1",{"_index":2821,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["n/a",{"_index":3965,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["n/network/remoteinvocation/article.php/c5433",{"_index":5458,"title":{},"name":{},"text":{"12":{}},"component":{}}],["nada",{"_index":2228,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["namchr",{"_index":4312,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["name",{"_index":125,"title":{"3-156":{},"3-306":{},"3-448":{},"6-150":{},"10-80":{},"12-32":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["name/sid",{"_index":5452,"title":{},"name":{},"text":{"12":{}},"component":{}}],["name/valu",{"_index":1878,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["name=properti",{"_index":5214,"title":{},"name":{},"text":{"11":{}},"component":{}}],["name_",{"_index":4589,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["namechr",{"_index":4310,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["namechrnorm",{"_index":4311,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["namespac",{"_index":3614,"title":{},"name":{},"text":{"3":{},"5":{},"10":{}},"component":{}}],["namevalueproperti",{"_index":2087,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["naming_attr",{"_index":3545,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["namingattr",{"_index":3534,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["namingattribut",{"_index":3542,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["nation",{"_index":217,"title":{"3-21":{},"3-22":{},"3-23":{},"3-25":{},"3-26":{},"6-15":{},"6-16":{},"6-17":{},"6-19":{},"6-20":{}},"name":{},"text":{"3":{},"6":{},"7":{},"12":{}},"component":{}}],["nationalization.csv.delimit",{"_index":1629,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["nativ",{"_index":3292,"title":{},"name":{},"text":{"3":{},"5":{},"7":{},"10":{},"12":{}},"component":{}}],["navig",{"_index":3484,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["nd",{"_index":3162,"title":{},"name":{},"text":{"3":{},"6":{},"8":{}},"component":{}}],["ne",{"_index":1891,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["nearli",{"_index":2494,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["necessari",{"_index":148,"title":{},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["need",{"_index":1321,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["nest",{"_index":3365,"title":{},"name":{},"text":{"3":{},"8":{},"11":{},"12":{}},"component":{}}],["net",{"_index":4365,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["net.atos.dirx.dxi.connector.svclayer.workflow.jdbcroleasgfilt",{"_index":3451,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["net.atos.dirx.dxi.connector.svclayer.workflow.maprolesassign",{"_index":3478,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["net.atos.dxm.join.userhook.ldap.userhookldapus",{"_index":3597,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["net.ucanaccess.jdbc.ucanaccessdriv",{"_index":3450,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["netscape.ldap.ldapconnect",{"_index":2279,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["netview",{"_index":4993,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["netweav",{"_index":1678,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["network",{"_index":1531,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["never",{"_index":3247,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["nevertheless",{"_index":1766,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["new",{"_index":272,"title":{"3-46":{},"3-61":{},"3-219":{},"3-749":{},"5-34":{},"6-40":{},"6-55":{},"8-1":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["new/delet",{"_index":1372,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"12":{}},"component":{}}],["new_dn",{"_index":3112,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["newentri",{"_index":3077,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["newer",{"_index":3858,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["newli",{"_index":3056,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["newprofilenam",{"_index":4261,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["next",{"_index":1317,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["next_free_guid",{"_index":3144,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["night",{"_index":3366,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["nightli",{"_index":5438,"title":{},"name":{},"text":{"12":{}},"component":{}}],["nik",{"_index":1998,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["nik,ou=glob",{"_index":2386,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["nik.taspatch@mi",{"_index":1990,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["niki@gmx.com",{"_index":1992,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["node",{"_index":2051,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["nomin",{"_index":1449,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["non",{"_index":1094,"title":{"3-662":{},"12-246":{}},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"11":{},"12":{}},"component":{}}],["none",{"_index":1506,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["normal",{"_index":2200,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["notat",{"_index":4,"title":{"1-2":{},"2-3":{},"3-5":{}},"name":{},"text":{"1":{},"2":{},"3":{},"6":{}},"component":{}}],["note",{"_index":77,"title":{"3-523":{},"3-524":{},"3-525":{},"3-526":{},"3-527":{},"3-528":{},"3-529":{},"3-530":{},"3-531":{},"3-752":{},"3-753":{},"5-37":{},"5-38":{},"12-107":{},"12-108":{},"12-109":{},"12-110":{},"12-111":{},"12-112":{},"12-113":{},"12-114":{},"12-115":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["notequ",{"_index":1892,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["notes2ident_valid",{"_index":5152,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["notes_connector_nam",{"_index":4160,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["noth",{"_index":1377,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["notic",{"_index":4765,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["notif",{"_index":197,"title":{"3-11":{},"3-12":{},"3-98":{},"3-139":{},"3-204":{},"3-364":{},"3-365":{},"3-366":{},"3-399":{},"3-400":{},"3-401":{},"6-5":{},"6-6":{},"6-92":{},"6-133":{},"7-13":{},"11-46":{},"11-47":{},"11-48":{},"11-81":{},"11-82":{},"11-83":{}},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{}},"component":{}}],["notif_notok",{"_index":3152,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["notifi",{"_index":1354,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{}},"component":{}}],["notify_data_fil",{"_index":3153,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["notify_not_ok",{"_index":3071,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["notify_notok_fil",{"_index":3073,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["notifybefor",{"_index":1452,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["notifychannelconnector",{"_index":3834,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["notifymailaccountcreationuserhook.java",{"_index":2542,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["now",{"_index":1662,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["nowher",{"_index":5090,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["nr",{"_index":5115,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["nr.activ",{"_index":2820,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["nr_free_guid",{"_index":3141,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["nt",{"_index":4656,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ntf",{"_index":2933,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["null",{"_index":1682,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["null→isdelet",{"_index":5399,"title":{},"name":{},"text":{"12":{}},"component":{}}],["num",{"_index":3119,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["number",{"_index":1297,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["nurs",{"_index":5041,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["o",{"_index":2408,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"12":{}},"component":{}}],["o=ldap",{"_index":3607,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["o=mi",{"_index":2976,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["o=mycompani",{"_index":5154,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["o=pqr",{"_index":3676,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["oasi",{"_index":2633,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["oauth",{"_index":3939,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["obj",{"_index":5102,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["object",{"_index":25,"title":{"3-148":{},"3-150":{},"3-180":{},"3-185":{},"3-211":{},"3-224":{},"3-330":{},"3-331":{},"3-332":{},"3-333":{},"3-334":{},"3-335":{},"3-336":{},"3-337":{},"3-338":{},"3-339":{},"3-340":{},"3-347":{},"3-385":{},"3-386":{},"3-657":{},"6-142":{},"6-144":{},"6-174":{},"6-179":{},"7-20":{},"9-1":{},"11-12":{},"11-13":{},"11-14":{},"11-15":{},"11-16":{},"11-17":{},"11-18":{},"11-19":{},"11-20":{},"11-21":{},"11-22":{},"11-29":{},"11-67":{},"11-68":{},"12-241":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["object.in",{"_index":3284,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["object_class",{"_index":3155,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["object_class_collect",{"_index":3154,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["objectcategori",{"_index":5397,"title":{},"name":{},"text":{"12":{}},"component":{}}],["objectclass",{"_index":2071,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["objectclass=\"dxrtargetsystemaccount",{"_index":3231,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["objectclass=\"groupofnam",{"_index":5140,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["objectclass=deruser)(!(objectclass=dxrpersona",{"_index":3601,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["objectclass=dxmidmserver)(!(dxmtype=workercontainer))(!(dxmdomain",{"_index":1752,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["objectclass=dxmidmserver)(!(dxmtype=workercontainer))(dxmdomain",{"_index":1751,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["objectclass=dxrconsistencyrul",{"_index":3889,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["objectclass=dxrcontain",{"_index":5350,"title":{},"name":{},"text":{"12":{}},"component":{}}],["objectclass=dxrfunctionaluser))(!(objectclass=dxruserfacet",{"_index":3603,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["objectclass=dxrpermiss",{"_index":3886,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["objectclass=dxrpersona",{"_index":3602,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["objectclass=dxrrol",{"_index":3884,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["objectclass=dxrtargetsystem",{"_index":3888,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["objectclass=dxrtargetsystemaccount",{"_index":5277,"title":{},"name":{},"text":{"11":{}},"component":{}}],["objectclass=dxrtargetsystemgroup",{"_index":5278,"title":{},"name":{},"text":{"11":{}},"component":{}}],["objectclass=dxrtscontain",{"_index":5349,"title":{},"name":{},"text":{"12":{}},"component":{}}],["objectclass=dxrus",{"_index":3882,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["objectclass=dxruser)(|(&(dxrenddate<=today)(|(dxrstate=enabled)(dxrstate=disabled)))(&(dxrstartdate<=today)(dxrstate=new))(&(dxrdisableenddate<=today)(dxrstate=disabled))(&(dxrdisablestartdate<=today)(dxrstate=enabled))(dxrdeletedate<=today)(&(dxrstate=tbdel)(!(dxrenddate<=today",{"_index":5198,"title":{},"name":{},"text":{"11":{}},"component":{}}],["objectclass=dxrusertorole)(objectclass=dxrusertogroup)(objectclass=dxrusertopermiss",{"_index":5275,"title":{},"name":{},"text":{"11":{}},"component":{}}],["objectclass=dxrusertorole)(objectclass=dxrusertogroup)(objectclass=dxrusertopermission))(|(dxrendd",{"_index":3908,"title":{},"name":{},"text":{"3":{}},"component":{}}],["objectclass=dxrusertorole)(objectclass=dxrusertogroup)(objectclass=dxrusertopermission))(|(dxrenddate<=today)(dxrstartdate<=today",{"_index":5195,"title":{},"name":{},"text":{"11":{}},"component":{}}],["objectclass=dxrusertorole)(objectclass=dxrusertogroup)(objectclass=dxrusertopermission))(|(dxrenddate=*)(dxrstartd",{"_index":3893,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["objectclass=inetorgperson)(employeenumber=*)(ou=procur",{"_index":3523,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["objectclass=organizationalperson",{"_index":3586,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["objectclass=top",{"_index":5351,"title":{},"name":{},"text":{"12":{}},"component":{}}],["objectclass=user)(objectcategory=person",{"_index":3429,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["objectdescript",{"_index":4172,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["objects/salesforceaccount",{"_index":4424,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["object’",{"_index":2237,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["oblig",{"_index":3903,"title":{},"name":{},"text":{"3":{},"5":{},"11":{},"12":{}},"component":{}}],["observ",{"_index":3671,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["obtain",{"_index":35,"title":{"3-56":{},"6-50":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["obviou",{"_index":3059,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["obvious",{"_index":3263,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["occur",{"_index":1395,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["occurr",{"_index":3854,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["octet",{"_index":2513,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["odbc",{"_index":1153,"title":{"3-697":{},"3-699":{},"3-702":{},"3-703":{},"3-706":{},"3-710":{},"3-712":{},"12-281":{},"12-283":{},"12-286":{},"12-287":{},"12-290":{},"12-294":{},"12-296":{}},"name":{},"text":{"3":{},"5":{},"10":{},"12":{}},"component":{}}],["odbc/jdbc",{"_index":3719,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["odbc2id",{"_index":3720,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["odbc2ident_odbcexport",{"_index":4931,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["odbc2ident_syncacc_metacp",{"_index":4962,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["odbc2ident_syncacc_odbcexport",{"_index":4961,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["odbc2ident_syncgroup_metacp",{"_index":4960,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["odbc2ident_syncgroup_odbcexport",{"_index":4959,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["odbc2ident_syncnewaccwf",{"_index":4950,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["odbc2ident_syncnewgroupwf",{"_index":4953,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["odbc2ident_valaccount_metacp",{"_index":4933,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["odbc2ident_valaccount_odbcexport",{"_index":4932,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["odbc2ident_valgroup_metacp",{"_index":4922,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["odbc2ident_valid",{"_index":4910,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["odbc2rol",{"_index":4915,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["odbc_id",{"_index":3722,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["odbcal",{"_index":5076,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["offer",{"_index":3261,"title":{},"name":{},"text":{"3":{},"5":{},"7":{},"9":{},"12":{}},"component":{}}],["offic",{"_index":955,"title":{"3-544":{},"3-545":{},"3-546":{},"3-547":{},"3-548":{},"3-549":{},"3-550":{},"3-635":{},"3-637":{},"3-638":{},"12-128":{},"12-129":{},"12-130":{},"12-131":{},"12-132":{},"12-133":{},"12-134":{},"12-219":{},"12-221":{},"12-222":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["office365",{"_index":4327,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["office365connector",{"_index":4321,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["offlin",{"_index":3344,"title":{},"name":{},"text":{"3":{},"7":{},"12":{}},"component":{}}],["oicf",{"_index":4375,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["oicf_realtim",{"_index":4373,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ok",{"_index":2915,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["old",{"_index":1375,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["oldentri",{"_index":3076,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["older",{"_index":3830,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["oldpassword/newpassword",{"_index":4407,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["oldrisklevel",{"_index":1376,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["om",{"_index":3662,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["om.siemens.dxm.join.map.office365.plans.to.userhookserviceplansto",{"_index":4361,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["om2id",{"_index":3661,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["omit",{"_index":2512,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"12":{}},"component":{}}],["omv",{"_index":4987,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["on",{"_index":112,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["onaddonli",{"_index":4136,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["onaddonly=tru",{"_index":3531,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["onassign",{"_index":5366,"title":{},"name":{},"text":{"12":{}},"component":{}}],["onc",{"_index":1570,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"11":{},"12":{}},"component":{}}],["one_level",{"_index":3212,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["onelevel",{"_index":3187,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["onesign",{"_index":3981,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["onlin",{"_index":1597,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["onrevoc",{"_index":5377,"title":{},"name":{},"text":{"12":{}},"component":{}}],["onto",{"_index":4781,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["op",{"_index":4146,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["opapam",{"_index":4996,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["opattrmap",{"_index":2692,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["opattrmap.get(\"myoperationalattribut",{"_index":2696,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["open",{"_index":1603,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["open(dxmuserhookconfig",{"_index":2781,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["open.org/committees/download.php/4137/o",{"_index":3619,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["openicf",{"_index":971,"title":{"3-557":{},"3-558":{},"3-560":{},"3-561":{},"3-562":{},"3-563":{},"3-643":{},"3-644":{},"3-646":{},"3-647":{},"3-648":{},"3-649":{},"3-650":{},"3-651":{},"12-141":{},"12-142":{},"12-144":{},"12-145":{},"12-146":{},"12-147":{},"12-227":{},"12-228":{},"12-230":{},"12-231":{},"12-232":{},"12-233":{},"12-234":{},"12-235":{}},"name":{},"text":{"3":{},"8":{},"12":{}},"component":{}}],["openicf_install_path*/bundl",{"_index":4641,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["openicfconnector2unix",{"_index":4623,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["oper",{"_index":411,"title":{"3-134":{},"3-135":{},"3-136":{},"3-138":{},"3-146":{},"3-206":{},"3-323":{},"3-326":{},"3-329":{},"3-332":{},"3-335":{},"3-338":{},"3-341":{},"3-344":{},"3-349":{},"3-352":{},"3-355":{},"3-358":{},"3-361":{},"3-366":{},"3-377":{},"3-380":{},"3-383":{},"3-391":{},"3-401":{},"3-407":{},"3-670":{},"3-674":{},"3-721":{},"3-737":{},"5-6":{},"5-22":{},"6-128":{},"6-129":{},"6-130":{},"6-132":{},"6-140":{},"7-15":{},"11-5":{},"11-8":{},"11-11":{},"11-14":{},"11-17":{},"11-20":{},"11-23":{},"11-26":{},"11-31":{},"11-34":{},"11-37":{},"11-40":{},"11-43":{},"11-48":{},"11-59":{},"11-62":{},"11-65":{},"11-73":{},"11-83":{},"11-89":{},"12-254":{},"12-258":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["operand",{"_index":1890,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["operand1",{"_index":1887,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["operand2",{"_index":1888,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["operational_attribut",{"_index":3156,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["operationidentifi",{"_index":4063,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["operationntf",{"_index":2949,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["opid",{"_index":4064,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["opid.setoperationid(thesp",{"_index":4065,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["opid.setoperationidtype(operationidentifieroperationidtypetype.genericstr",{"_index":4066,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["opkey",{"_index":2669,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["oppos",{"_index":4229,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["opposit",{"_index":2928,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["opr",{"_index":3037,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["optim",{"_index":750,"title":{"3-392":{},"3-404":{},"3-408":{},"11-74":{},"11-86":{},"11-90":{}},"name":{},"text":{"3":{},"5":{},"6":{},"11":{}},"component":{}}],["optimum",{"_index":5286,"title":{},"name":{},"text":{"11":{}},"component":{}}],["option",{"_index":108,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["options.put(\"objectclass",{"_index":2784,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["or_filt",{"_index":3188,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["oracl",{"_index":4128,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["order",{"_index":288,"title":{"3-54":{},"3-68":{},"6-48":{},"6-62":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["order(",{"_index":3351,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["orderfactori",{"_index":2194,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["orderfactoryimpl",{"_index":2196,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["orderimpl.jar",{"_index":2272,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["orderjobexcept",{"_index":2296,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ordertyp",{"_index":2165,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["org",{"_index":4167,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["org.forgerock.openicf.connectors.solari",{"_index":4619,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["org.identityconnectors.solaris.unixconnector",{"_index":4643,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["org.identityconnectors.windowslocalaccounts.windowslocalaccountsconnector",{"_index":4379,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["org.myorg.mydep.myproperti",{"_index":2522,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["org1",{"_index":4792,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["org2",{"_index":4793,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["org3",{"_index":4794,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["org4",{"_index":4848,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["org5",{"_index":4849,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["org6",{"_index":4850,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["organ",{"_index":222,"title":{"3-24":{},"3-324":{},"3-325":{},"3-326":{},"3-598":{},"6-18":{},"11-6":{},"11-7":{},"11-8":{},"12-182":{}},"name":{},"text":{"3":{},"7":{},"11":{},"12":{}},"component":{}}],["organiz",{"_index":669,"title":{"3-327":{},"3-328":{},"3-329":{},"11-9":{},"11-10":{},"11-11":{}},"name":{},"text":{"3":{},"6":{},"7":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["organizationalperson",{"_index":2987,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["organizationeventcontrol",{"_index":3745,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["orgimp",{"_index":4673,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["orgunitpath",{"_index":3966,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["orient",{"_index":459,"title":{"3-167":{},"3-172":{},"3-173":{},"6-161":{},"6-166":{},"6-167":{}},"name":{},"text":{"3":{}},"component":{}}],["origin",{"_index":1616,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"12":{}},"component":{}}],["oscil",{"_index":3637,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["other",{"_index":1993,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["othermailserv",{"_index":4204,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["otherphon",{"_index":4489,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["otherwis",{"_index":1359,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["ou",{"_index":3431,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["ou=control",{"_index":3678,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["ou=mthb",{"_index":2975,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ou=mthb,o=mi",{"_index":2977,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ou=newtre",{"_index":3656,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["ou=procurement,o=mi",{"_index":3530,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["ou=redflag",{"_index":4144,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ou=sal",{"_index":3675,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["ou=sales,o=mi",{"_index":5347,"title":{},"name":{},"text":{"12":{}},"component":{}}],["ou=tombston",{"_index":2978,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ou=users,ou=brqh,ou=cz",{"_index":3428,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["oueventcontrol",{"_index":3750,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["out",{"_index":1578,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["out.println(\"hello",{"_index":1930,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["out.println(\"not",{"_index":1956,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["out.println(\"nul",{"_index":1951,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["out.println(\"str",{"_index":1952,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["out.println(result",{"_index":1961,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["outcom",{"_index":3931,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["outdat",{"_index":3894,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["output",{"_index":427,"title":{"3-145":{},"6-139":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["outsid",{"_index":1276,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["over",{"_index":1546,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["overal",{"_index":1886,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["overcom",{"_index":5084,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["overhead",{"_index":1710,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"11":{}},"component":{}}],["overlap",{"_index":2521,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["overlay",{"_index":2823,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["overload",{"_index":2840,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["overrid",{"_index":2245,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["overview",{"_index":2526,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"11":{}},"component":{}}],["overwrit",{"_index":2571,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["overwritten",{"_index":2850,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"12":{}},"component":{}}],["ovm",{"_index":4994,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["own",{"_index":4412,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["owner",{"_index":1787,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["owner(",{"_index":2019,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["owner_group",{"_index":4815,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ownerid",{"_index":4413,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["owneridentifi",{"_index":4569,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ownertyp",{"_index":4592,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["owner’",{"_index":1812,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["owngroup",{"_index":4814,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["p.generalquest",{"_index":1456,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["p1",{"_index":2353,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["p12",{"_index":3952,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["p2",{"_index":2355,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["p3",{"_index":2357,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["p4",{"_index":2359,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["p5",{"_index":2361,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["pacif",{"_index":5265,"title":{},"name":{},"text":{"11":{}},"component":{}}],["pack",{"_index":4980,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["packag",{"_index":1917,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["page",{"_index":492,"title":{"3-190":{},"6-184":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["page_s",{"_index":3192,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["paged_bind_id",{"_index":5129,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["paged_read",{"_index":3191,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["pages",{"_index":5122,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["pair",{"_index":1828,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"12":{}},"component":{}}],["pam",{"_index":1229,"title":{"3-754":{},"3-755":{},"3-756":{},"3-757":{},"3-758":{},"3-759":{},"3-760":{},"3-761":{},"3-762":{},"3-763":{},"5-39":{},"5-40":{},"5-41":{},"5-42":{},"5-43":{},"5-44":{},"5-45":{},"5-46":{},"5-47":{},"5-48":{}},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["pam_realtim",{"_index":5178,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["panel",{"_index":3502,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["paper",{"_index":3315,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["parallel",{"_index":1299,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["param",{"_index":1877,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["param1",{"_index":2085,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["param2",{"_index":2096,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["paramet",{"_index":274,"title":{"3-47":{},"3-62":{},"3-71":{},"3-137":{},"3-142":{},"3-143":{},"3-144":{},"3-145":{},"6-41":{},"6-56":{},"6-65":{},"6-131":{},"6-136":{},"6-137":{},"6-138":{},"6-139":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["paramf",{"_index":2333,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["paramfour",{"_index":2332,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["paramidcolumn",{"_index":3459,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["paramlistingjob",{"_index":2363,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["paramon",{"_index":2329,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["params/param",{"_index":2107,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["paramsnod",{"_index":2137,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["paramthre",{"_index":2331,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["paramtwo",{"_index":2330,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["paramvaluecolumn",{"_index":3460,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["parent",{"_index":1353,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["parser",{"_index":1926,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["parserexcept",{"_index":1929,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["part",{"_index":1267,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["parti",{"_index":2261,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["particip",{"_index":265,"title":{"3-44":{},"3-70":{},"3-74":{},"3-75":{},"3-76":{},"6-38":{},"6-64":{},"6-68":{},"6-69":{},"6-70":{}},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["participant(",{"_index":2022,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["participant.cn",{"_index":1592,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["participant.equalsignorecase(initi",{"_index":2411,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["participant.givennam",{"_index":1771,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["participant.sn",{"_index":1772,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["participantconstraint",{"_index":2398,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["participantcontext",{"_index":2378,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["participantentri",{"_index":1882,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["participantentries.mail",{"_index":1969,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["participantentries.sn",{"_index":1973,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["participantentries[0].mail",{"_index":1966,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["participantentries[0].mail[0",{"_index":1995,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["participantentries[0].mail};${workflow.subject.mail",{"_index":2000,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["participantentries[0].preferredlanguag",{"_index":1967,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["participantentries[0].sn",{"_index":1968,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["participants.iter",{"_index":2407,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["participants.s",{"_index":2427,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["participantsextend",{"_index":2376,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["participantsfilt",{"_index":2397,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["participantsfilterextend",{"_index":2414,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["participant’",{"_index":2403,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["particular",{"_index":1384,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["particularli",{"_index":1619,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["partit",{"_index":5451,"title":{},"name":{},"text":{"12":{}},"component":{}}],["partner",{"_index":4410,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["partner_commun",{"_index":4422,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["partner_community_login",{"_index":4423,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["pass",{"_index":1679,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["password",{"_index":390,"title":{"3-118":{},"3-119":{},"3-120":{},"3-121":{},"3-353":{},"3-354":{},"3-355":{},"3-356":{},"3-357":{},"3-358":{},"3-359":{},"3-360":{},"3-361":{},"3-362":{},"3-363":{},"3-364":{},"3-365":{},"3-366":{},"3-399":{},"3-400":{},"3-401":{},"3-443":{},"3-497":{},"3-520":{},"3-532":{},"3-543":{},"3-555":{},"3-610":{},"3-722":{},"5-7":{},"6-112":{},"6-113":{},"6-114":{},"6-115":{},"11-35":{},"11-36":{},"11-37":{},"11-38":{},"11-39":{},"11-40":{},"11-41":{},"11-42":{},"11-43":{},"11-44":{},"11-45":{},"11-46":{},"11-47":{},"11-48":{},"11-81":{},"11-82":{},"11-83":{},"12-27":{},"12-81":{},"12-104":{},"12-116":{},"12-127":{},"12-139":{},"12-194":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["password.bapipwd",{"_index":4499,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["password=tspassword",{"_index":5039,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["password_expir",{"_index":4385,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["past",{"_index":3057,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["path",{"_index":1617,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["pathfilecertid",{"_index":4168,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["pathfilecertlog",{"_index":4205,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["pathfiletargetcertid",{"_index":4256,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["pathnam",{"_index":137,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"10":{},"11":{},"12":{}},"component":{}}],["pathuserid",{"_index":4206,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["pattern",{"_index":5241,"title":{},"name":{},"text":{"11":{}},"component":{}}],["pawo",{"_index":4297,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["pay",{"_index":2091,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["peer",{"_index":4526,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["pend",{"_index":1402,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["peopl",{"_index":1320,"title":{},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["per",{"_index":1972,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["perfectli",{"_index":4525,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["perform",{"_index":1277,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["perform_map",{"_index":2914,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["perhap",{"_index":3274,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["period",{"_index":1405,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"11":{},"12":{}},"component":{}}],["perm",{"_index":4445,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["perman",{"_index":2310,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["permiss",{"_index":1335,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["permissionsassign",{"_index":3476,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["permissionset",{"_index":1009,"title":{"3-589":{},"3-597":{},"12-173":{},"12-181":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["permissionsetid",{"_index":4480,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["permit",{"_index":1254,"title":{},"name":{},"text":{"3":{},"4":{},"6":{},"12":{}},"component":{}}],["persdat",{"_index":4717,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["persist",{"_index":1669,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["persnum",{"_index":4890,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["person",{"_index":950,"title":{"3-541":{},"12-125":{}},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["person(",{"_index":1850,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["persona",{"_index":497,"title":{"3-195":{},"3-345":{},"7-4":{},"11-27":{}},"name":{},"text":{"3":{},"7":{},"11":{}},"component":{}}],["personal.mdb",{"_index":3728,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["personalnr",{"_index":3445,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["personaresolvercontrol",{"_index":3778,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["persons/group",{"_index":4246,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["peter,ou=sal",{"_index":5353,"title":{},"name":{},"text":{"12":{}},"component":{}}],["peter,ou=sales,o=mi",{"_index":5344,"title":{},"name":{},"text":{"12":{}},"component":{}}],["pharmaci",{"_index":5045,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["phase",{"_index":2505,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["phone",{"_index":3022,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["phonedir",{"_index":3028,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["phonedir#43257#telephonenumber#+49",{"_index":3018,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["physic",{"_index":408,"title":{"3-132":{},"6-126":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"12":{}},"component":{}}],["physician",{"_index":4276,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["piec",{"_index":1455,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["pipe",{"_index":3547,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["pitton",{"_index":1480,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["pk",{"_index":3511,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["pkey",{"_index":4075,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["pkey.getdsmlvalue(0).tostr",{"_index":4081,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["place",{"_index":2259,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["placehold",{"_index":102,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["placeholder.testplugin",{"_index":1916,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["plain",{"_index":1447,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["plan",{"_index":967,"title":{"3-554":{},"12-138":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["plans,\"+${env.role_ts_group_bas",{"_index":4363,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["platform",{"_index":4368,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["platform.devtest.ringcentral.com",{"_index":4612,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["platform.ringcentral.com",{"_index":4614,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["play",{"_index":1495,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["pleas",{"_index":1474,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["plu",{"_index":1838,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["pluggabl",{"_index":5157,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["pm",{"_index":5259,"title":{},"name":{},"text":{"11":{}},"component":{}}],["png",{"_index":3403,"title":{},"name":{},"text":{"3":{},"9":{}},"component":{}}],["pnr",{"_index":4308,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["pnr=\"$\\{source.employeenumber}\",type=person",{"_index":4307,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["po",{"_index":4803,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["point",{"_index":1612,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"12":{}},"component":{}}],["polici",{"_index":766,"title":{"3-402":{},"3-403":{},"3-404":{},"11-84":{},"11-85":{},"11-86":{}},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["policies.request",{"_index":1269,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["policyexecut",{"_index":5204,"title":{},"name":{},"text":{"11":{}},"component":{}}],["poll",{"_index":1399,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["pool",{"_index":2267,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["pool.jar",{"_index":2344,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["pop",{"_index":3951,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["popul",{"_index":1661,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["port",{"_index":552,"title":{"3-232":{},"3-234":{},"3-235":{},"3-240":{},"3-242":{},"3-243":{},"3-244":{},"3-245":{},"3-246":{},"3-255":{},"3-257":{},"3-258":{},"3-263":{},"3-265":{},"3-266":{},"3-271":{},"3-273":{},"3-274":{},"3-280":{},"3-287":{},"3-295":{},"3-301":{},"3-440":{},"3-455":{},"3-465":{},"3-481":{},"3-491":{},"3-504":{},"3-517":{},"3-528":{},"3-538":{},"3-549":{},"3-562":{},"3-573":{},"3-587":{},"3-604":{},"3-617":{},"3-630":{},"3-640":{},"3-650":{},"3-728":{},"3-762":{},"5-13":{},"5-47":{},"10-6":{},"10-8":{},"10-9":{},"10-14":{},"10-16":{},"10-17":{},"10-18":{},"10-19":{},"10-20":{},"10-29":{},"10-31":{},"10-32":{},"10-37":{},"10-39":{},"10-40":{},"10-45":{},"10-47":{},"10-48":{},"10-54":{},"10-61":{},"10-69":{},"10-75":{},"12-24":{},"12-39":{},"12-49":{},"12-65":{},"12-75":{},"12-88":{},"12-101":{},"12-112":{},"12-122":{},"12-133":{},"12-146":{},"12-157":{},"12-171":{},"12-188":{},"12-201":{},"12-214":{},"12-224":{},"12-234":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["portal",{"_index":2541,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["portion",{"_index":136,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"7":{}},"component":{}}],["posit",{"_index":4804,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["posixaccount",{"_index":5170,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["posixgroup",{"_index":5171,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["posixus",{"_index":5176,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["possibl",{"_index":1280,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["post",{"_index":368,"title":{"3-104":{},"3-160":{},"3-471":{},"6-98":{},"6-154":{},"12-55":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["post_cmdlin",{"_index":2550,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["post_execut",{"_index":2549,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["post_join_mapping.tcl",{"_index":3060,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["post_ok_cod",{"_index":2567,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["post_timeout",{"_index":2583,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["postaladdress",{"_index":3591,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["postalcod",{"_index":3590,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["postjoin",{"_index":2916,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["postjoinaddaccint",{"_index":2872,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["postjoinaddgrpint",{"_index":2890,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["postjoindelaccint",{"_index":2888,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["postjoindelgrpint",{"_index":2892,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["postjoinmap",{"_index":2873,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["postjoinmodaccint",{"_index":2882,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["postjoinmodgrpint",{"_index":2891,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["postmap",{"_index":3933,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["postmappingadd",{"_index":5108,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["postmappingadd/mod",{"_index":5127,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["postmappingmod",{"_index":5111,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["postofficebox",{"_index":3976,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["postprocess",{"_index":2316,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["postprocess(ord",{"_index":2300,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["postupd",{"_index":2535,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["postuserpasswordupd",{"_index":2774,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["potenti",{"_index":3307,"title":{},"name":{},"text":{"3":{},"7":{},"12":{}},"component":{}}],["power",{"_index":8,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"12":{}},"component":{}}],["powershel",{"_index":829,"title":{"3-447":{},"3-448":{},"12-31":{},"12-32":{}},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["powershell.ex",{"_index":5414,"title":{},"name":{},"text":{"12":{}},"component":{}}],["practic",{"_index":3300,"title":{},"name":{},"text":{"3":{},"5":{},"7":{}},"component":{}}],["pre",{"_index":9,"title":{"3-146":{},"6-140":{}},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["pre_cmdlin",{"_index":2552,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["pre_execut",{"_index":2551,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["pre_ok_cod",{"_index":2568,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["pre_timeout",{"_index":2584,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["preced",{"_index":1416,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["preconfigur",{"_index":4622,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["predecessor",{"_index":2758,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["predefin",{"_index":307,"title":{"3-62":{},"6-56":{}},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["predict",{"_index":3250,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["prefac",{"_index":147,"title":{"2":{},"3-2":{}},"name":{"2":{}},"text":{"3":{}},"component":{}}],["prefer",{"_index":2042,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"12":{}},"component":{}}],["preferredlanguag",{"_index":2041,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["prefix",{"_index":2093,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["prefix=/o=pqr",{"_index":3693,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["prefixaccount",{"_index":4581,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["prefixaccount_nam",{"_index":4554,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["prefixdomain_name\\user_nam",{"_index":4521,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["preliminari",{"_index":3271,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["premis",{"_index":3580,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["prepar",{"_index":2518,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["preparatori",{"_index":2829,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["preprocess",{"_index":5088,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["preprocess(ord",{"_index":2297,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["prerequisit",{"_index":548,"title":{"3-229":{},"3-237":{},"3-249":{},"3-260":{},"3-268":{},"3-277":{},"3-284":{},"3-292":{},"3-298":{},"3-427":{},"3-451":{},"3-460":{},"3-477":{},"3-487":{},"3-499":{},"3-513":{},"3-524":{},"3-534":{},"3-545":{},"3-558":{},"3-569":{},"3-580":{},"3-601":{},"3-613":{},"3-623":{},"3-636":{},"3-644":{},"3-666":{},"3-669":{},"3-673":{},"3-698":{},"3-720":{},"3-724":{},"3-758":{},"5-5":{},"5-9":{},"5-43":{},"10-3":{},"10-11":{},"10-23":{},"10-34":{},"10-42":{},"10-51":{},"10-58":{},"10-66":{},"10-72":{},"12-11":{},"12-35":{},"12-44":{},"12-61":{},"12-71":{},"12-83":{},"12-97":{},"12-108":{},"12-118":{},"12-129":{},"12-142":{},"12-153":{},"12-164":{},"12-185":{},"12-197":{},"12-207":{},"12-220":{},"12-228":{},"12-250":{},"12-253":{},"12-257":{},"12-282":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"12":{}},"component":{}}],["presenc",{"_index":4250,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["present",{"_index":1331,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"11":{},"12":{}},"component":{}}],["preserv",{"_index":2938,"title":{},"name":{},"text":{"3":{},"6":{},"9":{},"12":{}},"component":{}}],["press",{"_index":1733,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["preupdat",{"_index":2530,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["preupdate(dxmrequestor",{"_index":4101,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["preuserpasswordupd",{"_index":2773,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["prevent",{"_index":2570,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["previou",{"_index":74,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["previous",{"_index":2252,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["previousparticip",{"_index":2015,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["previousparticipants.manag",{"_index":1791,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["previousparticipants[0].manag",{"_index":2023,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["prf",{"_index":4441,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["primari",{"_index":1620,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["primarili",{"_index":19,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"12":{}},"component":{}}],["primarykey(old",{"_index":4050,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["princip",{"_index":4334,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["principl",{"_index":2390,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["printer",{"_index":4278,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["printwrit",{"_index":1927,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["prior",{"_index":1963,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["prioriti",{"_index":1748,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["privat",{"_index":2714,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["privileg",{"_index":503,"title":{"3-198":{},"3-207":{},"3-208":{},"3-405":{},"3-406":{},"3-407":{},"3-408":{},"7-7":{},"7-16":{},"7-17":{},"11-87":{},"11-88":{},"11-89":{},"11-90":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["privilege.r",{"_index":3323,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["privilegeresolut",{"_index":3907,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["privilege’",{"_index":3303,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["problem",{"_index":72,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"12":{}},"component":{}}],["proc",{"_index":3095,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["procadmin",{"_index":4720,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["proce",{"_index":1401,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"11":{}},"component":{}}],["procedur",{"_index":523,"title":{"3-210":{},"3-511":{},"3-708":{},"3-709":{},"3-749":{},"5-34":{},"7-19":{},"12-95":{},"12-292":{},"12-293":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"11":{},"12":{}},"component":{}}],["process",{"_index":535,"title":{"3-217":{},"3-348":{},"3-349":{},"3-350":{},"3-351":{},"3-352":{},"7-26":{},"11-30":{},"11-31":{},"11-32":{},"11-33":{},"11-34":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["process.let’",{"_index":3251,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["processaccountpassword",{"_index":2775,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["processaddevent(addev",{"_index":2786,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["processdeleteevent(deleteev",{"_index":2807,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["processes.request",{"_index":1268,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["processmodifyevent(modifyev",{"_index":2797,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["processor",{"_index":5008,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["processpasswordev",{"_index":2771,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["processresourcestrings(resources.iter",{"_index":2190,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["processsourceentri",{"_index":2529,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["processticketsintern",{"_index":3790,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["procur",{"_index":3524,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["produc",{"_index":2253,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["product",{"_index":142,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["profession",{"_index":1720,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["profil",{"_index":414,"title":{"3-136":{},"3-163":{},"3-590":{},"3-596":{},"6-130":{},"6-157":{},"12-174":{},"12-180":{}},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["profile.tcl",{"_index":2910,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["profile.xml",{"_index":4174,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["profile/us",{"_index":4419,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["profilefromou.j",{"_index":4177,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["profileid",{"_index":4306,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["profileid=dxrname,type=profil",{"_index":4290,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["profilepath",{"_index":5477,"title":{},"name":{},"text":{"12":{}},"component":{}}],["program",{"_index":64,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"12":{}},"component":{}}],["programm",{"_index":1504,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["progress",{"_index":4763,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["prohibit",{"_index":1313,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["project",{"_index":684,"title":{"3-339":{},"3-340":{},"3-341":{},"11-21":{},"11-22":{},"11-23":{}},"name":{},"text":{"3":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["projecteventcontrol",{"_index":3770,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["prolog",{"_index":2517,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["prompt",{"_index":3359,"title":{},"name":{},"text":{"3":{},"8":{},"10":{},"12":{}},"component":{}}],["propag",{"_index":1356,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["proper",{"_index":3735,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["properli",{"_index":3648,"title":{},"name":{},"text":{"3":{},"5":{},"10":{},"12":{}},"component":{}}],["properti",{"_index":286,"title":{"3-53":{},"3-67":{},"3-107":{},"3-180":{},"3-181":{},"3-185":{},"3-186":{},"3-187":{},"3-188":{},"3-430":{},"3-433":{},"3-437":{},"3-689":{},"6-47":{},"6-61":{},"6-101":{},"6-174":{},"6-175":{},"6-179":{},"6-180":{},"6-181":{},"6-182":{},"12-14":{},"12-17":{},"12-21":{},"12-273":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["properties.for",{"_index":3287,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["propertypag",{"_index":4051,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["propos",{"_index":2616,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"11":{}},"component":{}}],["proprietari",{"_index":2519,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["protect",{"_index":2269,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["protocol",{"_index":2907,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"12":{}},"component":{}}],["prov:configuration/nat",{"_index":1635,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["provid",{"_index":7,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["provid.setproviderid(\"sp",{"_index":4069,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["provid.setprovideridtype(provideridentifierprovideridtypetype.urn",{"_index":4070,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["providerid",{"_index":4122,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["provideridentifi",{"_index":4068,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["provider’",{"_index":3578,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["provis",{"_index":43,"title":{"12":{},"3-133":{},"3-216":{},"3-370":{},"3-371":{},"3-414":{},"3-416":{},"3-716":{},"3-717":{},"3-733":{},"3-739":{},"3-740":{},"3-743":{},"3-746":{},"3-752":{},"3-753":{},"3-754":{},"3-756":{},"5-1":{},"5-2":{},"5-18":{},"5-24":{},"5-25":{},"5-28":{},"5-31":{},"5-37":{},"5-38":{},"5-39":{},"5-41":{},"6-127":{},"7-25":{},"11-52":{},"11-53":{},"11-96":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["provisioningservice/services/spmlv2requestservic",{"_index":3494,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["proxi",{"_index":797,"title":{"3-425":{},"12-9":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["proxyaddress",{"_index":5381,"title":{},"name":{},"text":{"12":{}},"component":{}}],["ps_script_nam",{"_index":5370,"title":{},"name":{},"text":{"12":{}},"component":{}}],["ps_script_param1",{"_index":5368,"title":{},"name":{},"text":{"12":{}},"component":{}}],["ps_script_param2",{"_index":5372,"title":{},"name":{},"text":{"12":{}},"component":{}}],["pseudo",{"_index":3844,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["psexec",{"_index":5459,"title":{},"name":{},"text":{"12":{}},"component":{}}],["pso",{"_index":3507,"title":{},"name":{},"text":{"3":{},"5":{},"10":{}},"component":{}}],["psremot",{"_index":5421,"title":{},"name":{},"text":{"12":{}},"component":{}}],["pstc",{"_index":3620,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["ptdssomemb",{"_index":4555,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ptdssomember:*account",{"_index":4582,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ptdssomember:*account_nam",{"_index":4556,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["public",{"_index":1922,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["public/priv",{"_index":4754,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["publish",{"_index":2497,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["pure",{"_index":4042,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["purif",{"_index":2832,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["purpos",{"_index":1765,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"12":{}},"component":{}}],["put",{"_index":2205,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["pw",{"_index":4072,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["pw.adddsmlvalue(mod[0].getdsmlvalue(0",{"_index":4086,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["pw.getdsmlvalue(0).tostr",{"_index":4088,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["pw.setname(\"pw",{"_index":4085,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["pwd",{"_index":2596,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["pwdaccountexpirecontrol",{"_index":3807,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["pwdaccountresetcontrol",{"_index":3822,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["pwdexpirationnotif",{"_index":5202,"title":{},"name":{},"text":{"11":{}},"component":{}}],["pwdlastset",{"_index":5388,"title":{},"name":{},"text":{"12":{}},"component":{}}],["pwdreset",{"_index":4142,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["pwduserexpirecontrol",{"_index":3835,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["pwduserexpirecontroller.xml",{"_index":3836,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["pwduserexpirecontroller’",{"_index":3839,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["pwexpirationnotif",{"_index":3831,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["qualifi",{"_index":2285,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["qualiti",{"_index":180,"title":{},"name":{},"text":{"2":{},"3":{},"10":{}},"component":{}}],["quality.thi",{"_index":3729,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["queri",{"_index":4416,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["question",{"_index":1479,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["question/answ",{"_index":4483,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["queue",{"_index":3631,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["quickli",{"_index":41,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"12":{}},"component":{}}],["quit",{"_index":2391,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["quot",{"_index":1244,"title":{},"name":{},"text":{"3":{},"4":{},"11":{},"12":{}},"component":{}}],["r/3",{"_index":1024,"title":{"3-600":{},"3-601":{},"3-602":{},"3-603":{},"3-604":{},"3-605":{},"3-611":{},"12-184":{},"12-185":{},"12-186":{},"12-187":{},"12-188":{},"12-189":{},"12-195":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["r2",{"_index":5419,"title":{},"name":{},"text":{"12":{}},"component":{}}],["r3",{"_index":3658,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["racf",{"_index":983,"title":{"3-568":{},"3-570":{},"3-571":{},"3-573":{},"3-574":{},"3-713":{},"12-152":{},"12-154":{},"12-155":{},"12-157":{},"12-158":{},"12-297":{}},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["racf2ident_valid",{"_index":4981,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["racfattribut",{"_index":4398,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["racfdefaultgroup",{"_index":4396,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["racfid",{"_index":4395,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["racfown",{"_index":4404,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["racfpassword",{"_index":4394,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["racfsubgroupnam",{"_index":4405,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["racfsuperiorgroup",{"_index":4403,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ran",{"_index":1342,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["random",{"_index":1575,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["randomli",{"_index":3814,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["rang",{"_index":2480,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["rc",{"_index":3114,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["rcp",{"_index":1120,"title":{"3-678":{},"12-262":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["re",{"_index":519,"title":{"3-208":{},"3-397":{},"3-398":{},"3-411":{},"7-17":{},"11-79":{},"11-80":{},"11-93":{}},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{}},"component":{}}],["reach",{"_index":1519,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["reachabl",{"_index":5488,"title":{},"name":{},"text":{"12":{}},"component":{}}],["react",{"_index":2117,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"12":{}},"component":{}}],["read",{"_index":279,"title":{"3-50":{},"3-51":{},"3-53":{},"3-54":{},"3-64":{},"3-65":{},"3-67":{},"3-68":{},"6-44":{},"6-45":{},"6-47":{},"6-48":{},"6-58":{},"6-59":{},"6-61":{},"6-62":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["read/writ",{"_index":2997,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["read_dn_onli",{"_index":3189,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["readabl",{"_index":1834,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"11":{}},"component":{}}],["readconfigur",{"_index":2146,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["readi",{"_index":3786,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["readme.doc",{"_index":83,"title":{},"name":{},"text":{"1":{},"2":{},"3":{}},"component":{}}],["readme.txt",{"_index":82,"title":{},"name":{},"text":{"1":{},"2":{},"3":{}},"component":{}}],["readonli",{"_index":3587,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["real",{"_index":380,"title":{"3-111":{},"6-105":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["realiz",{"_index":2372,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["realli",{"_index":1864,"title":{},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["realtim",{"_index":2546,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["reapprov",{"_index":777,"title":{"3-412":{},"11-94":{}},"name":{},"text":{"3":{},"11":{}},"component":{}}],["reason",{"_index":1593,"title":{},"name":{},"text":{"3":{},"6":{},"9":{},"11":{},"12":{}},"component":{}}],["reassign",{"_index":4414,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["rec_data",{"_index":4918,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["recalcul",{"_index":1389,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["receiv",{"_index":1508,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["recent",{"_index":4150,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["recipi",{"_index":3829,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["recogn",{"_index":1484,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"12":{}},"component":{}}],["recognit",{"_index":1842,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["recommend",{"_index":1491,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["reconcili",{"_index":3993,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["reconnect",{"_index":5440,"title":{},"name":{},"text":{"12":{}},"component":{}}],["record",{"_index":1161,"title":{"3-702":{},"12-286":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["records/entri",{"_index":3218,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["recov",{"_index":5295,"title":{},"name":{},"text":{"11":{}},"component":{}}],["recover",{"_index":1534,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["recreat",{"_index":5478,"title":{},"name":{},"text":{"12":{}},"component":{}}],["recreated_in_t",{"_index":2867,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["recur",{"_index":1446,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["red",{"_index":3409,"title":{},"name":{},"text":{"3":{},"9":{}},"component":{}}],["redirect",{"_index":2554,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["reduc",{"_index":258,"title":{"3-42":{},"6-36":{}},"name":{},"text":{"3":{},"6":{},"10":{},"11":{}},"component":{}}],["reduct",{"_index":5282,"title":{},"name":{},"text":{"11":{}},"component":{}}],["redund",{"_index":3401,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["refer",{"_index":58,"title":{"3-147":{},"3-148":{},"3-149":{},"3-657":{},"3-664":{},"6-141":{},"6-142":{},"6-143":{},"12-241":{},"12-248":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["referenc",{"_index":1091,"title":{"3-660":{},"3-663":{},"12-244":{},"12-247":{}},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["referenti",{"_index":4670,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["refin",{"_index":539,"title":{"3-220":{},"8-2":{}},"name":{},"text":{"3":{},"5":{},"8":{},"10":{}},"component":{}}],["refinement=internet",{"_index":3697,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["reflect",{"_index":3358,"title":{},"name":{},"text":{"3":{},"8":{},"10":{},"12":{}},"component":{}}],["refresh",{"_index":3681,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["refus",{"_index":2961,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"12":{}},"component":{}}],["regard",{"_index":2486,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["regardless",{"_index":5385,"title":{},"name":{},"text":{"12":{}},"component":{}}],["region",{"_index":5003,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["regist",{"_index":998,"title":{"3-581":{},"12-165":{}},"name":{},"text":{"3":{},"4":{},"7":{},"10":{},"12":{}},"component":{}}],["registr",{"_index":161,"title":{"3-193":{},"7-2":{}},"name":{},"text":{"2":{},"3":{},"6":{},"7":{},"12":{}},"component":{}}],["registration\\_nation",{"_index":1705,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["registrationserv",{"_index":4207,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["regret",{"_index":1697,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["regul",{"_index":4273,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["regular",{"_index":1549,"title":{},"name":{},"text":{"3":{},"6":{},"9":{},"11":{}},"component":{}}],["regularli",{"_index":2487,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"11":{}},"component":{}}],["regulatori",{"_index":3254,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["reject",{"_index":1442,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"12":{}},"component":{}}],["rel",{"_index":1607,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["relat",{"_index":558,"title":{"3-236":{},"3-237":{},"3-238":{},"3-241":{},"3-317":{},"10-10":{},"10-11":{},"10-12":{},"10-15":{},"10-91":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["relationship",{"_index":2461,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["relay",{"_index":1988,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["releas",{"_index":76,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"9":{},"12":{}},"component":{}}],["relev",{"_index":1517,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["reli",{"_index":2115,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["reliabl",{"_index":5464,"title":{},"name":{},"text":{"12":{}},"component":{}}],["reload",{"_index":4391,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["remain",{"_index":1433,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["remaind",{"_index":3626,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["remark",{"_index":4011,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["rememb",{"_index":3381,"title":{},"name":{},"text":{"3":{},"8":{},"12":{}},"component":{}}],["remind",{"_index":1537,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["remot",{"_index":620,"title":{"3-289":{},"3-449":{},"3-581":{},"3-671":{},"10-63":{},"12-33":{},"12-165":{},"12-255":{}},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["remote_account",{"_index":4710,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["remote_hdm",{"_index":4687,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["remote_secure_interact",{"_index":4685,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["remote_subdir",{"_index":4709,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["remotememb",{"_index":4598,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["remoteown",{"_index":4599,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["remotesign",{"_index":5424,"title":{},"name":{},"text":{"12":{}},"component":{}}],["remov",{"_index":1316,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"11":{},"12":{}},"component":{}}],["removesharedmailboxpermission.ps1",{"_index":5376,"title":{},"name":{},"text":{"12":{}},"component":{}}],["renam",{"_index":927,"title":{"3-521":{},"12-105":{}},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["rename/mov",{"_index":4137,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["rename_entri",{"_index":3157,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["renames/mov",{"_index":5387,"title":{},"name":{},"text":{"12":{}},"component":{}}],["renames/remov",{"_index":4140,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["renew",{"_index":4341,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["reorder",{"_index":1664,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["repeat",{"_index":122,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{}},"component":{}}],["replac",{"_index":488,"title":{"3-187":{},"6-181":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["repli",{"_index":1478,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["replic",{"_index":3673,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["report",{"_index":780,"title":{"3-413":{},"3-414":{},"3-415":{},"11-95":{},"11-96":{},"11-97":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"11":{}},"component":{}}],["report.filenam",{"_index":5222,"title":{},"name":{},"text":{"11":{}},"component":{}}],["report.nam",{"_index":5221,"title":{},"name":{},"text":{"11":{}},"component":{}}],["report.outputformat",{"_index":5223,"title":{},"name":{},"text":{"11":{}},"component":{}}],["report.sizelimit",{"_index":5224,"title":{},"name":{},"text":{"11":{}},"component":{}}],["reportgener",{"_index":5315,"title":{},"name":{},"text":{"11":{}},"component":{}}],["repositori",{"_index":2561,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["repository\\script",{"_index":5379,"title":{},"name":{},"text":{"12":{}},"component":{}}],["repres",{"_index":94,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"10":{},"12":{}},"component":{}}],["represent",{"_index":1633,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"11":{}},"component":{}}],["reproduct",{"_index":1253,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["req",{"_index":4730,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["reqtyp",{"_index":2615,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["request",{"_index":156,"title":{"7":{},"3-7":{},"3-8":{},"3-13":{},"3-14":{},"3-15":{},"3-20":{},"3-21":{},"3-22":{},"3-25":{},"3-29":{},"3-33":{},"3-34":{},"3-80":{},"3-191":{},"6-1":{},"6-2":{},"6-7":{},"6-8":{},"6-9":{},"6-14":{},"6-15":{},"6-16":{},"6-19":{},"6-23":{},"6-27":{},"6-28":{},"6-74":{}},"name":{},"text":{"2":{},"3":{},"6":{},"7":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["request.typ",{"_index":2614,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["request.type.add",{"_index":2617,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["request.type.delet",{"_index":2619,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["request.type.modifi",{"_index":2618,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["request.xml",{"_index":2739,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["request/respons",{"_index":4790,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["requestapproval_bodi",{"_index":1640,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["requestid",{"_index":638,"title":{"3-305":{},"10-79":{}},"name":{},"text":{"3":{},"10":{}},"component":{}}],["requesttyp",{"_index":4094,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["requestwasrejected_body=w",{"_index":1696,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["requestworkflow",{"_index":2270,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["requestworkflowinst",{"_index":2212,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["requestworkflowinstance)wf",{"_index":2153,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["requir",{"_index":1259,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["requisit",{"_index":5167,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["res.add(\"cn=taspatch",{"_index":2385,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["res.dxrassignto@mail",{"_index":2001,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["reserv",{"_index":1251,"title":{},"name":{},"text":{"3":{},"4":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["reset",{"_index":704,"title":{"3-356":{},"3-357":{},"3-358":{},"3-359":{},"3-360":{},"3-361":{},"11-38":{},"11-39":{},"11-40":{},"11-41":{},"11-42":{},"11-43":{}},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["resetpwdcantchang",{"_index":2878,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["resetpwdneverexpir",{"_index":2881,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["resetpwdnotrequir",{"_index":2876,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["resid",{"_index":1699,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["resolut",{"_index":689,"title":{"3-343":{},"3-344":{},"3-381":{},"3-382":{},"3-383":{},"3-405":{},"3-406":{},"3-407":{},"3-408":{},"11-25":{},"11-26":{},"11-63":{},"11-64":{},"11-65":{},"11-87":{},"11-88":{},"11-89":{},"11-90":{}},"name":{},"text":{"3":{},"6":{},"7":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["resolv",{"_index":1518,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["resourc",{"_index":1357,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["resource(",{"_index":2013,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["resource.getattributenam",{"_index":2179,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["resource.getresourcetyp",{"_index":2175,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["resource.gettyp",{"_index":2176,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["resource.setproperty(_attributenam",{"_index":2183,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["resource.toxmlstr",{"_index":2185,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["resourceord",{"_index":2171,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["resources,o=mi",{"_index":2010,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["resources[0",{"_index":1819,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["resourcesarray",{"_index":2173,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["resourcestr",{"_index":2188,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["resp",{"_index":3436,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["respect",{"_index":2234,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["respond",{"_index":1383,"title":{},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["respons",{"_index":2064,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["response.xml",{"_index":2740,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["rest",{"_index":2837,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["restart",{"_index":1497,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["restor",{"_index":2450,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{}},"component":{}}],["restore_act",{"_index":5110,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["restore_notes_id",{"_index":4242,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["restrict",{"_index":1304,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"11":{},"12":{}},"component":{}}],["result",{"_index":376,"title":{"3-109":{},"6-103":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["resum",{"_index":1536,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["retaiin",{"_index":4475,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["retain",{"_index":4151,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["retha.wagner@mi",{"_index":1997,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["retri",{"_index":1403,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{}},"component":{}}],["retriev",{"_index":1368,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["return",{"_index":1544,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["return_cod",{"_index":3104,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["reus",{"_index":169,"title":{},"name":{},"text":{"2":{},"3":{},"5":{},"6":{}},"component":{}}],["revers",{"_index":5322,"title":{},"name":{},"text":{"12":{}},"component":{}}],["revert",{"_index":1671,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["review",{"_index":2538,"title":{},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["revoc",{"_index":3342,"title":{},"name":{},"text":{"3":{},"7":{},"12":{}},"component":{}}],["revok",{"_index":4400,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["rewrit",{"_index":2335,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["rfc",{"_index":5172,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["rh",{"_index":5101,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["rh_",{"_index":3121,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["rh_dms(text1",{"_index":4783,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["rh_file",{"_index":3116,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["rh_file_tgt",{"_index":4927,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["rh_file_tgt(accountdxrnam",{"_index":4973,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["rh_file_tgt(changetyp",{"_index":4972,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["rh_file_tgt(groupdxrnam",{"_index":4977,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["rh_file_tgt(membershipgroupid",{"_index":4975,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["rh_ldap",{"_index":3115,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["rh_ldap(objectclass",{"_index":2984,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["rh_ldap(sn)=$rh_ldap(sn",{"_index":3096,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["rhost",{"_index":4727,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["right",{"_index":1250,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["ringcentr",{"_index":4604,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["risk",{"_index":514,"title":{"3-205":{},"7-14":{}},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["risklevel",{"_index":1373,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["rmdir",{"_index":5466,"title":{},"name":{},"text":{"12":{}},"component":{}}],["robust",{"_index":2989,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["role",{"_index":526,"title":{"3-212":{},"3-243":{},"3-245":{},"3-247":{},"3-248":{},"3-249":{},"3-250":{},"3-252":{},"3-254":{},"3-255":{},"3-256":{},"3-553":{},"7-21":{},"10-17":{},"10-19":{},"10-21":{},"10-22":{},"10-23":{},"10-24":{},"10-26":{},"10-28":{},"10-29":{},"10-30":{},"12-137":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["role2odbc_syncgroupmembers_metacp",{"_index":4925,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["role=dirxident",{"_index":3925,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["role_ldapxxl_syncaccount_metacp",{"_index":5142,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["role_ts_account_bas",{"_index":3226,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"10":{}},"component":{}}],["role_ts_group_bas",{"_index":3395,"title":{},"name":{},"text":{"3":{},"8":{},"12":{}},"component":{}}],["role_user_bas",{"_index":3225,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["roleasgattribut",{"_index":3454,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["roledb",{"_index":3491,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["roledis",{"_index":4359,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["roleid",{"_index":3446,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["roleid=dxrname,type=rol",{"_index":4291,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["roleidcolumn",{"_index":3458,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["roles).it",{"_index":3326,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["roles/permiss",{"_index":3892,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["rolesassign",{"_index":3455,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["rome",{"_index":3660,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["room",{"_index":814,"title":{"3-435":{},"3-436":{},"12-19":{},"12-20":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["root",{"_index":126,"title":{"3-432":{},"12-16":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["root.object.object…​object.attribut",{"_index":1793,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["routin",{"_index":1542,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["row",{"_index":3240,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"12":{}},"component":{}}],["rqwf",{"_index":1686,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["rqwf.getcontext",{"_index":2218,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["rqwf.getresourc",{"_index":2172,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["rqwf.getresourcestr",{"_index":2189,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["rqwf.getsubject",{"_index":2160,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["rqwf.setcontext*(ctx",{"_index":2224,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["rs",{"_index":2192,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["rsa",{"_index":4550,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["rsh",{"_index":1119,"title":{"3-678":{},"12-262":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["rsp",{"_index":4115,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["rule",{"_index":654,"title":{"3-313":{},"10-87":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["rule’",{"_index":3743,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["run",{"_index":211,"title":{"3-18":{},"3-42":{},"3-100":{},"3-175":{},"3-409":{},"3-410":{},"3-447":{},"6-12":{},"6-36":{},"6-94":{},"6-169":{},"11-91":{},"11-92":{},"12-31":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["run(taskcontext",{"_index":2108,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["runpss.bat",{"_index":5431,"title":{},"name":{},"text":{"12":{}},"component":{}}],["runtestmapping.bat",{"_index":2724,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["runtim",{"_index":233,"title":{"3-28":{},"6-22":{}},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["runwf",{"_index":5308,"title":{},"name":{},"text":{"11":{}},"component":{}}],["runworkflowextern",{"_index":5205,"title":{},"name":{},"text":{"11":{}},"component":{}}],["s",{"_index":2142,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["s*n*/confdb/common/lib",{"_index":2388,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["s*n*/confdb/jobs/myjob",{"_index":2062,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["s*n*/confdb/jobs/samplejob/lib",{"_index":2258,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["s*n*/confdb/jobs/socketed/lib",{"_index":2328,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["s*n*\\tmp\\nat\\class",{"_index":1685,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["s*n*\\tmp\\nat\\classes\\rqwfs\\wfs\\default\\users\\custom",{"_index":1704,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["s*n/confdb/job",{"_index":2060,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["sa4",{"_index":4789,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sal",{"_index":4799,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sale",{"_index":3561,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["salesforc",{"_index":995,"title":{"3-579":{},"3-580":{},"3-583":{},"3-584":{},"3-585":{},"3-586":{},"3-587":{},"12-163":{},"12-164":{},"12-167":{},"12-168":{},"12-169":{},"12-170":{},"12-171":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["salesforce.com",{"_index":4450,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["salut",{"_index":1900,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["sam",{"_index":4370,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["samaccountnam",{"_index":4380,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["same",{"_index":1725,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["same.).if",{"_index":4473,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sampl",{"_index":642,"title":{"3-307":{},"3-315":{},"10-81":{},"10-89":{}},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["sample@gmx.d",{"_index":2251,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["sampleapplychangesuserhook",{"_index":2315,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["samplejob",{"_index":2257,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["samplejobwithsess",{"_index":2271,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["samplemapp",{"_index":2713,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["sandbox",{"_index":4613,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sap",{"_index":1022,"title":{"3-600":{},"3-601":{},"3-602":{},"3-603":{},"3-604":{},"3-605":{},"3-611":{},"12-184":{},"12-185":{},"12-186":{},"12-187":{},"12-188":{},"12-189":{},"12-195":{}},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["sapeccumconnector",{"_index":3388,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["sapepum",{"_index":4658,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sapjco3.dll/.so",{"_index":2764,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["sapjco3.jar",{"_index":2763,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["sapr3_full.ldif",{"_index":3712,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["sapr3_om.ldif",{"_index":3713,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["sapr3um",{"_index":4491,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sapum4role.jar",{"_index":2765,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["sapusernam",{"_index":4497,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["satisfi",{"_index":1526,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"12":{}},"component":{}}],["save",{"_index":1728,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["saveentry(entri",{"_index":2818,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["saveidinaddressbook",{"_index":4186,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["saveidinfil",{"_index":4187,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["saveinternetpassword",{"_index":4188,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sc",{"_index":4360,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["scenario",{"_index":166,"title":{"8":{},"3-218":{},"3-219":{},"3-220":{},"3-225":{},"8-1":{},"8-2":{},"9-2":{}},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["scenario,cn=rules,cn=policies,cn=mi",{"_index":5307,"title":{},"name":{},"text":{"11":{}},"component":{}}],["scenario’",{"_index":3495,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["schedul",{"_index":350,"title":{"3-91":{},"6-85":{}},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["scheduled/ldiffile/ldiffile2id",{"_index":5311,"title":{},"name":{},"text":{"11":{}},"component":{}}],["schema",{"_index":784,"title":{"3-417":{},"3-418":{},"3-419":{},"12-1":{},"12-2":{},"12-3":{}},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"12":{}},"component":{}}],["schema.bat",{"_index":5332,"title":{},"name":{},"text":{"12":{}},"component":{}}],["schema.nt.adm",{"_index":5330,"title":{},"name":{},"text":{"12":{}},"component":{}}],["schema.sh",{"_index":5333,"title":{},"name":{},"text":{"12":{}},"component":{}}],["scheme",{"_index":911,"title":{"3-510":{},"12-94":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["scim",{"_index":4609,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["scimv2",{"_index":4605,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["scope",{"_index":445,"title":{"3-156":{},"6-150":{}},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["scp",{"_index":1123,"title":{"3-679":{},"12-263":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["scrambl",{"_index":4549,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["screen",{"_index":3129,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["script",{"_index":67,"title":{"3-130":{},"3-131":{},"3-132":{},"3-133":{},"3-134":{},"3-135":{},"3-136":{},"3-137":{},"3-162":{},"3-163":{},"3-315":{},"3-447":{},"3-448":{},"6-124":{},"6-125":{},"6-126":{},"6-127":{},"6-128":{},"6-129":{},"6-130":{},"6-131":{},"6-156":{},"6-157":{},"10-89":{},"12-31":{},"12-32":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"9":{},"10":{},"12":{}},"component":{}}],["script’",{"_index":2830,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["sdk",{"_index":3950,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["search",{"_index":868,"title":{"3-475":{},"12-59":{}},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["search::searchmemb",{"_index":5130,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["searchaccountnam",{"_index":4236,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["searchattribut",{"_index":4149,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["searchbas",{"_index":3521,"title":{},"name":{},"text":{"3":{},"10":{},"11":{}},"component":{}}],["searchentries(str",{"_index":2817,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["searchmemb",{"_index":5136,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["searchpag",{"_index":5118,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["searchpaged::bind",{"_index":5128,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["searchpaged::searchmemb",{"_index":5132,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["searchrequest",{"_index":5067,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["searchtyp",{"_index":5117,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["searchtype::determinesearchtyp",{"_index":5124,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["sec",{"_index":3694,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["second",{"_index":1323,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["secondari",{"_index":2463,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["secondary_group",{"_index":4650,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["secret",{"_index":4339,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["secretari",{"_index":2026,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["section",{"_index":145,"title":{"3-681":{},"3-682":{},"3-683":{},"12-265":{},"12-266":{},"12-267":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["secur",{"_index":1911,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"12":{}},"component":{}}],["secureway",{"_index":4984,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["see",{"_index":144,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["seen",{"_index":1609,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["segreg",{"_index":1742,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["sehr",{"_index":2036,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["select",{"_index":235,"title":{"3-29":{},"3-30":{},"3-31":{},"3-32":{},"3-184":{},"3-687":{},"6-23":{},"6-24":{},"6-25":{},"6-26":{},"6-178":{},"12-271":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["select=accountdxrname,groupdxrname,membershipaccountid,membershipgroupid,groupid",{"_index":4935,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["self",{"_index":160,"title":{"3-193":{},"7-2":{}},"name":{},"text":{"2":{},"3":{},"6":{},"7":{}},"component":{}}],["semicolon",{"_index":1631,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["send",{"_index":635,"title":{"3-303":{},"10-77":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["sendmail",{"_index":1483,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["senior",{"_index":3273,"title":{},"name":{},"text":{"3":{},"7":{},"11":{}},"component":{}}],["senit",{"_index":3815,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["sens",{"_index":2448,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"11":{},"12":{}},"component":{}}],["sense.a",{"_index":3313,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["sensit",{"_index":926,"title":{"3-521":{},"12-105":{}},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["sent",{"_index":644,"title":{"3-308":{},"10-82":{}},"name":{},"text":{"3":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["separ",{"_index":118,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["seq_num",{"_index":4852,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["seqnum",{"_index":4851,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sequenc",{"_index":1332,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"11":{},"12":{}},"component":{}}],["sequenti",{"_index":1298,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["seri",{"_index":2621,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["serif",{"_index":1471,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["seriou",{"_index":1547,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["serv",{"_index":1653,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["server",{"_index":252,"title":{"3-38":{},"3-425":{},"3-646":{},"3-647":{},"3-717":{},"5-2":{},"6-32":{},"12-9":{},"12-230":{},"12-231":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["server/o=mi",{"_index":4165,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["server_address",{"_index":3172,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["server_nam",{"_index":4159,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["server’",{"_index":2056,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["servic",{"_index":532,"title":{"3-215":{},"3-253":{},"3-389":{},"3-554":{},"3-612":{},"3-613":{},"3-614":{},"3-615":{},"3-616":{},"3-617":{},"3-618":{},"7-24":{},"10-27":{},"11-71":{},"12-138":{},"12-196":{},"12-197":{},"12-198":{},"12-199":{},"12-200":{},"12-201":{},"12-202":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["serviceag",{"_index":5285,"title":{},"name":{},"text":{"11":{}},"component":{}}],["services/data/v30.0",{"_index":4465,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["services/oauth2/token",{"_index":4464,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["session",{"_index":2266,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["session'",{"_index":2295,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["session.getldapconnection().getldapconnection.getldapconnect",{"_index":2281,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["set",{"_index":3,"title":{"1-1":{},"2-2":{},"3-4":{},"3-109":{},"3-314":{},"3-430":{},"3-432":{},"3-433":{},"3-437":{},"3-461":{},"3-646":{},"3-676":{},"3-756":{},"5-41":{},"6-103":{},"10-88":{},"12-14":{},"12-16":{},"12-17":{},"12-21":{},"12-45":{},"12-230":{},"12-260":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["set.th",{"_index":3337,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["set_nv",{"_index":2972,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["setaccdis",{"_index":2875,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["setaccen",{"_index":2874,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["setacl",{"_index":5470,"title":{},"name":{},"text":{"12":{}},"component":{}}],["setactivityapplicationstate(str",{"_index":2305,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["setchgpwdatlogin",{"_index":2877,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["setconfiguration(idmjob",{"_index":2103,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["seteventcontext",{"_index":2779,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["setglobalcontext",{"_index":2516,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["setgrouptyp",{"_index":2861,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["setmailbox",{"_index":5025,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["setparticipantcontext(participantcontext",{"_index":2415,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["setpassword",{"_index":571,"title":{"3-246":{},"3-485":{},"3-508":{},"3-567":{},"3-578":{},"3-594":{},"10-20":{},"12-69":{},"12-92":{},"12-151":{},"12-162":{},"12-178":{}},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["setpassword_in_not",{"_index":4243,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["setpassword_in_racf",{"_index":4388,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["setpasswordflag",{"_index":2859,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["setproperti",{"_index":2244,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["setproperty(\"*nam",{"_index":2254,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["setproperty(\"add",{"_index":2248,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["setproperty(\"delet",{"_index":2250,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["setproperty(*nam",{"_index":2242,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["setpwdcantchang",{"_index":2886,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["setpwdneverexpir",{"_index":2879,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["setpwdnotrequir",{"_index":2884,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["setresourcedn(*dn",{"_index":2241,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["setsubjectdn(*dn",{"_index":2240,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["setter",{"_index":2170,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["settings.us",{"_index":3335,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["settings\\myscript.ps1",{"_index":5429,"title":{},"name":{},"text":{"12":{}},"component":{}}],["settings\\script1.ps1",{"_index":5430,"title":{},"name":{},"text":{"12":{}},"component":{}}],["settsattributesinrol",{"_index":2893,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["setup",{"_index":165,"title":{"3-679":{},"12-263":{}},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"12":{}},"component":{}}],["setworkflowcontext",{"_index":2309,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["setworkflowcontext(map",{"_index":2312,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["seven",{"_index":2339,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["sever",{"_index":1322,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["sf",{"_index":1007,"title":{"3-588":{},"3-589":{},"3-590":{},"3-591":{},"3-592":{},"3-593":{},"3-594":{},"3-598":{},"3-599":{},"12-172":{},"12-173":{},"12-174":{},"12-175":{},"12-176":{},"12-177":{},"12-178":{},"12-182":{},"12-183":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["shadow",{"_index":3690,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["shadowaccount",{"_index":5179,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["shadowflag",{"_index":5185,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["shadowus",{"_index":5177,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["shall",{"_index":1852,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"11":{},"12":{}},"component":{}}],["share",{"_index":813,"title":{"3-435":{},"3-436":{},"12-19":{},"12-20":{}},"name":{},"text":{"3":{},"5":{},"6":{},"9":{},"11":{},"12":{}},"component":{}}],["sharedmailbox_team1",{"_index":5365,"title":{},"name":{},"text":{"12":{}},"component":{}}],["sharefil",{"_index":834,"title":{"3-450":{},"3-451":{},"3-452":{},"3-453":{},"3-454":{},"3-455":{},"12-34":{},"12-35":{},"12-36":{},"12-37":{},"12-38":{},"12-39":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sharefile_realtim",{"_index":5483,"title":{},"name":{},"text":{"12":{}},"component":{}}],["sharepoint",{"_index":1048,"title":{"3-622":{},"3-623":{},"3-624":{},"3-625":{},"3-626":{},"3-627":{},"3-628":{},"3-629":{},"3-630":{},"3-631":{},"12-206":{},"12-207":{},"12-208":{},"12-209":{},"12-210":{},"12-211":{},"12-212":{},"12-213":{},"12-214":{},"12-215":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sharepointca.c",{"_index":4540,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sharepointcacerts.jk",{"_index":4547,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sharepointserver1",{"_index":4530,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sharepointserver2",{"_index":4533,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sheet",{"_index":3408,"title":{},"name":{},"text":{"3":{},"9":{}},"component":{}}],["shell",{"_index":3710,"title":{},"name":{},"text":{"3":{},"5":{},"10":{},"12":{}},"component":{}}],["ship",{"_index":81,"title":{},"name":{},"text":{"1":{},"2":{},"3":{}},"component":{}}],["short",{"_index":2233,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["shortnam",{"_index":4235,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["shouldn’t",{"_index":2795,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["show",{"_index":1453,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["show.adm",{"_index":3702,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["shown",{"_index":98,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["shut",{"_index":2574,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["shutdown",{"_index":2576,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["sid",{"_index":5472,"title":{},"name":{},"text":{"12":{}},"component":{}}],["side",{"_index":462,"title":{"3-168":{},"3-169":{},"3-170":{},"3-171":{},"3-475":{},"6-162":{},"6-163":{},"6-164":{},"6-165":{},"12-59":{}},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"10":{},"12":{}},"component":{}}],["sie",{"_index":1643,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["siemen",{"_index":1365,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["siemens.dxm.configuration.dxmuserhookconfig",{"_index":2783,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["siemens.dxm.connector.dxmrequestor",{"_index":4097,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["siemens.dxm.connector.event.addev",{"_index":2789,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["siemens.dxm.connector.event.deleteev",{"_index":2808,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["siemens.dxm.connector.event.modifyev",{"_index":2798,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["siemens.dxm.connector.jdbc.accessoverjdbcodbcdriv",{"_index":3449,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["siemens.dxm.connector.spml.identifi",{"_index":4098,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["siemens.dxm.ruleprocessing.rul",{"_index":3877,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["siemens.dxr.ag",{"_index":3876,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["siemens.dxr.service.order.api",{"_index":2287,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["siemens.dxr.service.order.api.applychangesuserhook",{"_index":2317,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["sign",{"_index":3987,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["signatur",{"_index":2340,"title":{},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["significantli",{"_index":2988,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["similar",{"_index":1744,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["simpl",{"_index":1423,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["simpledateformat",{"_index":1957,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["simpledateformat(\"yyyi",{"_index":1959,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["simplest",{"_index":2620,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["simpli",{"_index":1577,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["simplic",{"_index":3474,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["simplifi",{"_index":3354,"title":{},"name":{},"text":{"3":{},"8":{},"12":{}},"component":{}}],["simul",{"_index":2947,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"11":{}},"component":{}}],["singl",{"_index":1627,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"11":{},"12":{}},"component":{}}],["singleton",{"_index":2276,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["sipass",{"_index":1178,"title":{"3-714":{},"12-298":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sipass2ident_valid",{"_index":5001,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["site",{"_index":3581,"title":{},"name":{},"text":{"3":{},"10":{},"11":{},"12":{}},"component":{}}],["site1",{"_index":4531,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["site2",{"_index":4532,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["situat",{"_index":2114,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["six",{"_index":2338,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["size",{"_index":1463,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["skip",{"_index":2389,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["sku",{"_index":4324,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["skuid",{"_index":4351,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["skype",{"_index":5335,"title":{},"name":{},"text":{"12":{}},"component":{}}],["slash",{"_index":4406,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["slight",{"_index":4513,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["slightli",{"_index":1740,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["slow",{"_index":5100,"title":{},"name":{},"text":{"3":{},"5":{},"11":{}},"component":{}}],["sm",{"_index":4999,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["small",{"_index":1655,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["smaller",{"_index":1896,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["smith",{"_index":2032,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["smtp",{"_index":5382,"title":{},"name":{},"text":{"12":{}},"component":{}}],["sn",{"_index":1975,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["sn/confdb/common/lib",{"_index":3828,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["sn/confdb/jobs/eventbasedrules/lib",{"_index":3739,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["sn;givenname;cn;employeenumber;employeetype;c;l;o;street;telephonenumber;mail;ou;description;preferredlanguage;dxmoprmaster;dxrsalutation;postalcode;facsimiletelephonenumber;dxrst",{"_index":3552,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["snap",{"_index":5024,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["snapshot",{"_index":4628,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["snippet",{"_index":2135,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["snmod",{"_index":2686,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["soap",{"_index":3299,"title":{},"name":{},"text":{"3":{},"7":{},"12":{}},"component":{}}],["sober",{"_index":1777,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["socket",{"_index":302,"title":{"3-60":{},"3-61":{},"6-54":{},"6-55":{}},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["socketedjob.getparameterasstring(activityconstants._param_five_",{"_index":2362,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["socketedjob.getparameterasstring(activityconstants._param_four_",{"_index":2360,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["socketedjob.getparameterasstring(activityconstants._param_one_",{"_index":2354,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["socketedjob.getparameterasstring(activityconstants._param_three_",{"_index":2358,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["socketedjob.getparameterasstring(activityconstants._param_two_",{"_index":2356,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["sod",{"_index":757,"title":{"3-395":{},"3-396":{},"11-77":{},"11-78":{}},"name":{},"text":{"3":{},"6":{},"7":{},"11":{}},"component":{}}],["soft",{"_index":3135,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["softwar",{"_index":5011,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["solari",{"_index":4640,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sole",{"_index":4648,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["solid",{"_index":1460,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["solut",{"_index":1978,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["solv",{"_index":71,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"12":{}},"component":{}}],["some_user_account",{"_index":4753,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["someon",{"_index":1339,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["someth",{"_index":1567,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["sometim",{"_index":2263,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["sometin",{"_index":3549,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["somevalu",{"_index":2679,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["sonderbenutz",{"_index":4270,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sonderrol",{"_index":4271,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["soon",{"_index":2077,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["sophist",{"_index":4224,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sort",{"_index":2440,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["sorted_list",{"_index":3194,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["sortnam",{"_index":4796,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sourc",{"_index":27,"title":{"10":{},"3-142":{},"3-226":{},"3-227":{},"3-251":{},"3-306":{},"3-309":{},"3-316":{},"3-687":{},"6-136":{},"10-1":{},"10-25":{},"10-80":{},"10-83":{},"10-90":{},"12-271":{}},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{}},"component":{}}],["source.",{"_index":3575,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["source.cn",{"_index":3606,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["source.dxrnam",{"_index":2557,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["source.dxrprimarykey",{"_index":2475,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["source.employeenumb",{"_index":4309,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["source.familynam",{"_index":3972,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["source.getattr",{"_index":2643,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["source.getattrs().get(\"binaryvalue\".tolowercas",{"_index":2660,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["source.getattrs().get(\"descript",{"_index":2650,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["source.getattrs().get(\"sn",{"_index":2646,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["source.getopattr",{"_index":2670,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["source.getopattrs().get(\"dxrprimarykeyold\".tolowercas",{"_index":2672,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["source.gidnumb",{"_index":4653,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["source.givennam",{"_index":3573,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["source.id",{"_index":3533,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["source.sn",{"_index":3574,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["source.uidnumb",{"_index":4652,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["source.usernam",{"_index":3974,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["source_data",{"_index":4917,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sourceattr",{"_index":4055,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sourceattrnam",{"_index":4038,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sourceattrs.get(\"dxrprimarykey",{"_index":4076,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sourceentri",{"_index":4030,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sourceguidid",{"_index":3145,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["sourceid",{"_index":4105,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sourceidattr",{"_index":3146,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["sourcepath",{"_index":2514,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["sp",{"_index":4061,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sp1",{"_index":3992,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["space",{"_index":3031,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["sparingli",{"_index":4694,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["special",{"_index":805,"title":{"3-431":{},"12-15":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["specif",{"_index":135,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["specifi",{"_index":134,"title":{"3-62":{},"3-448":{},"6-56":{},"12-32":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["specificattribut",{"_index":4034,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["spell",{"_index":4729,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["split",{"_index":1397,"title":{},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["splitlocalremotememb",{"_index":2860,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["spml",{"_index":2156,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["spml/soap",{"_index":4156,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["spmlutils.getidstring(ev",{"_index":2810,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["spmlv1",{"_index":2543,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["spmlv1soapconnector2t",{"_index":4267,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["spmlv1tov2",{"_index":3489,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["spmlv2",{"_index":3490,"title":{},"name":{},"text":{"3":{},"5":{},"10":{}},"component":{}}],["spmlv2webservic",{"_index":3492,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["sponsor",{"_index":2028,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"11":{}},"component":{}}],["sql",{"_index":4053,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["squar",{"_index":105,"title":{},"name":{},"text":{"1":{},"2":{},"3":{}},"component":{}}],["src(cn",{"_index":4978,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["src(dxrprimarykey",{"_index":4976,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["src.test/confs/sampl",{"_index":2733,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["src.test/confs/sample/conf.xml",{"_index":2731,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["src.test/confs/sample/domain",{"_index":2744,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["src.test/confs/sample/request.xml",{"_index":2743,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["src.test/testsample.java",{"_index":2745,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["src/map/samplets/accounts/from",{"_index":2749,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["src/map/samplets/accounts/to",{"_index":2748,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["src/map/samplets/accounts/to/employeetypesource.java",{"_index":2746,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["src/map/samplets/groups/from",{"_index":2751,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["src/map/samplets/groups/to",{"_index":2750,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["src_add_marking_attr",{"_index":3181,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["src_add_marking_valu",{"_index":3182,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["src_bind_id",{"_index":5125,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["src_conn_param",{"_index":3043,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["src_conn_param(attr_list",{"_index":4774,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["src_conn_param(bind_id",{"_index":5131,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["src_data",{"_index":3180,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["src_del_marking_attr",{"_index":3183,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["src_del_marking_valu",{"_index":3184,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["src_dir_typ",{"_index":4920,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["src_master_nam",{"_index":2980,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["src_search_param",{"_index":3185,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["src_sort_param",{"_index":3193,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["srcattrdescript",{"_index":2649,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["srcattrdescription.getvalu",{"_index":2651,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["srcbinattr",{"_index":2659,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["srcbinattr.getbinvalue(0",{"_index":2664,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["srcbinattr.getmembertyp",{"_index":2662,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["srcconn",{"_index":4102,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["srcdescript",{"_index":2648,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["srcopattr",{"_index":2671,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["srcopattr.getvalue(0",{"_index":2673,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["srcsn",{"_index":2642,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["srcsnattr",{"_index":2645,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["srcsnattr.getvalue(0",{"_index":2647,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["srtname",{"_index":4795,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ssh",{"_index":1122,"title":{"3-679":{},"12-263":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sshd",{"_index":5160,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["ssl",{"_index":1054,"title":{"3-627":{},"12-211":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["ssl/tl",{"_index":4129,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sso",{"_index":865,"title":{"3-474":{},"12-58":{}},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["sso/provision/spmlrout",{"_index":3995,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["st",{"_index":3592,"title":{},"name":{},"text":{"3":{},"5":{},"10":{},"12":{}},"component":{}}],["st(page",{"_index":5123,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["stabl",{"_index":4633,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["stamp",{"_index":2941,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["standalon",{"_index":2734,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["standard",{"_index":404,"title":{"3-130":{},"3-131":{},"3-132":{},"3-134":{},"3-137":{},"3-448":{},"6-124":{},"6-125":{},"6-126":{},"6-128":{},"6-131":{},"12-32":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["star",{"_index":5055,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["start",{"_index":347,"title":{"3-89":{},"3-92":{},"3-411":{},"3-412":{},"6-83":{},"6-86":{},"11-93":{},"11-94":{}},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["start_tim",{"_index":3198,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["startabl",{"_index":1522,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["startdat",{"_index":3896,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["startreapprovalworkflow",{"_index":5206,"title":{},"name":{},"text":{"11":{}},"component":{}}],["starttim",{"_index":1854,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["startup",{"_index":1683,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["startworkflowsforreapprov",{"_index":5314,"title":{},"name":{},"text":{"11":{}},"component":{}}],["state",{"_index":201,"title":{"3-13":{},"3-14":{},"3-15":{},"3-84":{},"6-7":{},"6-8":{},"6-9":{},"6-78":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["state=accept",{"_index":3793,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["state=applychange.complet",{"_index":3800,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["state=approval.complet",{"_index":3794,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["state=approval.error",{"_index":3798,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["state=approval.reject",{"_index":3796,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["state=fail",{"_index":3797,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["state=input.complet",{"_index":3799,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["state=reject",{"_index":3795,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["state=run",{"_index":3791,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["state=succeed",{"_index":3792,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["statement",{"_index":1486,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["static",{"_index":1294,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["station",{"_index":4274,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["statist",{"_index":1131,"title":{"3-684":{},"12-268":{}},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["statu",{"_index":779,"title":{"3-413":{},"3-414":{},"3-415":{},"11-95":{},"11-96":{},"11-97":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["status=activ",{"_index":3691,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["statusinfo",{"_index":4458,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["statusinfo__c",{"_index":1000,"title":{"3-582":{},"12-166":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["statusinfo_c",{"_index":4456,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["statusinfoc",{"_index":4448,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["stay",{"_index":5007,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["stdout",{"_index":3069,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["step",{"_index":1293,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["step.for",{"_index":2826,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["still",{"_index":184,"title":{},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["stop",{"_index":1413,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["storag",{"_index":2465,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["storage.jar",{"_index":2351,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["store",{"_index":26,"title":{"3-178":{},"3-183":{},"3-244":{},"3-245":{},"3-246":{},"3-424":{},"3-511":{},"3-530":{},"3-531":{},"3-595":{},"3-596":{},"3-597":{},"3-598":{},"3-599":{},"3-708":{},"3-709":{},"6-172":{},"6-177":{},"10-18":{},"10-19":{},"10-20":{},"12-8":{},"12-95":{},"12-114":{},"12-115":{},"12-179":{},"12-180":{},"12-181":{},"12-182":{},"12-183":{},"12-292":{},"12-293":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["store.(not",{"_index":1279,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["store.in",{"_index":5320,"title":{},"name":{},"text":{"12":{}},"component":{}}],["store.th",{"_index":1285,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["store.thi",{"_index":3416,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["storepass",{"_index":4541,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["store’",{"_index":5054,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["str",{"_index":3557,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["straightforward",{"_index":4223,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["streamlin",{"_index":3252,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["street",{"_index":3593,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["string",{"_index":1714,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["string)conf.getproperty(\"objectclass",{"_index":2785,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["string)environment.get(\"user_bas",{"_index":2677,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["string)it.next",{"_index":2193,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["string)o",{"_index":2410,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["string)properties.get(\"filenam",{"_index":2382,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["string.valueof(map.get(\"attributenam",{"_index":2141,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["string.valueof(map.get(\"modifysubject",{"_index":2143,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["string1",{"_index":3087,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["string2",{"_index":3088,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["stringarray2string(resource.getvalues(attrnam",{"_index":2181,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["strip",{"_index":4583,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["strober",{"_index":1781,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["strongli",{"_index":3407,"title":{},"name":{},"text":{"3":{},"5":{},"9":{},"12":{}},"component":{}}],["structur",{"_index":195,"title":{"3-10":{},"3-37":{},"3-41":{},"3-85":{},"3-113":{},"3-130":{},"3-131":{},"3-132":{},"3-133":{},"3-712":{},"6-4":{},"6-31":{},"6-35":{},"6-79":{},"6-107":{},"6-124":{},"6-125":{},"6-126":{},"6-127":{},"12-296":{}},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["su",{"_index":5159,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["sub",{"_index":194,"title":{"3-10":{},"6-4":{}},"name":{},"text":{"3":{},"6":{}},"component":{}}],["sub)sit",{"_index":4558,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["subcas",{"_index":4680,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["subcompon",{"_index":3138,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["subdirectori",{"_index":4708,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["subdivid",{"_index":3406,"title":{},"name":{},"text":{"3":{},"9":{}},"component":{}}],["subdomain",{"_index":5395,"title":{},"name":{},"text":{"12":{}},"component":{}}],["subentri",{"_index":3860,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["subfold",{"_index":2068,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"12":{}},"component":{}}],["subject",{"_index":1337,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["subject.getdirectorytyp",{"_index":2168,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["subject.getid",{"_index":2164,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["subject.gettyp",{"_index":2166,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["subject.toxmlstr",{"_index":2209,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["subjectdn",{"_index":2163,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["subjecttyp",{"_index":2374,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["subject’",{"_index":1789,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["subordin",{"_index":3679,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["subroutin",{"_index":2913,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["subscrib",{"_index":892,"title":{"3-494":{},"12-78":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["subscript",{"_index":5485,"title":{},"name":{},"text":{"12":{}},"component":{}}],["subsect",{"_index":1749,"title":{},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["subsequ",{"_index":1904,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"11":{},"12":{}},"component":{}}],["subset",{"_index":2908,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["subsit",{"_index":4559,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["subsite’",{"_index":4560,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["substitut",{"_index":247,"title":{"3-35":{},"6-29":{}},"name":{},"text":{"3":{},"6":{}},"component":{}}],["substr",{"_index":2003,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["subsystem",{"_index":3663,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["subtre",{"_index":1626,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["subtyp",{"_index":2956,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["succe",{"_index":1301,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["succeed",{"_index":1502,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["success",{"_index":1511,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["successfulli",{"_index":3063,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["successor",{"_index":2756,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["such",{"_index":1501,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["suffici",{"_index":1366,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"12":{}},"component":{}}],["suffix",{"_index":3958,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["suit",{"_index":1717,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["suitabl",{"_index":3672,"title":{},"name":{},"text":{"3":{},"10":{},"11":{},"12":{}},"component":{}}],["summar",{"_index":5047,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["summari",{"_index":1097,"title":{"3-664":{},"12-248":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sun",{"_index":1690,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["superflu",{"_index":1445,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["superior",{"_index":791,"title":{"3-422":{},"12-6":{}},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["superior.j",{"_index":4283,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["superior_info",{"_index":3163,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["supplementari",{"_index":4651,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["suppli",{"_index":103,"title":{"3-48":{},"6-42":{}},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["support",{"_index":159,"title":{"3-211":{},"7-20":{}},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["suppos",{"_index":2256,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["suppress",{"_index":3199,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["suppresschangeev",{"_index":5239,"title":{},"name":{},"text":{"11":{}},"component":{}}],["suppresspwdev",{"_index":3483,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["sure",{"_index":1409,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["surnam",{"_index":1803,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["surround",{"_index":1883,"title":{},"name":{},"text":{"3":{},"6":{},"9":{}},"component":{}}],["suse",{"_index":4629,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["svclayerconnector",{"_index":3487,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["svcsession",{"_index":2265,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["svctsaccount",{"_index":3741,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["switch",{"_index":416,"title":{"3-137":{},"3-138":{},"3-139":{},"3-140":{},"3-141":{},"3-146":{},"6-131":{},"6-132":{},"6-133":{},"6-134":{},"6-135":{},"6-140":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["sy",{"_index":4718,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["symbol",{"_index":3548,"title":{},"name":{},"text":{"3":{},"10":{},"11":{},"12":{}},"component":{}}],["symmetr",{"_index":4338,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["sync",{"_index":1831,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["sync2t",{"_index":2432,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["syncaccount_odbcimport",{"_index":4949,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["synchoneway",{"_index":3913,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["synchron",{"_index":171,"title":{"3-118":{},"3-303":{},"3-632":{},"3-706":{},"3-722":{},"5-7":{},"6-112":{},"10-77":{},"12-216":{},"12-290":{}},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["synchronis",{"_index":2436,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["synchronization.java",{"_index":1273,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["synconeway2ident",{"_index":3419,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["synconeway2t",{"_index":3420,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["synonym",{"_index":4371,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["synopsi",{"_index":3066,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["syntax",{"_index":90,"title":{"3-390":{},"11-72":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["system",{"_index":29,"title":{"12":{},"3-222":{},"3-416":{},"3-417":{},"3-420":{},"3-423":{},"3-429":{},"3-453":{},"3-457":{},"3-479":{},"3-489":{},"3-501":{},"3-515":{},"3-526":{},"3-536":{},"3-547":{},"3-559":{},"3-560":{},"3-570":{},"3-585":{},"3-602":{},"3-615":{},"3-625":{},"3-628":{},"3-638":{},"3-645":{},"3-648":{},"3-655":{},"3-656":{},"3-658":{},"3-662":{},"3-664":{},"3-671":{},"3-726":{},"3-735":{},"3-760":{},"5-11":{},"5-20":{},"5-45":{},"8-4":{},"12-1":{},"12-4":{},"12-7":{},"12-13":{},"12-37":{},"12-41":{},"12-63":{},"12-73":{},"12-85":{},"12-99":{},"12-110":{},"12-120":{},"12-131":{},"12-143":{},"12-144":{},"12-154":{},"12-169":{},"12-186":{},"12-199":{},"12-209":{},"12-212":{},"12-222":{},"12-229":{},"12-232":{},"12-239":{},"12-240":{},"12-242":{},"12-246":{},"12-248":{},"12-255":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["system.in",{"_index":5319,"title":{},"name":{},"text":{"12":{}},"component":{}}],["system.thi",{"_index":5321,"title":{},"name":{},"text":{"12":{}},"component":{}}],["systems.th",{"_index":1271,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["systems.they",{"_index":1275,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["systems/bind",{"_index":4574,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["system’",{"_index":3826,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["t",{"_index":1953,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["tab",{"_index":477,"title":{"3-180":{},"3-181":{},"3-185":{},"3-186":{},"3-187":{},"3-188":{},"6-174":{},"6-175":{},"6-179":{},"6-180":{},"6-181":{},"6-182":{}},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["tabl",{"_index":1142,"title":{"3-691":{},"3-692":{},"3-693":{},"3-694":{},"3-695":{},"3-696":{},"3-735":{},"5-20":{},"12-275":{},"12-276":{},"12-277":{},"12-278":{},"12-279":{},"12-280":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["table(",{"_index":4025,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["table.column",{"_index":4968,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["table=empl",{"_index":3470,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["table=tablenam",{"_index":5070,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["tablename.columnnam",{"_index":4026,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["tag",{"_index":1553,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["tag*=valu",{"_index":3389,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["tag=*valu",{"_index":3393,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["tag=valu",{"_index":3392,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["tailor",{"_index":2544,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["take",{"_index":1514,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["taken",{"_index":1761,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["talk",{"_index":3308,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["target",{"_index":182,"title":{"12":{},"3-144":{},"3-222":{},"3-416":{},"3-417":{},"3-420":{},"3-429":{},"3-453":{},"3-457":{},"3-479":{},"3-489":{},"3-501":{},"3-515":{},"3-526":{},"3-536":{},"3-547":{},"3-560":{},"3-570":{},"3-585":{},"3-602":{},"3-615":{},"3-625":{},"3-628":{},"3-638":{},"3-648":{},"3-655":{},"3-656":{},"3-658":{},"3-662":{},"3-664":{},"3-687":{},"3-726":{},"3-760":{},"5-11":{},"5-45":{},"6-138":{},"8-4":{},"12-1":{},"12-4":{},"12-13":{},"12-37":{},"12-41":{},"12-63":{},"12-73":{},"12-85":{},"12-99":{},"12-110":{},"12-120":{},"12-131":{},"12-144":{},"12-154":{},"12-169":{},"12-186":{},"12-199":{},"12-209":{},"12-212":{},"12-222":{},"12-232":{},"12-239":{},"12-240":{},"12-242":{},"12-246":{},"12-248":{},"12-271":{}},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["target.dxrnam",{"_index":4618,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["target.dxrprimarykey",{"_index":3968,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["target.externalapplicationnam",{"_index":4005,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["target.externaldomainnam",{"_index":4003,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["target.externalsystemnam",{"_index":4002,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["target.homedirroot",{"_index":2558,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["target.id",{"_index":3969,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["target.usernam",{"_index":4004,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["target_entry_exist",{"_index":3200,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["target_system",{"_index":3369,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["targetcertifi",{"_index":4191,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["targetid",{"_index":4028,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["targetidattr",{"_index":3139,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["targetidstr",{"_index":3929,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["targetmapresult",{"_index":2704,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["targetmapresult.addmodification(targetmod",{"_index":2708,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["targetmapresult.addoperationalattr(dstopattr",{"_index":2712,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["targetmapresult.setrequesttype(reqtyp",{"_index":2705,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["targetmapresult.setrequesttype(request.type.delet",{"_index":2702,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["targetmod",{"_index":2625,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["targetmod.addvalue(valu",{"_index":2707,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["targetmod.setname(tgtattrnam",{"_index":2626,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["targetmod.setoperation(dsmlmodificationoperationtype.delet",{"_index":2627,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["targetmod.setoperation(dsmlmodificationoperationtype.replac",{"_index":2706,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["targetsystem",{"_index":4170,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["targetsystem_nam",{"_index":4171,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["target’",{"_index":2983,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["task",{"_index":48,"title":{"3-708":{},"3-709":{},"12-292":{},"12-293":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"11":{},"12":{}},"component":{}}],["task.dirx",{"_index":3352,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["task.you",{"_index":3355,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["taskcontext",{"_index":2116,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["taskctx",{"_index":2268,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["taspatch",{"_index":1999,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["tba",{"_index":3891,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["tbdel",{"_index":2800,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["tbdel\".equalsignorecase(mod.getvalue(0",{"_index":2804,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["tcl",{"_index":113,"title":{"3-128":{},"3-129":{},"3-158":{},"3-159":{},"3-160":{},"3-161":{},"3-177":{},"3-309":{},"3-384":{},"3-655":{},"3-753":{},"5-38":{},"6-122":{},"6-123":{},"6-152":{},"6-153":{},"6-154":{},"6-155":{},"6-171":{},"10-83":{},"11-66":{},"12-239":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["tcl’",{"_index":2902,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["tcp/ip",{"_index":3173,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["team1",{"_index":5364,"title":{},"name":{},"text":{"12":{}},"component":{}}],["technic",{"_index":1821,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["technicaldomain",{"_index":1820,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["techniqu",{"_index":2973,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["technolog",{"_index":189,"title":{"6":{},"3-6":{}},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["tele",{"_index":4990,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["telephon",{"_index":3029,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["telephonenumb",{"_index":3241,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["telephoni",{"_index":4611,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["tell",{"_index":2055,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["telnet",{"_index":4621,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["templat",{"_index":18,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["temporari",{"_index":1530,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["temporarili",{"_index":1532,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["tenant",{"_index":4335,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["term",{"_index":2477,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["termin",{"_index":2935,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["terminate.adm",{"_index":3703,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["terminolog",{"_index":3699,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["test",{"_index":331,"title":{"3-80":{},"3-111":{},"3-112":{},"3-113":{},"3-114":{},"6-74":{},"6-105":{},"6-106":{},"6-107":{},"6-108":{}},"name":{},"text":{"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["test_mapping_onli",{"_index":3201,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["test_max_entri",{"_index":3202,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["testplugin",{"_index":1923,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["testsampl",{"_index":2729,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["testsample.java",{"_index":2726,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["testtest",{"_index":2219,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["text",{"_index":1448,"title":{},"name":{},"text":{"3":{},"6":{},"9":{},"11":{},"12":{}},"component":{}}],["text.automaticgeneratedmail",{"_index":1588,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["text.contactpersonsthatreject",{"_index":1586,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["text.generalquest",{"_index":1589,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["text1",{"_index":4782,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["text2",{"_index":4818,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["text3",{"_index":4667,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["text4",{"_index":4819,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["textencodedoraddress",{"_index":5015,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["tgt",{"_index":3103,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["tgt(member",{"_index":5148,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["tgt(objectclass",{"_index":5145,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["tgt(uniquememb",{"_index":5146,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["tgt_add_marking_attr",{"_index":3203,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["tgt_add_marking_valu",{"_index":3204,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["tgt_conn_param",{"_index":3042,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["tgt_conn_param(attr_list",{"_index":4777,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["tgt_data",{"_index":3101,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["tgt_del_marking_attr",{"_index":3205,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["tgt_del_marking_valu",{"_index":3206,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["tgt_import_mod",{"_index":3207,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["tgt_keep_object",{"_index":3208,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["tgt_mod_marking_attr",{"_index":3209,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["tgt_mod_marking_valu",{"_index":3210,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["tgt_search_param",{"_index":3111,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["tgt_sort_param",{"_index":3214,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["tgtattrnam",{"_index":2613,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["tgtconn",{"_index":4104,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["th",{"_index":4121,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["that’",{"_index":3038,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["theconnector",{"_index":4112,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["theconnector.extendedrequest(extreq",{"_index":4116,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["them.for",{"_index":3404,"title":{},"name":{},"text":{"3":{},"9":{}},"component":{}}],["them.it",{"_index":149,"title":{},"name":{},"text":{"2":{},"3":{}},"component":{}}],["theori",{"_index":3730,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["therefor",{"_index":1832,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["thesp",{"_index":4056,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["thi",{"_index":3411,"title":{},"name":{},"text":{"3":{},"9":{}},"component":{}}],["think",{"_index":3633,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["third",{"_index":2260,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["thoroughli",{"_index":3317,"title":{},"name":{},"text":{"3":{},"5":{},"7":{},"12":{}},"component":{}}],["those",{"_index":2471,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["though",{"_index":3550,"title":{},"name":{},"text":{"3":{},"5":{},"10":{},"12":{}},"component":{}}],["thousand",{"_index":5094,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["thread",{"_index":2120,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["three",{"_index":1258,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["through",{"_index":2375,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["throw",{"_index":1928,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["thrown",{"_index":1541,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["thu",{"_index":1545,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"11":{},"12":{}},"component":{}}],["thumb",{"_index":3314,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["ticket",{"_index":536,"title":{"3-217":{},"3-350":{},"3-351":{},"3-352":{},"7-26":{},"11-32":{},"11-33":{},"11-34":{}},"name":{},"text":{"3":{},"6":{},"7":{},"11":{}},"component":{}}],["tienum",{"_index":4805,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["time",{"_index":259,"title":{"3-42":{},"3-111":{},"3-390":{},"6-36":{},"6-105":{},"11-72":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["time_v",{"_index":3083,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["time_valu",{"_index":3080,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["timeout",{"_index":1305,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["timestamp",{"_index":5218,"title":{},"name":{},"text":{"11":{}},"component":{}}],["timezonekey",{"_index":4469,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["tip",{"_index":268,"title":{"3-45":{},"6-39":{}},"name":{},"text":{"3":{},"6":{}},"component":{}}],["tit",{"_index":4798,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["titl",{"_index":3594,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["tivoli",{"_index":5337,"title":{},"name":{},"text":{"12":{}},"component":{}}],["to.gend",{"_index":1980,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["to.givennam",{"_index":1979,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["to.preferredlanguag",{"_index":1970,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["to.sn",{"_index":1473,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["to/from",{"_index":3961,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["to[0].sn",{"_index":1974,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["to[i].sn",{"_index":1976,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["tobedelet",{"_index":5274,"title":{},"name":{},"text":{"11":{}},"component":{}}],["tobepocess",{"_index":1950,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["tobeprocess",{"_index":1948,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["today",{"_index":5161,"title":{},"name":{},"text":{"3":{},"5":{},"11":{}},"component":{}}],["todo",{"_index":4930,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["togeth",{"_index":1611,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["token",{"_index":4463,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["tombston",{"_index":2623,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["tombstone_bas",{"_index":3110,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["tomcat",{"_index":3513,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["tool",{"_index":1622,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"10":{},"12":{}},"component":{}}],["toolkit",{"_index":5453,"title":{},"name":{},"text":{"12":{}},"component":{}}],["top",{"_index":1461,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"11":{},"12":{}},"component":{}}],["topic",{"_index":224,"title":{"3-24":{},"6-18":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["touch",{"_index":1665,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["toward",{"_index":4561,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["toxmlstr",{"_index":2198,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["trace",{"_index":422,"title":{"3-141":{},"3-182":{},"3-189":{},"3-680":{},"6-135":{},"6-176":{},"6-183":{},"12-264":{}},"name":{},"text":{"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["trace.filenam",{"_index":5215,"title":{},"name":{},"text":{"11":{}},"component":{}}],["trace.level",{"_index":5216,"title":{},"name":{},"text":{"11":{}},"component":{}}],["trace.timestamp.format",{"_index":5217,"title":{},"name":{},"text":{"11":{}},"component":{}}],["trace.timestamp.format=ee",{"_index":5268,"title":{},"name":{},"text":{"11":{}},"component":{}}],["trace.txt",{"_index":5334,"title":{},"name":{},"text":{"12":{}},"component":{}}],["trace_fil",{"_index":3070,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["trace_level",{"_index":3215,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["trace_out",{"_index":3086,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["track",{"_index":69,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"10":{},"12":{}},"component":{}}],["trademark",{"_index":1245,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["trail",{"_index":754,"title":{"3-393":{},"3-394":{},"11-75":{},"11-76":{}},"name":{},"text":{"3":{},"7":{},"11":{}},"component":{}}],["transact",{"_index":4991,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["transfer",{"_index":1731,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["transform",{"_index":1162,"title":{"3-702":{},"12-286":{}},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["transformtopre80csp0",{"_index":5299,"title":{},"name":{},"text":{"11":{}},"component":{}}],["transit",{"_index":5197,"title":{},"name":{},"text":{"11":{}},"component":{}}],["translat",{"_index":1663,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["transpar",{"_index":4501,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["transport",{"_index":717,"title":{"3-367":{},"11-49":{}},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["treat",{"_index":2383,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"12":{}},"component":{}}],["tree",{"_index":1604,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["tri",{"_index":1614,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"12":{}},"component":{}}],["trial",{"_index":2946,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["trick",{"_index":269,"title":{"3-45":{},"6-39":{}},"name":{},"text":{"3":{},"6":{}},"component":{}}],["trigger",{"_index":1270,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["tripl",{"_index":5427,"title":{},"name":{},"text":{"12":{}},"component":{}}],["troubleshoot",{"_index":5013,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["true",{"_index":1349,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["truncat",{"_index":4300,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["trust",{"_index":3996,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["truststor",{"_index":4133,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["truststorepassword",{"_index":4544,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["ts",{"_index":555,"title":{"3-234":{},"3-240":{},"3-242":{},"3-243":{},"3-257":{},"3-265":{},"3-274":{},"3-432":{},"10-8":{},"10-14":{},"10-16":{},"10-17":{},"10-31":{},"10-39":{},"10-48":{},"12-16":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["ts,cn=targetsystems,cn=mi",{"_index":5342,"title":{},"name":{},"text":{"12":{}},"component":{}}],["ts.xml",{"_index":4175,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["tsaccount.xml",{"_index":4134,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["tso",{"_index":4985,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["tsstate",{"_index":5066,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["tuesday",{"_index":5254,"title":{},"name":{},"text":{"11":{}},"component":{}}],["tune",{"_index":2835,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["turn",{"_index":2006,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["tutori",{"_index":39,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"8":{},"9":{}},"component":{}}],["twice",{"_index":4093,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["two",{"_index":1500,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["type",{"_index":89,"title":{"3-9":{},"3-14":{},"3-86":{},"3-166":{},"3-206":{},"3-211":{},"3-304":{},"3-656":{},"6-3":{},"6-8":{},"6-80":{},"6-160":{},"7-15":{},"7-20":{},"10-78":{},"12-240":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["type(",{"_index":1746,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["type.manag",{"_index":3278,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["typeoford",{"_index":2035,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["types,cn=configuration,cn=wfroot,cn",{"_index":2067,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["types.dirx",{"_index":3341,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["types.in",{"_index":3325,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["typic",{"_index":1330,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["ucanaccess",{"_index":3441,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["ucanaccess.jar",{"_index":3442,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["uh",{"_index":3032,"title":{},"name":{},"text":{"3":{},"5":{},"6":{}},"component":{}}],["uh::cleanupcreateguid",{"_index":3003,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["uh::createguid",{"_index":3002,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["uh::delet",{"_index":2920,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["uh::epilog",{"_index":3050,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["uh::errorhandl",{"_index":3051,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["uh::generatetombstonedn",{"_index":2940,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["uh::initcreateguid",{"_index":3054,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["uh::initi",{"_index":3036,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["uh::loopextrafilt",{"_index":2911,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["uh::loopextrafunct",{"_index":2923,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["uh::loopperformjoin",{"_index":2924,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["uh::looppostjoin",{"_index":2917,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["uh::postmappingadd",{"_index":3123,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["uh::postmappingdel",{"_index":3124,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["uh::postmappingmod",{"_index":3125,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["uh::preprocess",{"_index":2904,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["uh::prolog",{"_index":2909,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["uh::refinesearch",{"_index":3045,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["uh:initcreateguid",{"_index":3001,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["uh:loopextrafunct",{"_index":2932,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["uid",{"_index":1855,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["uidnumb",{"_index":5181,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["ul",{"_index":4443,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["um",{"_index":1025,"title":{"3-600":{},"3-601":{},"3-602":{},"3-603":{},"3-604":{},"3-605":{},"3-611":{},"12-184":{},"12-185":{},"12-186":{},"12-187":{},"12-188":{},"12-189":{},"12-195":{}},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["um_mark",{"_index":4901,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["um_operation_id",{"_index":4903,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["um_us",{"_index":4899,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["umlaut",{"_index":4313,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["umm",{"_index":4900,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["umop",{"_index":4902,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["umu",{"_index":4898,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["umui",{"_index":4896,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["umuid",{"_index":4897,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["unassign",{"_index":4346,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["unavail",{"_index":1533,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["unbind",{"_index":2934,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["unc",{"_index":3872,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["uncertifi",{"_index":3343,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["unchang",{"_index":2084,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["uncheck",{"_index":1381,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["under",{"_index":1605,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["undergo",{"_index":5196,"title":{},"name":{},"text":{"11":{}},"component":{}}],["underli",{"_index":4444,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["underneath",{"_index":2058,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["understand",{"_index":46,"title":{"6":{},"3-6":{},"3-7":{},"3-9":{},"3-11":{},"3-13":{},"3-15":{},"3-16":{},"3-22":{},"3-81":{},"3-128":{},"3-165":{},"3-192":{},"3-199":{},"3-201":{},"3-206":{},"3-209":{},"3-213":{},"3-215":{},"3-227":{},"3-309":{},"3-319":{},"3-384":{},"3-420":{},"3-655":{},"6-1":{},"6-3":{},"6-5":{},"6-7":{},"6-9":{},"6-10":{},"6-16":{},"6-75":{},"6-122":{},"6-159":{},"7-1":{},"7-8":{},"7-10":{},"7-15":{},"7-18":{},"7-22":{},"7-24":{},"10-1":{},"10-83":{},"11-1":{},"11-66":{},"12-4":{},"12-239":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"8":{},"9":{},"11":{},"12":{}},"component":{}}],["understood",{"_index":4512,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["unexpect",{"_index":3294,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["unhandl",{"_index":2343,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["unicodepwd",{"_index":5380,"title":{},"name":{},"text":{"12":{}},"component":{}}],["unifi",{"_index":1063,"title":{"3-635":{},"3-637":{},"3-638":{},"12-219":{},"12-221":{},"12-222":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["unifyofficeconnector",{"_index":4603,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["uniqu",{"_index":435,"title":{"3-151":{},"6-145":{}},"name":{},"text":{"3":{},"6":{},"7":{},"9":{},"10":{},"12":{}},"component":{}}],["uniquememb",{"_index":4602,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["uniquenameaccount",{"_index":4219,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["uniquenameforaccounts.j",{"_index":4179,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["uniquenameforgroups.j",{"_index":4180,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["uniquenumber.j",{"_index":5180,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["uniqueorgunit",{"_index":4230,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["uniqueorgunitattrtyp",{"_index":4255,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["uniqueshortname.j",{"_index":4233,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["uniqueshortnames.j",{"_index":4234,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["unit",{"_index":670,"title":{"3-327":{},"3-328":{},"3-329":{},"3-336":{},"3-337":{},"3-338":{},"11-9":{},"11-10":{},"11-11":{},"11-18":{},"11-19":{},"11-20":{}},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["univers",{"_index":2322,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["unix",{"_index":129,"title":{"3-643":{},"3-644":{},"3-645":{},"3-648":{},"3-649":{},"3-650":{},"3-651":{},"3-754":{},"3-757":{},"3-758":{},"3-759":{},"3-760":{},"3-761":{},"3-762":{},"3-763":{},"5-39":{},"5-42":{},"5-43":{},"5-44":{},"5-45":{},"5-46":{},"5-47":{},"5-48":{},"12-227":{},"12-228":{},"12-229":{},"12-232":{},"12-233":{},"12-234":{},"12-235":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"8":{},"10":{},"12":{}},"component":{}}],["unixconnector",{"_index":4642,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["unknown",{"_index":2536,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["unless",{"_index":2366,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["unlik",{"_index":3832,"title":{},"name":{},"text":{"3":{},"5":{},"11":{}},"component":{}}],["unlimit",{"_index":1310,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["unlock",{"_index":4399,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["unmark",{"_index":2936,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["unmast",{"_index":4693,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["unnecessari",{"_index":3319,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["unnecessarili",{"_index":5425,"title":{},"name":{},"text":{"12":{}},"component":{}}],["unpack",{"_index":2722,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["unsecur",{"_index":4508,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["unsuccess",{"_index":4767,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["until",{"_index":2430,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["untouch",{"_index":3453,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["unus",{"_index":2998,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["unwil",{"_index":5280,"title":{},"name":{},"text":{"11":{}},"component":{}}],["up",{"_index":656,"title":{"3-314":{},"3-461":{},"3-646":{},"3-676":{},"3-756":{},"5-41":{},"10-88":{},"12-45":{},"12-230":{},"12-260":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["updat",{"_index":1129,"title":{"3-683":{},"3-684":{},"12-267":{},"12-268":{}},"name":{},"text":{"3":{},"5":{},"6":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["update_r",{"_index":3117,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["update_result",{"_index":3102,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["updateaddressbook.j",{"_index":5411,"title":{},"name":{},"text":{"12":{}},"component":{}}],["updated/delet",{"_index":4691,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["upgrad",{"_index":2851,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"9":{}},"component":{}}],["upon",{"_index":1327,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["upper",{"_index":3246,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["uppercas",{"_index":4163,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["url",{"_index":1750,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"12":{}},"component":{}}],["urn:oasis:names:tc:spml:1:0",{"_index":3617,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["urn:siemens:dxm:event:1:0",{"_index":3615,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["us",{"_index":13,"title":{"7":{},"9":{},"10":{},"11":{},"12":{},"3-23":{},"3-26":{},"3-35":{},"3-58":{},"3-94":{},"3-115":{},"3-125":{},"3-127":{},"3-191":{},"3-223":{},"3-226":{},"3-318":{},"3-416":{},"3-457":{},"3-458":{},"3-474":{},"3-711":{},"3-712":{},"6-17":{},"6-20":{},"6-29":{},"6-52":{},"6-88":{},"6-109":{},"6-119":{},"6-121":{},"12-41":{},"12-42":{},"12-58":{},"12-295":{},"12-296":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["us/sysinternals/bb897553.aspx",{"_index":5461,"title":{},"name":{},"text":{"12":{}},"component":{}}],["us1",{"_index":3376,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["us2",{"_index":3377,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["usabl",{"_index":5056,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["usag",{"_index":4516,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["usepagedresult",{"_index":5126,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["user",{"_index":22,"title":{"3-59":{},"3-94":{},"3-95":{},"3-96":{},"3-97":{},"3-98":{},"3-99":{},"3-100":{},"3-119":{},"3-120":{},"3-121":{},"3-123":{},"3-124":{},"3-126":{},"3-154":{},"3-157":{},"3-159":{},"3-193":{},"3-194":{},"3-196":{},"3-197":{},"3-200":{},"3-228":{},"3-229":{},"3-230":{},"3-231":{},"3-232":{},"3-233":{},"3-236":{},"3-237":{},"3-238":{},"3-241":{},"3-242":{},"3-243":{},"3-244":{},"3-245":{},"3-247":{},"3-259":{},"3-260":{},"3-261":{},"3-262":{},"3-263":{},"3-264":{},"3-265":{},"3-266":{},"3-267":{},"3-268":{},"3-269":{},"3-270":{},"3-271":{},"3-272":{},"3-273":{},"3-274":{},"3-276":{},"3-277":{},"3-278":{},"3-279":{},"3-280":{},"3-281":{},"3-283":{},"3-284":{},"3-285":{},"3-286":{},"3-287":{},"3-288":{},"3-290":{},"3-291":{},"3-292":{},"3-293":{},"3-294":{},"3-295":{},"3-296":{},"3-297":{},"3-298":{},"3-299":{},"3-300":{},"3-301":{},"3-302":{},"3-303":{},"3-342":{},"3-343":{},"3-344":{},"3-346":{},"3-362":{},"3-363":{},"3-364":{},"3-365":{},"3-366":{},"3-378":{},"3-379":{},"3-380":{},"3-381":{},"3-382":{},"3-383":{},"3-434":{},"3-468":{},"3-588":{},"3-593":{},"3-594":{},"3-599":{},"3-677":{},"6-53":{},"6-88":{},"6-89":{},"6-90":{},"6-91":{},"6-92":{},"6-93":{},"6-94":{},"6-113":{},"6-114":{},"6-115":{},"6-117":{},"6-118":{},"6-120":{},"6-148":{},"6-151":{},"6-153":{},"7-2":{},"7-3":{},"7-5":{},"7-6":{},"7-9":{},"10-2":{},"10-3":{},"10-4":{},"10-5":{},"10-6":{},"10-7":{},"10-10":{},"10-11":{},"10-12":{},"10-15":{},"10-16":{},"10-17":{},"10-18":{},"10-19":{},"10-21":{},"10-33":{},"10-34":{},"10-35":{},"10-36":{},"10-37":{},"10-38":{},"10-39":{},"10-40":{},"10-41":{},"10-42":{},"10-43":{},"10-44":{},"10-45":{},"10-46":{},"10-47":{},"10-48":{},"10-50":{},"10-51":{},"10-52":{},"10-53":{},"10-54":{},"10-55":{},"10-57":{},"10-58":{},"10-59":{},"10-60":{},"10-61":{},"10-62":{},"10-64":{},"10-65":{},"10-66":{},"10-67":{},"10-68":{},"10-69":{},"10-70":{},"10-71":{},"10-72":{},"10-73":{},"10-74":{},"10-75":{},"10-76":{},"10-77":{},"11-24":{},"11-25":{},"11-26":{},"11-28":{},"11-44":{},"11-45":{},"11-46":{},"11-47":{},"11-48":{},"11-60":{},"11-61":{},"11-62":{},"11-63":{},"11-64":{},"11-65":{},"12-18":{},"12-52":{},"12-172":{},"12-177":{},"12-178":{},"12-183":{},"12-261":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["user.expert.filt",{"_index":5226,"title":{},"name":{},"text":{"11":{}},"component":{}}],["user_bas",{"_index":2675,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{}},"component":{}}],["user_base_rel",{"_index":3432,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["user_hooks.tcl",{"_index":2901,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["user_hooks_default.tcl",{"_index":2900,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["user_nam",{"_index":3170,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["user_pwd",{"_index":3171,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["useraccountcontrol",{"_index":3435,"title":{},"name":{},"text":{"3":{},"10":{},"12":{}},"component":{}}],["userad",{"_index":3424,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["useradd",{"_index":4714,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["userattr",{"_index":3841,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["userbas",{"_index":2676,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["usercertif",{"_index":3040,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["usercertificate;binari",{"_index":3595,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["usercsv",{"_index":3564,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["userdb",{"_index":3439,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["userdis",{"_index":4001,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["userfacetfromuser.xml",{"_index":3268,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["userfilt",{"_index":3219,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["userhook",{"_index":2289,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{}},"component":{}}],["userhookrunexecut",{"_index":2545,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["userid",{"_index":4126,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["userid_home_directory*/dirx",{"_index":128,"title":{},"name":{},"text":{"1":{},"2":{},"3":{}},"component":{}}],["useridcolumn",{"_index":3456,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["userimportfromdb",{"_index":3486,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["userinfo",{"_index":2002,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["userldap",{"_index":3584,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["userlicens",{"_index":4418,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["userlicenseid",{"_index":4417,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["userloginnam",{"_index":4568,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["usermod",{"_index":4631,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["usernam",{"_index":3963,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["username=${target.usernam",{"_index":4617,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["username=tsusernam",{"_index":5037,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["userpassword",{"_index":2462,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"12":{}},"component":{}}],["userpasswordeventmanag",{"_index":3481,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["userpasswordeventmanagercontrol",{"_index":3827,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["userpasswordexpirationnotif",{"_index":5203,"title":{},"name":{},"text":{"11":{}},"component":{}}],["userresolut",{"_index":5219,"title":{},"name":{},"text":{"11":{}},"component":{}}],["userresolvercontrol",{"_index":3779,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["users.csv",{"_index":3551,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["users/salesforcecontact",{"_index":4425,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["usertyp",{"_index":4477,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["user’",{"_index":1266,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["usid",{"_index":4895,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["usn",{"_index":467,"title":{"3-172":{},"6-166":{}},"name":{},"text":{"3":{}},"component":{}}],["usnchang",{"_index":5392,"title":{},"name":{},"text":{"12":{}},"component":{}}],["usncreat",{"_index":5393,"title":{},"name":{},"text":{"12":{}},"component":{}}],["usrcsv",{"_index":3570,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["usual",{"_index":2418,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["util",{"_index":2364,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"12":{}},"component":{}}],["v",{"_index":4157,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["v1",{"_index":3616,"title":{},"name":{},"text":{"3":{},"5":{},"10":{},"12":{}},"component":{}}],["v1.0",{"_index":1150,"title":{"3-695":{},"12-279":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["v2",{"_index":3174,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["v3",{"_index":3175,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["v3.0",{"_index":4743,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["v3.1",{"_index":1117,"title":{"3-677":{},"3-696":{},"12-261":{},"12-280":{}},"name":{},"text":{"3":{},"12":{}},"component":{}}],["v8.1a",{"_index":3857,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["v8.3",{"_index":5325,"title":{},"name":{},"text":{"12":{}},"component":{}}],["v_switch",{"_index":4893,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["valid",{"_index":1164,"title":{"3-703":{},"12-287":{}},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["validate_citrix",{"_index":5484,"title":{},"name":{},"text":{"12":{}},"component":{}}],["validate_dxa_realtim",{"_index":5059,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["validate_googleapps_realtim",{"_index":3942,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["validate_notes_id",{"_index":4245,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["validate_office365_realtim",{"_index":4325,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["validate_racf_realtim",{"_index":4389,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["validate_salesforce_realtim",{"_index":4438,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["validate_sharepoint_ident_clust",{"_index":4523,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["validate_unifyoffice_realtim",{"_index":4606,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["validate_unix",{"_index":4626,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["validate_winla",{"_index":4376,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["validfrom",{"_index":4303,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["validto",{"_index":4304,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["valu",{"_index":1160,"title":{"3-702":{},"12-286":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["valuabl",{"_index":2029,"title":{},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["value(",{"_index":2703,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["value2",{"_index":2082,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["value_of_givenname.value_of_sn.value_of_dxmlnshortname@mail_suffix",{"_index":4217,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["value_of_initi",{"_index":4221,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["value_of_sn/o=value_of_orgunit",{"_index":4227,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["value_of_sn/ou=value_of_uniqueorgunit/o=value_of_orgunit",{"_index":4222,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["values.length",{"_index":2791,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["var",{"_index":4776,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["varchar(50",{"_index":4127,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["variabl",{"_index":246,"title":{"3-35":{},"3-38":{},"3-161":{},"3-162":{},"3-163":{},"6-29":{},"6-32":{},"6-155":{},"6-156":{},"6-157":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["variant",{"_index":2034,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["variat",{"_index":5442,"title":{},"name":{},"text":{"12":{}},"component":{}}],["varieti",{"_index":1289,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"12":{}},"component":{}}],["variou",{"_index":1566,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["vender",{"_index":5168,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["vendor",{"_index":5169,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["veri",{"_index":1487,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["verif",{"_index":5165,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["verifi",{"_index":1338,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"12":{}},"component":{}}],["versa",{"_index":4528,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["version",{"_index":75,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["vertic",{"_index":116,"title":{},"name":{},"text":{"1":{},"2":{},"3":{}},"component":{}}],["via",{"_index":1722,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["vice",{"_index":4527,"title":{},"name":{},"text":{"3":{},"5":{},"12":{}},"component":{}}],["view",{"_index":158,"title":{"3-414":{},"3-415":{},"11-96":{},"11-97":{}},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["view).howev",{"_index":3293,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["viewer",{"_index":3363,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["violat",{"_index":1386,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["virtual",{"_index":2220,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["visibl",{"_index":1396,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"11":{},"12":{}},"component":{}}],["visit",{"_index":5456,"title":{},"name":{},"text":{"12":{}},"component":{}}],["visual",{"_index":4770,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["vlv",{"_index":5119,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["vm",{"_index":4995,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["vmid",{"_index":1364,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["vmid.tostr",{"_index":2222,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["voic",{"_index":4610,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["void",{"_index":1924,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["vsw",{"_index":4892,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["w",{"_index":5257,"title":{},"name":{},"text":{"11":{}},"component":{}}],["wait",{"_index":1328,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["waitinerror",{"_index":1535,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["want",{"_index":1563,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["warn",{"_index":1675,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["way",{"_index":1385,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"12":{}},"component":{}}],["web",{"_index":56,"title":{"3-253":{},"10-27":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["webadmin",{"_index":3874,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["wed",{"_index":5256,"title":{},"name":{},"text":{"11":{}},"component":{}}],["week",{"_index":5253,"title":{},"name":{},"text":{"11":{}},"component":{}}],["weekend",{"_index":3367,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["well",{"_index":1325,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"9":{},"10":{},"12":{}},"component":{}}],["we’ll",{"_index":2841,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["wf",{"_index":1688,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["wf.getiniti",{"_index":2154,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["wfcontext",{"_index":2311,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["wfinstanc",{"_index":2337,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["what’",{"_index":4120,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["whenapplic",{"_index":1303,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["whenev",{"_index":3783,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["where=1=1",{"_index":4939,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["wherea",{"_index":3361,"title":{},"name":{},"text":{"3":{},"8":{},"12":{}},"component":{}}],["wherev",{"_index":3248,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["whether",{"_index":1333,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["white",{"_index":4740,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["whole",{"_index":1492,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"9":{},"11":{},"12":{}},"component":{}}],["whose",{"_index":1905,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"11":{},"12":{}},"component":{}}],["wide",{"_index":1291,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["wildcard",{"_index":2499,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["window",{"_index":132,"title":{"3-557":{},"3-558":{},"3-559":{},"3-560":{},"3-561":{},"3-562":{},"3-563":{},"12-141":{},"12-142":{},"12-143":{},"12-144":{},"12-145":{},"12-146":{},"12-147":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["windowslocalaccounts.connector",{"_index":4377,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["windowslocalaccounts.connector.dl",{"_index":4366,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["winex",{"_index":5462,"title":{},"name":{},"text":{"12":{}},"component":{}}],["winla",{"_index":4374,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["winrm",{"_index":5416,"title":{},"name":{},"text":{"12":{}},"component":{}}],["within",{"_index":1579,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["without",{"_index":573,"title":{"3-247":{},"3-282":{},"3-708":{},"10-21":{},"10-56":{},"12-292":{}},"name":{},"text":{"3":{},"4":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["wizard",{"_index":220,"title":{"3-23":{},"6-17":{}},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["wizard’",{"_index":3362,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["women",{"_index":1982,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["word",{"_index":92,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{}},"component":{}}],["work",{"_index":185,"title":{"3-202":{},"3-224":{},"3-225":{},"3-755":{},"5-40":{},"7-11":{},"9-1":{},"9-2":{}},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["workaround",{"_index":3327,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["workattr",{"_index":4986,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["workflow",{"_index":154,"title":{"6":{},"7":{},"10":{},"11":{},"12":{},"3-6":{},"3-7":{},"3-8":{},"3-13":{},"3-14":{},"3-15":{},"3-17":{},"3-18":{},"3-20":{},"3-21":{},"3-22":{},"3-25":{},"3-29":{},"3-30":{},"3-31":{},"3-32":{},"3-33":{},"3-34":{},"3-39":{},"3-51":{},"3-52":{},"3-65":{},"3-66":{},"3-80":{},"3-81":{},"3-82":{},"3-83":{},"3-85":{},"3-89":{},"3-90":{},"3-91":{},"3-92":{},"3-93":{},"3-111":{},"3-118":{},"3-122":{},"3-123":{},"3-124":{},"3-126":{},"3-127":{},"3-128":{},"3-133":{},"3-169":{},"3-171":{},"3-177":{},"3-178":{},"3-183":{},"3-191":{},"3-192":{},"3-193":{},"3-194":{},"3-195":{},"3-196":{},"3-197":{},"3-198":{},"3-199":{},"3-200":{},"3-201":{},"3-209":{},"3-212":{},"3-213":{},"3-214":{},"3-215":{},"3-216":{},"3-217":{},"3-221":{},"3-226":{},"3-227":{},"3-228":{},"3-229":{},"3-230":{},"3-231":{},"3-232":{},"3-233":{},"3-236":{},"3-237":{},"3-238":{},"3-241":{},"3-248":{},"3-249":{},"3-250":{},"3-252":{},"3-254":{},"3-255":{},"3-256":{},"3-259":{},"3-260":{},"3-261":{},"3-262":{},"3-263":{},"3-264":{},"3-267":{},"3-268":{},"3-269":{},"3-270":{},"3-271":{},"3-272":{},"3-275":{},"3-276":{},"3-277":{},"3-278":{},"3-279":{},"3-280":{},"3-281":{},"3-282":{},"3-283":{},"3-284":{},"3-285":{},"3-286":{},"3-287":{},"3-288":{},"3-289":{},"3-290":{},"3-291":{},"3-292":{},"3-293":{},"3-294":{},"3-295":{},"3-296":{},"3-297":{},"3-298":{},"3-299":{},"3-300":{},"3-301":{},"3-302":{},"3-309":{},"3-310":{},"3-311":{},"3-312":{},"3-316":{},"3-317":{},"3-318":{},"3-319":{},"3-320":{},"3-322":{},"3-323":{},"3-325":{},"3-326":{},"3-328":{},"3-329":{},"3-331":{},"3-332":{},"3-334":{},"3-335":{},"3-337":{},"3-338":{},"3-340":{},"3-341":{},"3-343":{},"3-344":{},"3-348":{},"3-349":{},"3-350":{},"3-351":{},"3-352":{},"3-353":{},"3-354":{},"3-355":{},"3-356":{},"3-357":{},"3-358":{},"3-359":{},"3-360":{},"3-362":{},"3-363":{},"3-364":{},"3-365":{},"3-366":{},"3-367":{},"3-372":{},"3-373":{},"3-374":{},"3-375":{},"3-376":{},"3-377":{},"3-378":{},"3-379":{},"3-380":{},"3-381":{},"3-382":{},"3-383":{},"3-384":{},"3-385":{},"3-386":{},"3-387":{},"3-388":{},"3-391":{},"3-392":{},"3-393":{},"3-394":{},"3-395":{},"3-396":{},"3-397":{},"3-398":{},"3-399":{},"3-400":{},"3-401":{},"3-402":{},"3-403":{},"3-404":{},"3-405":{},"3-406":{},"3-407":{},"3-408":{},"3-409":{},"3-410":{},"3-411":{},"3-412":{},"3-413":{},"3-414":{},"3-415":{},"3-416":{},"3-417":{},"3-420":{},"3-426":{},"3-427":{},"3-439":{},"3-440":{},"3-441":{},"3-444":{},"3-445":{},"3-448":{},"3-450":{},"3-454":{},"3-456":{},"3-459":{},"3-460":{},"3-461":{},"3-463":{},"3-464":{},"3-465":{},"3-466":{},"3-473":{},"3-476":{},"3-477":{},"3-480":{},"3-486":{},"3-487":{},"3-490":{},"3-498":{},"3-499":{},"3-503":{},"3-504":{},"3-505":{},"3-509":{},"3-512":{},"3-513":{},"3-516":{},"3-517":{},"3-518":{},"3-522":{},"3-523":{},"3-524":{},"3-525":{},"3-527":{},"3-528":{},"3-529":{},"3-533":{},"3-534":{},"3-535":{},"3-537":{},"3-538":{},"3-539":{},"3-544":{},"3-545":{},"3-548":{},"3-549":{},"3-550":{},"3-557":{},"3-558":{},"3-561":{},"3-562":{},"3-563":{},"3-568":{},"3-573":{},"3-574":{},"3-579":{},"3-580":{},"3-583":{},"3-584":{},"3-586":{},"3-587":{},"3-600":{},"3-601":{},"3-603":{},"3-604":{},"3-605":{},"3-611":{},"3-612":{},"3-613":{},"3-614":{},"3-616":{},"3-617":{},"3-618":{},"3-622":{},"3-623":{},"3-624":{},"3-626":{},"3-629":{},"3-630":{},"3-631":{},"3-635":{},"3-639":{},"3-640":{},"3-641":{},"3-643":{},"3-649":{},"3-650":{},"3-651":{},"3-655":{},"3-656":{},"3-658":{},"3-662":{},"3-665":{},"3-667":{},"3-685":{},"3-697":{},"3-699":{},"3-703":{},"3-704":{},"3-706":{},"3-707":{},"3-708":{},"3-709":{},"3-710":{},"3-713":{},"3-714":{},"3-716":{},"3-717":{},"3-718":{},"3-719":{},"3-721":{},"3-723":{},"3-725":{},"3-727":{},"3-733":{},"3-734":{},"3-736":{},"3-739":{},"3-740":{},"3-743":{},"3-746":{},"3-748":{},"3-750":{},"3-752":{},"3-753":{},"3-754":{},"3-756":{},"3-757":{},"3-758":{},"3-759":{},"3-761":{},"5-1":{},"5-2":{},"5-3":{},"5-4":{},"5-6":{},"5-8":{},"5-10":{},"5-12":{},"5-18":{},"5-19":{},"5-21":{},"5-24":{},"5-25":{},"5-28":{},"5-31":{},"5-33":{},"5-35":{},"5-37":{},"5-38":{},"5-39":{},"5-41":{},"5-42":{},"5-43":{},"5-44":{},"5-46":{},"6-1":{},"6-2":{},"6-7":{},"6-8":{},"6-9":{},"6-11":{},"6-12":{},"6-14":{},"6-15":{},"6-16":{},"6-19":{},"6-23":{},"6-24":{},"6-25":{},"6-26":{},"6-27":{},"6-28":{},"6-33":{},"6-45":{},"6-46":{},"6-59":{},"6-60":{},"6-74":{},"6-75":{},"6-76":{},"6-77":{},"6-79":{},"6-83":{},"6-84":{},"6-85":{},"6-86":{},"6-87":{},"6-105":{},"6-112":{},"6-116":{},"6-117":{},"6-118":{},"6-120":{},"6-121":{},"6-122":{},"6-127":{},"6-163":{},"6-165":{},"6-171":{},"6-172":{},"6-177":{},"7-1":{},"7-2":{},"7-3":{},"7-4":{},"7-5":{},"7-6":{},"7-7":{},"7-8":{},"7-9":{},"7-10":{},"7-18":{},"7-21":{},"7-22":{},"7-23":{},"7-24":{},"7-25":{},"7-26":{},"8-3":{},"10-1":{},"10-2":{},"10-3":{},"10-4":{},"10-5":{},"10-6":{},"10-7":{},"10-10":{},"10-11":{},"10-12":{},"10-15":{},"10-22":{},"10-23":{},"10-24":{},"10-26":{},"10-28":{},"10-29":{},"10-30":{},"10-33":{},"10-34":{},"10-35":{},"10-36":{},"10-37":{},"10-38":{},"10-41":{},"10-42":{},"10-43":{},"10-44":{},"10-45":{},"10-46":{},"10-49":{},"10-50":{},"10-51":{},"10-52":{},"10-53":{},"10-54":{},"10-55":{},"10-56":{},"10-57":{},"10-58":{},"10-59":{},"10-60":{},"10-61":{},"10-62":{},"10-63":{},"10-64":{},"10-65":{},"10-66":{},"10-67":{},"10-68":{},"10-69":{},"10-70":{},"10-71":{},"10-72":{},"10-73":{},"10-74":{},"10-75":{},"10-76":{},"10-83":{},"10-84":{},"10-85":{},"10-86":{},"10-90":{},"10-91":{},"11-1":{},"11-2":{},"11-4":{},"11-5":{},"11-7":{},"11-8":{},"11-10":{},"11-11":{},"11-13":{},"11-14":{},"11-16":{},"11-17":{},"11-19":{},"11-20":{},"11-22":{},"11-23":{},"11-25":{},"11-26":{},"11-30":{},"11-31":{},"11-32":{},"11-33":{},"11-34":{},"11-35":{},"11-36":{},"11-37":{},"11-38":{},"11-39":{},"11-40":{},"11-41":{},"11-42":{},"11-44":{},"11-45":{},"11-46":{},"11-47":{},"11-48":{},"11-49":{},"11-54":{},"11-55":{},"11-56":{},"11-57":{},"11-58":{},"11-59":{},"11-60":{},"11-61":{},"11-62":{},"11-63":{},"11-64":{},"11-65":{},"11-66":{},"11-67":{},"11-68":{},"11-69":{},"11-70":{},"11-73":{},"11-74":{},"11-75":{},"11-76":{},"11-77":{},"11-78":{},"11-79":{},"11-80":{},"11-81":{},"11-82":{},"11-83":{},"11-84":{},"11-85":{},"11-86":{},"11-87":{},"11-88":{},"11-89":{},"11-90":{},"11-91":{},"11-92":{},"11-93":{},"11-94":{},"11-95":{},"11-96":{},"11-97":{},"12-1":{},"12-4":{},"12-10":{},"12-11":{},"12-23":{},"12-24":{},"12-25":{},"12-28":{},"12-29":{},"12-32":{},"12-34":{},"12-38":{},"12-40":{},"12-43":{},"12-44":{},"12-45":{},"12-47":{},"12-48":{},"12-49":{},"12-50":{},"12-57":{},"12-60":{},"12-61":{},"12-64":{},"12-70":{},"12-71":{},"12-74":{},"12-82":{},"12-83":{},"12-87":{},"12-88":{},"12-89":{},"12-93":{},"12-96":{},"12-97":{},"12-100":{},"12-101":{},"12-102":{},"12-106":{},"12-107":{},"12-108":{},"12-109":{},"12-111":{},"12-112":{},"12-113":{},"12-117":{},"12-118":{},"12-119":{},"12-121":{},"12-122":{},"12-123":{},"12-128":{},"12-129":{},"12-132":{},"12-133":{},"12-134":{},"12-141":{},"12-142":{},"12-145":{},"12-146":{},"12-147":{},"12-152":{},"12-157":{},"12-158":{},"12-163":{},"12-164":{},"12-167":{},"12-168":{},"12-170":{},"12-171":{},"12-184":{},"12-185":{},"12-187":{},"12-188":{},"12-189":{},"12-195":{},"12-196":{},"12-197":{},"12-198":{},"12-200":{},"12-201":{},"12-202":{},"12-206":{},"12-207":{},"12-208":{},"12-210":{},"12-213":{},"12-214":{},"12-215":{},"12-219":{},"12-223":{},"12-224":{},"12-225":{},"12-227":{},"12-233":{},"12-234":{},"12-235":{},"12-239":{},"12-240":{},"12-242":{},"12-246":{},"12-249":{},"12-251":{},"12-269":{},"12-281":{},"12-283":{},"12-287":{},"12-288":{},"12-290":{},"12-291":{},"12-292":{},"12-293":{},"12-294":{},"12-297":{},"12-298":{}},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"component":{}}],["workflow(",{"_index":1355,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.activity.reason",{"_index":1773,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.context.myvar",{"_index":1867,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.in",{"_index":2822,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.initiatorentri",{"_index":2014,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.initiatorentry.cn",{"_index":1768,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.initiatorentry.dayofbirth",{"_index":1932,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.initiatorentry.manag",{"_index":2016,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.nam",{"_index":1770,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.owner.mail",{"_index":1595,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.path",{"_index":1482,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources.dxrassignto",{"_index":2012,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources.dxrassignto@own",{"_index":2018,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources.dxrassignto@owner.manag",{"_index":2020,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources[0].controllerlink.attribut",{"_index":1848,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources[0].controllerlink.mail",{"_index":1849,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources[0].dxrassignfrom",{"_index":1798,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources[0].dxrassignfrom@descript",{"_index":1813,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources[0].dxrassignfrom@mail",{"_index":1809,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources[0].dxrassignto",{"_index":1801,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources[0].dxrassignto@account_*nam",{"_index":1844,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources[0].dxrassignto@account_descript",{"_index":1845,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources[0].dxrassignto@cn",{"_index":1476,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources[0].dxrassignto@dxrlocationlink.manager.sn",{"_index":1818,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources[0].dxrassignto@mail",{"_index":1816,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources[0].dxrassignto@manager.mail",{"_index":1817,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources[0].dxrassignto@owner.mail",{"_index":1810,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources[0].dxrassignto@owner.manager.mail",{"_index":1811,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources[0].dxrassignto@sn",{"_index":1815,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources[0].dxrassignto@targetsystem_*nam",{"_index":1846,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources[0].dxrassignto@targetsystem_descript",{"_index":1847,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources[0].dxrstartd",{"_index":1804,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources[0].roleparameter_*name*@modifi",{"_index":1843,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources[0].roleparameter_*name*@valu",{"_index":1840,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources[0].roleparameter_*name@oldvalu",{"_index":1841,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources[0].roleparameter_project@modifi",{"_index":1807,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources[0].roleparameter_project@oldvalu",{"_index":1806,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources[0].roleparameter_project@valu",{"_index":1805,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources[0].typeoford",{"_index":1853,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.resources[0].userinfo",{"_index":1851,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.subject",{"_index":1800,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.subject.cn",{"_index":1475,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.subject.descript",{"_index":1814,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.subject.dxrlocationlink.manag",{"_index":1790,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.subject.dxrlocationlink.manager.sn",{"_index":1802,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.subject.mail",{"_index":1795,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.subject.manag",{"_index":1784,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.subject.manager.mail",{"_index":1796,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.subject.manager.manag",{"_index":1788,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.subject.own",{"_index":1786,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.subject.secretari",{"_index":2025,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.subject.sn",{"_index":2031,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.subject.sponsor",{"_index":2027,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow.y",{"_index":3279,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["workflow/activities/activity[@name='…​']/job/controller/operation/us",{"_index":2507,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow/activities/activity[@name='…​']/job/port/channel/us",{"_index":2508,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflow/synchron",{"_index":5141,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["workflow/valid",{"_index":5134,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["workflownam",{"_index":5309,"title":{},"name":{},"text":{"11":{}},"component":{}}],["workflows.assignmentofprivilegerejected_bodi",{"_index":1585,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflows.assignmentofprivilegerejected_looplin",{"_index":1587,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflows.for",{"_index":2825,"title":{},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["workflows/assign",{"_index":1584,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workflowservice/services/workflowservic",{"_index":4511,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["workflow’",{"_index":1382,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["worklow",{"_index":2290,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["worklow_nam",{"_index":2819,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["workstat",{"_index":5445,"title":{},"name":{},"text":{"12":{}},"component":{}}],["wrap",{"_index":2106,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["write",{"_index":284,"title":{"3-53":{},"3-67":{},"6-47":{},"6-61":{}},"name":{},"text":{"3":{},"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["write/upd",{"_index":3049,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["write_record",{"_index":4928,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["writer",{"_index":2742,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["written",{"_index":1543,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["wrong",{"_index":1568,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["wrongdat",{"_index":3220,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["ws",{"_index":5417,"title":{},"name":{},"text":{"12":{}},"component":{}}],["x",{"_index":3806,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["x.509",{"_index":4538,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["x.req",{"_index":4686,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["x.rsp",{"_index":4689,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["x400",{"_index":5017,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["xcmd",{"_index":5454,"title":{},"name":{},"text":{"12":{}},"component":{}}],["xcopi",{"_index":5468,"title":{},"name":{},"text":{"12":{}},"component":{}}],["xie",{"_index":4662,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xieapi",{"_index":4721,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xml",{"_index":2050,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{}},"component":{}}],["xml/dsml",{"_index":3711,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["xml_data.xml",{"_index":3716,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["xmlfile2id",{"_index":3646,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["xmlnodemapimpl",{"_index":2133,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["xmlnotat",{"_index":2086,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["xmlns:dsml=\"urn:oasis:names:tc:dsml:2:0:cor",{"_index":3623,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["xmlns:event=\"urn:siemens:dxm:event:1:0",{"_index":3625,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["xmlns:spml=\"urn:oasis:names:tc:spml:1:0",{"_index":3624,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["xpath",{"_index":2094,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["xpr_broadcast",{"_index":4866,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xpr_connect",{"_index":4880,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xpr_dctrcv",{"_index":4870,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xpr_dctsend",{"_index":4868,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xpr_delpwd",{"_index":4907,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xpr_delpwd_tmp",{"_index":4909,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xpr_exist",{"_index":4856,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xpr_flag1",{"_index":4876,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xpr_flag2",{"_index":4878,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xpr_key",{"_index":4858,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xpr_name",{"_index":4874,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xpr_password",{"_index":4872,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xpr_pin",{"_index":4860,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xpr_quota",{"_index":4882,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xpr_reserve1",{"_index":4885,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xpr_reserve2",{"_index":4888,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xpr_server",{"_index":4862,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xpr_vmsadmin",{"_index":4864,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xprbroadcast",{"_index":4865,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xprconnect",{"_index":4879,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xprdctrcv",{"_index":4869,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xprdctsend",{"_index":4867,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xprdelpw",{"_index":4906,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xprdelpwtmp",{"_index":4908,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xprexist",{"_index":4855,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xprflag1",{"_index":4875,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xprflag2",{"_index":4877,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xprkey",{"_index":4857,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xprname",{"_index":4873,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xprpin",{"_index":4859,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xprpwd",{"_index":4871,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xprquota",{"_index":4881,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xprreserve1",{"_index":4884,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xprreserve2",{"_index":4887,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xprserver",{"_index":4861,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xprvmsadmin",{"_index":4863,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xslt",{"_index":3652,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["xx",{"_index":5075,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["xxl",{"_index":1218,"title":{"3-746":{},"3-747":{},"5-31":{},"5-32":{}},"name":{},"text":{"3":{},"5":{}},"component":{}}],["xxlgroup",{"_index":5297,"title":{},"name":{},"text":{"11":{}},"component":{}}],["xxx",{"_index":4733,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["xxx.req",{"_index":4741,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["y",{"_index":4696,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["ye",{"_index":1539,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"12":{}},"component":{}}],["year",{"_index":4340,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["yellow",{"_index":1436,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["yourself",{"_index":2796,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["you’d",{"_index":2852,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["you’ll",{"_index":3383,"title":{},"name":{},"text":{"3":{},"8":{},"11":{}},"component":{}}],["yyyi",{"_index":1945,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["z",{"_index":5263,"title":{},"name":{},"text":{"11":{}},"component":{}}],["zero",{"_index":1797,"title":{},"name":{},"text":{"3":{},"6":{},"12":{}},"component":{}}],["zip",{"_index":2721,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["zone",{"_index":5264,"title":{},"name":{},"text":{"11":{}},"component":{}}],["zulu2int",{"_index":3097,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}]],"pipeline":["stemmer"]},"store":{"documents":{"1":{"id":1,"text":"DirX Identity provides a powerful set of pre-configured default applications that you can use to create your identity management environment. The default applications are intended for use as templates and are primarily designed to interact with the user, account and group objects in the Identity Store and the source and connected systems. The DirX Identity document set consists of the following manuals: DirX Identity Introduction. Use this book to obtain a description of DirX Identity architecture and components. DirX Identity Tutorial. Use this book to get familiar quickly with your DirX Identity installation. DirX Identity Provisioning Administration Guide. Use this book to obtain a description of DirX Identity provisioning architecture and components and to understand the basic tasks of DirX Identity provisioning administration using DirX Identity Manager. DirX Identity Connectivity Administration Guide. Use this book to obtain a description of DirX Identity connectivity architecture and components and to understand the basic tasks of DirX Identity connectivity administration using DirX Identity Manager. DirX Identity User Interfaces Guide. Use this book to obtain a description of the user interfaces provided with DirX Identity. DirX Identity Application Development Guide. Use this book to obtain information how to extend DirX Identity and to use the default applications. DirX Identity Customization Guide. Use this book to customize your DirX Identity environment. DirX Identity Integration Framework. Use this book to understand the DirX Identity framework and to obtain a description how to extend DirX Identity. DirX Identity Web Center Reference. Use this book to obtain reference information about the DirX Identity Web Center. DirX Identity Web Center Customization Guide. Use this book to obtain information how to customize the DirX Identity Web Center. DirX Identity Meta Controller Reference. Use this book to obtain reference information about the DirX Identity meta controller and its associated command-line programs and files. DirX Identity Connectivity Reference. Use this book to obtain reference information about the DirX Identity agent programs, scripts, and files. DirX IdentityTroubleshooting Guide. Use this book to track down and solve problems in your DirX Identity installation. DirX Identity Installation Guide. Use this book to install DirX Identity. DirX Identity Migration Guide. Use this book to migrate from previous versions. DirX Identity Release Notes. Use this book to understand the features and limitations of the current release. This document is shipped with the DirX Identity installation as the file Readme.txt or Readme.doc. DirX Identity History of Changes. Use this book to understand the features of previous releases. This document is shipped with the DirX Identity installation as the file HistoryOfChanges.txt or HistoryOfChanges.doc. Boldface type In command syntax, bold words and characters represent commands or keywords that must be entered exactly as shown. In examples, bold words and characters represent user input. Italic type In command syntax, italic words and characters represent placeholders for information that you must supply. [ ] In command syntax, square braces enclose optional items. { } In command syntax, braces enclose a list from which you must choose one item. In Tcl syntax, you must actually type in the braces, which will appear in boldface type. | In command syntax, the vertical bar separates items in a list of choices. ... In command syntax, ellipses indicate that the previous item can be repeated. install_path The exact name of the root of the directory where DirX Identity programs and files are installed. The default installation directory is userID_home_directory*/DirX Identity* on UNIX systems and C:\\Program Files\\DirX\\Identity on Windows systems. During installation the installation directory can be specified. In this manual, the installation-specific portion of pathnames is represented by the notation install_path. dxi_java_home The exact name of the root directory of the Java for DirX Identity. This location is defined during product installation. For details, see the sections \"Installation\" and \"The Java for DirX Identity\" in the DirX Identity Installation Guide.","title":"DirX Identity Documentation","component":"dirx-identity-docs","version":"9.0.0","name":"index","url":"/dirx-identity-docs/latest/index.html","titles":[{"text":"DirX Identity Document Set","hash":"_dirx_identity_document_set","id":1},{"text":"Notation Conventions","hash":"_notation_conventions","id":2}]},"2":{"id":2,"text":"This manual provides the information necessary to understand the DirX Identity default Connectivity applications and how to configure and extend them.It consists of the following chapters: Chapter 1 describes the different workflow architectures used in the default applications and how to customize these types. Chapter 2 provides information about the request workflows available in the Provisioning view that support user self-registration and delegated administration activities. Chapter 3 describes how to setup consistent custom scenarios both in the Provisioning configuration and Connectivity configuration. Chapter 4 describes how to reuse the default applications in the Connectivity configuration. Chapter 5 describes Identity source workflows available in the Connectivity view that synchronize information from existing sources to the Identity Store. Chapter 6 describes Identity maintenance workflows available in the Connectivity view that help to maintain your identity system to ensure consistent and current data of high quality. Chapter 7 describes Identity target system workflows available in the Connectivity view that synchronize information from connected systems with the DirX Identity Store. Appendix A describes features that still work but should no longer be used because better features are available. DirX Identity provides a powerful set of pre-configured default applications that you can use to create your identity management environment. The default applications are intended for use as templates and are primarily designed to interact with the user, account and group objects in the Identity Store and the source and connected systems. The DirX Identity document set consists of the following manuals: DirX Identity Introduction. Use this book to obtain a description of DirX Identity architecture and components. DirX Identity Tutorial. Use this book to get familiar quickly with your DirX Identity installation. DirX Identity Provisioning Administration Guide. Use this book to obtain a description of DirX Identity provisioning architecture and components and to understand the basic tasks of DirX Identity provisioning administration using DirX Identity Manager. DirX Identity Connectivity Administration Guide. Use this book to obtain a description of DirX Identity connectivity architecture and components and to understand the basic tasks of DirX Identity connectivity administration using DirX Identity Manager. DirX Identity User Interfaces Guide. Use this book to obtain a description of the user interfaces provided with DirX Identity. DirX Identity Application Development Guide. Use this book to obtain information how to extend DirX Identity and to use the default applications. DirX Identity Customization Guide. Use this book to customize your DirX Identity environment. DirX Identity Integration Framework. Use this book to understand the DirX Identity framework and to obtain a description how to extend DirX Identity. DirX Identity Web Center Reference. Use this book to obtain reference information about the DirX Identity Web Center. DirX Identity Web Center Customization Guide. Use this book to obtain information how to customize the DirX Identity Web Center. DirX Identity Meta Controller Reference. Use this book to obtain reference information about the DirX Identity meta controller and its associated command-line programs and files. DirX Identity Connectivity Reference. Use this book to obtain reference information about the DirX Identity agent programs, scripts, and files. DirX IdentityTroubleshooting Guide. Use this book to track down and solve problems in your DirX Identity installation. DirX Identity Installation Guide. Use this book to install DirX Identity. DirX Identity Migration Guide. Use this book to migrate from previous versions. DirX Identity Release Notes. Use this book to understand the features and limitations of the current release. This document is shipped with the DirX Identity installation as the file Readme.txt or Readme.doc. DirX Identity History of Changes. Use this book to understand the features of previous releases. This document is shipped with the DirX Identity installation as the file HistoryOfChanges.txt or HistoryOfChanges.doc. Boldface type In command syntax, bold words and characters represent commands or keywords that must be entered exactly as shown. In examples, bold words and characters represent user input. Italic type In command syntax, italic words and characters represent placeholders for information that you must supply. [ ] In command syntax, square braces enclose optional items. { } In command syntax, braces enclose a list from which you must choose one item. In Tcl syntax, you must actually type in the braces, which will appear in boldface type. | In command syntax, the vertical bar separates items in a list of choices. ... In command syntax, ellipses indicate that the previous item can be repeated. install_path The exact name of the root of the directory where DirX Identity programs and files are installed. The default installation directory is userID_home_directory*/DirX Identity* on UNIX systems and C:\\Program Files\\DirX\\Identity on Windows systems. During installation the installation directory can be specified. In this manual, the installation-specific portion of pathnames is represented by the notation install_path. dxi_java_home The exact name of the root directory of the Java for DirX Identity. This location is defined during product installation. For details, see the sections \"Installation\" and \"The Java for DirX Identity\" in the DirX Identity Installation Guide.","title":"Preface","component":"dirx-identity-docs","version":"9.0.0","name":"preface","url":"/dirx-identity-docs/latest/appl-dev-guide/preface.html","titles":[{"text":"DirX Identity Documentation","hash":"_dirx_identity_documentation","id":1},{"text":"DirX Identity Document Set","hash":"_dirx_identity_document_set","id":2},{"text":"Notation Conventions","hash":"_notation_conventions","id":3}]},"3":{"id":3,"text":"All product names quoted are trademarks or registered trademarks of the manufacturers concerned. © 2024 Eviden All Rights Reserved Distribution and reproduction not permitted without the consent of Eviden. Table of Contents Copyright Preface DirX Identity Documentation DirX Identity Document Set Notation Conventions 1. Understanding the Default Application Workflow Technology 1.1. Understanding Request Workflows 1.1.1. Request Workflow Architecture 1.1.1.1. Understanding Activity Types 1.1.1.2. About the Activity Sub-Structure 1.1.1.3. Understanding Notifications 1.1.1.4. HTML Notifications 1.1.1.5. Understanding Request Workflow States 1.1.1.5.1. Types of Request Workflow States 1.1.1.5.2. Understanding Request Workflow Activity States 1.1.1.6. Understanding the Full Checker 1.1.1.6.1. Full Check for Expired Workflows and Activities 1.1.1.6.2. Full Check for All Running Workflows 1.1.1.6.3. Full Checker Configuration 1.1.1.7. Request Workflow Error Handling 1.1.1.8. Nationalizing Request Workflows 1.1.1.8.1. Understanding Request Workflow Nationalization 1.1.1.8.2. Using the Nationalization Wizard 1.1.1.8.3. Organizing Message Topics 1.1.1.8.4. Customizing Request Workflow Nationalization 1.1.1.8.5. Using an External Nationalization Editor 1.1.1.8.6. Determining the Language 1.1.1.8.7. Handling Message Items during Runtime 1.1.1.9. Selecting Request Workflows 1.1.1.9.1. Creation Workflow Selection 1.1.1.9.2. Modification Workflow Selection 1.1.1.9.3. Assignment Workflow Selection 1.1.1.10. Executing Request Workflows 1.1.2. Customizing Request Workflows 1.1.2.1. Using Variable Substitution 1.1.2.1.1. Elements 1.1.2.1.2. Structures 1.1.2.1.3. Server Variables 1.1.2.1.4. Workflow Instance 1.1.2.1.5. Activity Instance 1.1.2.1.6. Control Structures 1.1.2.1.7. Reduced Run-time Activities 1.1.2.1.8. Filling the Address Fields 1.1.2.1.9. Participant Calculation 1.1.2.1.10. Tips and Tricks 1.1.2.2. Implementing a New Activity 1.1.2.2.1. Defining Configuration Parameters 1.1.2.2.2. Supplying a Component Description 1.1.2.2.3. Implementing the Job 1.1.2.2.4. Reading the Job Configuration 1.1.2.2.5. Reading the Workflow Instance Data 1.1.2.2.6. Modifying the Workflow Instance Data 1.1.2.2.7. Read and Write Context Properties 1.1.2.2.8. Reading and Changing Orders 1.1.2.2.9. Deploying the Job 1.1.2.2.10. Obtaining a Connection to the Identity Domain 1.1.2.2.11. Implementing a Job with access to the Identity Domain 1.1.2.2.12. Using the DomainSessionAccessor Method 1.1.2.2.13. Implementing a User Hook for an applyChange Activity 1.1.2.3. Implementing a Socketed Job Framework-based Activity 1.1.2.3.1. Adding the New Socketed Job Framework Activity 1.1.2.3.2. Specifying Predefined Configuration Parameters 1.1.2.3.3. Implementing the Job 1.1.2.3.4. Reading the Job Configuration 1.1.2.3.5. Reading the Workflow Instance Data 1.1.2.3.6. Modifying the Workflow Instance Data 1.1.2.3.7. Read and Write Context Properties 1.1.2.3.8. Reading and Changing Orders 1.1.2.3.9. Deploying the Job 1.1.2.4. Implementing a Java Class for Finding Participants 1.1.2.4.1. Defining Configuration Parameters 1.1.2.4.2. Implementing the Java Class 1.1.2.4.3. Deploying the Java Class 1.1.2.5. Implementing Participant Filters and Constraints 1.1.2.5.1. Implementing a Participants Filter 1.1.2.5.2. Implementing Participant Constraints 1.1.2.5.3. Configuring a Joblet 1.1.2.5.4. Implementing a Joblet 1.1.2.5.5. Deploying Filters and Constraints 1.1.3. Testing Request Workflows 1.2. Understanding Java-based Workflows 1.2.1. Java-based Workflow Architecture 1.2.1.1. Full, Delta and Event-based Workflows 1.2.1.2. Location of Delta State 1.2.1.3. Java-based Workflow Structure 1.2.1.4. Controller Types 1.2.1.5. Channels and Mapping 1.2.1.6. Cross-Memberships 1.2.1.7. Starting Java-based Workflows 1.2.1.7.1. Event-Based Workflows 1.2.1.7.2. Scheduled Workflows 1.2.1.7.3. Starting a Workflow Manually 1.2.2. Customizing Java-based Workflows 1.2.2.1. Using User Hooks 1.2.2.1.1. Configuring a User Hook 1.2.2.1.2. Implementing a Global User Hook 1.2.2.1.3. Implementing a Channel User Hook 1.2.2.1.4. Implementing a User Hook for Email Notifications 1.2.2.1.5. Deploying a User Hook 1.2.2.1.6. Running Executables from a User Hook 1.2.2.2. Mapping with Java Classes 1.2.2.2.1. Identifier Mapping 1.2.2.2.2. Attribute Mapping 1.2.2.2.3. Post Mapping 1.2.2.2.4. Deploying the Mapping Class 1.2.2.2.5. Evaluating a Mapping Entry 1.2.2.2.6. Handling Environment Properties 1.2.2.2.7. Handling the Mapped Entry 1.2.2.2.8. Setting the Map Result 1.2.2.2.9. Logging 1.2.2.3. Testing the Real-Time Workflow Mapping Classes 1.2.2.3.1. About the Mapping Test 1.2.2.3.2. About the Mapping Test Structure 1.2.2.3.3. Testing the LDAP Channel Configuration 1.2.2.4. Using Connector Filters 1.2.2.4.1. Configuring a Connector Filter 1.2.2.4.2. Deploying a Connector Filter 1.2.3. Customizing Password Synchronization Workflows 1.2.3.1. Configuring a Password User Hook 1.2.3.2. Implementing a Password User Hook 1.2.3.3. Deploying a Password User Hook 1.2.4. Customizing Event-based Maintenance Workflows 1.2.4.1. Configuring a User Hook for an Event-based Maintenance Workflow 1.2.4.2. Implementing a User Hook for an Event-based Maintenance Workflow 1.2.4.3. Using Event Contexts 1.2.4.4. Deploying a User Hook for an Event-based Maintenance Workflow 1.2.5. Using Combined Workflows 1.3. Understanding Tcl-based Workflows 1.3.1. Tcl-based Connectivity Architecture 1.3.1.1. Connectivity Standard Script Structure 1.3.1.1.1. Connectivity Standard Script Logical Structure 1.3.1.1.2. Connectivity Standard Script Physical Structure 1.3.1.2. Provisioning Workflow Script Structure 1.3.1.3. Connectivity Standard Script Operation 1.3.1.3.1. Control Script Operation 1.3.1.3.2. Profile Script Operation 1.3.1.4. Connectivity Standard Script Switches and Parameters 1.3.1.4.1. Switches for Operational Control 1.3.1.4.2. Switches for Notification Control 1.3.1.4.3. Switches for GUID Generation 1.3.1.4.4. Switches for Trace Control 1.3.1.4.5. Source Directory Parameters 1.3.1.4.6. Input Channel Parameters 1.3.1.4.7. Target Directory Parameters 1.3.1.4.8. Output Channel Parameters 1.3.1.4.9. Switches for Pre-Configured Operational Attribute Handling 1.3.1.5. References in the Default Connectivity Applications 1.3.1.5.1. Base Object References 1.3.1.5.2. References in Filter Expressions 1.3.1.6. Object Class Handling 1.3.1.7. Global Unique Identifier (GUID) Generation 1.3.1.7.1. Local GUID Generation 1.3.1.7.2. Central GUID Generation 1.3.1.7.3. User-Defined GUID Generation 1.3.1.8. Multi-Mastered Attributes 1.3.1.9. Naming and Scopes 1.3.1.10. User Hooks 1.3.1.10.1. Central Tcl Interfaces 1.3.1.10.2. Default User Hook Tcl Interfaces 1.3.1.10.3. Post-Join Mapping Tcl Interfaces 1.3.1.11. Global Tcl Variables 1.3.1.11.1. Control Script Variables 1.3.1.11.2. Profile Script Variables 1.3.1.12. Meta Handles 1.3.2. Understanding Delta Handling 1.3.2.1. Types of Delta handling 1.3.2.1.1. Date-Oriented Delta Handling 1.3.2.1.2. Client-Side Handling 1.3.2.1.3. Workflow-Side Handling 1.3.2.1.4. Client-Side Delta Handling 1.3.2.1.5. Workflow-Side Delta Handling 1.3.2.1.6. USN-Oriented Delta Handling 1.3.2.1.7. File-Oriented Delta Handling 1.3.2.2. Delta Handling Control 1.3.2.2.1. How to Control Delta Runs 1.3.2.2.2. Configuring Delta Handling 1.3.3. Customizing Tcl-based Workflows 1.3.3.1. Customizing Identity Store Export Workflows 1.3.3.1.1. Attribute Mapping 1.3.3.1.2. Base Object (Export Properties Tab) 1.3.3.1.3. Filter (Export Properties Tab) 1.3.3.1.4. Tracing 1.3.3.2. Customizing Identity Store Import Workflows 1.3.3.2.1. Mapping and Selected Attributes 1.3.3.2.2. Base Object (Import Properties tab) 1.3.3.2.3. Import Mode (Import Properties Tab) 1.3.3.2.4. Filters for Merge / Replace (Import Properties Tab) 1.3.3.2.5. Entry Handling Properties Tab 1.3.3.2.6. Tracing 1.3.3.2.7. Page Mode 2. Using Request Workflows 2.1. Understanding Creation Workflows 2.1.1. User Self Registration Workflows 2.1.2. Create User Workflows 2.1.3. Create Persona Workflows 2.1.4. Create User Facet Workflows 2.1.5. Create Functional User Workflows 2.1.6. Create Privilege Workflows 2.2. Understanding Modification Workflows 2.2.1. User Modification Workflows 2.3. Understanding Assignment Workflows 2.3.1. How Approval Works 2.3.1.1. 4-Eye Approval 2.3.1.2. Automatic (Notification Only) Approval 2.3.1.3. Risk Approval 2.3.2. Understanding Assignment Operation Types 2.3.3. Guidelines for Approving Privilege Assignments 2.3.4. Guidelines for Re-Approving Privilege Assignments 2.4. Understanding Deletion Workflows 2.4.1. Deletion Procedure 2.4.2. Supported Object Types 2.4.3. Role Deletion Workflow 2.5. Understanding Certification Workflows 2.5.1. Certification Campaign Workflows 2.6. Understanding Service Management Workflows 2.6.1. Manual Provisioning Workflows 2.6.2. Process Ticket Workflows 3. Configuring Custom Scenarios 3.1. Creating the New Scenario 3.2. Refining the Scenario 3.3. Creating the Identity Creation Workflows 3.4. Creating Cluster Target Systems 4. Using the Default Connectivity Applications 4.1. Working with Default Connectivity Application Objects 4.2. Working with the Default Connectivity Scenario 5. Using the Source Workflows 5.1. Understanding the Java-based Source Workflows 5.1.1. Active Directory (ADS) User Import Workflow 5.1.1.1. ADS User Import Workflow Prerequisites 5.1.1.2. ADS User Import Workflow Configuration 5.1.1.3. ADS User Import Workflow and Activities 5.1.1.4. ADS User Import Workflow Ports 5.1.1.5. ADS User Import Workflow Channels 5.1.1.5.1. TS Port 5.1.1.5.2. Identity Port 5.1.2. Relational Database User Import Workflow 5.1.2.1. Relational Database User Import Workflow Prerequisites 5.1.2.2. Relational Database User Import Workflow Configuration 5.1.2.2.1. JDBC Connector and Connected Directory Configuration 5.1.2.2.2. TS Port Filter Configuration 5.1.2.3. Relational Database User Import Workflow Channel Configuration 5.1.2.3.1. User Channel at the TS Port 5.1.2.3.2. User-roles Channel at the TS Port 5.1.2.3.3. User Channel at the Identity Store Port 5.1.2.3.4. User-roles Channel at the Identity Store Port 5.1.2.3.5. setPassword Channel at the Identity Store Port 5.1.2.4. Importing Database Users without their Role Assignments 5.1.3. Role Import Workflow 5.1.3.1. Role Import Workflow Prerequisites 5.1.3.2. Role Import Workflow Configuration 5.1.3.2.1. Configuring the JDBC Source 5.1.3.2.2. Configuring the Role Import Workflow 5.1.3.2.3. Deploying the Identity Web Services 5.1.3.3. Role Import Workflow and Activities 5.1.3.4. Role Import Workflow Ports 5.1.3.5. Role Import Workflow Channels 5.1.3.5.1. TS Port 5.1.3.5.2. Identity Port 5.1.4. LDIF User Import Workflow 5.1.4.1. LDIF User Import Workflow Prerequisites 5.1.4.2. LDIF User Import Workflow Configuration 5.1.4.3. LDIF User Import Workflow and Activities 5.1.4.4. LDIF User Import Workflow Ports 5.1.4.5. LDIF User Import Workflow Channels 5.1.4.5.1. Users Channel at TS Port 5.1.4.5.2. Users Channel at Identity Port 5.1.5. LDIF User Export Workflow 5.1.5.1. LDIF User Export Workflow Prerequisites 5.1.5.2. LDIF User Export Workflow Configuration 5.1.5.3. LDIF User Export Workflow and Activities 5.1.5.4. LDIF User Export Workflow Ports 5.1.5.5. LDIF User Export Workflow Channels 5.1.5.5.1. Users Channel at Identity Port 5.1.5.5.2. Users Channel at TS Port 5.1.6. CSV Workflows 5.1.6.1. CSV User Import Workflow 5.1.6.1.1. CSV User Import Workflow Prerequisites 5.1.6.1.2. CSV User Import Workflow Configuration 5.1.6.1.3. CSV User Import Workflow and Activities 5.1.6.1.4. CSV User Import Workflow Ports 5.1.6.1.5. CSV User Import Workflow Channels 5.1.6.1.6. Customizing the Workflow to Handle Files without a DN Column 5.1.6.2. CSV User Export Workflow 5.1.6.2.1. CSV User Export Workflow Prerequisites 5.1.6.2.2. CSV User Export Workflow Configuration 5.1.6.2.3. CSV User Export Workflow and Activities 5.1.6.2.4. CSV User Export Workflow Ports 5.1.6.2.5. CSV User Export Workflow Channels 5.1.7. Remote AD Workflow 5.1.8. External LDAP User Import Workflows 5.1.8.1. External LDAP User Full Import Workflow 5.1.8.1.1. External LDAP User Full Import Workflow Prerequisites 5.1.8.1.2. External LDAP User Full Import Workflow Configuration 5.1.8.1.3. External LDAP User Full Import Workflow and Activities 5.1.8.1.4. External LDAP User Full Import Workflow Ports 5.1.8.1.5. External LDAP User Full Import Workflow Channels 5.1.8.2. External LDAP User Import Workflow 5.1.8.2.1. External LDAP User Import Workflow Prerequisites 5.1.8.2.2. External LDAP User Import Workflow Configuration 5.1.8.2.3. External LDAP User Import Workflow and Activities 5.1.8.2.4. External LDAP User Import Workflow Ports 5.1.8.2.5. External LDAP User Import Workflow Channels 5.1.8.3. Sending Events to Synchronize External Users 5.1.8.3.1. Event Types 5.1.8.3.2. Identifier and requestID 5.1.8.3.3. Name and Source 5.1.8.3.4. A Complete Sample Event 5.1.8.3.5. Sent Event with metacp 5.2. Understanding the Tcl-based Source Workflows 5.2.1. Configuring the Corporate Directory Workflow 5.2.2. Configuring the DirX LDIF Directory Workflow 5.2.3. Configuring the DirXdelta Workflow 5.2.3.1. DirXdelta LDIF Agreement Rules 5.2.3.2. Setting Up the LDIF Agreement 5.2.3.2.1. Sample Scripts to Handle the Sample Agreement 5.2.4. Configuring the File-Based Source Workflows 5.2.5. Configuring the Relational Database Workflows 6. Using the Maintenance Workflows 6.1. Understanding the Java-based Maintenance Workflows 6.1.1. Entry Change Workflows 6.1.1.1. Accounts 6.1.1.1.1. Configuring the Event-based Maintenance Workflow for Accounts 6.1.1.1.2. Event-based Maintenance Workflow Operation for Accounts 6.1.1.2. Organizations 6.1.1.2.1. Configuring the Event-based Maintenance Workflow for Organizations 6.1.1.2.2. Event-based Maintenance Workflow Operation for Organizations 6.1.1.3. Organizational Units 6.1.1.3.1. Configuring the Event-based Maintenance Workflow for Organizational Units 6.1.1.3.2. Event-based Maintenance Workflow Operation for Organizational Units 6.1.1.4. Context Objects 6.1.1.4.1. Configuring the Event-based Maintenance Workflow for Context Objects 6.1.1.4.2. Event-based Maintenance Workflow Operation for Context Objects 6.1.1.5. Location Objects 6.1.1.5.1. Configuring the Event-based Maintenance Workflow for Location Objects 6.1.1.5.2. Event-based Maintenance Workflow Operation for Location Objects 6.1.1.6. Cost Unit Objects 6.1.1.6.1. Configuring the Event-based Maintenance Workflow for Cost Unit Objects 6.1.1.6.2. Event-based Maintenance Workflow Operation for Cost Unit Objects 6.1.1.7. Project Objects 6.1.1.7.1. Configuring the Event-based Maintenance Workflow for Project Objects 6.1.1.7.2. Event-based Maintenance Workflow Operation for Projects 6.1.1.8. Users 6.1.1.8.1. Configuring the Event-based User Resolution Workflow 6.1.1.8.2. Event-based User Resolution Workflow Operation 6.1.1.9. Personas 6.1.1.10. Functional Users 6.1.1.11. Generic Objects 6.1.1.11.1. Configuring the Generic Event-based Processing Workflow 6.1.1.11.2. Generic Event-based Processing Workflow Operation 6.1.2. Process Tickets Internal Workflow 6.1.2.1. Configuring the Process Tickets Internal Workflow 6.1.2.2. Process Tickets Internal Workflow Operation 6.1.3. Account Password Manager Workflow 6.1.3.1. Configuring the Account Password Manager Workflow 6.1.3.2. Account Password Manager Workflow Operation 6.1.4. Reset Account Passwords Workflow 6.1.4.1. Configuring the Reset Account Passwords Workflow 6.1.4.2. Reset Account Passwords Workflow Operation 6.1.5. Reset Password If Displayed Workflow 6.1.5.1. Configuring the Reset Password If Displayed Workflow 6.1.5.2. Reset Password If Displayed Operation 6.1.6. User Password Event Manager Workflow 6.1.6.1. Configuring the User Password Event Manager Workflow 6.1.7. User Password Expiration Notification Workflow 6.1.7.1. Configuring the User Password Expiration Notification Workflow 6.1.7.2. User Password Expiration Notification Workflow Operation 6.1.8. Transport Workflows 6.1.8.1. Export Connectivity Collections 6.1.8.2. Import Connectivity Collections 6.1.8.3. Export Provisioning Collections 6.1.8.4. Import Provisioning Collections 6.1.9. Joint Backup Workflow 6.1.9.1. Configuring the Joint Backup Workflow 6.1.10. Consistency Management Workflows 6.1.10.1. Check Consistency Workflow 6.1.10.1.1. Configuring the Check Consistency Workflow 6.1.10.1.2. Check Consistency Workflow Operation 6.1.10.2. Mark Affected Users Workflow 6.1.10.2.1. Configuring the Mark Affected Users Workflow 6.1.10.2.2. Mark Affected Users Workflow Operation 6.1.10.3. User Resolution Workflow 6.1.10.3.1. Configuring the User Resolution Workflow 6.1.10.3.2. User Resolution Workflow Operation 6.2. Understanding the Tcl-based Maintenance Workflows 6.2.1. Cleanup Objects Workflow 6.2.1.1. Configuring the Cleanup Objects Workflow 6.2.2. Consistency Check Workflow 6.2.2.1. Configuring the Consistency Check Workflow 6.2.2.2. Service Agent Configuration File 6.2.2.3. Time Format Syntax 6.2.2.4. Consistency Check Workflow Operation 6.2.2.5. Consistency Check Workflow Optimization 6.2.3. Extract Audit Trail Workflow 6.2.3.1. Configuring the Extract Audit Trail Workflow 6.2.4. Full SoD Check Workflow 6.2.4.1. Configuring the Full SoD Check Workflow 6.2.5. Initialize Re-approval Workflow 6.2.5.1. Configuring the Initialize Re-approval Workflow 6.2.6. Password Expiration Notification Workflow 6.2.6.1. Configuring the Password Expiration Notification Workflow 6.2.6.2. Password Expiration Notification Workflow Operation 6.2.7. Policy Execution Workflow 6.2.7.1. Configuring the Policy Execution Workflow 6.2.7.2. Policy Execution Workflow Optimization 6.2.8. Privilege Resolution Workflow 6.2.8.1. Configuring the Privilege Resolution Workflow 6.2.8.2. Privilege Resolution Workflow Operation 6.2.8.3. Privilege Resolution Workflow Optimization 6.2.9. Run Workflow Externally Workflow 6.2.9.1. Configuring the Run Workflow Externally Workflow 6.2.10. Start Re-approval Workflow 6.2.10.1. Configuring the Start Reapproval Workflow 6.2.11. Status Report Generation Workflow 6.2.11.1. Configuring the Status Report Generation Workflow for the Provisioning View 6.2.11.2. Configuring the Status Report Generation Workflow for the Connectivity View 7. Using the Target System (Provisioning) Workflows 7.1. Extending the Schema for the Target System Workflows 7.1.1. Customizing the LDIF Schema Files 7.1.2. Installing the LDIF Schema Extensions 7.2. Understanding the Java-based Target System Workflows 7.2.1. General Information 7.2.1.1. Superior Folder Creation 7.2.1.1.1. In the Connected System 7.2.1.1.2. In the Identity Store 7.2.1.2. HTTP Proxy Server Configuration 7.2.2. Active Directory (ADS) Workflows 7.2.2.1. ADS Workflow Prerequisites and Limitations 7.2.2.2. Connecting to Active Directory 7.2.2.3. Configuring the ADS Target System 7.2.2.3.1. Setting Match Properties 7.2.2.3.2. Special Attributes 7.2.2.3.3. Setting Account- and Group Root in TS 7.2.2.3.4. Setting Exchange Base Properties 7.2.2.3.5. Enabling User Mailboxes 7.2.2.3.6. Creating Shared, Room and Equipment Mailboxes 7.2.2.3.7. Enabling Share, Room and Equipment Mailboxes 7.2.2.3.8. Setting Lync Base Properties 7.2.2.3.9. Lync Enabling 7.2.2.4. ADS Workflows and Activities 7.2.2.5. ADS Workflow Ports 7.2.2.6. ADS Workflow Channels 7.2.2.6.1. Account and Group Channels 7.2.2.6.2. Password Channel 7.2.2.7. Customizing the ADS Workflows 7.2.2.7.1. ADS Delta Workflows 7.2.2.7.2. Configuring Exchange 7.2.2.7.3. Running PowerShell Scripts 7.2.2.7.4. Specifying PowerShell Script Names in the Standard ADS Workflows 7.2.2.7.5. Remote Folder Management 7.2.3. Citrix ShareFile Workflows 7.2.3.1. Citrix ShareFile Prerequisites and Limitations 7.2.3.2. Connecting to Citrix ShareFile 7.2.3.3. Configuring the Citrix ShareFile Target System 7.2.3.4. Citrix ShareFile Workflow and Activities 7.2.3.5. Citrix ShareFile Ports 7.2.4. DirX Access Workflows 7.2.4.1. Using the Target System 7.2.4.2. Using LDAP Connectivity 7.2.5. Evidian ESSO Workflow 7.2.5.1. Evidian ESSO Workflow Prerequisites and Limitations 7.2.5.2. Setting up the Evidian ESSO Workflow 7.2.5.3. Connecting to Evidian ESSO 7.2.5.4. Evidian ESSO Workflow and Activities 7.2.5.5. ESSO Workflow 7.2.5.6. Evidian ESSO Workflow Ports 7.2.5.7. Evidian ESSO Workflow Channels 7.2.5.7.1. Common Aspects 7.2.5.7.2. User Hook 7.2.5.7.3. Export/Join 7.2.5.7.4. ID Mapping 7.2.5.7.5. Post Mapping 7.2.5.7.6. Application 7.2.5.8. Customizing the Evidian ESSO Workflow 7.2.5.8.1. Using a Different Enable-SSO Flag 7.2.5.8.2. Exporting the Search Base on the Identity Side 7.2.6. Google Apps Workflows 7.2.6.1. Google Apps Workflow Prerequisites and Limitations 7.2.6.2. Connecting to Google Apps 7.2.6.3. Configuring the Google Apps Target System 7.2.6.4. Google Apps Workflow and Activities 7.2.6.5. Google Apps Ports 7.2.6.6. Google Apps Account-Channel Mapping 7.2.6.7. Google Apps Group-Channel Mapping 7.2.6.8. Google Apps Member-Channel Mapping 7.2.6.9. Google Apps SetPassword-Channel Mapping 7.2.7. Imprivata Workflows 7.2.7.1. Imprivata Workflow Prerequisites and Limitations 7.2.7.2. Connecting to Imprivata 7.2.7.3. Configuring the Imprivata Target System 7.2.7.4. Imprivata Workflow and Activities 7.2.7.5. Imprivata Ports 7.2.7.6. Imprivata Channels 7.2.7.6.1. Common Aspects 7.2.7.6.2. Subscriber 7.2.7.6.3. Account 7.2.7.6.4. Group 7.2.7.6.5. Password Channel 7.2.8. JDBC Workflow 7.2.8.1. JDBC Workflow Prerequisites and Limitations 7.2.8.2. Connecting to JDBC 7.2.8.3. Configuring the JDBC Target System 7.2.8.3.1. Attribute Correlation 7.2.8.4. JDBC Workflow and Activities 7.2.8.5. JDBC Workflow Ports 7.2.8.6. JDBC Workflow Channels 7.2.8.6.1. Common Aspects 7.2.8.6.2. Membership 7.2.8.6.3. SetPassword 7.2.8.7. Customizing the JDBC Workflows 7.2.8.7.1. Adapting the Database Scheme 7.2.8.7.2. Calling Stored Procedures 7.2.9. LDAP Workflows 7.2.9.1. LDAP Workflow Prerequisites and Limitations 7.2.9.2. Configuring the Connection to LDAP 7.2.9.3. Configuring the LDAP Target System 7.2.9.4. LDAP Workflow and Activities 7.2.9.5. LDAP Workflow Ports 7.2.9.6. LDAP Workflow Channels 7.2.9.6.1. Account and Group Channels in both Directions 7.2.9.6.2. Password Channel 7.2.9.6.3. Case-Sensitive Rename 7.2.9.7. LDAP Delta Workflows 7.2.10. IBM Notes Workflows 7.2.10.1. Notes Workflow Prerequisites and Limitations 7.2.10.2. Configuring the Notes Workflow 7.2.10.3. Configuring the Notes Target System 7.2.10.4. Notes Workflow and Activities 7.2.10.5. Notes Workflow Ports 7.2.10.6. Notes Workflow Channels 7.2.10.6.1. Direction: Identity Store → IBM Notes 7.2.10.6.2. Direction: IBM Notes → Identity Store 7.2.10.6.3. Password Channel 7.2.11. Medico Workflows 7.2.11.1. Medico Workflow Prerequisites and Limitations 7.2.11.2. Configuring the Medico Workflow 7.2.11.3. Configuring the Medico Target System 7.2.11.4. Medico Workflow and Activities 7.2.11.5. Medico Workflow Ports 7.2.11.6. Medico Workflow Channels 7.2.11.6.1. Common Aspects 7.2.11.6.2. Person 7.2.11.6.3. Login 7.2.11.6.4. Password Channel 7.2.12. Office 365 Workflows 7.2.12.1. Office 365 Workflow Prerequisites and Limitations 7.2.12.2. Connecting to Office 365 7.2.12.3. Configuring the Office 365 Target System 7.2.12.4. Office 365 Workflow and Activities 7.2.12.5. Office 365 Workflow Ports 7.2.12.6. Office 365 Workflow Channels 7.2.12.6.1. Accounts 7.2.12.6.2. Groups 7.2.12.6.3. Roles 7.2.12.6.4. Service Plans 7.2.12.6.5. Password Channel 7.2.12.6.6. Member Channel 7.2.13. OpenICF Windows Local Accounts Workflows 7.2.13.1. OpenICF Windows Local Accounts Workflow Prerequisites and Limitations 7.2.13.2. Connecting to the Windows Local Accounts System 7.2.13.3. Configuring the OpenICF Windows Local Accounts Target System 7.2.13.4. OpenICF Windows Local Accounts Workflow and Activities 7.2.13.5. OpenICF Windows Local Accounts Workflow Ports 7.2.13.6. OpenICF Windows Local Accounts Workflow Channels 7.2.13.6.1. Accounts 7.2.13.6.2. Groups 7.2.13.6.3. Members 7.2.13.6.4. setPassword 7.2.14. RACF Workflows 7.2.14.1. Prerequisites and Limitations 7.2.14.2. Configuring the RACF Target System 7.2.14.3. Configuring the Connection to RACF 7.2.14.4. Configuring the Connected Directory 7.2.14.5. RACF Workflow Ports 7.2.14.6. RACF Workflow Channels 7.2.14.6.1. Accounts Channel 7.2.14.6.2. Groups Channel 7.2.14.6.3. Members Channel 7.2.14.6.4. SetPassword Channel 7.2.15. Salesforce Workflows 7.2.15.1. Salesforce Workflow Prerequisites and Limitations 7.2.15.1.1. Registering the Remote Access Application 7.2.15.1.2. Creating the StatusInfo__c Attribute 7.2.15.1.3. Salesforce Workflow Limitations 7.2.15.2. Configuring the Salesforce Workflows 7.2.15.3. Configuring the Salesforce Target System 7.2.15.4. Salesforce Workflow and Activities 7.2.15.5. Salesforce Workflow Ports 7.2.15.6. Account-Channel Mapping for SF Users 7.2.15.7. Group-Channel Mapping for SF PermissionSets 7.2.15.8. Group-Channel Mapping for SF Profiles 7.2.15.9. Channel Mapping for SF Accounts 7.2.15.10. Channel Mapping for SF Contacts 7.2.15.11. Member-Channel Mapping for SF Users 7.2.15.12. SetPassword-Channel Mapping for SF Users 7.2.15.13. Account-Channel Mapping for Identity Store Accounts 7.2.15.14. Group-Channel Mapping for Identity Store Profiles 7.2.15.15. Group-Channel Mapping for Identity Store PermissionSets 7.2.15.16. Channel Mapping for Identity Store Organizations (SF Accounts) 7.2.15.17. Channel Mapping for Identity Store Users (SF Contacts) 7.2.16. SAP ECC (R/3) UM Workflows 7.2.16.1. SAP R/3 UM Workflow Prerequisites and Limitations 7.2.16.2. Configuring the SAP R/3 UM Target System 7.2.16.3. SAP R/3 UM Workflow and Activities 7.2.16.4. SAP R/3 UM Workflow Ports 7.2.16.5. SAP R/3 UM Workflow Channels 7.2.16.5.1. Common Aspects 7.2.16.5.2. Accounts 7.2.16.5.3. Groups 7.2.16.5.4. Memberships 7.2.16.5.5. Password Channel 7.2.16.6. Customizing the SAP R/3 UM Workflows 7.2.17. Service Management Workflows 7.2.17.1. Service Management Workflow Prerequisites and Limitations 7.2.17.2. Configuring Service Management Workflows 7.2.17.3. Configuring the Service Management Target System 7.2.17.4. Service Management Workflows and Activities 7.2.17.5. Service Management Workflow Ports 7.2.17.6. Service Management Workflow Channels 7.2.17.6.1. Common Aspects 7.2.17.6.2. Account 7.2.17.6.3. Group 7.2.18. SharePoint Workflows 7.2.18.1. SharePoint Workflow Prerequisites and Limitations 7.2.18.2. Configuring the SharePoint Clusters, Workflows and Connection 7.2.18.2.1. Creating Clustered SharePoint Target Systems 7.2.18.2.2. Configuring SharePoint Workflows 7.2.18.2.3. Configuring SharePoint SSL Connections 7.2.18.3. Configuring the SharePoint Target System 7.2.18.4. SharePoint Workflow and Activities 7.2.18.5. SharePoint Workflow Ports 7.2.18.6. SharePoint Workflow Channels 7.2.18.6.1. Aspects Common to All Channels and Synchronization Directions 7.2.18.6.2. Groups 7.2.18.6.3. Member Channel 7.2.19. Unify Office Workflows 7.2.19.1. Prerequisites and Limitations 7.2.19.2. Connecting to Unify Office 7.2.19.3. Configuring the Unify Office Target System 7.2.19.4. Workflow and Activities 7.2.19.5. Workflow Ports 7.2.19.6. Workflow Channels 7.2.19.6.1. Accounts 7.2.20. UNIX-OpenICF Workflows 7.2.20.1. UNIX-OpenICF Prerequisites and Limitations 7.2.20.2. Connecting to the UNIX System 7.2.20.2.1. Setting up the Java-based OpenICF Connector Server 7.2.20.2.2. Configuring the Connection to the OpenICF Connector Server 7.2.20.3. Configuring the UNIX-OpenICF Target System 7.2.20.4. UNIX-OpenICF Workflow and Activities 7.2.20.5. UNIX-OpenICF Workflow Ports 7.2.20.6. UNIX-OpenICF Workflow Channels 7.2.20.6.1. Common Aspects 7.2.20.6.2. Accounts 7.2.20.6.3. Groups 7.3. Understanding the Tcl-based Target System Workflows 7.3.1. Target System Workflow Types 7.3.2. Object Identification and Group-to-Account References 7.3.2.1. Workflows for the Hierarchical Target Systems 7.3.2.1.1. General Information 7.3.2.1.2. Referencing Information 7.3.2.1.3. Joining Information 7.3.2.2. Workflows for the Non-Hierarchical Target Systems 7.3.2.2.1. Referencing and Joining 7.3.3. Target System Reference and Join Summary 7.3.4. HiPath Workflow 7.3.4.1. Prerequisites and Limitations 7.3.4.2. Configuring the Ident_HiPath Workflow 7.3.4.3. Activity Ident2HiPath_HiPath (meta directory export) 7.3.4.3.1. General Features and Prerequisites 7.3.4.3.2. Basic Operation 7.3.4.3.3. Control of the Remote HiPath System 7.3.4.4. Activity HiPath2Ident_HiPath (meta directory import) 7.3.4.4.1. General Features and Prerequisites 7.3.4.4.2. Basic Operation 7.3.4.5. Multiple Entry Handling 7.3.4.6. Setting up the HiPath Environment 7.3.4.6.1. User Creation Directives for HiPath 4000 Manager V3.1 7.3.4.6.2. Enable HiPath Environment for rsh and rcp 7.3.4.6.3. HiPath Environment Setup for ssh and scp 7.3.4.7. Export Traces 7.3.4.7.1. Meta Directory Entry Section 7.3.4.7.2. HiPath Entry Section 7.3.4.7.3. Derived HiPath Updates Section 7.3.4.7.4. HiPath Update Statistics 7.3.4.8. Customizing the HiPath Workflow 7.3.4.8.1. Job Authentication 7.3.4.8.2. Ident2HiPath Target Selected Attributes and HiPath2Ident Source Selected Attributes 7.3.4.8.3. Ident2HiPath Attribute Mapping 7.3.4.8.4. Ident2HiPath Export Properties 7.3.4.8.5. HiPath2Ident Attribute Mapping 7.3.4.9. HiPath Tables 7.3.4.9.1. HDMS 3.1 Conversion Table 7.3.4.9.2. HDMS 3.6 Conversion Table 7.3.4.9.3. HDMS 5.2 Conversion Table 7.3.4.9.4. HiPath 4000 Manager V1.0 Conversion Table 7.3.4.9.5. HiPath 4000 Manager V3.1 Conversion Table 7.3.5. ODBC Workflows 7.3.5.1. Prerequisites and Limitations 7.3.5.2. ODBC Workflow Concepts 7.3.5.2.1. Attribute Correlation 7.3.5.2.2. Attribute Configuration 7.3.5.2.3. Identity Multi-Valued Attribute to ODBC Multi-Record Transformation 7.3.5.3. ODBC Validation Workflow 7.3.5.3.1. Workflow Activities 7.3.5.3.2. DirX Identity-Groups/Memberships Handling 7.3.5.4. ODBC Synchronization Workflow 7.3.5.4.1. Workflow Activities 7.3.5.4.2. Workflow Tasks without Stored Procedures 7.3.5.4.3. Workflow Tasks with Stored Procedures 7.3.5.5. Customizing the ODBC Workflows 7.3.5.5.1. Using Additional Attributes 7.3.5.5.2. Using Structurally Different ODBC Databases 7.3.6. RACF Workflows 7.3.7. SiPass Workflows Appendix A: Deprecated Features A.1. ADS Provisioning Workflows A.1.1. Exchange Server 2007 Provisioning Workflow A.2. Dashboard Workflow A.2.1. Dashboard Workflow: General Issues A.2.2. Prerequisites and Limitations A.2.3. Dashboard Workflow: Operational Features A.2.4. Dashboard Password Synchronization A.3. DirX Access Workflows A.3.1. DirX Access Prerequisites and Limitations A.3.2. Configuring DirX Access Workflows A.3.3. Configuring the DirX Access Target System A.3.4. DirX Access Workflows and Activities A.3.5. DirX Access Ports A.3.6. DirX Access Channels A.3.6.1. Common Aspects A.3.6.2. Accounts A.3.6.3. Groups A.4. JDBC Provisioning Workflows A.4.1. General Information about the JDBC Workflows A.4.2. JDBC System Table Layout A.4.3. JDBC Workflow Configuration A.4.4. JDBC Agent Operations A.4.5. Add/Delete Membership Lists A.5. LDAP Provisioning Workflows A.5.1. LDAP Provisioning Workflow Concepts A.5.1.1. Empty Groups A.5.1.2. Enable / Disable of Accounts A.5.2. LDAP Provisioning Workflow Configuration A.5.2.1. Empty Groups A.5.2.2. Enable / Disable of Accounts A.6. LDAP XXL Provisioning Workflows A.6.1. LDAP XXL General Information A.6.2. LDAPXXL Workflow Concepts A.6.2.1. New Common Procedures A.6.2.2. Workflow Integration A.6.3. Detailed Customization A.7. Lotus Notes Provisioning Workflows A.7.1. Tcl-based Lotus Notes Provisioning Workflows A.8. UNIX PAM Provisioning Workflows A.8.1. How PAM Works A.8.2. Setting Up PAM Provisioning Workflows A.9. UNIX-PAM Workflows A.9.1. UNIX-PAM Workflow Prerequisites and Limitations A.9.2. Configuring UNIX-PAM Workflows A.9.3. Configuring the UNIX-PAM Target System A.9.4. UNIX-PAM Workflow and Activities A.9.5. UNIX-PAM Ports A.9.6. UNIX-PAM Channels A.9.6.1. Common Aspects A.9.6.2. Accounts A.9.6.3. Groups This manual provides the information necessary to understand the DirX Identity default Connectivity applications and how to configure and extend them.It consists of the following chapters: Chapter 1 describes the different workflow architectures used in the default applications and how to customize these types. Chapter 2 provides information about the request workflows available in the Provisioning view that support user self-registration and delegated administration activities. Chapter 3 describes how to setup consistent custom scenarios both in the Provisioning configuration and Connectivity configuration. Chapter 4 describes how to reuse the default applications in the Connectivity configuration. Chapter 5 describes Identity source workflows available in the Connectivity view that synchronize information from existing sources to the Identity Store. Chapter 6 describes Identity maintenance workflows available in the Connectivity view that help to maintain your identity system to ensure consistent and current data of high quality. Chapter 7 describes Identity target system workflows available in the Connectivity view that synchronize information from connected systems with the DirX Identity Store. Appendix A describes features that still work but should no longer be used because better features are available. DirX Identity provides a powerful set of pre-configured default applications that you can use to create your identity management environment. The default applications are intended for use as templates and are primarily designed to interact with the user, account and group objects in the Identity Store and the source and connected systems. The DirX Identity document set consists of the following manuals: DirX Identity Introduction. Use this book to obtain a description of DirX Identity architecture and components. DirX Identity Tutorial. Use this book to get familiar quickly with your DirX Identity installation. DirX Identity Provisioning Administration Guide. Use this book to obtain a description of DirX Identity provisioning architecture and components and to understand the basic tasks of DirX Identity provisioning administration using DirX Identity Manager. DirX Identity Connectivity Administration Guide. Use this book to obtain a description of DirX Identity connectivity architecture and components and to understand the basic tasks of DirX Identity connectivity administration using DirX Identity Manager. DirX Identity User Interfaces Guide. Use this book to obtain a description of the user interfaces provided with DirX Identity. DirX Identity Application Development Guide. Use this book to obtain information how to extend DirX Identity and to use the default applications. DirX Identity Customization Guide. Use this book to customize your DirX Identity environment. DirX Identity Integration Framework. Use this book to understand the DirX Identity framework and to obtain a description how to extend DirX Identity. DirX Identity Web Center Reference. Use this book to obtain reference information about the DirX Identity Web Center. DirX Identity Web Center Customization Guide. Use this book to obtain information how to customize the DirX Identity Web Center. DirX Identity Meta Controller Reference. Use this book to obtain reference information about the DirX Identity meta controller and its associated command-line programs and files. DirX Identity Connectivity Reference. Use this book to obtain reference information about the DirX Identity agent programs, scripts, and files. DirX IdentityTroubleshooting Guide. Use this book to track down and solve problems in your DirX Identity installation. DirX Identity Installation Guide. Use this book to install DirX Identity. DirX Identity Migration Guide. Use this book to migrate from previous versions. DirX Identity Release Notes. Use this book to understand the features and limitations of the current release. This document is shipped with the DirX Identity installation as the file Readme.txt or Readme.doc. DirX Identity History of Changes. Use this book to understand the features of previous releases. This document is shipped with the DirX Identity installation as the file HistoryOfChanges.txt or HistoryOfChanges.doc. Boldface type In command syntax, bold words and characters represent commands or keywords that must be entered exactly as shown. In examples, bold words and characters represent user input. Italic type In command syntax, italic words and characters represent placeholders for information that you must supply. [ ] In command syntax, square braces enclose optional items. { } In command syntax, braces enclose a list from which you must choose one item. In Tcl syntax, you must actually type in the braces, which will appear in boldface type. | In command syntax, the vertical bar separates items in a list of choices. ... In command syntax, ellipses indicate that the previous item can be repeated. install_path The exact name of the root of the directory where DirX Identity programs and files are installed. The default installation directory is userID_home_directory*/DirX Identity* on UNIX systems and C:\\Program Files\\DirX\\Identity on Windows systems. During installation the installation directory can be specified. In this manual, the installation-specific portion of pathnames is represented by the notation install_path. dxi_java_home The exact name of the root directory of the Java for DirX Identity. This location is defined during product installation. For details, see the sections \"Installation\" and \"The Java for DirX Identity\" in the DirX Identity Installation Guide. The default applications are constructed from three different workflow architectures: Request workflows, which handle self-service and delegated administration requests that may require authorization by one or more human approvers.Request workflows operate inside the DirX Identity Store and allow you to define processes like creating a new user or modifying a user’s attributes and manage the approvals that are often required as part of these processes.Request workflows can work with any DirX Identity object type, for example, roles or policies.Request workflows can automatically trigger Java-based or Tcl-based workflows to provision the resulting identity data updates to the connected systems.The default request workflows provided with DirX Identity are available in the DirX Identity Manager’s Provisioning view group. Java-based workflows, which handle both real-time and scheduled provisioning and synchronization.Java-based workflows work mainly with the user, account and group objects in the Identity Store and the source and connected systems.They operate primarily outside of the Identity Store and perform the provisioning / synchronization of identity data between source systems and the Identity Store and between connected systems and the Identity Store.(Note that it is possible to build Java-based workflows that work from the Identity Store to the Identity Store; the DirX Identity maintenance workflows are representatives of this type.) The runtime environment for Java-based workflows is provided by the Java-based Identity Server (IdS-J).The default Java-based workflows provided with DirX Identity are available in Identity Manager’s Connectivity view group Tcl-based workflows, which handle scheduled provisioning and synchronization using the DirX Identity meta controller (metacp) and agents.Like the Java-based workflows, Tcl-based workflows work mainly with the user, account and group objects in the Identity Store and the source and connected systems, operate primarily outside of the Identity Store (the maintenance workflows are the exception) and provision and synchronize between the source systems, connected systems, and Identity Store.The runtime environment for Tcl-based workflows is provided by the C++-based Identity Server (IdS-C).Like the Java-based workflows, the default Tcl-based workflows provided with DirX Identity are available in Identity Manager’s Connectivity view group. This chapter provides the following information about these workflows: \"Understanding Request Workflows\" describes the architecture used for request workflows and how to customize them to your requirements. \"Understanding Java-based Workflows\" describes the architecture used for the Java-based default connectivity workflows and how to customize them to your requirements. \"Understanding Tcl-based Workflows\" describes the architecture used for the Tcl-based default connectivity workflows and how to customize them to your requirements. This section provides information about Java-based workflows, including information about: Request workflow architecture Customizing request workflows You can use request workflows for a variety of tasks, including: Controlling user self registration Creating objects (users, roles, and so on) with or without approval Modifying objects (users, roles, and so on) and approving object attribute changes Approving privilege assignment changes DirX Identity Provisioning handles request workflows of any complexity with a wide variety of features, including: Graphical workflow configuration with multiple steps Static, dynamic, group-based and rule-based approver list generation Filters to help reduce or adapt a list of approvers Constraints to specify, for example, minimum requirements on the number of participants Dynamic activity generation based on lists Sequential and parallel activity execution Conditions like \"All must succeed\" or \"Only one may decide\" WhenApplicable rules to restrict the application of a specific workflow template Start conditions for activities, including AND and OR Timeout definition for workflow and activities Easy setup of e-mail notification An unlimited number of escalation steps for each activity An \"active\" flag to prohibit the execution of incomplete rules Lifetime definition for workflow instances including automatic removal Auditing The next section discusses the application of request workflows and provides some examples that explain the features in more detail. Request workflows consist of steps that we call \"activities\". Three basic types of request workflow activity exist: People activities - activities executed by one or more persons, which we call \"participants\". This type of activity needs some time (from several seconds to days). Error activities - activities that handle error conditions. These activities generally send e-mail to well-defined administrators. Automatic activities - activities executed by automated procedures. Examples of these activities include creating a global unique ID (GUID) for a user and creating the LDAP entry upon creation approval and sending an e-mail message. Conditional activities - activities that wait for some event. An example is the completion of a sub-workflow. DirX Identity supplies the following default people activities: Approve assignment, which asks a participant to approve a specific user-to-privilege assignment. You define the participants and optionally the escalation steps. You typically set up an e-mail notification to inform the participants about this task. Approve delete, which asks a participant to approve an object deletion. Approve modification, which asks a participant to approve an object modification. Approve object, which presents a list of attributes to a participant that he must approve. You define the list and the sequence of attributes, the participants and optionally the escalation steps. You typically set up an e-mail notification to inform the participants about this task. Enter attributes, which allows a participant to enter a set of attributes for a new object. You define the list of attributes, their display name and whether they are optional or mandatory. Request privileges, which allows a participant to assign privileges. You can define the types of privileges (role, permission, group). Certification Campaigns, which allows a participant to certify a subject: a privilege or a user. For example, he can verify all manually assigned users of a role or manually assigned roles of a user. DirX Identity supplies the following default error activities: General Error, which sends an e-mail notification to someone who can analyze and solve the problem. This activity is discussed in more detail in the section \"Request Workflow Error Handling\". Error Handler, which sends an e-mail notification to someone if the workflow ran on timeout (status FAILED.EXPIRED). DirX Identity supplies the following default automatic activities: Apply approved privileges, which implements a privilege assignment after approval was performed. It performs a privilege resolution and starts the necessary updates by creating update events (but only if Enable Real-time Provisioning is set at the target system). Apply object, which either creates the object if it does not yet exist or it performs all attribute changes as defined in the corresponding subject order (created by previous activity steps or workflows). Creation - can be used for all objects besides users. For users, use the Apply User With Assignments activity instead. Modification - can be used for all objects. It adds new attributes and modifies or deletes existing attributes. If the target object is a user, the activity checks whether one or more attributes are permission parameters and performs a privilege resolution if true. Privilege resolution may result in the creation of events for real-time synchronization workflows. Apply orders from ticket, which applies the subject order (if the flag is selected) that can be either a creation or a modification request for an object. In case of a user object it additionally evaluates assignments and starts (if required) approval workflows as child workflows. In conjunction with a Wait for child workflows activity the parent workflow is notified when the child workflow(s) are complete. If you use the Track changes in child workflows flag then all child workflows propagate their provisioning changes to the parent workflow. You can use the Wait for completed provisioning activity to check for completed provisioning of accounts and groups. Apply user with assignments, which either creates the user if it does not yet exist or it performs all attribute changes as defined in the corresponding subject order (created by previous activity steps or workflows). Additionally it evaluates all assignments as defined in the corresponding resource orders (created by previous activity steps or workflows). If an assignment requires approval, it starts an independent approval workflow. Otherwise, it performs a privilege resolution and starts the necessary updates by creating update events (but only if Enable Real-time Provisioning is set at the target system). Acknowledge update, used in manual provisioning workflows to set the states according to the performed action. Note that this activity cannot verify whether the administrator performed the action correctly. This activity sets the TS State account or group states as defined by the State attribute and the membership states as defined by DirX Identity. Calculate VMID GUID, which calculates a VMID global unique identifier and adds the calculated value into a definable object attribute. Calculate Siemens GUID, which calls the Siemens internal GUID generator web service to calculate a global unique identifier and adds the calculated value into a definable object attribute. The activity provides a new GUID value for an identity or an error message if the request is not sufficient or the identity already exists. An optional search can be configured that retrieves the existing GUID if the GUID generation failed because the identity already exists. Calculate Risk, used in risk approval workflows to compute the risk level that a requested privilege assignment would have if it was approved. For new/deleted group assignments, the activity calculates the risk and then merges these new risks with the risk values that have already been calculated to define the new possible risk level. This new risk level is stored in the application state and in the workflow context (name: risklevel). Values of 0, 1, 2 and 3 are possible, where 3 indicates high risk. The user’s old risk level is stored in the workflow context (name: oldrisklevel). If risk checking is not active at the domain, nothing is done and the activity succeeds. If risk checking is active but there is no active risk policy, the activity generates an error. You can use the parameter Force An Error If no actual RiskLevel is available to control how the activity functions when risk is active but risk values have not already been computed for a given user. If this parameter is unchecked, the value 0 is used as the risk level and is stored in the application state and the workflow context. You can configure your workflow’s start conditions to respond to this value in a particular way; otherwise, an error is generated. You can also use the workflow’s risklevel or oldrisklevel context variables for the start conditions of other activities to respond to special values. Check SoD, which checks for SoD violations and automatically starts approval workflows if an SoD violation is detected. Map attributes, which lets you define additional attributes or recalculate existing ones (in this workflow order). You can use it to set constants or to combine attributes to fill another attribute (for example 'cn=${sn} + \" \" + ${givenName}'). Send e-mail, which sends an e-mail notification. Use this type of activity if the e-mail notification is conditional; that is, it’s only executed if a specific workflow application state (see the section \"Handling Request Workflow States\") or state of the previous activity occurs. Activities of this type are visible in the graphical workflow structure. Split order, which delivers an Application State attribute according to the order type. Valid values are Add, Modify or Delete. Wait for completed provisioning, which is a conditional activity that waits for the completion of all related provisioning steps that were initiated by the parent workflow and all child workflows. The activity polls for the expected provisioning results. On completion, the workflow proceeds and the results are available in the workflow context. If some provisioning results are pending, the activity uses the retry mechanism to wait for some period of time before performing the next check. Configure the retry mechanism - for example, for 500 retries of 5 minutes - to be sure that provisioning has enough time to complete. This activity requires correct settings of previous activities: All apply activities have the flag Track changes. If you set it, all resulting provisioning actions of this activity are noted in a list in the workflow context. The Apply Order activity also has the flag Track Changes in Child Workflow. When set, it enforces the child workflows to propagate all resulting provisioning actions to the parent workflow. They are integrated into the list in the workflow context. The filled list is then used by the Wait for completed provisioning activity to check the results. DirX Identity supplies the following default conditional activities: Wait for child workflows is a conditional activity that waits for completion of child workflows. It checks whether child workflows are started. If so, it stops further execution of the workflow. If a child workflow finishes, it notifies this activity about its completion, its states, and the changes it performed if the flag Track Changes in Child Workflow was checked at the preceding Apply Order activity. Parent and child workflows must be correctly and consistently configured. In the parent workflow, the Wait for child workflows activity requires a preceding Apply Order activity where you can set the aforementioned flag. If all child workflows are finished, workflow execution continues. Request workflow activities have a fixed sub-structure that makes workflow design easier and keeps workflow definitions simple. The following figure illustrates this sub-structure: Figure 1. Activity Sub-structure Activity sub-structure elements are: Pre step - an optional step that typically contains a notification to the participants of the main step. Note that failure of this step is logged but has no effect on the state of the activity. Main step - the main part of the activity, for example, an approval step. This step sets the state and application state values for the entire activity. Post step - an optional step that typically contains a notification after the main activity is completed. Note that failure of this step is logged but has no effect on the state of the activity. Error step - an optional definition of the error notification to be sent to the administrator if the main step fails. If this sub activity is not configured, the activity goes to state Failed and the General Error activity is activated. See the section \"Request Workflow Error Handling\" for more details. Escalations step - an optional definition of escalation steps. If escalations are defined, the complete activity is re-calculated with the escalation definition and run again. The previous activity remains in state Failed.Expired. The main step is always present and must be defined. All other steps are optional. You can activate and deactivate them as required. An active step is shown in yellow, while an inactive step is shown in gray. You can define explicit or implicit notifications: Explicit notifications are directly visible in the graphical workflow structure. You use an explicit notification for conditional e-mail notification; for example, an e-mail to be sent if an approval is rejected or if a previous activity fails. Implicit notifications are part of the (fixed) sub-structure of an activity (see the section \"About the Activity Sub-Structure\" for details). You can activate or deactivate this type of activity. Use an implicit notification if it is closely related to the activity’s main task. Typical uses are a notification request to the participants of an approval task or an informational notification after a task has been performed. In some cases, it is up to you to choose between an explicit or implicit notification. Implicit notifications help to keep workflow definitions simple by reducing superfluous or recurring information. You can send notifications in plain text or in HTML format. Most of the request workflow templates delivered with DirX Identity are set up as plain text mails. One example is set up as HTML mail. Default → Assignments → Manager Nomination → Approval by Company Head (notifyBefore) In this example, we did not set up nationalization to show the HTML code in one piece. P.generalquestions { BORDER-RIGHT: #bcd 1px solid; BORDER-TOP: #bcd 1px solid; FONT-SIZE: 10px; BORDER-LEFT: #bcd 1px solid; COLOR: #039; BORDER-BOTTOM: #bcd 1px solid; FONT-FAMILY: Arial,sans-serif} Dear Mrs. ${to.sn}, Dear Mr. ${to.sn}, Please approve the following privilege assignment: User: ${workflow.subject.cn} Privilege: ${workflow.resources[0].dxrassignto@cn} To approve, follow the link: Web Center This is an automatically generated mail. Please do not reply. For general questions about this workflow please contact: Pitton Lavina Workflow: ${workflow.path} Activity: ${name} The SendMail workflow recognizes the HTML format from the DOCTYPE statement at the very beginning. The example shows that you can integrate variables (for example ${workflow.subject.cn}) and conditional statements (here the statement) without any problems. Read more about using variables and conditional statements in the section \"Using Variable Substitution\". Although you can separate pieces of this code into nationalization items, we recommend setting up the whole HTML code first, testing it and then dividing it into nationalization items that you can then reuse. To play with this example, for example, in the My-Company sample domain: Copy the workflow and activate it. Restart the Java-based Server or perform Load IdS-J Configuration. Assign the workflow to any privilege directly. Assign the privilege to a user. An approval workflow should be started and the mail should be sent. The states of the request workflow and its activities are closely related. This section describes request workflow states and activity states. A request workflow object has two types of state: A workflow state, which indicates the general state of the workflow and has fixed values such as Succeeded or Failed. DirX Identity’s request workflow service automatically sets this state. A workflow application state, which is a programmable state that is controlled by the specific workflow definition. For approval workflows, the possible values for the workflow application state are Accepted or Rejected. DirX Identity customers can define their own states, and if there are no special states defined, the application state value can also be empty. The following figure illustrates request workflow states: Figure 2. Request Workflow States Workflow states are: (None) - the Java-based Identity Server is aware of the workflow definition (because it is flagged as active) but instances of the workflow do not yet exist. Running - the request workflow service has started an instance of this workflow definition after receiving an appropriate event. Succeeded - the run of the workflow instance is formally successful; that is, a final activity has succeeded. If this activity contains an application state, the workflow instance inherits it. The request workflow service takes the application state from the calculated value of the final activity or, if there is no value there, the display name of the start condition. If the display name is empty, the application state will be empty, too. *Failed.*state - the run of the workflow instance has failed. Check the activity states to see the details. state indicates the following special states: Failed.Prepare - the state inherited from the relevant activity, which is the activity that an administrator or the request workflow service (for example, by retries) could not resolve before it reached its defined timeout value and entered an error condition. Failed.Incomplete - the request workflow service discovered a structural error in the workflow definition but the workflow has not yet completed because: - a startable activity no longer exists - a running activity no longer exists - a finished final activity is not available Failed.Expired - there was either a timeout inherited by the relevant activity or a timeout of the complete workflow. Failed.Aborted - either a user has cancelled this workflow instance or the timeout was inherited from the relevant activity (a user has cancelled this activity). If a user cancels the workflow, all activities that are still running go to status Failed.Aborted, too. If parallel activities must all succeed, this state is also reached if one of the parallel activities goes to state REJECTED. Failed - any other error inherited from the relevant activity See the section \"Request Workflow Error Handling\" for more information. The following figure illustrates the request workflow activity states: Figure 3. Request Workflow Activities Activity states are: (None) - the activity instance exists but the start condition is not yet satisfied. Running - the activity instance is running due to a satisfied start condition. Succeeded - the run of this activity instance was successful. Failed.Prepare - an exception occurred during the participant constraint calculation that is not ConstraintViolationException. Failed.Temporary - the activity determined that the error that occurred is only temporary (for example, the network is temporarily unavailable). If retries are configured for this activity, the request workflow service starts the activity after the Wait before retry period to resolve the error. If no retries remain, the activity goes to status Failed.Expired. Failed - the run of this activity instance failed due to a non recoverable error and no Error sub activity is configured. WaitInError - the run of this activity instance failed due to a non-recoverable error and an Error sub activity is configured. This error activity is used to send a notification to the administrator, who can resolve the problem and resume the workflow, or cancel the workflow if he cannot resolve the problem. Failed.Aborted - a user cancelled this activity. Cancelled - the request workflow service canceled this (parallel) activity because another user approved this step. Failed.Expired - the run of this activity instance failed due to a timeout or a Failed.Temporary condition. In this case, the request workflow service checks whether retries are configured. If they are, it restarts the activity. If the activity sub-structure contains a pre-step, it reminds the relevant user that there is still a task to do. If retries are not configured, the workflow engine sets the activity state to Failed.Expired and determines whether an escalations step is configured and still available. If no, the activity is completed and remains in the Failed.Expired state. If yes, the escalation definition is evaluated and a new activity is started. See also the section \"Request Workflow Error Handling\" for more information. The workflow calculates participants in an activity by evaluating: The configured participant calculation mechanism; for example, a static list or access policies. The participants filter (it removes, for example, the initiator of this workflow). The participants constraints, as follows: If participant constraints are not defined and no approver is retrieved, the request workflow service assumes a correct approval (activity state = Succeeded, application state = Accepted). If participant constraints are defined and the exception thrown is ConstraintViolationException, the routine (Java class) that the workflow designer has written to calculate the constraints can set the state and application state to any value and return it to the workflow engine. Thus in this case, the workflow designer has complete control over these values. If participant constraints are defined and the exception thrown is not ConstraintViolationException, the workflow’s General Error activity starts and sets this activity and the workflow state to Failed.Prepare to indicates a serious error. The full checker is a built-in service to handle running request workflow instances. It runs on a regular basis and checks all entries that are still in a \"running\" state for special conditions. The full check that works on all running workflows is no longer needed, thus the checkallinterval is set to 0 to disable it by default. Checks for expired workflows and activities. The filter for workflow instances is: |(&(dxrExpirationDate tag: com.siemens.idm.requestworkflow.tasks.FullCheck 0 **1800000** true **0** You can set the full check interval for expiration checks with the parameter in milliseconds. By default, 1800 000 ms = 30 min are set. You can also set the full check interval for all running workflows with the parameter in milliseconds. By default, this mode is disabled. If you want to run with a large number of running workflows, we recommend using these settings: 3600000 and 0 The request workflow service handles various types of errors. See the section \"Understanding Request Workflow States\" for details. For each request workflow activity, you can configure an Error sub-structure element that allows you to define a specific error notification to be sent to the administrator if the activity’s main step fails (see the section \"About the Activity Sub-Structure\" for details). If a non-recoverable error occurs in an activity, it goes to state WaitInError. If the Error sub-activity is not defined, the activity goes to state Failed and the default error activity General Error takes control. For each workflow, the General Error activity is configured by default as Error Activity, which sends a notification to the workflow initiator that something is wrong. You can create your own workflow-specific or workflow group-specific error activities and link them to a workflow or a group of workflows to implement special behavior. The request workflow service calls the General Error activity once during each workflow re-calculation (either triggered by an internal status change event from an activity or by a full check from the workflow engine itself). The General Error activity: Checks all activities to determine whether they are in a Failed.state that is not Failed.Expired or Failed.Temporary. For activities that meet this determination, the request workflow service aborts the workflow and sets the workflow state and application state to the states of the failed activity. If several activities in a workflow meet the determination, the request workflow service selects one at random and uses its states. You can configure an ErrorHandler for workflow timeout (status FAILED.EXPIRED). Simply add this activity to your workflow definition. It should not be connected to any other activity. It sends an e-mail if the workflow times out. People activities within request workflows create dynamic pages in Web Center. For complete nationalization of Web Center pages, you need to Use the Web Center’s nationalization feature for all static pages (see the chapter \"Adding Languages\" in the Identity Web Center Customization Guide). Use the Request Workflow’s nationalization feature for all dynamic pages. The next section describes the nationalization concept for dynamic pages. Note that DirX Identity is delivered by default with message items in the locales en and de. DirX Identity’s concept for nationalization of dynamic Web Pages and also mail content is based on the Java concept for nationalization. A text element can keep one or more message items that are replaced during runtime with text that corresponds to the user’s requested language. An example for a mail body within a request workflow activity is: #{Request Workflows/Assignment Workflows.AssignmentOfPrivilegeRejected_body} #{Common Text.ContactPersonsThatRejected} #{Request Workflows/Assignment Workflows.AssignmentOfPrivilegeRejected_loopline} #{Common Text.AutomaticGeneratedMail} #{Common Text.GeneralQuestions} If the English language is requested, this generic text definition is resolved as follows: The assignment of privilege ${workflow.resources[0].dxrassignto@cn} to user ${workflow.subject.cn} was rejected. Please contact the persons that rejected the request: - Activity step: '${activity.name}': User ${participant.cn} with reason: ${activity.reason} This is an automatically generated mail. Please do not reply. For general questions about this workflow please contact: ${workflow.owner.mail} + Workflow: ${workflow.path} + Activity: ${name} For example, the definition #{Common Text.AutomaticGeneratedMail} is resolved to This is an automatically generated mail. Please do not reply. Note that message items can contain variables, for example ${workflow.subject.cn} that are replaced during runtime with the corresponding value, in this case the common name of the subject. For more information about this concept, see the section \"Using Variable Substitution\" in the DirX Identity Application Development Guide. Some fields within DirX Identity support nationalization. Typical fields are the subject or the body of a mail definition. To determine whether a field supports nationalization, use the Identity Manager to view the description of the individual field in the online help. Alternatively, you can click in a field and view the context menu, which may show you the menu items of the nationalization wizard. In read mode, one menu item is available: Show resolved text - click this item to resolve all message items to the language definitions defined by the Default Language field in the domain object. In edit mode, these menu items are visible: Insert a message - the nationalization wizard opens and presents the central message item tree under Configuration → Nationalization. Select a message item object in the language of your choice and then select a message from the list of message items. The wizard inserts the corresponding message item at the cursor location. Insert a message relative - the nationalization wizard opens and presents the local message items for this workflow. Select a message item object in the language of your choice and then select a message from the list of message items. The wizard inserts the corresponding message item at the cursor location. Show resolved text - click this item to resolve all message items to the language definitions defined by the Default Language field in the domain object. To optimize nationalization message management, you can define messages at two locations: You can define more common message items in the central Nationalization folder in the Domain Configuration, which allows you to reuse messages in many objects. Message references to these items can be seen as absolute references. You can define specific message items together with your configuration object, for example, the request workflow definition. Message references to these items can be seen as relative references. If you copy this type of configuration object, the message items are also copied and the references are still valid and point to your copied configuration object. Use both methods to structure your message catalog. Try to reuse messages as much as possible. DirX Identity provides three methods for customizing request workflow nationalization: Local message items - you can copy a request workflow together with its local nationalization items. You can change the local items because they are copies of the original objects. You can also extend them with other locales. Central default message items (under the path Nationalization) - you can extend the existing default message items with additional locales but you cannot change the delivered default message items. Custom default message items (under the path Nationalization → Customer Extensions) - if you need additional central message item definitions, define them under this folder. Use folders to structure the items accordingly. Set up items for all required locales. You can use the built-in features of the Identity Manager to create and maintain message items, particularly if you create new workflow definitions with the corresponding message items in the primary language. Use an external nationalization editor primarily to Check the consistency of a large number of message items Add a new language The export file format is comma-separated values (CSV). You can use any tools that allow you to edit CSV files correctly. The following sections explain how to export and import nationalization information and how to edit the items with Microsoft Excel. Exporting Nationalization Information You can export the complete nationalization information into one file or you can select specific parts of the information: File → Export Nationalization Items - use this menu item from the menu bar to export all nationalization information into one file. A file selection dialog asks for the file location and name. Export Nationalization Items - use this context menu item at a message item folder or message item to export a subtree or a single item into a file. A file selection dialog asks for the file location and name. You can specify the delimiter that is used with the parameter nationalization.csv.delimiter in the file dxi.cfg. By default, we use a semicolon ';'. Note: after changing this file, you must restart the Identity Manager. The format of the file looks like this if two languages are exported (Excel representation): path key de en Prov:Configuration/Nat…​ dxrStartDate Start Datum Start Date mobile Mobiltelefonnummer Mobile …​ Prov:Configuration/Nat…​ RequestApproval_body Bitte genehmigen Sie die folgende Anforderung: Benutzer : ${workflow.subject.cn} Berechtigung: ${workflow.resources[0].dxrassignto@cn}\" \"Please approve the following request: User: ${workflow.subject.cn} Resource: ${workflow.resources[0].dxrassignto@cn}\" …​ The first line is the header line. The field definitions are as follows: path - the object path of this message item (for example, \"Conn:Configuration/Nationalization/Attribute Descriptions\"). The last part is the name of the message item (here \"Attribute Descriptions\"). key - the key in the file (for example, mobile). language - a column for each language in alphabetical order. The next lines contain collections of message items (the key and the information for each language). The first line contains the path, while the last line is empty and serves as a separator. Editing in an External Editor You can use any editor that allows editing of CSV files. Examples are Microsoft Excel or Microsoft Access. Before you start editing a large amount of data the first time, we recommend that you test the editor with a small amount of data. Perform an export, edit the data and then import it into DirX Identity. You should then check the following: Were national characters handled correctly? Did the editor handle multi line message items correctly? Could you create a new key with no problems (result should be new message items)? If all these issues worked well, you can start editing. We tested with Microsoft Excel. Here are some hints on how to work with it: Use a colon ';' or a comma ',' as a delimiter for the export. For ease of handling, you should use the default Excel delimiter, which depends on your language settings. The colon is the default delimiter. Double-click the CSV file. Excel should open it with correctly populated columns. If not, you used the wrong delimiter. Now you can edit the file with all Excel features. You can perform these operations: Change an existing language information field. This action changes the corresponding line in the message item. Populate an empty field (translate it from another language). Copy the language item (for example, in the English language) to the empty field. After import, this operation populates the corresponding line in the message item. Add a new line with a key and language information. After import, this operation adds a new line to the corresponding message item. Delete a line with key and language information. After import this removes the line from the corresponding message item. Add a new column to add a new language. Write the language code in the header line (for example 'it'). After import this creates the new message items. You can reorder the language columns for easier editing but do not touch the path or key columns. You can check easily if cells for a specific language are not filled correctly. There are some restrictions: Do not destroy the structure of the file. In particular, do not remove or reorder the path or key columns. These columns must be the first two columns. If you created a new language column and during import the option \"Create empty objects\" is set, a large number of empty objects may be created. There is no way to remove these objects as a whole. If you change the language code in the header, no rename is performed. Instead all objects are created with the new name. The old objects with the old name persist and must be manually removed. Importing Nationalization Information To import exported and edited nationalization information files: Back up the database to be able to revert to the previous state (optional). Select File → Import Nationalization Items from the menu bar within in the Identity Manager. A file selection dialog asks for the file location and name of the file to import. It also contains these parameters: Create empty objects - setting this option will create menu items that contain only keys but no language data. This option is useful for creating empty message items that you populate later on in the Identity Manager. Report object creation as error - setting this option will cause all object creations to be reported as errors. This option is useful if you made changes only in your nationalization information and you want to be warned if you destroyed something. Note that the import method automatically calculates the delimiter from the header line in the file. The process used to determine the correct language to use differs depending on the DirX Identity feature. Web Center Pages The language in which a Web Center page is displayed (this is valid for static and dynamic pages) is calculated in this sequence: The user can select a language from the Web Center language selection. This value is stored in a cookie and is used during the next login. Note: if you delete the cookie, the language setting must be repeated. After login of a user, the configured browser language is used. Note: if SSO with NetWeaver is configured, NetWeaver passes the language setting to Web Center. If the language cannot be evaluated or the evaluated language cannot be resolved (no nationalization text available), English is used by default. Notification Resolution The language that is used to resolve a defined notification object is calculated in this sequence: The Language field of the notification object is evaluated. If this field resolves to a valid language, this language is used. Keep in mind that the resolved message text is shown as ???*original text???* if nationalized messages are not available for that language or if the original text for that language doesn’t exist. If the language cannot be evaluated and resolves to null, English is used by default. DirX Identity handles message items during runtime as follows: During the Java-based Server startup, all message items are read and resolved to Java resource files. If you request a re-load of the server configuration (Load IdS-J Configuration), all message items are re-loaded. The load procedure resolves message items to absolute paths in a pre-defined folder structure: The common path for all message items starts with install_path*\\ids-j-domain-S*n*\\tmp\\nat\\classes\\* Message items for request workflows are located under rqwfs. Global items are resolved to the sub-folder gen. Local items are resolved to the sub-folder wfs. Under the global and workflow paths, the items are located in the corresponding item structure. You will find message files for all locations under this path. The file name is:* messages_*locale*.properties* The content appears as follows if it is identical to the message item content: # #Sun Feb 15 12:51:48 CET 2009 RequestWasRejected_body=We regret to inform you that your self-registration request was rejected. DearUser_body=Dear User, For example: The local definitions of the Customer Self Registration message items reside beneath the path Definitions → Default → Users → Customer Self Registration → _Nationalization. After loading, the path is:_ install_path_*ids-j-*domain*-S*n*\\tmp\\nat\\classes\\rqwfs\\wfs\\Default\\Users\\Customer Self Registration\\_Nationalization* You will find the files messages_en.properties and messages_de.properties Load Effort for Nationalization Reading and processing the nationalization information during startup or during Load IdS-J Configuration of the Java-based Server requires some additional time. You can measure this overhead with the following procedure: Open the Web Admin Select the logging configuration section. Add the Java Class com.siemens.idm.server.nationalization and set the logging to Finest. Restart the Java-based Server. Check in the server log files for this string: \"Loading resource files takes … ms\" Selection of request workflows is different for creation, modification and assignment workflows and also depends on the calling source (Web Center, Manager or Web Services). The next sections describe request workflow selection for: Creation workflows Modification workflows Assignment workflows The selection methods for creation workflows depend on the calling client: Web Center Identity Manager Web Services Workflow Selection from Web Center Workflow selection depends on the type of license you have. If you have a Business Suite license, you cannot run request workflows. In this case, the ability to create a user depends on the creation access policies established for this user. For more information, see the section \"Policies for Object Creation\" in \"Managing Access Policies\" in \"Delegated Administration\" in the \"Managing Policies\" chapter of the DirX Identity Provisioning Administration Guide. If you have the Professional Suite license, you can create objects in three ways (note that you can set up a mix of these methods within one Web Center application): a. Object creation via request workflows (default): If you click, for example, the \"Add user\"' menu item, the Web Center application retrieves all workflows: that the logged-in user is allowed to execute (this depends on the access policies established for this user) that have the Type field in the When Applicable section of the workflow set to Create that have the Subject field set to User and that have an empty Resources field If more than one creation workflow is found, the list is presented to the user for further selection. If only one workflow is found, this workflow is started immediately. If no workflow is found, an error is returned to the user that he is not allowed to execute any creation workflows. The same algorithm is applied if the creation for a different object type is requested (for example, a Role). b. Object creation via the Create user by request workflow flag feature: You can customize Web Center to use the Create user by request workflow flag feature. Collect all necessary information to create an object (for example, user attributes, assignment of privileges) and then save the user object. This results in a start of a request workflow that stores the object later on. Setting the Create user by request workflow flag at the domain object influences the save operation of the object. Instead of saving the object directly, the save operation is converted to a request workflow start where the entered data is transferred as input parameters in the form of an order object. The corresponding activity of the request workflows defines when to store the object (typically this activity is named Apply changes). c. Object creation via Creation Access Policies You can customize Web Center to use Creation access policies. For examples, see the pages set up for the Business Suite license. Workflow Selection from Identity Manager Workflow selection depends upon the type of license you have. If you have a Business Suite license, you cannot run request workflows. In this case, objects are always stored directly when pressing the Save button. If you have a Professional Suite license, the creation depends on the Create user by request workflow flag at the domain object: If the flag is not set, an object is created directly when clicking the Save button. If the flag is set, the system tries to start a corresponding request workflow when clicking the Save button. For example, if a user object is to be created, the Identity services retrieve all workflows: that the logged in user is allowed to execute (this depends on the set up access policies for this user) that have the Type field in the When Applicable section of the workflow set to Create that have the Subject field set to User and that have an empty Resources field If only one workflow is found, this workflow is started immediately. If more than one workflow or no workflow is found, an error is returned to the user if the Create user directly if no workflow available flag is not set. Otherwise the user entry is created directly. The same algorithm is applied if the creation for a different object type is requested (for example, a Role). Workflow Selection from Web Services Workflow selection depends on the Create user by request workflow flag at the domain object: If the flag is not set, an object is created directly when executing an Add Object operation. If the flag is set, the system tries to start a corresponding request workflow when executing an Add Object operation. For example, if a user object is to be created, the Identity services retrieve all workflows: that the requesting service is allowed to execute (this depends on the access policies established for the user account that is used by the service to authenticate) that have the Type field in the When Applicable section of the workflow set to Create that have the Subject field set to User and that have an empty Resources field If only one workflow is found, this workflow is started immediately. If more than one workflow or no workflow is found, an error is returned to the service if the Create user directly if no workflow available flag is not set. Otherwise, the user entry is created directly. The same algorithm is applied if the creation for a different object type is requested (for example, a Role). This section describes the request workflow selection methods for modification workflows. You can set up Attribute Policies for any object type to define the request workflows for attribute modification. (See the section \"Attribute Policies for Users\" in \"Managing Attribute Policies\" in the chapter \"Managing Policies\" in the DirX Identity Provisioning Administration Guide for details. If an attribute of an object is changed, the service layer checks the change against the defined attribute policies: It retrieves all attribute policies for the relevant object type (for example dxrUser). It checks whether the changed attribute is part of the Selected list in the Configuration tab of the attribute policy. If no policy matches, the attribute is changed directly. If a policy matches, the configured approval workflow is started. If more than one policy is configured for an object type (for example, one for mail changes and one for department changes), and both attributes are changed, for each affected policy one workflow is started. If a workflow link is set at the attribute policy, the referenced workflow is started. If no link is set, the workflow being started is selected by evaluating the When Applicable section of all workflows. This mechanism is performed independently for each affected policy. If no matching workflow is found for a policy when saving the object, an error message is displayed. If an attribute policy contains multiple attributes and several of them are changed, only one approval workflow is started. Note that Java-based workflows do not evaluate attribute policies due to performance reasons. They only send events if enabled for an object type. DirX Identity provides two mechanisms to select the correct workflow for a specific privilege: Direct workflow selection - sets a direct link from the privilege to the workflow Rule-based workflow selection - sets up When Applicable at each workflow definition The algorithm is slightly different depending on the assignment environment. We distinguish between these types for user-to-privilege assignments: User-to-Privilege assignment - assignment, modification or removal of a privilege to or from a user (the corresponding operations for the assignment are create, modify, delete) Segregation of duties (SoD) - an SoD policy requests an approval workflow for a user-to-privilege assignment Re-approval - requires regular starts of re-approval workflows for a user-to-privilege assignment Selection of approval for approval of links between privileges is handled in a similar way. Workflow Selection Algorithm for User-to-Privilege Assignments The calculation mechanism for workflow selection works as follows: Calculate all workflows the logged-in user is allowed to execute. You can define the number of workflows for a specific user via access policies. (See the section \"Managing Access Policies\" in the section \"Delegated Administration\" in the chapter \"Managing Policies\" in the DirX Identity Administration Guide for details.) The next steps depend on the direct workflow assignments at the privilege and the rule definitions in the When Applicable tab of the request workflow definitions: If a privilege is flagged with \"Requires Approval\", the service evaluates the type of operation (create, modify or delete) and request from the request workflow engine (running in the Java-based Server) to start a request workflow. The request workflow engine checks whether a direct link to a workflow is set for this privilege and for this type of operation. If yes, it takes this workflow and starts it. If no, it selects all workflows that fit with the defined Type (the operation), the Subject type and the Resource type(s). If an optional Condition is set, it filters the list of workflows accordingly. If the list still contains multiple workflows, it takes the workflow with the highest priority and starts it. If there are several workflows with the highest priority, it takes one by random. If the list is empty and operation type is create, an error is returned to the calling routine. Otherwise it tries to use the workflow for create → start again with step 2 and type create. Workflow Selection Algorithm for SoD The calculation mechanism for workflow selection works as follows: Calculate all workflows the logged in user is allowed to execute. You can define the amount of workflows for a specific user via access policies. (See subsection \"Managing Access Policies\" in section \"Delegated Administration\" in chapter \"Managing Policies\" in the DirX Identity Administration Guide for details.) The next steps depend on the direct workflow assignments at the privilege and the rule definitions in the tab When Applicable of the request workflow definitions: The service sets the operation to SoD and request from the request workflow engine (running in the Java-based Server) to start a request workflow. The request workflow engine checks whether the direct workflow link for SoD is set for this privilege. If yes, it takes this workflow and starts it. If no, it selects all workflows that fit for operation type SoD, the Subject type and the Resource type(s). If an optional Condition is set, it filters the list of workflows accordingly. If the list still contains multiple workflows, it takes the workflow with the highest priority and starts it. If there are several workflows with the highest priority, it takes one by random. If the list is empty, it tries to use the workflow for create → start again with step 2 and type create. Workflow Selection Algorithm for Re-Approval The calculation mechanism for workflow selection works as follows: Calculate all workflows the logged-in user is allowed to run. You can define the number of workflows for a specific user via access policies. (See the subsection \"Managing Access Policies\" in the section \"Delegated Administration\" in the chapter \"Managing Policies\" in the DirX Identity Administration Guide for details.) The next steps depend on the direct workflow assignments at the privilege and the rule definitions in the tab When Applicable of the request workflow definitions: The service sets the operation to re-approve and request from the request workflow engine (running in the Java-based Server) to start a request workflow. The request workflow engine checks whether the direct workflow link for re-approval is set for this privilege. If yes, it takes this workflow and starts it. If no, it selects all workflows that fit for operation type re-approval, the Subject type and the Resource type(s). If an optional Condition is set, it filters the list of workflows accordingly. If the list still contains multiple workflows, it takes the workflow with the highest priority and starts it. If there are several workflows with the highest priority it takes one by random. If the list is empty it tries to use the workflow for create → start again with step 2 and type create. Workflow Selection Algorithm for Approval of Links between Privileges The calculation mechanism for workflow selection works as follows: Calculate all workflows the logged in user is allowed to run. You can define the number of workflows for a specific user via access policies. (See the subsection \"Managing Access Policies\" in the section \"Delegated Administration\" in the chapter \"Managing Policies\" in the DirX Identity Administration Guide for details.) The next steps depend on the direct workflow assignments at the privilege and the rule definitions in the tab When Applicable of the request workflow definitions: If a privilege is flagged with \"Requires Approval\" in the section Privilege Assignment Configuration, the service evaluates the type of operation (assign or remove) and request from the request workflow engine (running in the Java-based server) to start a request workflow. The request workflow engine checks whether a direct link to a workflow is set for this privilege and for this type of operation. If yes, it takes this workflow and starts it. If no, it selects all workflows that fit with the defined Type (the operation), the Subject type and the Resource type(s). If an optional Condition is set, it filters the list of workflows accordingly. If the list still contains multiple workflows, it takes the workflow with the highest priority and starts it. If there are several workflows with the highest priority, it takes one at random. If the list is empty and operation type is create, an error is returned to the calling routine. Otherwise, it tries to use the workflow for create → start again with step 2 and type create. To execute a request workflow, the services calculate the URL to which the HTTP request is to be sent. The steps are: The service performs a search for the related IdS-J server. The filter used is: (&(objectClass=dxmIDMServer)(!(dxmType=workerContainer))(dxmDomain=)) If no server configuration object is found for the domain, the search is repeated with the following filter: (&(objectClass=dxmIDMServer)(!(dxmType=workerContainer))(!(dxmDomain=*))) This filter is applied for compatibility reasons, to find a server if no domain is explicitly configured. The link to the service (dxmService-DN) defines as set of attributes: dxmSpecificAttributes(ssl) - an SSL connection is established if this value is 'true'. dxmDataPort - this port number is used if SSL is not enabled. dxmSecurePort - this port number is used if SSL is enabled. The link to the system object (dxmSystem-DN) defines the host address. If the host address at the system object is empty, the host field of the service object is taken. The resulting URL is as follows: If SSL is not enabled: http://$(dxmAddress):$(dxmDataPort)//RequestWorkflow/reqwfsvc If SSL is enabled: https://$(dxmAddress):$(dxmSecurePort)//RequestWorkflow/reqwfsvc DirX Identity comes with a set of default request workflows that are sufficient for many purposes. Nevertheless, details must be adapted to the customer environment or new workflows should be created. The following sections explain how to customize the default request workflows: Working with Variable substitution Implementing an activity Implementing a Java class for finding participants Implementing participant filters and constraints For a discussion of request workflow management, see the chapter \"Managing Request Workflows\" in the DirX Identity Provisioning Administration Guide. DirX Identity provides an easy-to-use variable substitution mechanism that can be used to: define variable text sections for e-mails to be substituted during runtime. A typical application of this mechanism is e-mail texts. You can use variables in all text fields like From, To, Subject and Body. You can use simple variables to insert small text pieces like an e-mail address, or you can use control-flow statements with included variables to create more complex structures such as several lines of text coming from lists of objects (for example, a list of all workflow participants). calculate participants for approval activities according to a dynamic specification. Here is an example that shows how the mechanism works within e-mails: User '${workflow.initiatorEntry.cn}' launched the workflow '${workflow.name}' for '${workflow.subject.cn}'. This request was rejected. Please contact the persons that rejected the request: - User ${participant.givenName} ${participant.sn} rejected with reason: ${workflow.activity.reason} This is an automatically generated mail. Please do not reply. At runtime, this template is expanded to: User 'Donegan Mark 1234' launched the workflow 'Create User' for 'Sober Marietta 9876'. This request was rejected. Please contact the persons that rejected the request: User Fred Strober rejected with reason: Not the right person. User Donald Duck rejected with reason: Do not like him. This is an automatically generated mail. Please do not reply. Read the next sections for details about e-mail text variables. Here are several examples that apply to participant calculation: ${workflow.subject.manager} - retrieves the manager(s) of the subject (uses the manager link to look up the manager DNs) ${workflow.subject.owner} - retrieves all owner of the subject (uses the owner link to look up the owner DNs) ${workflow.subject.manager.manager} - retrieves the manager of the subject’s manager (useful for escalation) ${workflow.subject.dxrLocationLink.manager} - retrieves the manager of the location the subject is assigned to ${previousParticipants.manager} - retrieves the manager(s) of the previous activity during an escalation Use the static selection of the Participants tab of an approval definition to setup such definitions. For a detailed description see the section Participant Calculation below. A variable definition looks like this: ${root.object.object…​object.attribute} It starts with a root object that can be composed of many sub-objects. The last element must be an attribute. Root element Root elements are: server - provides some general variables of the Java-based Server. workflow - represents the start element of the current workflow instance. From here you can access sub elements and structures. - if nothing is specified, the current activity is assumed. Examples: $(workflow.subject.mail) This statement retrieves the mail attribute of the subject this workflow handles. $(workflow.subject.manager.mail) This statement retrieves the mail attribute of the subject’s manager. This section explains the structures that can occur within request workflows. This has to do with the orders that such a workflow contains. The general structure is: Workflow → One subject order → Zero or more resource orders Note that the resource orders are about assignments and not the objects itself. From here you can access the subject and the real resources: ${workflow.resources[0].dxrassignfrom@…​} - allows accessing the subject (so this is equivalent to the workflow.subject construct).* ${workflow.resources[0].dxrassignto@…​}* - allows accessing the resources. Examples and how to access information: User modification: Workflow → User ${workflow.subject.cn} - name of the user ${workflow.subject.mail} - mail address of the user ${workflow.subject.manager.mail} - mail address of the user’s manager ${workflow.subject.dxrLocationLink.manager.sn} - the surname of the location manager Privilege assignment: Workflow → User → Assignment ${workflow.resources[0].dxrStartDate} - the start date of the assignment ${workflow.resources[0].roleParameter_Project@value} - the value of the role parameter Project. ${workflow.resources[0].roleParameter_Project@oldvalue} - the value of the role parameter Project. ${workflow.resources[0].roleParameter_Project@modified} - indicates the modification of the Project role parameter. The value is either TRUE or FALSE. ${workflow.resources[0].dxrassignfrom@mail} - the mail address of the user (you can use workflow.subject.mail instead). ${workflow.resources[0].dxrassignto@cn} - the name of the privilege. ${workflow.resources[0].dxrassignto@owner.mail} - the mail address of the privilege owner. ${workflow.resources[0].dxrassignto@owner.manager.mail} - the mail address of the privilege owner’s manager. Multiple privilege assignments: Workflow → User → Assignments You can use the same definitions as shown for one assignment if you define the index with control constructs. Access certification: Workflow → Privilege → Users ${workflow.resources[0].dxrStartDate} - the start date of the assignment ${workflow.resources[0].roleParameter_Project@value} - the value of the role parameter Project. ${workflow.resources[0].roleParameter_Project@oldvalue} - the value of the role parameter Project. ${workflow.resources[0].roleParameter_Project@modified} - indicates the modification of the Project role parameter. The value is either TRUE or FALSE. ${workflow.resources[0].dxrassignfrom@description} - the description of the privilege (you can use workflow.subject.description instead). ${workflow.resources[0].dxrassignto@sn} - the surname of the user. ${workflow.resources[0].dxrassignto@mail} - the mail address of the user. ${workflow.resources[0].dxrassignto@manager.mail} - the mail address of the user’s manager. ${workflow.resources[0].dxrassignto@dxrLocationLink.manager.sn} - the surname of the location manager. Note that in the examples we access a specific object if multiple objects are available (resources[0]). Use control structures to evaluate complete lists of objects. The Java-based Server reads some variables at startup. The following attributes are available: Domain - the domain name for which this server works TechnicalDomain - the technical domain name for which this server works The available attributes of a workflow instance are: absoluteDisplayName (string) - the path of the workflow instance. It contains the display name and all preceding folder names separated by \"/\" . See path for the display name of the workflow definition. activities (list of objects) - the list of activities. applicationState (string) - the instance’s (application) logical state. This state is calculated at the end of a workflow run depending on the final or erroneous activity. context (map) - a hash list of customer-defined variables (name / value pairs). Can be empty. contextAttributes (map) - a hash list of customer-defined variables (name / value pairs). Can be empty. Note that this is just an alternative to using “context”. Keep in mind that all (string) context variables are stored as specific attributes in LDAP, too (LDAP attribute: dxmSpecificAttributes). Context variables that are added or modified are in sync with the LDAP attribute. Variables that are deleted from the context are not synchronized to the LDAP attribute. Therefore when deleting a variable from the context you additionally should create an own variable indicating that the original variable is deleted. Then this new variable can easily be processed using \"dxmSpecificAttributes\". displayName (string) - the human-readable name of this workflow instance. endTime (string) - the date and time in ms (calculated from 1.1.1970) at which the workflow run finished. expirationTime (string) - the date and time at which the workflow instance expires. This is the workflows start time plus the configured timeout value. initiator (string) - the user that initiated this workflow. initiatorEntry (object) - the initiator object with all attributes. path (string) - the path of the workflow definition. It contains the display name and all preceding folder names separated by \"/\". See absoluteDisplayName for the display name of the workflow definition. resources (list of objects) - the list of resource objects Examples: roles, permissions, groups, users. You can access specific attributes of user to privilege assignments: Access to a new role parameter value:* ${workflow.resources[0].roleParameter_*name*@value}* For modifications, you can also access the old value: ${workflow.resources[0].roleParameter_*name@oldvalue}* Please keep in mind that this expression only works in emails that are sent before the object has been changed in an “Apply Changes” activity. This flag allows recognition whether the value was changed (you can use it for conditions):* ${workflow.resources[0].roleParameter_*name*@modified}* The delivered value is either TRUE or FALSE. Example for role parameter Project: ${workflow.resources[0].roleParameter_Project@value} You can access specific parameters of accounts (works only if the assignment is of type group): ${workflow.resources[0].dxrassignto@account_*name}* Example for the description attribute: ${workflow.resources[0].dxrassignto@account_description} This definition retrieves the description attribute of the primary account. You can access specific parameters of a target system (works only if the assignment is of type group): ${workflow.resources[0].dxrassignto@targetsystem_*name}* Example for the description attribute: ${workflow.resources[0].dxrassignto@targetsystem_description} This definition retrieves the description attribute of the target system. You can access specific parameters of an assignment: ${workflow.resources[0].controllerLink.attribute} Example: ${workflow.resources[0].controllerLink.mail} This definition retrieves the DN of the person(s) that performed the access certification approval. ${workflow.resources[0].userInfo} This definition retrieves the flag that can be set by the approver during an access certification to indicate that this user shall be informed via e-mail. ${workflow.resources[0].typeOfOrder} This definition retrieves the type of the order. The possible values are ADD, MODIFY or DELETE. subject (object) - the subject object of this workflow Examples: the user to be created, the user to assign a privilege, …​ startTime (string) - the date and time in ms (calculated from 1.1.1970) when the workflow run was started. state - the workflow state (SUCCEEDED, FAILED, …​). UID (string) - the workflow instance’s unique ID. The available attributes of an activity instance are: activityType (string) - the type of activity, for example: applyChange, enterAttributes, approveCreate, e-mail etc. activitySubType (string) - currently equal to the activityType. applicationState (string) - the instance’s (application’s) logical state (for example REJECTED or ACCEPTED). approvalResult (string) - the approval result of the activity (for example REJECTED or ACCEPTED). approvers (list of objects) - the list of participants for this activity that really approved/rejected. This attribute represents a list of users. You can access all existing user attributes. category (string) - one of the categories \"operational\" or \"errorhandler\". context (map) - a hash list of customer-defined variables (name / value pairs). This attribute can be empty. Example: ${workflow.context.myVar} retrieves the value of the context variable myVar for further processing. Keep in mind that all (string) context variables are stored as specific attributes in LDAP, too (LDAP attribute: dxmSpecificAttributes). Context variables that are added or modified are in sync with the LDAP attribute. Variables that are deleted from the context are not synchronized to the LDAP attribute. Therefore when deleting a variable from the context you additionally should create an own variable indicating that the original variable is deleted. Then this new variable can easily be processed using \"dxmSpecificAttributes\". endTime (string) - the date and time in milliseconds (ms) (calculated from 1.1.1970) at which the workflow run finished. escalationLevel (integer) - current escalation level. 0 escalation not yet started > 0 level of escalation expirationTime (string) - the date and time at which the workflow instance expires. This is the workflows start time plus the configured timeout value. immutableJob (object) - the job definition of this activity. It contains these attributes: baseName (string) - the base name at which the job’s classes and lib directory reside. className (string) - the class name of the associated job implementation. extensionsName (string) - the name of the server-extensions where the job resides. name (string) - the job name. params (map) - name/value pairs of job-specific information. interactiveTaskDescription (list of interactiveAttributes) - defines the user task to be performed at the Web interface (for example, to enter attributes). Attributes for interactiveAttributes are: description - the display name of this attribute at the Web interface. mandatory - defines mandatory attributes if set to true. Otherwise the value is false. name - the name of this attribute (typically the LDAP name). master (string) - the master activity. When calculating approvers and n approvers are found, the master activity is expanded to n activities. name (string) - identifies the activity within the workflow. participantEntries (list of objects) - the list of participants for this activity. This attribute represents a list of users. You can access all existing user attributes. reason (string) - the reason why the approver accepted or rejected the approval request. startTime (string) - the date and time in ms (calculated from 1.1.1970) at which the workflow run started. state (string) - the activity state (SUCCEEDED, FAILED, …​). timeout (string) - the timeout of this activity in milliseconds (ms) (calculated from 1.1.1970). Control structures allow you to generate more complex text structures. Controls are surrounded by , where the blank between … … The condition compares two values, the overall syntax is operand1 comparator operand2 The comparator is one of: == | eq | equals - compares whether the two operands are equal. != | ne | notequals - compares whether the two operands are not equal. | gt - checks whether the first operand is greater than the second one. ⇐ | le - checks whether the first operand is smaller than the second one or equal to the second one. >= | ge - checks whether the first operand is greater than the second one or equal to the second one. Examples: Dear Mrs. ${to.sn}, Dear Mr. ${to.sn}, Dear Mrs./Mr. ${to.sn}, The previous statement tests whether the gender attribute of the participant is filled. If yes, it defines the correct salutation for male and female participants. If not, it defines a more general salutation. ... ... + ... ... For Statement The for statement allows you to handle loops. The syntax is: … where variable is the name of a placeholder which can be subsequently used and list a list of “ “ delimited values (either constants or delivered by a placeholder whose type is a list). Examples: - User ${participant.cn} rejected with reason: ${activity.reason} which could result in User Huber Fritz rejected with reason: Do not like this person User Berner Hans rejected with reason: Maybe a security risk? Note that the line \"- User ${participant.cn} rejected with reason: ${activity.reason}\" acts like a template. You can also define several lines as template text. Java Statement The Java statement allows you to define your own text structures. The syntax is: where classX represent Java classes that must implement the interface JavaPlugin. Example: is resolved to Hello here I am! Hello here I am! where placeholder.TestPlugin is defined as package placeholder; import java.io.PrintWriter; import com.siemens.idm.text.parser.JavaPlugin; import com.siemens.idm.text.parser.ParserException; import com.siemens.idm.text.parser.TextParser; public class TestPlugin implements JavaPlugin { public void execute(TextParser parser, PrintWriter out) throws ParserException { out.println(\"Hello here I am!\"); } } Java Function The Java statement allows you to define your own text structures. The syntax is: where class - represents a Java classname that must implement the interface JavaPluginExt. input - is a string / an expression that is passed to the specified Java class (execute method). Example: If input = ${workflow.initiatorEntry.dayOfBirth} and dayOfBirth has the value 19700218230000Z the function retrieves 1970-02-19 as result. The class com.siemens.idm.jini.util.GeneralizedTime2ISO8601 is defined as: package com.siemens.idm.jini.util; import java.io.PrintWriter; import java.text.SimpleDateFormat; import com.siemens.date.GeneralizedTime; import com.siemens.idm.text.parser.JavaPluginExt; import com.siemens.idm.text.parser.ParserException; import com.siemens.idm.text.parser.TextParser; public class GeneralizedTime2ISO8601 implements JavaPluginExt { /** * transforms given string from generalizedTime format to yyyy-MM-dd format. * @param parser the parser * @param toBeProcessed the string to be transformed * @param out write transformed string to the PrintWriter * @return transformed string; NULL if toBeProcessed == null or not a GeneralizedTime if invalid format */ public void execute(TextParser parser, String toBeProcessed, PrintWriter out) throws ParserException { String res = toBePocessed; if (res == null) { out.println(\"NULL\"); } //out.println(\"String: \" + res); GeneralizedTime t; try { t = new GeneralizedTime(s); } catch (Exception e) { // error out.println(\"not a GeneralizedTime\"); return; } SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\"); String result = dateFormat.format(t.getDate()); out.println(result); // result } } For approval activities, DirX Identity can run in two modes that depend on the setting of the Reduce Runtime Activities flag that is visible in the Participants tab of a request workflow definition. The meaning of the values is: false (default) - besides the original master activity one activity for each approver is created. This mode is compatible with versions prior to 8.2A. true - besides the original master activity it keeps only one common activity that handles all approvers together. Use the corresponding variables in your mail text to guarantee correct resolution during runtime. For additional information how to fill the address fields see the section Filling the Address Fields. Reduce Runtime Activities = false Use the following variable references in mails: To - use ${participantEntries[0].mail} to send the mail to the (single) participant. Language - use ${participantEntries[0].preferredLanguage} to select the language for the resulting mail text if you use e-mail nationalization. Body - use for example ${participantEntries[0].sn} to include the surname of the participant into the mail text. You can also use these settings with the same result: To - use ${participantEntries.mail} to send the mail to the (single) participant. Language - use ${to.preferredLanguage} to select the language for the resulting mail text if you use e-mail nationalization. Body - use for example ${to.sn} to include the surname of the participant into the mail text. This allows you to use the same mail text fragments for workflows with Reduce Run-time Activities set or not set. Reduce Runtime Activities = true / Separate mails = false This mode creates only one activity for all approvers. Use the following variable references in mails: To - use ${participantEntries.mail} to add all participants of this activity into this field. Language - use ${participantEntries[0].preferredLanguage} to select the language for the resulting mail text if you use e-mail nationalization. Note: if the definition resolves to several languages, English is taken per default. Body - use for example ${participantEntries.sn} to include all surnames separated with blanks into the mail text. Alternatively you can use the variable ${to.sn} to obtain the same result. If you use ${to[0].sn} you will obtain the sn of the first participant. Use the for statement (for example with the loop variable 'i') and ${to[i].sn} to process all participants as you need it. Reduce Runtime Activities = true / Separate mails = true A more comfortable solution is to send separate mails to each of the participants. In this case set the Separate mails flag and use these settings: To - use ${participantEntries.mail} to add all participants of this activity into this field. Language - use ${to.preferredLanguage} to select the language for the resulting mail text if you use e-mail nationalization. Body - use for example ${to.sn} to include the surname into the mail text. You can address any other attribute of the participant here, for example ${to.givenName}. Using ${to.gender} allows distinguishing text for men and women, for example: Dear Mrs. ${to.sn}, Dear Mr. ${to.sn}, There are various methods to fill the address fields of a mail template (From, To, CC, BCC). This section explains the features and provides some examples. Read also the section Reduced Run-time Activities because this flag influences mail generation. Some general rules apply for the field calculation: You can send a mail to several persons only in one language. Set the Language field accordingly. Users with no mail address do not lead to an error as long as there are other mail addresses available. An error is generated if after calculating the From or To field no mail address is available. There are specific errors (To field only) returned from the mail server that result in a send error (for example \"550 Relaying denied to \"). In this case the mail is also not sent to the other members of the To field. Addressing a Single User In many cases you send the e-mail to exactly one person. In this case you can use the expression: ${participantEntries[0].mail} If the mail attribute contains only one value, it retrieves a single mail address, for example: Nik.Taspatch@My-Company.com If the mail attribute contains multiple mail addresses, the result is for example: Nik.Taspatch@My-Company.com Niki@gmx.com Note that the addresses are separated by blanks. If this expression is set in the To field, the user might get multiple instances of the same mail. If this expression is set in the From field, the first address is taken, the others are ignored (depends also on the mail server type). If you want to enforce only one value, you can use the expression: ${participantEntries[0].mail[0]} There is no way to define which value is taken from the list. Addressing Multiple Users You can use the expression ${participantEntries.mail} to retrieve the mail addresses of all participants. The resulting string could be for example: Nik.Taspatch@My-Company.com Niki@gmx.com; Lavina.Pitton@My-Company.com ; Retha.Wagner@My-Company.com ; The addresses of one user are separated by blanks (here for Nik Taspatch), the users are separated by semicolon. If you use this definition in the To field, you can work with the to variable in conjunction with the Separate mail flag. See the section Reduced Run-time Activities for more information. You can use semicolon to define multiple expressions in one line, for example: ${participantEntries[0].mail};${workflow.subject.mail} Defining Conditional Addresses In some cases you might want to define conditional addresses. This is for example useful in privilege access certification workflows where you want to inform only the users that their privilege assignment is removed. Define a conditional expression: ${res.dxrassignto@mail}; which is a loop that filters all assignments where the userInfo flag is set to true: ${res.dxrassignto@mail}; The mail addresses are separated by a semicolon. Using the “To” Variable If you use expressions in the To address field that include the substrings “.mail” or “@mail” then a to variable (representing user objects) is set internally. This to variable can then be used in other expressions, too. For example, in the message body: Dear Mrs. ${to.sn}, Dear Mr. ${to.sn}, Dear Mrs./Mr. ${to.sn}, Keep in mind that this kind of approach only works if the Separate mails flag is turned on. You can define participants in many ways. The method described here is easy to understand, powerful and well suited to a directory object structure that works with links. Select the static method from the drop-down selection in a Participants tab in approval activities. Here you can define a mix of static participant definitions (for example cn=Berner Hans,ou=Human Resources,o=My-Company,cn=Users,cn=My-Company or dynamic participant definitions (for example ${workflow.subject.manager} which retrieves the manager of the subject this workflow is for). If an attribute (for example ${workflow.subject.owner}) contains several links, all are used as participants. Start Objects There are several start objects for dynamic participant definitions: workflow.subject - the subject of the request workflow (for example a user, a privilege or a business object) workflow.resources.dxrassignto - the resource(s) of the request workflow workflow.initiatorEntry - the initiator of the workflow previousParticipants - the previous participant (can be used during escalations). Note that you cannot use the participantEntries start object because this is the one that is in calculation. Methods to set up dynamic definitions are: One-level Definitions These definitions use a link attribute at the start object. ${workflow.subject.manager} - retrieves the manager(s) of the subject (uses the manager link to look up the manager DNs) ${workflow.subject.owner} - retrieves all owner of the subject (uses the owner link to look up the owner DNs) ${workflow.initiatorEntry.manager} - retrieves the initiator’s manager. ${workflow.resources.dxrassignto@owner} - retrieves the privilege owner(s). ${workflow.resources.dxrassignto@owner.manager} - retrieves the manager(s) of the privilege owner(s). Multi-level Definitions Definitions of this type use a link chain to get the attribute where to retrieve the participants from. ${workflow.subject.manager.manager} - retrieves the manager of the subject’s manager (useful for escalation) ${workflow.subject.dxrLocationLink.manager} - retrieves the manager of the location the subject is assigned to Relative Definitions During escalation you can refer to the previous participant(s) of an approval activity. ${previousParticipants.manager} - retrieves the manager(s) of all participants of the previous activity during an escalation ${previousParticipants[0].manager} - gets the manager of the first participant of the previous activity during an escalation Multiple Definitions To retrieve participants from different links, use multiple lines in the static table of the Participants tab, for example: ${workflow.subject.manager} - retrieves the manager ${workflow.subject.secretary} - additionally retrieves the secretary ${workflow.subject.sponsor} - and finally evaluates the sponsor link This section provides some examples of variable substitution as well as valuable tips and tricks. Representing Fields and Strings The syntax you use in field and string representations depends on the internal representation of a requested field (whether it is a string or an array of strings) and the location where the field is used. Example 1: Dear Mr. ${workflow.subject.sn} might be resolved to Dear Mr. Smith Example 2: is resolved to true if sn = \"Smith\" If you are in doubt try both variants. Evaluating the Resource Order Type Use the attribute typeOfOrder to determine the resource order type for privilege assignments, for example: The possible values are ADD, MODIFY or DELETE. Creating Correct Salutations in Email You can create correct salutation with these statements: Sehr geehrter Herr ${participantEntries[0].sn}, Sehr geehrte Frau ${participantEntries[0].sn}, In an international environment, you may want to include the preferredLanguage attribute for correct salutation. Creating Escalation Specific Bodies in Email You can create escalation specific mail bodies by evaluating the variable ${escalationLevel}, for example: ... body without escalation ... \"1\" ?> ... body for levels > 1 ... ... body for level = 1 The preferred way to create a customized job implementation is to leverage the socketed job framework for automatic activities (see the chapter \"Implementing a Socketed Job Framework-based Activity\" for more details). You only need to define a brand-new activity if the socketed job framework is not sufficient for your needs. This section describes the general steps necessary to define and implement such an activity. To create your own job implementation, you must: Define configuration parameters Supply a component description Implement the job as a Java class Read the job configuration Read the workflow instance data Modify the workflow instance data Read and change orders Deploy your job implementation Obtain a connection to the Identity domain For the API documentation, consult the following folder on your DVD: Documentation\\DirXIdentity\\RequestWorkflows\\index.html. For sample sources, see the following folder on your DVD: Additions\\RequestWorkflows\\samples. The entire workflow configuration is passed to the server as an XML document. The configuration parameters for the job are part of this document. When the server starts the job, it passes am XML configuration object with the element as the parent node. It should conform to the following structure: myjob com.mycompany.myorg.MyJobImpl basename: The basename string value tells the server’s class loader the name of the folder in which to search for your job classes. It must be a folder underneath install_path*/ids-j-domain-S*n/confdb/jobs. In the above sample, the server assumes your classes are in the following folder: install_path*/ids-j-domain-S*n*/confdb/jobs/myjob*. class: The full class name of your job implementation; that is, the class that implements the interface com.siemens.idm.api.Job. params: The element contains a list of sub-elements with your configuration parameters. For each parameter, you specify its name and the value. It’s the responsibility of your job implementation to evaluate them. To allow Identity Manager to configure an activity with your job, you must supply a component description. The component description extends an abstract object description of an activity. The activity creation wizard searches for activity component descriptions and presents them in a list. Adding the Component Description LDAP Entry You must add your component description LDAP entry underneath the workflow configuration folder in the Identity domain: cn=Activity Types,cn=Configuration,cn=wfRoot,cn=. We recommend that you create your own subfolder (for example, \"cn=Customer Extensions\") to clearly separate your configurations from configurations installed with DirX Identity. Please supply values for the following LDAP attributes. They help to present your activity appropriately in the wizard. objectclass - needs the values dxmComponentDescription and top. cn - the naming attribute. dxmComponentType - needs the value activity for the activity creation wizard, which only presents component descriptions with this attribute value. dxmType - categorizes the basic activity type. The following values are supported: automatic: an activity that runs automatically without any human interaction. It is started by the server as soon as the start conditions of the activity evaluate to true. Typically, this is the value you should provide. notify: an activity that can be used for notifications, especially in case of errors or at the end of a workflow. DirX Identity already supplies e-mail notifications. people: an activity that requires human interaction. It is not applicable for your job implementation. dxmActivityType - a string value that helps to further categorize the activity. It is displayed in the selection page of the create activity wizard. description - the description that is displayed in the selection page of the create activity wizard. dxmContent - the XML document that represents the component description. Creating the Component Description XML Document Use the following template for your own component description: automaticActivity activity applyChange **Your Job classes folder** **com.mycompany.myorg.MyJobImpl** false the default value value2 **Param 1** **Param 2** Leave most of the template unchanged. You only need to insert the name of your component, your job class folder, the class name of your job implementation and for each configuration parameter, a description of the property and its presentation. See also \"Defining Configuration Parameters\". Element , attribute name: The name of your component description as it is displayed in the column \"component\" in the selection page of the activity creation wizard. In the element named job: : In sub-element, enter the name of the subfolder in which the class loader of the IdS-J server searches for the classes of your job implementation. In sub-element, enter the full class name of your implementation. In : For each configuration parameter, enter an element with the following attributes: name: the parameter name, for example, param1. xmlNotation: always use the value \"NameValueProperty\". elementname: always use the value \"param\". type: designates the data type of the parameter. Common values are: java.lang.Boolean, java.lang.String. Provide allowed values as a list of sub-elements. Flag the default value by the attribute default set to true. The presentation of your configuration parameters in the Identity Manager is specified in the element. The sub-element defines a property page. Make sure that all your parameters are listed in the layout attribute. They are presented in the same order as the list. Pay special attention to the parameter names: they must be prefixed with the XML parent element names in XPath format. For our scenarios, this is always \"job/params/\". To present your parameters \"param1\" and \"param2\" you must enter: layout=\"properties: job/params/param1, job/params/param2\" The presentation of your parameters is specified in the element. Enter a sub-element for each of your parameters. Attribute name: The name of your property in the same format as used for the . This means: Use \"job/params/param1\" for parameter \"param1\"! Sub-element : The name of your parameter as it is displayed in the property page. If you entered a list of allowed values in the definition, Identity Manager automatically presents them as a combo box. When an activity is to be started, the IdS-J server loads a class with the name configured in the sub-element of the . The server expects that this class has a default constructor and implements the interface com.siemens.idm.api.Job. This interface requires the following methods: setConfiguration(IDMJob cfg): The server calls this method before the run() method to hand over the job configuration. It passes the configuration in a class that wraps the XML fragment containing the job configuration. The root element is the element with the configuration parameters in its params/param element. See \"Reading the Job Configuration\" for details. run(TaskContext ctx, Map modifications): This method starts the job. The server passes two parameters. The task context gives read access to the activity and workflow instance, especially to the workflow and activity states, the workflow initiator, the subject and the optional resources. The job can indirectly modify the workflow by entering the desired modifications into the passed modification map. Use this facility to set the resulting activity state or application state. Handling Retries In error situations, the workflow engine re-starts a job according the retry configuration: retry limit and \"wait before retry\". The engine assumes an error if the job implementation throws an exception. As a result, the job implementation does not need to handle retries. It just throws an exception and relies on the workflow engine to start it again later on. If the job sets an application state (see \"Modifying Instance Data\" for information on how to do this), it is taken as application state for the activity after the last retry failed. Activity Timeout A timeout is indicated to the job via the TaskContext. If the job does not react or does not react in a timely fashion an interrupt for the thread is called. The resulting InterruptedException should not be ignored. For more information, see the Use Case documentation Java Programming in DirX Identity. Importing Required Libraries When compiling your class, make sure you have the following jar file on your classpath: com.siemens.idm.server-api.jar com.siemens.idm.requestworkflow-api.jar dxmAPI.jar dxmUtil.jar dxmOrder.jar For the API documentation, consult the following folder on your DVD: Documentation\\DirXIdentity\\RequestWorkflows\\index.html. For sample sources, see the following folder on your DVD: Additions\\RequestWorkflows\\samples. The IdS-J server provides a convenience class XmlNodeMapImpl that holds the configuration parameters in a Map. Get a parameter string value using the parameter name as a key. Here is a sample snippet for a string and a boolean parameter: Node paramsNode = _cfg.getNode(\"params\"); Map map = new com.siemens.idm.jini.util.xml.XmlNodeMapImpl(paramsNode); _attributeName = String.valueOf(map.get(\"attributeName\")); String s = String.valueOf(map.get(\"modifySubject\")); _modifySubject = Boolean.valueOf(s); See also the readConfiguration() method in the sample. The configuration object passed in the run(…​) method allows us to obtain the activity and the workflow instance object as in the following sample snippet: com.siemens.idm.api.nodes.IDMActivity activity = _cfg.getActivity(); com.siemens.idm.api.nodes.IDMWorkflow wf = activity.getWorkflow(); This gives us the interface of a standard workflow. Since we are working here with a request workflow, we want the specialized interface, which we get by class casting: com.siemens.idm.requestworkflow.api.RequestWorkflowInstance rqwf = (RequestWorkflowInstance)wf; Now we are able to obtain some data from the workflow, such as the initiator, the subject and the resource(s). Here is a snippet that reads the DN of the workflow initiator: String initiator = wf.getInitiator(); In the following sections, we show how to read the subject and the resources. For reading other properties, see the javadoc of the API. Reading the Workflow Subject The workflow subject is the entry that represents the user who is created with this workflow or whose attributes are modified or who is assigned some privilege or the role or other object which is created or modified. The subject is stored in the workflow instance as an XML object, which we call \"Order\". An order is basically an SPML request that is extended with some properties such as the activation date, the creator, and so on. There are several types of orders: Add- or Modify-Orders are used with a creation or an \"approve-modification\" workflow, while an Info-Order represents a subject that is not modified as with a user-assignment approval. Note that you can change an Add- or Modify-Order from within an activity, but not an Info-Order. You obtain a subject via the request workflow instance: com.siemens.dxm.api.order.Order subject = rqwf.getSubject(); There are a number of \"getters\" to read properties such as the DN, the order type (Add, Modify, Info, and so on) or the directory type (user, role, …​) of the order instance. Here are a few samples. For more details, see the API. String subjectDN = subject.getID(); String orderType = subject.getType(); String directoryType = subject.getDirectoryType(); Note: if you want to modify the subject and store it persistently for further use in follow-up activities, don’t use the \"setter\" methods; use the modification object passed in the calling run(…​) method. See the section \"Modifying Workflow Instance Data\" for more details. Reading the Workflow Resource(s) A workflow instance may contain no resources, one resource, or more than one resource. For example, a workflow for creating a (user) object or approving its modification does not need a resource. In a workflow for approving a user-role assignment, the role assignment is the resource. The resources in a workflow instance are very similar to workflow subjects: they are represented as an \"Order\". To work with resources, you have the following alternatives: Handle them as orders. This is the preferred way. Handle them as XML strings. To work with resources as orders, you obtain an array of resources from a workflow instance by issuing: Order[] resourceOrders = null; resourceOrders = rqwf.getResources(); The following code snippet shows how to read attributes from a resource and set some value. For the complete code, see the sample delivered with DirX Identity. for (Order resource: resourcesArray) { log.info(\"Resource: resource type=\" + resource.getResourceType() + \", Order Type=\" + resource.getType() + \", Resource ID=\"+resource.getID()); String[] attrnames = resource.getAttributeNames(); for (String attrname: attrnames) { log.info(\"Value(s) of resource attribute \" + attrname + \": \" + stringArray2String(resource.getValues(attrname))); } if (!modifySubject) { resource.setProperty(_attributeName, _attributeValue); log.info(\"Resource modified: \"+resource.toXMLString()); } } To work with resources as strings: Obtain the resources as a collection from a workflow instance by calling its getResourceAsString method: ArrayList resourceStrings = null; Collection resources = rqwf.getResourceStrings(); resourceStrings = processResourceStrings(resources.iterator()); Transform the resource string to an order with the following code snippet: while (it.hasNext()) { String rs = (String)it.next(); OrderFactory factory = new OrderFactoryImpl(); Order resource = factory.create(rs); // now you can handle the resource order as above } Get back the resource as string with the order method toXMLString(): String resourceString = resource.toXMLString(); Note: if you want to modify the resource and store it persistently for further use in follow-up activities, don’t use the setter methods. Use the modification object passed in the calling run(…​) method. See the section \"Modifying the Workflow Instance Data\" for more details. Use caution when modifying a subject or a resource in a workflow instance. With a normal class, you expect to use the setter methods to store new or modified values. You can do this for orders, too, but the changes are not stored back in the workflow instance; they are lost when your job ends. To store your changes in the workflow instance and make them available to downstream activities, you must return them to the workflow engine as modifications. An empty modifications map is passed to your job as parameter of the \"run\" method call: run(TaskContext ctx, _Map modifications_) Use this map to return your changes and make them persistent. Put the changed objects into the map using some predefined keys. The following snippets are taken from the sample job implementation delivered with DirX Identity and demonstrate how to store the changes for a subject or a resource as an order or an XML string: // subject as an order: + modifications.put(RequestWorkflowInstance.KEY_WF_SUBJECT, subject); // subject as string: + modifications.put(RequestWorkflowInstance.KEY_WF_SUBJECTSTRING, subject.toXMLString()); // resource as an order: + modifications.put(RequestWorkflowInstance.KEY_WF_RESOURCES, resourceOrders); // resource as string: + modifications.put(RequestWorkflowInstance.KEY_WF_RESOURCESTRINGS, resourceStrings); There are other standard keys. You find them as static properties of the RequestWorkflowInstance interface. A very important key is KEY_ACT_APPLICATION_STATE to set the application state of an activity. Use it to set the activity state explicitly. A workflow designer can then easily configure different downstream activities depending on the state of your job implementation. The following sample sets the application state to success: modifications.put(RequestWorkflowInstance.KEY_ACT_APPLICATION_STATE, \"success\"); For more details on changing an order see the section Reading and Changing Orders. You can use the workflow context to store application-specific information in a request flow activity and then read it later on in a downstream activity. The context allows you to store custom properties as you would in a Java map. You obtain the context from the request workflow instance as shown in the following snippet (for details, see \"Reading the Workflow Instance Data\"): IDMActivity activity = _cfg.getActivity(); + IDMWorkflow wf = activity.getWorkflow(); + RequestWorkflowInstance rqwf = (RequestWorkflowInstance)wf; + IDMWorkflowContext *ctx = rqwf.getContext()*; The following snippet shows how to put a property named \"testtest\" with the ID of the Java Virtual Machine into the context: VMID vmid = new VMID(); + String id = vmid.toString();* + ctx.put*(\"testtest\", id);* + rqwf.setContext*(ctx); Don’t forget to set the modified context at the workflow! Obtaining a property from the context is as easy as reading it from a map: String test = (String) *ctx.get*(\"testtest\"); + logger.info(\"retrieve testtest:\" + ((test !=null) ? test: \"nada\")); Subjects and resources in a workflow instance are orders. The section \"Reading the Workflow Instance Data\" shows how to obtain them from the workflow. Orders implement the interface com.siemens.dxm.api.order.Order. An order is either of type InfoOrderRequest, AddOrderRequest, ModifyOrderRequest or DeleteOrderRequest (short: info order, add order, etc). The type depends on the workflow type and on the data with which the workflow was created. In a workflow with resources (that is, assignments for a subject user) the subject is always an info order. An info order contains only a number of attributes for the subject, no modifications. If the workflow is for creating an object (for example, creating a user), for approving subject attributes or for deleting an object, the order is of type add, modify or delete respectively. Use the method getType to determine the type of the order. With getID, you obtain the object’s DN and with getValues(*propertyname)*, you get the values of an property as a string array. For more details, examine the appropriate API. The following methods are provided for changing an order: setSubjectDN(*dn)* / setResourceDN(*dn)*: Sets the identifier (the distinguished name) of the subject with respect to the resource. setProperty(*name,* value*)*: Sets or changes attributes controlled in an order. Note that the behavior depends on the type of the order. For: Info Order: This method simply sets the value for the attribute. Changes are NOT stored in the subject entry in LDAP, they reside only in the workflow. If the value is empty, or an empty String (\"\") or an array of length 0, the old attribute value is removed from the order. Add Order: Attribute changes are stored in the workflow and the apply Change activity stores them in the new subject / resource entry in LDAP. If the value is empty, or an empty String (\"\") or an array of length 0, the old attribute value is removed from the order. Modify Order: Attribute changes are stored in the workflow and the apply Change activity stores them in the updated subject / resource entry in LDAP. Modify orders are different from add orders in that they contain modifications for attributes. An attribute modification contains an operation. This means a setProperty overrides the property modification. Therefore, the name attribute is evaluated differently from the other order types: It is expected in the format \"*operation\",* \"*property-name\"* where operation is add, replace or delete, name is the name of the property as you use it in getProperty or getValues. Samples: setProperty(\"add-description\", \"New Description\") adds the value \"New Description\" to the attribute\"description\". setProperty(\"delete-mail\", \"sample@gmx.de\") deletes the value \"sample@gmx.de\" from the attribute \"mail\". As in the add and info order, an empty value deletes the modification. For example: setProperty(\"delete-mail\", \"\") or setProperty(\"delete-mail\", null) deletes the modification previously produced with setProperty(\"delete-mail\", \"sample@gmx.de\"). A setProperty(\"*name\",* value*)* is not expected here. As empty values delete modifications, only a setProperty(\"*name\",\" \")* can be accepted for the modification. When you have compiled your job classes and have produced a jar file, you must then deploy it to the IdS-J server. The class loader of the server searches the job-specific classes in a separate folder for your job underneath the server’s \"confdb/jobs\" folder. Suppose we have a job named \"sampleJob\". We need to create the folder install_path*/ids-j-domain-S*n*/confdb/jobs/sampleJob/lib* You need to place all the jar files your job needs underneath the lib subfolder. This is the jar file of your job implementation and optionally other third-party jar files that your job requires (and which are not yet available in the confdb/common/lib folder). If the class loader doesn’t find a class here, it searches in the confdb/common/lib folder. Sometimes custom implementations need an LDAP connection to the Identity domain. There are two methods to obtain this information. We recommend using the job interface described in the following sections. The DomainSessionAccessor method is deprecated. A job interface is available that provides access to the Identity domain, the subject and resource orders, and the job configuration parameters. Implementing the Job You need to derive your job class from the class com.siemens.idm.jobs.BasicJob. This class provides an extended run interface that supplies a SvcSession object that is managed in a session pool, subject- and resource orders and a map of configuration parameters. The Interface You need to implement the following interface: /** * A run method providing session access. * Implement this run method in the derived class * @param taskCtx The task context * @param modifications The modifications to be applied to the workflow instance * @param session The service session, providing LDAP Access * @param subject The subject order * @param resources The resource orders * @param parameters The map of configuration parameters * @throws Exception An exception leads to a temporary error (retry). */ protected abstract void run (TaskContext taskCtx, Map modifications, SvcSession session, Order subject, Order[] resources, Map parameters) throws Exception; A Sample Job A sample job is provided on the DVD in the folder Additions → RequestWorkflows → samples (class SampleJobWithSession). It shows how to read job configuration parameters, to search objects in LDAP and to set the application state. Deployment The basic class com.siemens.idm.jobs.BasicJob is deployed in the jar file orderImpl.jar. Consequently, you can deploy your jar file to confdb/jobs/order/lib. You can obtain the connection parameters from the IdS-J server using the static method getSessionClone() of the singleton DomainSessionAccessor. Here is a code snippet that shows how to perform this task: // get a clone of the domain session SvcSession session = DomainSessionAccessor.getClone(50000); netscape.ldap.LDAPConnection ldapcon = session.getLDAPConnection().getLdapConnection.getLDAPConnection(); Because this method clones the session, it can create memory problems and thus this method is deprecated. We recommend using the job interface described above. ApplyChange activities are used in a request workflow to apply the changes stored in the subject and/or resource orders to the data store. The applyChange activities allow you to add a user hook that is called before and after the application of each order. You can use this user hook to modify the data before the change is applied or to change the order after the change is processed. Changed orders are written back to the workflow instance and can be read in successive activities. Configuring the User Hook To configure a user hook, enter its fully-qualified class name in the Class name text entry field of the activity’s Parameters tab. If you want to use the sample user hook, you must enter the class name com.siemens.idm.jobs.sample.SampleApplyChangesUserhook here. The Interface The user hook must be written in Java. It must implement the following interface: package siemens.dxr.service.order.api; public interface ApplyChangesUserHook { /** * Calls a UserHook before applying the orders * - changes to the orders are updated at the worklow instance * - if an ApplyChangesException is thrown, processing is aborted. * - in this case, workflow context and the activity's application state are updated from the exception if non-null values are provided * - settings of workflow context / activity application state to the apply changes context are not considered if an exception is thrown * @param subject The subject order that is applied in the next step. * @param resource The resource order that is applied in the next step. May be null if no resource is assigned. * @param context The context object * @param ld A clone of the session's LDAP connection. Is closed by ApplyChanges. * @throws OrderJobException Aborts processing */ void preProcess(Order subject, Order resource, ApplyChangesContext context, LDAPConnection ld) throws OrderJobException; /** * Calls a UserHook after applying the orders * - changes to the orders are updated at the worklow instance * - if an ApplyChangesException is thrown, processing is aborted. * - in this case, workflow context and the activity's application state are updated from the exception if non-null values are provided * - settings of workflow context / activity application state to the apply changes context are not considered if an exception is thrown * @param subject The subject order that is applied in the next step. * @param resource The resource order that is applied in the next step. May be null if no resource is assigned. * @param context The context object * @param ld A clone of the session's LDAP connection. Is closed by ApplyChanges. * @throws OrderJobException Aborts processing */ void postProcess(Order subject, Order resource, ApplyChangesContext context, LDAPConnection ld) throws OrderJobException; } A context object is passed to the user hook methods. The context object implements the following interface: package siemens.dxr.service.order.api; public interface ApplyChangesContext { /** * Boolean flag indicating that subject orders are applied * @return flag to apply subject orders */ public boolean isApplyAttributeChanges(); /** * Boolean flag indicating that resource orders are applied * @return flag to apply resource orders */ public boolean isEvaluateAssignments(); /** * Boolean flag indicating that an approval workflow is started for a privilege requiring approval * @return flag for starting approval workflow for resource order */ public boolean isStartApprovalWorkflows(); /** * sets the activity's application state. * @param aState The application state to set. If set here, the activity's application state is set to that value after ApplyChanges has completed. */ public void setActivityApplicationState(String aState); /** * gets the activity's application state * @return the activity's application state */ public String getActivityApplicationState(); /** * The audit master uid * @return The audit master uid */ public String getAuditMasterUID(); /** * Reads the workflow context * @return The workflow context. */ public Map getWorkflowContext(); /** * sets the workflow context. If set, the values stored in the context are added to the workflow context after applyChanges has completed. * Use getWorkflowContext to get the current context and modify it. Then use setWorkflowContext to make the changes permanent after ApplyChanges has finished. * @param wfContext */ public void setWorkflowContext(Map wfContext); /** * The workflow instance ID * @return The workflow instance ID */ public String getWfInstId(); } A Sample Job A sample job is provided on the DVD in the folder Additions/RequestWorkflows/samples (class SampleApplyChangesUserhook). It shows how to set a unique ID at the subject order and adds a start date to a resource order before it is applied to the data store. The postProcess call is not used in the sample; it has an empty body. Deployment The interface siemens.dxr.service.order.api.ApplyChangesUserHook is deployed in the jar file dxrServices.jar. You should deploy your jar file to confdb/commons/lib. The socketed job framework allows you to implement your own automatic activity with minimal configuration effort and Java code writing. The idea is simple: you configure a predefined universal activity type Run socketed job which invokes your implementing Java class specified as a common parameter. The framework provides access to the Identity domain, the subject and resource orders and the predefined job configuration parameters, which means that no new component description is necessary. To create your own job implementation, you must: Add a new activity of the type Run socketed job Specify values for predefined configuration parameters Implement the job as a Java class Read the job configuration Read the workflow instance data Modify the workflow instance data Read and change orders Deploy your job implementation The socketed job framework is based on the common request workflow API. Consult the following folder on your DVD: Documentation\\DirXIdentity\\RequestWorkflows\\index.html. For the specific API and sample sources, see the following folders on your DVD: Additions\\SocketedJob\\api Additions\\SocketedJob\\samples When defining a request workflow, select the universal automatic activity template Run socketed job. Connect it with other activities and define the start conditions. Use start conditions based on application state; for details, see the section \"Understanding Request Workflow States\" in the chapter \"Request Workflow Architecture\". The Run socketed job already contains the following predefined configuration parameter names: Class name for socket job - the parameter is accessible as className in the XML configuration of the job. This parameter is mandatory and must contain a fully qualified class name of a Java class implementing one of the following interfaces: com.siemens.idm.jobs.socketed.api.CustomSocketJob com.siemens.idm.jobs.socketed.api.CustomSocketSvcSessionJob The specified class must be stored in the following folder: install_path*/ids-j-domain-S*n*/confdb/jobs/socketed/lib* 1. Parameter to be passed to job - the parameter is accessible as paramOne in the XML configuration of the job. 2. Parameter to be passed to job - the parameter is accessible as paramTwo in the XML configuration of the job. 3. Parameter to be passed to job - the parameter is accessible as paramThree in the XML configuration of the job. 4. Parameter to be passed to job - the parameter is accessible as paramFour in the XML configuration of the job. 5. Parameter to be passed to job - the parameter is accessible as paramFive in the XML configuration of the job. These parameters are optional and can be used to pass any configuration parameter value to the custom socket job. You can pass any value that can be stored as a common string: for example, a path to a file, a number or a boolean value. Note that the name of the parameter cannot be changed and you should document its meaning in the relevant socket job activity implementation. These parameters are also always available only as string constants. You need to convert these strings to the correct types in your socket job class if necessary. The number of parameters cannot be changed without modifying the component description for the Run socketed activity job (Run socketed job.xml). If necessary, define a new component description. Do not rewrite the default one. See the section \"Supplying a Component Description\" in the chapter \"Implementing a New Activity\" for more details. When running the activity, the IdS-J server will search for a class defined in the mandatory configuration parameter class name for socket job. This class must implement one of these very similar interfaces: com.siemens.idm.jobs.socketed.api.CustomSocketJob - use this interface when no access to the Identity domain is required, it requires only one method: executeSocketJob(TaskContext taskCtx, Map modifications, Order subject, Order[] resources, Map parameters, RequestWorkflowInstance wfInstance) This method contains the main logic of the job. The server passes six parameters. The task context gives read access to the activity and workflow instance, especially to the workflow and activity states, the workflow initiator, the subject and the optional resources. The job can indirectly modify the workflow by entering the desired modifications into the passed modification map. Use this facility to set the resulting activity state or application state. The subject contains the subject order of the request workflow as stored within the task context. It is a convenient way to access it directly. The resources contain the resource orders of the request workflow as stored within the task context. It is a convenient way to access it directly. Note that the resource orders may be not available for some request workflow types. The parameters map contains the values for predefined configuration parameters. The values are accessible for key names paramOne, paramTwo, paramThree, paramFour and paramFive as described in the section \"Specifying Predefined Configuration Parameters\". The request workflow instance contains the object as it is stored within the task context. It is a convenient way how to access it directly. com.siemens.idm.jobs.socketed.api.CustomSocketSvcSessionJob – use this interface when you need direct access to the Identity domain; it requires only one method: executeSocketJob(TaskContext taskCtx, Map modifications, SvcSession session, Order subject, Order[] resources, Map parameters, RequestWorkflowInstance wfInstance) This method contains the main logic of the job but this time the server passes seven parameters. The signature of the method and its logic are almost the same as the previous interface. This interface also provides session-representing access to the Identity domain. Handling States We recommend using application state when returning a result of the activity to be used as a start condition for a next activity. Use constants from com.siemens.idm.requestworkflow.api.ApplicationState or a custom value and use them in the start conditions. See the section \"Modifying the Workflow Instance Data\" in the chapter \"Implementing a Generic Activity\" for more details. Do not set state (com.siemens.idm.api.Job.STATE) directly. It will be set automatically to Succeeded if no exception occurs or to Failed.Temporary if an unhandled exception is thrown. See the section \"Understanding Request Workflow Activity States\" in the chapter \"Request Workflow Architecture\" for more details. Importing Required Libraries When compiling your class, make sure you have the following jar files in your classpath: commons-pool.jar com.siemens.idm.requestworkflow.jar com.siemens.idm.requestworkflow-api.jar com.siemens.idm.server-api.jar com.siemens.idm.server-config.jar com.siemens.idm.server-core.jar dxcLogging.jar dxiSocketedJob.jar dxmAPI.jar dxrServices.jar ldapjdk.jar storage.jar Note that the list might not be complete since it depends on the customer extensions. You may also need to add jar files with missing dependencies to the deployment directory; see the section \"Deploying the Job\". The socketed job framework provides methods and keys to access the predefined configuration parameter values: String p1 = SocketedJob.getParameterAsString(ActivityConstants._PARAM_ONE_, parameters); String p2 = SocketedJob.getParameterAsString(ActivityConstants._PARAM_TWO_, parameters); String p3 = SocketedJob.getParameterAsString(ActivityConstants._PARAM_THREE_, parameters); String p4 = SocketedJob.getParameterAsString(ActivityConstants._PARAM_FOUR_, parameters); String p5 = SocketedJob.getParameterAsString(ActivityConstants._PARAM_FIVE_, parameters); See also the ParamListingJob class in the sample directory. The socket job interfaces give you direct access to the request workflow instance, to the subject and to the resources if available. You can also read the participant of the previous people activities or read the initiator of the workflow. See the class ParamListingJob and Utils in the sample directory for these advanced examples. The socketed job framework is based on common request workflow API. Use the methods described in the section \"Modifying the Workflow Instance Data\" in the chapter \"Implementing a New Activity\" for more details. The socketed job framework is based on common request workflow API, use the methods described in the section \"Read and Write Context Properties\" in the section \"Implementing a New Activity\" for more details. The socketed job framework is based on common request workflow API. Use the methods described in the section \"Reading and Changing Orders\" in the section \"Implementing a New Activity\" for more details. The jar file containing compiled custom implementation of the socketed job APIs must be placed within the folder install_path*/ids-j-domain-S*n*/confdb/jobs/socketed/lib*. Do not add other jar files to this directory unless it is necessary due to class loader problems. It is mainly necessary when using other third-party dependencies. Instead of finding the participants of a people activity by approval policies or group lists, you can write your own Java class to do it. To create your own \"find participants\" implementation, you must: Define configuration parameters Implement a Java class Deploy the Java class For the API documentation, consult the following folder on your DVD: Documentation\\DirXIdentity\\RequestWorkflows\\index.html. For sample sources, see the following folder on your DVD: Additions\\RequestWorkflows\\samples. When you create or modify a people activity, select the type class from the drop-down list at the top of the Participants tab. In the \"Class\" field, enter the full class name of your Java class. For the sample class described here, enter: com.siemens.idm.participants.sample.FindParticipantsSample. If your class needs configuration parameters, enter them in the \"Parameters\" table. For each parameter, enter the parameter name into the left column and the value into the right column. Suppose you want to read some data from a file; in this case, you might define a parameter \"filename\" in the left column and then enter the absolute path name of the file \"c:\\myconfigdata\\findparticipant.properties\" in the right column. See the section \"Implementing the Java Class\" for information on how to read them in your Java class. The Java class must provide a default constructor and implement the interface com.siemens.idm.api.custom.Participants. Optionally, it can implement the interface com.siemens.idm.api.custom.ParticipantsExtended: it enables the custom class to obtain a connection to the Identity Store. Implementing the Participants Interface For the Participants interface, the only method you need to realize is findParticipants(…​). The IdS-J server passes the following parameters from the workflow and activity instance: operation - the operation string taken from the workflow definition. subjecttype - the subject type taken from the workflow definition. In most cases, the subject of the workflow is a user. subjectDn - the distinguished name of the workflow’s subject. Note: If there is an escalation, the subjectDN is the DN of the participant of the previous level. For example, in the first escalation level, you get the DN of the original activity participant, in the second level, the DN of the participant of the first level. Nevertheless, you have access to the workflow subject via the activity. For more details, see the section \"Reading the Workflow Instance Data\". Here are the necessary commands: com.siemens.idm.api.nodes.IDMActivity activity = _cfg.getActivity(); com.siemens.idm.requestworkflow.api.RequestWorkflowInstance rqwf = (RequestWorkflowInstance) activity.getWorkflow(); com.siemens.dxm.api.order.Order subject = rqwf.getSubject(); properties - a map of configuration parameters taken from the activity definition. See the section \"Defining Configuration Parameters\" for information on how to specify and set them in the workflow. activity - the interface to access the activity instance and through it the workflow instance. Your class must return a collection of String objects that represent the distinguished names of the participants. Implementing the ParticipantsExtended Interface The ParticipantsExtended interface allows a participant finder to obtain a context, which especially gives access to an LDAP connection to the DirX Identity domain. This interface defines a setter for a ParticipantContext. The com.siewmens.idm.api.custom.ParticipantContext defines the following methods that are to be implemented: LDAPConnection getLdapConnection() - returns a “netscape.ldap.LDAPConnection”. It is connected to the DirX Identity domain and you use it to retrieve any LDAP entries in the domain. You can also change any LDAP entry, so be careful when using it. Reading Configuration Parameters Reading the configuration parameters is very simple: just call the get(…​) method of the properties map and provide the parameter name as the key, as shown in this sample: String filename = (String)properties.get(\"filename\"); Note that the parameter values are treated as strings. Returning Participants The server expects the participants as a collection of strings. The following code snippet simply constructs a list of DN strings and returns them: ArrayList res = new ArrayList(1); res.add(\"cn=Taspatch Nik,ou=Global IT,o=My-Company,cn=Users,cn=My-Company\"); return res; Importing the Required Libraries When compiling your class, make sure you have the following jar files in your classpath: dxmApi.jar com.siemens.idm.server-api.jar com.siemens.idm.requestworkflow-api.jar For the API documentation, consult the following file on your DVD: Documentation\\DirXIdentity\\RequestWorkflows\\index.html. When you have compiled your classes and produced a jar file, you must deploy it to the IdS-J server. Place it into the folder: install_path*/ids-j-domain-S*n*/confdb/common/lib* Each people activity allows for specifying a participant filter and participant constraints which are applied to the result of the \"find participants\" implementation. The filter allows for reducing the list of participants; for example, skipping the workflow initiator. The constraint implementation decides whether the number of participants meets the workflow’s requirements (\"4-eye-principle\"). Implementation of a filter and a constraint are quite similar. Both must be realized as Java classes. The server passes the list of participants and the current activity. Only the result of their operation is different. Participant Filter: A participant filter must implement the interface com.siemens.idm.requestworkflow.api.ParticipantsFilter. In its only method filterParticipants(…​) it receives the list of participants and the current activity. It must return the allowed participants as a list of strings denoting the distinguished names of the participants. For details, see the section \"Implementing a Participant Filter\". Participant Constraints: A participant constraints class implements the interface com.siemens.idm.requestworkflow.api.ParticipantConstraints. In its only method checkParticipantsConstraints(…​) it receives the list of participants and the current activity. If it rejects the participants, it must throw a ConstraintViolationException. For details, see the section \"Implementing Participant Constraints\". Filters and Constraints as Joblets (Deprecated): As an alternative to providing Java classes implementing the interfaces ParticipantsFilter and ParticipantConstraints, filters or constraints can be realized as joblets. Joblets are Java sources implementing the IDMJob interface that are compiled and started at runtime by the IdS-J server. See the sections \"Configuring a Joblet\" and \"Implementing a Joblet\" for instructions on how to realize a joblet. Deploy Filters and Constraints: For details, see the section \"Deploying Filters and Constraints\". For the API documentation, consult the following folder on your DVD: Documentation\\DirXIdentity\\RequestWorkflows\\index.html. For sample sources, see the following folder on your DVD: Additions\\RequestWorkflows\\samples. Your participants filter implementation should have a default constructor and implement the interface com.siemens.idm.requestworkflow.api.ParticipantsFilter. The only method of the interface is filterParticipants(…​). The additional interface com.siemens.idm.requestworkflow.api.ParticipantsFilterExtended allows you to obtain a context with the LDAP connection to the Identity domain. Interface ParticipantsFilter: The only method you must implement is: filterParticipants(…​). The server passes two parameters: participants: the list of participants calculated so far, each as a distinguished name string. activity: the current activity for which the participants are to be calculated. The method returns the list of filtered participants as a collection of strings, each representing a participant’s distinguished name. The following snippet shows you how to read the workflow initiator’s DN, exclude the initiator from the participants and return the new participant list: RequestWorkflowInstance wf = (RequestWorkflowInstance) activity.getWorkflow(); String initiator = wf.getInitiator(); ArrayList allowedParticipants = new ArrayList(); Iterator it = participants.iterator(); while (it.hasNext()) { Object o = it.next(); String participant = (String)o; if (participant.equalsIgnoreCase(initiator)) { log.info(\"ParticipantFilterSample - participant: \" + participant + \" not allowed for approval\"); } else { allowedParticipants.add(participant); } } return allowedParticipants; Interface ParticipantsFilterExtended This interface extends ParticipantsFilter and establishes the ParticipantContext. This allows obtaining an LDAP connection to the DirX Identity domain and thus to execute LDAP operations. You must implement the following methods: public void setParticipantContext(ParticipantContext ctx): the server passes a com.siemens.idm.api.custom.ParticipantContext. See below. Interface ParticipantContext This interface provides the following method: public LDAPConnection getLdapConnection(): it returns an LDAP connection to the DirX Identity domain. Writing Logs You can issue log messages that appear in the server’s log files. The server’s log support com.siemens.idm.jini.util.logging.LogSupport provides the usual log interface, especially the following methods: log.error(…​): error message log.warning(…​): warning message log.info(…​): normal informational message log.finest(…​): debug message Your participant constraints implementation should have a default constructor and implement the interface com.siemens.idm.requestworkflow.api.ParticipantConstraints. Optionally it can also implement com.siemens.idm.requestworkflow.api.ParticipantConstraintsExtended. The only method of the interface is checkParticipantConstraints(…​). Interface ParticipantConstraints You must implement the only method checkParticipantConstraints(…​*)*. The server passes two parameters: participants: the list of participants calculated so far, each as a distinguished name string. activity: the current activity for which the participants are to be calculated. A participant constraints implementation returns a ConstraintViolationException to notify the server that the participant list does not meet the constraint conditions. In the exception constructor, you can supply the desired resulting activity state and application state along with an error message that will be stored with the activity instance. This allows you to configure subsequent activities that are started in this case. The following snippet shows you how to make sure that the list contains at least one participant: if (participants == null || participants.size() section. Then it processes the entries of the search result one by one the same way as it does in the event case. Note that in this case the channel sequence is determined by the sequence numbers of the destination channels, in this case the channels attached to the connected system. The join engine searches the joined entry using the join conditions of the corresponding channel. The join conditions are performed one after the other until a single entry has been found. The join engine evaluates the join conditions in the following way: if the join condition defines a search base, then that object is read; if the join condition defines an SPML filter, then that filter is used and is combined with the search base defined in the section. Depending on the search result, the join engine provides the (default) entry operation for the mapping step: ADD if no entry has been found), MODIFY if an entry has been found. The join engine performs mapping and builds an add, modify or delete request depending on the mapping result. It updates the joined entry or creates a new one by passing this request to the connector. The join engine reads the updated entry again using the returned entry identifier for backward synchronization and to retrieve attributes that were indirectly set by the connected system. The join engine performs mapping for the other backward direction using the configuration of the channel attached to the Identity domain. Depending on the mapping result, the join engine builds an add or modify request and updates the entry in the Identity domain. Note that the Sync2TS controller is also used to synchronize passwords to the connected system (and optionally back to IdentityStore). If the topic of the incoming event starts with either \"dxm.setPasswordRequest.\" or \".dxm.setPasswordRequest.\" then passwords are synchronized to the connected system and optionally password relevant attribute information is synchronized back to IdentityStore. If the password channel on Identity side is missing then synchronisation is done only to the connected system; otherwise synchronisation is done both ways. No other attributes than defined in account or group channels are synchronized. Target System Validation Controller The validation controller performs a target system validation against the content of the target system representation in the Identity Store. The following figure shows the processing: Figure 9. Validation Controller Processing As shown in the figure, the validation controller performs the following actions: Searches the entries in the connected system by constructing a search request for each channel based on the channel’s section. The channel sequence is determined by the sequence numbers of the destination channels, in this case the channels attached to the target system in the DirX Identity domain. Let’s assume the account channel in DirX Identity has sequence number 1, because the membership references are stored in the groups. In this case, the corresponding channel in the connected system - the one for the users - is searched first. When all entries of the result are processed, the controller issues the search for the next channel (here, the groups) and processes them. Evaluates the join conditions of the DirX Identity channel and searches the joined entry. (For details on evaluation of the join condition see step 3 of \"Sync2TS\" controller above.) Performs the mapping configured in the DirX Identity channel, constructs the appropriate request (add, modify or delete) and passes it to the LDAP connector for updating the joined entry in the DirX Identity domain. The validation controller deletes entries in the Identity domain that have no corresponding entry in the connected system. In order to identify these entries, the validation controller uses two different algorithms that depend on the definition of the sort attribute in the section: If a sort attribute is configured at both sides, the controller searches both the source and the destination. It processes the source search result entries one by one, and: If the source entry matches the next destination entry according to the join conditions, it considers this entry the joined entry and updates it. Then it continues with next source entry and next destination entry. If the source entry’s sort attribute is lexicographically smaller than the destination entry’s sort attribute, it assumes that the destination entry needs to be created. Then it continues with the next source entry. If the source entry is lexicographically greater than the destination entry, the controller assumes that the destination entry needs to be deleted. It either issues a delete request for the destination entry or delegates the task to the user hook according the user hook’s response to the \"getCallDelete()\" method. The controller then continues by comparing current the source entry with the next destination entry. When there are still source entries available and all destination entries have been processed, then all these remaining source entries will be created (after having performed the appropriate mappings). When there are still destination entries available and all source entries have been processed, then all these remaining destination entries need to be deleted. (For details on deletion algorithm look at the previous steps.) In all other cases, the controller first searches for all identifiers of the destination and stores them in a map. Then, it exports the source entries and joins one after the other in the destination: If no matching entry is found, the entry will be created in the destination. If a matching entry is found, the entry is eventually modified and the joined entry is deleted from the map. In the end, only the entries that have no corresponding source entries remain in the map. The validation controller either deletes them itself or delegates this task to the user hook. Note: As a consequence of the algorithms described above, you should configure a Sort Attribute if you configure Paged Read in a channel’s section. This configuration enables the validation controller to process the entries page by page rather than having to read all pages first into memory before starting the comparison algorithm. As a result, Paged Read, which especially makes sense for large search results, performs in an optimal way if a Sort Attribute is configured, too. Also keep in mind to configure an appropriate size limit at the LDAP Server for the complete search result even if you choose Paged Read. a. Full Import Controllers The \"full import\" controller performs a full import from a connected system into DirX Identity. Its operation is identical to the validation controller with one exception: the validation controller updates the \"last validation date\" at the target system when the job is finished. In other words, full import is the same as initial load with respect to a connected system. Full import can be used not only for connected systems with accounts and groups, but also for all types of systems and objects, especially for importing users. b. Restore Target System Controller The \"restore target system\" controller restores a connected system with the entries stored in the Identity Store after a crash of the connected system. The controller works like the \"full import\" controller, but from the Identity Store to the connected system. It should be started by a schedule or (preferably) by hand using Identity Manager. It exports all entries of the \"IdentityDomain\" port and imports them into the connected system. It deletes entries in the connected system that have no representative in the Identity Store. Note: if you don’t want objects that do not have a representative in the Identity Store to be deleted in the connected system, you should use the Sync-One-Way-2-TS Controller, which only adds or modifies objects. We recommend using this controller first when going productive to test if your environment and your mapping are correct before using the Restore Target System Controller. c. Sync-One-Way Controller / Sync-One-Way-2-TS Controller The \"sync-one-way\" controller synchronizes entries from the Identity Store to the connected system. Its operation differs from the \"Restore\" controller in that it does not delete entries that were deleted in the Identity Store. Its operation differs from the \"Sync2TS\" controller in that it does not synchronize the changes back from the connected system to Identity Store: it works only \"one-way\". d. Sync-One-Way-2-Identity Controller The \"sync-one-way-2-identity\" controller synchronizes entries from the connected system to the connected system. Its operation differs from the \"FullImport\" controller in that it does not delete entries that were deleted in the connected system, and it does not update the “last validation date”. Its operation differs from the \"Sync2TS\" controller in that it does not synchronize the changes back from the Identity Store to the connected system: it works only \"one-way\". e. Cluster Synchronization Controller The \"cluster synchronization\" controller is like the \"Sync2TS\" controller except that it serves not only one target system, but a cluster of them. The appropriate workflows accept change events for a target system, but can also be started by a schedule or manually by Identity Manager. When started by a schedule or by hand, the workflow expects the DN of the target system, its type, cluster and domain attributes as start parameters. The controller reads the connector configuration and the environment properties from the target system entry, opens the target system connector with the new configuration data and provisions the entries of the Identity Store to the connected system exactly the same way as the \"Sync2TS\" controller. When started by a change event, the controller finds the target system by evaluating the event topic: The topic contains the type, domain and cluster attributes of the target system. f. Cluster Validation Controller The \"cluster validation\" controller is like the normal \"validation\" controller except that it serves not only one target system, but a cluster of them. For more details on cluster handling, see the Cluster Synchronization Controller. g. Cluster Restore TS Controller The \"cluster restore\" controller is like the normal \"restore target system\" controller except that it serves not only one target system, but a cluster of them. For more details on cluster handling, see the Cluster Synchronization Controller. h. Password Reset TS Controller The \"password reset TS\" controller resets the passwords of the accounts of a DirX Identity target system. If the workflow is configured for personal accounts, it reads the password from the user and sets it at the account. If it is configured for privileged accounts, it generates a new password and sets it at the account. For each change, it sends a change event that triggers the password synchronization workflow to update the password at the connected system. The controller does not handle change events. i. Password Expiration Controller The \"password expiration\" controller checks for expired passwords of privileged accounts in DirX Identity. The controller searches for passwords that are going to expire according to the configured filter. The number of days before expiration is configurable. The controller generates a new password, sets it at the account and sends the change event to trigger the password synchronization workflow. The controller does not handle change events. The channel configuration specifies how to find entries in the attached system and how to map them to corresponding system. A channel is always attached to a connected directory, which represents either a connected system or a target system sub-tree in an Identity domain. We differentiate between a number of channel types, as shown in the following figure. Figure 10. Channel Types As shown in the figure: Main or primary channels represent the entries of a certain type, typically accounts or groups. They have a reference to the corresponding channel, which represents the entries at the other system. Typically, an accounts channel for the Identity domain has a corresponding channel for the users in the connected system. The same holds for groups. Member channels represent the account-group memberships. In order to support \"cross-membership\" scenarios (for more details, see the section \"Cross Memberships\"), the attributes that hold the membership information (for example, for LDAP: attribute \"members\") are separated and managed in the member channel. The member channel is referenced from one of the primary channels, which indicates that the membership attributes are stored in the primary entry. The member channel also has a corresponding channel that may be attached to another primary channel that is not the corresponding channel of the source. This relationship defines a \"cross-memberships\" scenario, where members are stored in groups at one side and in users at the other. Password channels represent the password-related attributes of an entry type; that is, of users and accounts. These attributes include the attribute that stores the password (for example, \"userPassword\" for LDAP systems), and can include additional ones, especially for password reset information. The password channel references the primary channel for the entry that holds its attributes. Separating the password attributes from the normal ones allows the join engine to identify the attributes to be updated upon password change events. The password channel on Identity side is an optional one and will be used when synchronizing password relevant attribute information from Connected System back to IdentityStore. Secondary channels are mainly intended for relational database systems, which store entry attributes in several joined tables. Each secondary channel has a reference to its primary channel. When reading an entry from the attached system, the join engine also reads the attributes from the secondary channel(s). As a result, it needs some information from the schema of the database: The storage location of the reference between primary and secondary channel The attributes that hold the reference in the source and which are referenced in the destination The type of relationship: 1-to-1, 1-to-many. The channel configuration is separated into the following sections: Export: Defines the elements to search the entries in the attached system, usually search base, search filter and scope (for hierarchical systems). Furthermore, the controller can be advised to perform a paged search (with page size, time limit, etc.). You should only activate this option if the appropriate connectors support this functionality. Delta: The settings here are only evaluated by delta controllers. You have two options here: Extend the search filters in order to obtain only the changed entries since the last change. This option can be applied to any connector and any connected system that supports attributes representing the creation and or modification time. Typical samples are LDAP servers with the attributes “createTimestamp” and “modifyTimestamp”. You just need to supply the list of attributes containing the creation or modification time. This option, called the “Expert Operational Attributes”, is only for special connectors that explicitly support delta handling. The most important sample is the Active Directory connector. It is able to not only obtain the changed entries, but also those, which were deleted since the last export. In this case you just need to select the “Expert Operational Attributes” option and enter a fixed XML String containing the value “${LastDeltaValue}” for the operational attribute “dxm.delta”. For more information about the specific aspects when selecting this option for the Active Directory Delta Workflow see \"Using the Target System (Provisioning) Workflows → Understanding Java-based target System Workflows - > Active Directory (ADS) Workflows → Customizing the ADS Workflows → Delta Workflows\" in this guide Join: Specifies a number of join conditions that the join engine is to evaluate when it tries to find the joined entry in the destination, given an entry from the source system. The conditions are applied one after the other. If any one condition leads to exactly one resulting entry in the search, the join engine considers this to be the joined entry. Otherwise, it evaluates the next one in the list. You have two options for formulating a join condition: Specify a search base: ${source.dxrPrimaryKey} The join engine in the search request replaces the search base defined in the export section with this one. This option is appropriate if you know the identifier from the source entry. You can use placeholders for referencing attributes of the source, the target entry or the environment. In case of a target entry, the mapping for this attribute is performed. Specify a filter extension: ... In the search request, the join engine extends the filter given in the export section with this term by \"and-ing\" the given conditions. For the values, you can use the same placeholders as mentioned above and in attribute mapping in general. Import: The import section specifies some options that are evaluated when the join engine creates, updates or deletes an entry in the attached system. In particular, you can define, if a notification is to be sent, when an entry is created or deleted. Mapping: The mapping section contains the mapping for all attributes of the destination system when a source entry is to be updated / imported at the attached system. You have several options for specifying the mapping, ranging from direct mapping to simple expressions with placeholders to Java mapping classes. You can even specify a post mapping that is called after all the attribute mappings. For details, see the help page on the channel and the customization chapter for Java attribute mapping. Operational Attributes: A list of so-called \"operational attributes\" can be passed to the connector with each request. This list depends on the connector. In most cases, you can ignore them. In most applications and systems, user-group memberships are stored at the group. This is typical for LDAP and Active Directory systems: users are members in groups. Scenarios with large groups may face performance problems: the long member lists often must be read and updated. Storing the memberships at the user would normally be much faster. You cannot change how memberships are stored at existing connected systems. But you can change it for the accounts and groups in a DirX Identity target system. If the flag \"Reference group from account\" is checked, group memberships are stored in the attributes of an account. You can easily change this setting, but you must make sure that the Provisioning workflow is configured consistently. Memberships are Stored in Groups at Both Sides At the DirX Identity target system entry, the flag \"Reference group from account\" is not checked. In the workflow configuration, the channel \"members\" is set as the member channel of the groups channel for both connected directories. Make sure that the groups are synchronized after the accounts / users by setting the \"Export Sequence Number\" to \"2\" in the groups channels and to \"1\" in the accounts channels. Memberships are Stored in the Account or User at Both Sides At the DirX Identity target system entry, the flag \"Reference group from account\" is checked. In the workflow configuration, the channel \"members\" is set as the member channel of the accounts channel for both connected directories. Make sure that the accounts are synchronized after the groups by setting the \"Export Sequence Number\" to \"2\" in the accounts channels and to \"1\" in the groups channels. Cross-Membership Scenario When the memberships are stored at the accounts in DirX Identity and at the groups in the connected system we call this a \"cross-membership\" scenario. At the DirX Identity target system entry the flag \"Reference group from account\" is checked. If in the connected system the identifier of the user is not used as reference in the group, we need to set the attribute \"Source for referenced property\" at the target system: Set the attribute name of the user, which is used in the member attribute of the group in the connected system. For a Lotus Notes system this would be the \"fullname\". For LDAP and Active Directory systems it is the DN, which is also used as identifier in mapping: Hence you can leave this attribute empty. In the workflow configuration, the channels must be handled differently: For the connected directory representing the DirX Identity target system, the channel members must be assigned as the member channel in the General tab of the accounts channel and must be de-assigned at the group channel. The accounts must be imported after the groups. Therefore, the \"Export Sequence Number\" in the accounts channel must be set to \"2\" and that of the groups channel must be set to \"1\". For the connected directory representing the connected system, it is the other way around: The groups must be imported after the users / accounts. Therefore, the \"Export Sequence Number\" in the accounts channel must be set to \"1\" and that of the groups channel must be set to \"2\". Also regarding the members channel assignment the default setting - members channel is assigned at the groups channel - can be left. Java-based workflows are started: as the result of an event sent because of an object change regularly by a schedule manually in Identity Manager The next sections provide more information about these start-up methods. Conceptually, we distinguish between the following types of event-based workflows: Provisioning workflows, which provision accounts and groups to a connected system. Password change workflows, which receive password changes of a user or a privileged account and update them in the Identity domain and in the user’s associated accounts in connected systems as necessary. Event-based maintenance workflows, which are started when an entry (such as a user, a role, or an organizational unit) within the Identity domain is changed. They determine the changes that must be made to the entry itself or to associated entries within the domain. Typical reasons for such changes are provisioning or consistency rules that must be applied. Provisioning Workflows Typically account or group changes trigger a real-time workflow, as illustrated in the following figure. Figure 11. Event-Triggered Provisioning Workflow Suppose a manager at Web Center or Identity Manager assigns a role to a user. DirX Identity resolves the resulting access rights, creates an account in the Identity Store, puts it into the member list of a group and sends two change events: one for the account, and one for the group. A workflow associated with the target system receives the events and synchronizes the changes in Identity Store with the connected system. The same process occurs as result of a request workflow. Usually, the last activity in an approval or object creation workflow is the \"apply change\" activity. It stores the changes requested in the workflow and sends the same change events for accounts and groups as in the previous scenario. Note that DirX Identity sends the changes only if the flag \"Enable Real-time Provisioning\" is set to active. Password Workflows Real-time provisioning workflows are also involved in password changes. A typical scenario is illustrated in the following figure. Figure 12. Password Change Workflow Assume that a user changes her password in the Windows domain. the DirX Identity Windows Password Listener captures the new password at the domain controller and sends an appropriate change event. The \"User Password Event Manager\" receives the event, searches the Windows account and then the user entry and updates the password in the Identity Store. Then it finds all accounts of the user for which password synchronization is enabled (see the flag at the target system entry) and sends messages that request the password change at the connected systems. These requests are handled by a \"set password\" workflow. It takes the new password and if required, the current password out of the message and updates them at the connected system. Nearly the same process occurs if the user changes her password with Web Center. The \"User Password Event Manager\" workflow finds the user directly with the DN given in the event, updates the password and sends the change requests for the accounts. A user can also use Web Center to change the password of a privileged account. Web Center sends a password change event for the account, which is processed by the \"Account Password Manager\" workflow. It updates the password at the account in the Identity Store and sends the same password change request as in the previous scenarios to update the password at the connected system. Event-based Maintenance Workflows The maintenance workflows work only with the DirX Identity domain. They are invoked when a domain entry is created or changed, not only accounts or groups but also users, roles, permissions and business objects. Their processing depends upon the entry type, but typically they apply provisioning and consistency rules and check for broken links. The following figure illustrates maintenance workflow operation. Figure 13. Event-based Maintenance Workflow The workflows are triggered by a change event that is published by a number of sources: Web Center, Identity Manager Provisioning Web Service clients Import workflows, both Tcl-based and Java-based workflows The client publishes a change event for an entry if the corresponding entry type is activated in the domain’s event policy. The message topic includes the entry type, which allows the IdS-J server to invoke the appropriate maintenance workflow. The workflow analyzes the changed attributes and performs several maintenance tasks depending on the entry type. For example, the user maintenance workflow: Applies consistency rules. Checks for broken links. Applies provisioning rules, if their filters match the user attributes. Resolves the user and updates the accounts, if a permission parameter has been changed. Updates account attributes, if an attribute has been changed that matches a list of configured names or wildcards. Ignores the event, if none of the above conditions applies. If in the course of a user resolution an account or a group is modified, the workflow publishes a provision request that triggers a provisioning workflow. You can also define schedules for Java-based workflows. The IdS-J workflow scheduler starts the workflow at the scheduled times. A scheduled workflow operates a little bit differently from the way it operates when triggered by an event. It synchronizes all entries from the source to the destination system. For a synchronization workflow, this means that the workflow reads all accounts and groups from Identity Store and updates them one after the other at the connected system. If you want to define a schedule for cluster workflows (which can provision a set or cluster of homogeneous connected systems), you must specify a search filter for all target systems to be provisioned according this schedule. For each target system, the scheduler starts a workflow instance that provisions only the accounts and groups of this system. Note that starting a real-time workflow manually or on a schedule may not make sense for all types of workflows. This is especially true for Maintenance workflows: they only process events. Password workflows: they require the new password in the event message. You can also start a workflow manually in Identity Manager in one of two ways: In the Connectivity configuration, select a Java-based workflow and start it from the context menu. The workflow works as if started by a schedule and provisions the entire target system. In the Identity domain, choose a target system and from the context menu, select Connectivity, then the workflow, and then start the workflow. This method is especially appropriate for cluster workflows: they process only the entries of this target system. Note that starting a real-time workflow manually or on a schedule may not make sense for all types of workflows. This is especially true for Maintenance workflows: they only process events. Password workflows: they require the new password in the event message. This section describes how to customize the default set of Java-based workflows provided with DirX Identity. It explains how to: Configure and implement user hooks Create complex mapping functions with Java classes Test real-time workflow mapping Create connector filters that intercept calls to connectors User hooks are extensions made by customers to DirX Identity common code that are independent of this code and which therefore do not change with product updates. The DirX Identity default application code is divided into common code (control and central scripts that can change with product updates) and user hooks (customer routines that are protected from product updates). User hooks in a Provisioning workflow are called at various phases while synchronizing a source entry into a destination system. They can Read the source entry, the joined entry and the mapped entry Change the mapped entry Have access to the source and destination systems via the connectors. There are two types of user hook: A global user hook, which applies to the whole activity A channel user hook, which applies to the entries associated with a channel The following figure illustrates user hooks. Figure 14. User Hooks As illustrated in the figure, you can have different user hooks when importing an account into Identity domain a user into a connected system a group into a connected system a group into Identity domain. This section describes how to: Configure a user hook Implement a global user hook Implement a channel user hook Implement a user hook for e-mail notifications. Deploy a user hook. Run executables from a user hook. This section explains how to configure a global and a channel-specific user hook. The global user hook is configured in the XML configuration of a job, which itself is part of an activity configuration. A channel user hook is configured for each channel. Their configuration parameters are the same. A job is configured as part of an activity within a element. The global user hook is part of the controller configuration. The XPath expression of the corresponding XML element reads: workflow/activities/activity[@name='…​']/job/controller/operation/user hook. A job configuration collects a number of elements, which itself collect a number of elements. A channel user hook is a sub-element of the element. Here the XPath notation: workflow/activities/activity[@name='…​']/job/port/channel/user hook. The XML attributes of the element include: classname: The full class name of your user hook Java class. It must implement the IGlobalUserHook or the IUserHook interface. implementationLanguage: Currently only the value \"java\" is supported. It’s also the default, if omitted. data: The source of your user hook Java class. code: The octets of the compiled unit. This property is loaded by the controller instead of searching a class from the class path. This property will be filled by the Identity Manager in the course of configuration. Sub-properties of : Some properties are denoted as property sub-elements as follows: . The following properties are evaluated by the controller: sourcepath: The full path name of the Java file that contains the source of your user hook implementation. This property is supported for local testing. A global user hook is called at the beginning and at the end of a job. It must implement the interface com.siemens.dxm.join.api.IGlobalUserHook with the following methods: setGlobalContext With this method, the controller passes a reference to the global context. It gives access to the connectors, the configurations of the job, the controller and the user hook and to the current working directory. prolog: The method prolog() is called at the beginning of a job, before any entry or channel is handled. It allows you to prepare a job and set any global properties into the job context. Among other tasks, the global user hook can add its proprietary properties in the global context. The join engine passes the updated global context to each channel user hook. In order to avoid overlap of other property names, use custom prefixes such as org.myorg.mydep.MyProperty. epilog: The epilog() method is called at the end of the job. It allows you to close any open resources, such as file or network handles. The join engine calls the channel user hook in various phases while it processes an entry. A user hook implements the interface com.siemens.dxm.join.api.IUserHook and optionally com.siemens.dxm.join.api.IUserHookExt. The following figure provides an overview of the API operations and when they are called from the join engine: Figure 15. Join Engine-User Hook Operation Calling Sequence As shown in the figure, there are the following user hook operations: prolog: Before the first entry is processed, the join engine passes the environment properties of the source and the target channel to the user hook. These properties comprise the context properties set by the global user hook and a set of \"specific attributes\" taken from the following entries of the Connectivity configuration database: channel, connected directory, workflow, global configuration. This action allows the user hook to open a file or a connection to another system or do some other preparation task. It may add its own properties to the target environment. The join engine reads them from the user hook at several times via the method getTgtEnvironment (see below). processSourceEntry After the join engine has read a source entry, it asks the user hook whether to process it. The processSourceEntry method receives the identifier and the list of attributes of the source entry and returns a boolean. In case it is false, the join engine skips processing this entry. preUpdate The join engine reads the joined entry from the target system. Then it calls the preUpdate method of the user hook (note: the method of the IUserhook API). As parameters it passes: identifier and attribute list of source and joined entry, references to connectors to source and target system. This action allows the user hook to read additional information from the source or the target, do some processing at the target or some other task before the entry is updated at the target system. This method returns a boolean. If it is set to false, the join engine skips further processing this entry and continues with the next one. For a method that is called after the mapping and before the update, see the preUpdate method of the IUserHookExt interface. getSrcEnvironment The join engine calls this method several times: before the prolog, before the mapping and before the epilog. It allows the user hook to extend the environment properties related to the source channel by its own proprietary ones. getTgtEnvironment The join engine calls this method several times: before the prolog, before the mapping and before the epilog. It allows the user hook to extend the environment properties related to the target channel by its own proprietary ones. preUpdate (API IUserhookExt) After the join engine has mapped the source entry to the target entry and before it updates the target entry, it calls the preUpdate method of the user hook, if it implements the interface IUserHookExt. As parameters, it passes the identifier and attribute list of the source and joined entry, the mapped entry, and references to connectors to source and target system. This action allows the user hook to change the mapped entry, do some processing at the target or some other task before the entry is updated at the target system. This method returns a boolean. If it is set to false, the join engine discontinues processing this entry and continues with the next one. getCallDelete When the join engine encounters a mapped entry with request type DELETE, it first asks the user hook whether a custom delete method must be called. When this method returns true, the join engine calls the user hook method delete(). Otherwise it performs the delete request at the connector using the identifier of the mapped entry. delete The join engine calls this method when an entry is to be deleted by the user hook instead of performing the delete request itself; that is, if the getCallDelete method returns true. It passes a reference to the connector for the affected system and the mapped entry. As a result, the user hook can issue its own request at the connector (for example, a modify or extended request) or perform other tasks without the connector. postUpdate After the entry has been updated, the join engine calls this method. It passes the identifier and the attributes of the source and the joined entry, the performed update request, the response with its result code and the source and target connector. The update request and the response can be null if no update was performed because the entry was already up-to-date. These two parameters can also be null if the user-defined delete operation is used; in this case, no information about user-defined update requests and update responses is available; it is even unknown whether an update operation has been executed at all. This action allows the user hook to perform additional requests for the updated entry both at the source and the target system. This method returns a boolean. If it is set to false, the join engine discontinues processing this entry and continues with the next one. epilog This method is called after all the entries of a channel have been processed. This action allows the user hook to close all pending handles (for example, sockets or files). For a detailed description of the parameters, see the Java interface documentation in the folder Documentation/DirXIdentity/RealtimeWorkflows. Review the contents of the Additions\\RealtimeWorkflows\\samples folder in the product DVD for a sample implementation that demonstrates basic handling. For details on how to read and set the identifier and attributes of source or target entries, see the section \"Evaluating a Mapping Entry\". Deployment Make sure the jar file containing your user hook implementation is deployed in the correct folder of your IdS-J server, which is: install_path*/ids-j-domain-S*n*/confdb/common/lib* It is possible to send an e-mail notification in a user hook. You can find the sample Java-based workflow using the mail notification for account creation in the sample workflows for Extranet Portal, which is the part of the sample My-Company connectivity scenario. See the chapter \"Loading the Connectivity Scenario\" in the DirX Identity Tutorial for more information about the My-Company scenario. The provided user hook can be found on the DVD as Java class NotifyMailAccountCreationUserHook.java. It implements in particular the method postUpdate, which takes the mail attribute of the account and creates a specially-handled SPMLv1 request; this request is then sent to connector identified by the name \"notify\". If the provided mail is valid and the notify activity is correctly configured, it sends the notification to that mail address about account creation. Tailor this class to your needs if you intend to use special mail notifications in a Java-based workflow. Make sure the jar file that contains your user hook class is deployed in the correct folder of your IdS-J Server, which is: install_path*/ids-j-domain-S*n*/confdb/common/lib* DirX Identity provides a general user hook class UserHookRunExecutable, which allows running any executable configured in a realtime workflow channel object. It can be used immediately without any extra programming. Specify the class name com.siemens.dxm.join.userhook.common.UserHookRunExecutable in the General tab of the channel and specify the executable name and command line in the channel-specific attributes. For the preUpdate and the postUpdate user hook methods, you can configure an executable with a command line in the channel-specific attributes post_executable, post_cmdline, pre_executable, pre_cmdline. In the postUpdate case, the executable is only called if the update (add or modify) of the object was successful. Architecture The following figure illustrates the architecture of running an executable from a user hook: Figure 16. Running Executables from a User Hook Concept The following features are available: Running executables as part of a user hook. Using the standard user hook with a few configuration steps in any user hook. Using the source code starting point for more complex solutions. Working in a high availability scenario. Running in a multi-threaded environment. Redirecting of logging to the Java-based Server logs by default. The following samples are provided: A PowerShell script for personal folder creation. Several PowerShell scripts for managing Exchange mailboxes. Command Line Parameters of the Executable The command line parameters specified in the channel specific attributes post_cmdline and/or pre_cmdline can contain fixed parts and variable parts. The variable parts can reuse all mapping variables by specifying the source, target, env and joinedEntry constructs, like ${source.dxrName}, ${target.homeDirRoot}, ${env.domain}, ${joinedEntry.cn}. Central (Shared) Script Folder Beneath each Java-based Server’s repository folder, which can be specified at the Java-based Server object in the Connectivity Expert View, there is a subfolder scripts where the executables can be located. In a distributed Java-based Server environment, this high availability location can be shared by all running instances. The absolute path of the scripts folder is put into the Java-based Server context and can be accessed from user hooks by the environment variable ${env.scripts}. It can also be specified in the channel-specific attributes; for example, in the post_executable or post_cmdline attribute. Output File and Error Handling By default, the executable’s standard output and standard error messages and the exit code are written to the Java-based Server log file. If the executable fails, the user hook preUpdate and/or postUpdate methods return “false” to the join engine according to the user hook API, which causes the join engine to pass an error record to the Audit Connector and to the Monitor View and to stop processing this entry. You can also define executable return codes that you classify as successful by specifying the specific attributes post_ok_codes and/or pre_ok_codes for executables started in the related user hook methods. The return codes are specified as integer values and must be separated by blanks. If nothing is specified, the return code “0” is regarded as successful by default. If the executable’s output is to be written to separate files, specify the output file names in the command line as parameters. The executable must interpret these output file names. If you specify your own output files, we recommend including the Workflow Instance ID in the names of the output files to prevent running workflow instances started through further events from overwriting output files that have already been recorded. The Workflow Instance ID is also contained in the Java-based Server context and can be used by specifying the environment variable ${env.dxm.uh.wfInstID}. The workflow name is accessible in the environment and must be specified by ${env.dxm.uh.wfName}. Interrupting Executables If the activity that starts the executable times out or the Java-based Server shuts down, the Java-based Server sets a cancellation flag. During a \"graceful\" shutdown period, the running activities (this is a standard task of the controller implementations) check this flag at certain times and finish the process. A good time to perform this task, for example, is after one event has completed in a scheduled synchronization. After the configurable graceful shutdown period has elapsed, the Java-based Server interrupts all running activities. If an executable has not yet finished, the UserHookRunExecutable class catches this interruption and kills the executable, which was started as an asynchronous process. Killing Executables after a Configurable Time Period Independently of this interruption scenario, the UserHookRunExecutable class starts the process running the executable asynchronously and asks for the process return value in a loop for a certain time (by default, 90 seconds) and then kills the process if it has not finished in this time frame. You can configure this time in milliseconds in the channel-specific attribute post_timeout for executables started in the postUpdate user hook method or in the pre_timeout specific attribute for executables started in the preUpdate user hook method. Connection Parameters If the activity’s connection parameters like server, user or password should be passed as parameters to the executable, you can extend the UserHookRunExecutable class by adding the desired parameters to the command line. For example, the connection parameters of the target connector can be accessed in a user hook the following way: DxmConnectionConfig connectionConfig = null; DxmConnectorConfig connectorConfig = (DxmConnectorConfig) (_tgtEnv.get(\"dxm.uh.connectorConfByName.ts\")); if(connectorConfig != null) { DxmConnectionConfig connectionConfig = (DxmConnectionConfig) connectorConfig.getConnections().firstElement(); String server = connectionConfig.getServer(); int port = new Integer(connectionConfig.getPort()); String user = connectionConfig.getUser(); String pwd = connectionConfig.getPassword(); } This coding example is already contained as a comment in the standard UserHookRunExecutable class provided as source code. The bind parameters in the sample PowerShell scripts delivered with DirX Identity are kept in the scripts. The scripts read the password from a file that contains the password that you have saved encrypted with PowerShell. You can provide Java sources or pre-compiled Java classes to realize complex mapping functions. They can be configured for Calculating the identifier of the target entry; for details, see the section \"Identifier Mapping\". Mapping of attributes; for details see the section \"Attribute Mapping\". Post mapping; that is, after all attributes have been mapped and before the update of the entry is performed. For details, see the section \"Post Mapping\". This section also provides information how to deploy a mapping class. evaluate a mapping entry. handle environment properties. handle the mapped entry. set the map result. write log messages. You can find a sample source that implements all interfaces in the following folder of your installation DVD: Additions\\RealtimeWorkflows\\samples A class that realizes the mapping of an identifier must implement the interface com.siemens.dxm.join.api.IMapIdentifier. It consists of one method: Identifier mapId(MappingEntry source, MappingEntry joined, HashMap environment) The join engine passes the following parameters: source: the source entry, or null if no source entry exists, which occurs when validation workflows find entries at the target that have no corresponding source entry. joined: the joined entry, or null if no joined entry has been found. environment: a map of environment properties collected by the specific attributes taken from the affected channel, connected directory, activity and workflow entries. User hook implementations can append additional properties. The identifier mapper must return the new identifier of the mapped entry. For an example see the file Idmapping.java on the DVD in the folder Additions/RealtimeWorkflows/samples/mappings For details on how to handle these parameters, see the following sections: Evaluating a Mapping Entry Setting the Map Result Handling Environment Properties A class that realizes the mapping of an attribute must implement the interface com.siemens.dxm.join.api.IMapAttribute. It consists of one method: MapResult mapAttr(String tgtAttrname, Request.Type reqType, MappingEntry source, MappingEntry joined, HashMap environment) The join engine passes the following parameters: tgtAttrname: the name of the target attribute. reqType: the proposed request type. The attribute mapper can change it in the returned map result. Allowed types are: Request.Type.ADD, Request.Type.MODIFY, Request.Type.DELETE. source: the source entry, or null if no source entry exists, which occurs when validation workflows find entries at the target that have no corresponding source entry. joined: the joined entry, or null if no joined entry has been found. environment: a map of environment properties collected by the specific attributes taken from the affected channel, connected directory, activity and workflow entries. User hook implementations may append additional properties. The attribute mapper must return the map result. In the simplest case, it contains only one value for the attribute. But you can also set a series of attribute modifications, a set of operational attributes and also return a changed request type. The request type determines the request to be issued to the target system connector: add a new entry, modify the existing joined entry or delete the existing entry. A note concerning deleted source entries: normally, the join engine deletes an attribute value in the target entry, if the mapped value is empty or null. If the source entry no longer exists, the mapping routines typically produce empty values for the mapped attributes. However, if you want the target entry just to be modified (for example, set the state to DELETED) or moved (tombstone!), you typically do not want the target attribute values to be deleted. To support this operation, the join engine deletes the attribute values only if the modification operation is set to \"delete\". By default, it is set to \"replace\". As a result, if you want a target attribute to be deleted if the source entry no longer exists, it is not sufficient to return an empty value. You must explicitly set the operation in the modification to \"delete\". The following code snippet provides an example: DsmlModification targetMod = new DsmlModification(); targetMod.setName(tgtAttrname); targetMod.setOperation(DsmlModificationOperationType.DELETE); For details on how to handle the input parameters, see the following sections: Evaluating a Mapping Entry Setting the Map Result Handling Environment Properties A class that realizes the post mapping of an entry must implement the interface com.siemens.dxm.join.api.IPostMapping. It consists of one method: MappedEntry doPostMapping(MappedEntry mappedEntry, Request.Type reqType, MappingEntry source, MappingEntry joined, HashMap environment) The join engine passes the following parameters: mappedEntry: the result of the previous attribute and identifier mappings. reqType: the proposed request type. The attribute mapper can change it in the returned map result. Allowed types are: Request.Type.ADD, Request.Type.MODIFY, Request.Type.DELETE. source: the source entry, or null if no source entry exists, which occurs with validation workflows when entries at the target are found that have no corresponding source entry. joined: the joined entry, or null if no joined entry has been found. environment: a map of environment properties collected by the specific attributes taken from the affected channel, connected directory, activity and workflow entries. User hook implementations may append additional properties. The post mapping returns the new mapped entry. Post mapping is called after all attribute mappings and the identifier mapping have been performed. The post mapping can modify all attribute modifications, the identifier, operational attributes and the request type. The request type determines the request to be issued to the target system connector: add a new entry, modify the existing joined entry or delete the existing entry. For details on how to handle these parameters, see the following sections: Evaluating a Mapping Entry Handling Environment Properties Handling the Mapped Entry Make sure the jar file that contains your mapping class is deployed in the correct folder of your IdS-J server, which is: install_path*/ids-j-domain-S*n*/confdb/common/lib* A source or joined entry is represented as Java class com.siemens.dxm.join.map.MappingEntry. The mapping entry holds the entry’s identifier, list of attributes and operational attributes. Read Identifier Each entry has an identifier. It is modelled according the OASIS SPML standard. The identifier has a type (most often DN or generic string), an id value and optionally a list of identifier attributes. The following code snippet shows how to read the identifier value from the joined entry: Identifier id = null; String idvalue = null; if (joined!=null) id = joined.getId(); if (id!=null) { IdentifierType type = id.getType(); idvalue = id.getIdentifierChoice().getId(); } Read Attributes from the Source or Joined Entry Each source and joined entry contains a list of attributes, where each attribute may have a list of values. The values are typically of type string, but may sometimes also be binary. The following code snippet shows how to read the string attribute 'sn' from a source entry. Reading from the joined entry is identical. String srcSn; if (source != null && source.getAttrs() != null) { DsmlAttr srcSnAttr = (DsmlAttr) source.getAttrs().get(\"sn\"); if (srcSnAttr != null) { srcSn = srcSnAttr.getValue(0); } } Reading a multi-value string attribute is almost the same. You get an array of strings: String[] srcDescriptions; if (source != null && source.getAttrs() != null) { DsmlAttr srcAttrDescription = (DsmlAttr) source.getAttrs().get(\"description\"); if (srcAttrDescription != null) { srcDescriptions = srcAttrDescription.getValue(); } } The following snippet shows how to get a binary value and assure the attribute’s member type base64: // get - fictive - single-value attribute \"binaryValue\" from source entry byte[] binValue = null; if (source != null && source.getAttrs() != null) { DsmlAttr srcBinAttr = (DsmlAttr) source.getAttrs().get(\"binaryValue\".toLowerCase()); if (srcBinAttr != null) { String memberType = srcBinAttr.getMemberType(); if (DsmlValue.BASE64BINARY_TYPE.equalsIgnoreCase(memberType)) { binValue = srcBinAttr.getBinValue(0); } } } Note: Use lower-case notation for attribute names. When storing attributes internally in the hash map, the join engine uses the lower-case notation of the attribute name as a key. For more details on how to handle attribute,s take a look at the Java integration framework. Read an Operational Attribute Reading an operational attribute from a source entry is nearly identical to reading a 'normal' attribute. Here a sample snippet for the (fictitious) attribute 'dxrPrimaryKeyOld': // read operational attribute \"dxrPrimaryKeyOld\" String opKey = null; if (source != null && source.getOpAttrs() != null) { DsmlAttr srcOpAttr = (DsmlAttr) source.getOpAttrs().get(\"dxrPrimaryKeyOld\".toLowerCase()); if (srcOpAttr != null) { opKey = srcOpAttr.getValue(0); } } Operational attributes, like the normal ones, can be multi-valued or binary. Note: Use lowercase notation for attribute names. When storing attributes internally in the hash map, the join engine uses the lowercase notation of the attribute name as a key. All mapping functions have access to environment properties, which are collected from the respective configuration entries (channel, connected directory, activity, workflow) or set by a global or channel user hook. The environment properties are simply a hash map of objects identified by their name of type String. The following snippet read the standard property \"user_base\": // read environment property \"user_base\" String userBase = (String)environment.get(\"user_base\"); Setting an environment property is also as simple: // set a custom environment property environment.put(\"com.siemens.map.ldap.myEnvProperty\", \"someValue\"); In order to avoid naming collisions, we recommend that you use an adequate prefix for your property names that is analogous to the one shown in the example: com.siemens.map.ldap. The mapped entry is first built up by the identifier mapping and the list of attribute mappings. After that, the join engine passes the result to the post mapping (if configured). The post mapping also has access to the source and the joined entry. It can change the complete mapping entry: the identifier, the attribute modifications, the operational attributes and the request type. The sections Identifier Mapping and Evaluating a Mapping Entry show how to read the identifier and the source and joined entry. This section shows how to read the mapping entry and modify it. Identifier Reading and setting the identifier is simply realized by a getter and a setter method as the following code snippet shows: Identifier id = mappedEntry.getIdentifier(); // change the identifier ... mappedEntry.setIdentifier(id); See the section on Identifier Mapping for information on how to work with the Identifier. Attribute Modifications You can read the modifications for a single attribute or get a map with the modifications of all attributes. Updating the modifications is done on a per-attribute basis as the following snippet shows: DsmlModification[] snMods = mappedEntry.getModification(\"sn\"); HashMap modMap = mappedEntry.getModifications(); snMods = modMap.get(\"sn\"); // change the modifications for attribute \"sn\" mappedEntry.updateModification(snMods); For more details on working with modifications, see \"Evaluating a Mapping Entry\" and \"Setting the Map Result\". Operational Attributes Reading and modifying the operational attributes is very similar to the attribute modifications. You can either get them all as a map or read them one-by-one. Updating is done on a per-attribute basis: HashMap opAttrMap = mappedEntry.getOpAttrs(); DsmlAttr myOpAttr = mappedEntry.getOpAttr(\"myOperationalAttribute\"); myOpAttr = opAttrMap.get(\"myOperationalAttribute\"); // change the operational attribute mappedEntry.setOpAttr(myOpAttr); For more details on working with operational attributes, see \"Evaluating a Mapping Entry\" and \"Setting the Map Result\". Request Type The post mapping can get the request type from the parameter list or read it from the mapped entry via the getter method. Updating it is done via the corresponding setter method: mappedEntry.setRequestType(reqType); The mapping result for an attribute consists of the following items: A list of modifications A list of operational attributes The request type Request Type The request type determines the kind of operation to be issued at the target system connector: ADD, MODIFY or DELETE. For the list of allowed values see the static enumeration in the class com.siemens.dxm.join.util.Request. Initially, the join engine proposes a value: MODIFY, if it has found a joined entry. ADD if no joined entry is found. In the mapping function, you can change the value according your needs. The following code snippet shows how to set the type to DELETED, which results in a delete request: // delete target entry, if mapped state DELETED if (IState.DELETED.equalsIgnoreCase(tgtState)) { targetMapResult.setRequestType(Request.Type.DELETE); } Attribute Modifications The mapping result contains a list of attribute modifications. Each attribute modification needs the attribute name, the modification operation (replace, delete, add) and the attribute value(s). The modifications are applied as they are, if the request is a MODIFY. In case of an ADD, the join engine transforms them to a list of attribute values; that is, it skips the operation. The mapping function does not usually need to be aware of this. The following code snippet shows how to create a MapResult object, create one attribute modification with the attribute name and the default operation REPLACE, add an attribute value and set the new modification and a request type in the mapping result: MapResult targetMapResult = new MapResult(); targetMapResult.setRequestType(reqType); DsmlModification targetMod = new DsmlModification(); targetMod.setName(tgtAttrname); targetMod.setOperation(DsmlModificationOperationType.REPLACE); // calculate the attribute value ... String value = \"...\"; targetMod.addValue(value); targetMapResult.addModification(targetMod); As you can see from the sample, it’s even possible to add a number of modifications for the same attribute or for a list of attributes. Operational Attributes The mapping function may append operational attributes to the mapping result. Note that they are specific for a connector or a SPML target service. Here is a short code snippet that shows how to create an operational attribute and add it to the mapping result: // add an operational attribute to the map result DsmlAttr dstOpAttr = new DsmlAttr(); dstOpAttr.addValue(userBase); dstOpAttr.setName(\"myOperationalAttribute\"); targetMapResult.addOperationalAttr(dstOpAttr); If you want to implement logging, you can use a log support that provides some simple log methods. The following code snippet shows how to obtain the log support and issue a debug log message: // Obtain the Log support for your class; here \"SampleMapper\" + private static final LogSupport logger = LogSupport.forName(SampleMapper.class); // Write a debug log + logger.debug(\"SampleMapper - Source Entry SN = \" + srcSn); For logging messages with other levels, use the appropriate methods: error warn info The messages are written to the same files as that of the other DirX Identity components. The following sections provide information on how to develop and test your own Java mapping classes for a specific real-time workflow. The Java Eclipse Project dxmTestMapping can help you develop and test your Java mapping classes needed for a specific real-time workflow. The project is delivered on the DirX Identity DVD as a zip file and can be unpacked to any location in the file system. It has all the necessary libraries in its own subfolder and is independent of any installed DirX Identity files. The mapping can be tested either by running the batch file runTestMapping.bat or by running the Junit-Test TestSample.java. The Junit Test is configured in build.xml, so it is run automatically by starting the build process with mkTestMapping.bat. It can also be started inside the project by configuring a Junit Test with the TestSample class. In both cases (batch file or Junit Test), the agent framework main class AgtSessionExe is called with the configuration file src.test/confs/sample/conf.xml. The resulting trace and response files can be inspected in the src.test/confs/sample subtree. The Java Eclipse Project dxmTestMapping consists of the following subtrees and files: src.test/confs/sample/conf.xml This is a standalone agent framework job configuration file containing the mapping of several attributes for one entry including the mapping of the Java source code EmployeeTypeSource.java. This mapping is configured in the first (and only) channel of the TS-port, hence in job/port[@name='TS']/channel/mappingDefinition [XPath notation]. As a controller the class EntryMappingController, which is part of the join package, is specified in conf.xml. It expects a SPML search request in the request.xml file. The search request is passed to the Identity Domain connector, which gives the search result back in domain-response.xml. The controller takes the first (and only) search result entry as the source entry, configures the mapping in the (one and only) channel of the TS-port, creates an add or mod request from the mapped entry and passes it to the TS-connector configured in the TS-port. The response of the TS-connector is passed to the configured response writer, which writes it into the response.xml file. The configured connectors are only test connectors that write their requests into files and read responses from files. The TS-connector can also be replaced by a real target system connector if that part of the process should be tested besides the mapping. src.test/confs/sample/request.xml Holds the SPML search request passed to the Identity Domain connector by the EntryMappingController. src.test/confs/sample/domain-response.xml Holds a search result entry taken by the EntryMappingController as the source entry when performing the mapping as configured in the channel. src.test/TestSample.java The Junit test class to run the agent framework job configured in src.test/confs/sample/conf.xml src/map/samplets/accounts/to/EmployeeTypeSource.java The sample Java source code, for which an attribute mapping with type javasource is configured in conf.xml. src/map/samplets/accounts/to Folder containing further Java source code mapping files performing an account attribute mapping from TS to Identity. src/map/samplets/accounts/from Folder for Java source code mapping files performing an account attribute mapping from TS to Identity. src/map/samplets/groups/to Folder for Java source code mapping files performing a group attribute mapping from Identity to TS. src/map/samplets/groups/from Folder for Java source code mapping files performing a group attribute mapping from TS to Identity. After the single mappings have been tested as described, each channel as it is configured in LDAP can be tested as a whole the following way: Go to the corresponding LDAP channel, open the Mapping page and insert a new Java source code mapping if it does not yet exist. Go to the Java source mapping LDAP object and import your tested Java source code mapping file (like the EmployeeTypeSource.java mentioned above). Repeat this for all Java source code attribute mapping files belonging to this channel and then export the resolved channel configuration into a file and copy it into the channel part of your standalone conf.xml file. Now the standalone batch script can be run again to check whether the LDAP configuration is also correct. The environment property source path which you can see in the conf.xml sample no longer exists in the resolved channel, because at this time the compiled code exists in the channel section. As a result, the source path where the files to be compiled can be found if no byte code exists is no longer needed. Connector filters intercept calls from the Provisioning controller (that is, the \"join engine\") to connectors. They see all requests to and all responses from the connector. The following figure illustrates connector filters. Figure 17. Connector Filters A filter can change requests to the connector or responses from the connector, issue new requests to the connector, prohibit sending requests to the connector or even perform other tasks without the connector on the connected system. As an example, it could create or update a share on a Windows file system. By default, DirX Identity uses a connector filter for decrypting and encrypting data, especially passwords. Other custom filters can be inserted before or after the default filter. The connector filters are part of a chain of filters. In its doFilter() method, each filter receives the request. Usually, it checks the type of request (is it an Add, a modify, delete or search), optionally modifies it and passes it to the successor in the chain by calling its doFilter() method. This method returns the response from the successor. The filter can inspect it, modify it or do anything else. But it must return a response to its predecessor in the chain. The framework passes the configuration options of a connector filter in its open() method. Essentially, they are a list of simple properties. The section \"Configuring a Connector Filter\" provides more detail. Some filters might need to access the connected system directly and bypass the connector. In order to reduce configuration, they have access to the connector configuration, especially to address parameters and binding credentials. For this they must implement the interface ConnectorFilterConfig, through which the connector framework passes the connector configuration. The connector filter is configured as part of the job configuration, which itself is part of an activity configuration. This section describes the XML format of the configuration that is passed to the framework. For the presentation in Identity Manager, see a filter entry beneath a port. A job configuration contains a number of elements. A contains a and a list of and elements. A element represents the configuration of a connector filter. XML attributes of : classname: The full class name of the connector filter Java class; mandatory. name: An optional name of the filter. Sub-Elements of : A allows only a number of sub-elements. Each supports the following XML attributes: name: The name of the configuration property; mandatory. value: The value of the configuration property. Make sure the jar file that contains your connector filter implementation is deployed in the correct folder of your IdS-J server, which is: install_path*/ids-j-domain-S*n*/confdb/common/lib* Notes: All dependent jar files for your connector filter must also be deployed in the above folder. For a SAP ECC UM connector filter, you then need to move the files sapjco3.jar, the associated shared library (sapjco3.dll/.so) and SapUM4Role.jar from confdb/jobs/framework/lib to the above mentioned folder. Alternatively, you can just put your SAP ECC UM connector filter jar file into the folder confdb/jobs/framework/lib. For more details on the interfaces, see the chapter on \"Java Connector Integration Framework\" in the DirX Identity Integration Framework Guide. You can also find information about reading the configuration and working with requests and responses in this guide. A sample is provided on the product DVD in the folder: Additions\\SampleConnectorFilter. This section describes how to customize the default set of Java-based workflows provided with DirX Identity for password management with user hooks. User hooks for password synchronization controllers are based on an extended global user hook interface used in common Java-based Provisioning workflows. Currently only User Password Event Manager workflow can use a user hook. The user hook can: Read the source password event, user entry and related account entries. Skip the processing of a source password event for a user entry or for an account. Gain access to the Identity store and other components via the connectors. This section describes how to: Configure a password user hook. Implement a password user hook. Deploy a password user hook. The password user hook is configured in the XML configuration of the job for the User Password Event Manager controller, which itself is part of an activity configuration. A job is configured as part of an activity within a element. The password user hook is part of the controller configuration. The XPath expression of the corresponding XML element reads: workflow/activities/activity[@name='…​']/job/controller/operation/user hook. The XML attributes of the element include: classname: The full class name of your user hook Java class. It must implement the IPasswordUserHook. implementationLanguage: Currently only the value \"java\" is supported. It’s also the default, if omitted. data: The source of your user hook Java class. code: The octets of the compiled unit. This property is loaded by the controller instead of searching a class from the class path. This property will be filled by the Identity Manager in the course of configuration. Sub-properties of : Some properties are denoted as property sub-elements as follows: . The following properties are evaluated by the controller: sourcepath: The full path name of the Java file that contains the source of your user hook implementation. This property is supported for local testing. A password user hook is called several times during execution of the workflow job. It must implement the interface com.siemens.dxm.join.api.IPasswordUserHook with the following methods: setGlobalContext With this method, the controller passes a reference to the global context. It gives access to the connectors, the configurations of the job, the controller and the user hook and to the current working directory. prolog: The prolog() method is called at the beginning of a job, before any entry is handled. It allows you to prepare a job and set any global properties into the job context. epilog: The epilog() method is called at the end of the job. It allows you to close any open resources, such as file or network handles. processPasswordEvent: The processPasswordEvent() method is called at the start of processing of an incoming JMS message that contains a password change event. It allows you to omit a password change for certain users on specific conditions. preUserPasswordUpdate: The preUserPasswordUpdate() method is called just before a real password change in the Identity store. You can stop the processing or define additional actions. postUserPasswordUpdate: The postUserPasswordUpdate() method is called after successful change of a user password in the Identity store. You can define additional actions like notifications. You can also stop further processing of the accounts. processAccountPassword: The processAccountPassword() method is called just before a JMS notification for a setPassword workflow is sent. The method is called for all related accounts. You can prevent the workflow from sending the event and stop the processing of the account or define additional actions. Make sure the jar file that contains your password user hook class is deployed in the correct folder of your IdS-J Server, which is: install_path*/ids-j-domain-S*n*/confdb/common/lib* All event-based maintenance workflows call a user hook during processing of the event. This action is usually performed after normal operation just before the entry is to be stored to LDAP, but might be different for certain entry types. Consult the respective description of the workflow’s operation. A user hook is a Java class that implements the API com.siemens.idm.jobs.ebr.api.IEventProcessor. The user hook has access to the event and the changed entry. It can change the entry and perform other operations in the Identity domain using the available LDAP connection. The following sections describe how to: Implement the user hook Configure the user hook Use event contexts Deploy the user hook For a sample, see the folder Additions/EventMaintenanceWorkflows on the installation DVD. This section explains how to configure a user hook for an event-based maintenance workflow. You configure a user hook in the \"join\" activity of the workflow. You must supply the class name and optionally also configuration options. Enter these values in the activity’s Userhook tab. The following figure shows this tab: Figure 18. Userhook Tab Enter the full class name of your implementation into Userhook Classname. This value indicates to the workflow that a user hook is to be called. If the user hook expects configuration options, enter them in the Options table: The Property Name column contains the name of the option as the user hook expects it. The Value column contains the string value of the option. The workflow passes the configuration with the open method. See the implementation section for a snippet how to read the options in your user hook. The event maintenance workflow calls the user hook typically after it has performed the standard operations just before it stores the entry changes. The user hook implements the interface com.siemens.idm.jobs.ebr.api.IEventProcessor with the following operations: setEventContext: This is the first method the workflow calls after instantiating the user hook. In addition to the LDAP connection to the domain, the event context provides some useful methods for reading and searching one or more entries. See \"Using Event Contexts\" for more details. open(DxmUserhookConfig conf) With this method the workflow passes the configuration options for the user hook before any of the events is processed. The only parameter is the user hook configuration implementing the interface siemens.dxm.configuration.DxmUserhookConfig. In addition to some meta information important for the workflow it allows to read configuration properties with its getProperty method. The following snippet shows how to read an option \"objectclass\": Map options = new HashMap(); options.put(\"objectclass\", (String)conf.getProperty(\"objectclass\")); processAddEvent(AddEvent event, Entry changedEntry) The workflow calls this method, when the entry was created in the Identity domain. It passes the created entry and the add event. Each entry implements the interface com.siemens.dxm.api.entry.Entry. This interface allows getting and set attribute values and especially the DN of the LDAP entry. The siemens.dxm.connector.event.AddEvent class is generated according an XML schema, which extends a SPMLv1 request with some information about the event topic and the event source. The following snippet shows how to read the values of the attribute \"owner\" and to set one, if it was empty before: String[] values = changedEntry.getValues(\"owner\"); if ((values == null) || (values.length == 0)) { changedEntry.setProperty(\"owner\", \"cn=DefaultOwner,cn=Users,\" + eventCtx.getDomainRoot()); } Note that you shouldn’t store the entry changes yourself. This is done by the workflow at the end of the event processing, if the entry was changed. But if you change other entries, you need to store them yourself. See \"Using Event Contexts\" how to do this. processModifyEvent(ModifyEvent event, Entry changedEntry) The workflow calls this method when the entry was changed in the Identity domain. It passes the changed entry and the modify event. Each entry implements the interface com.siemens.dxm.api.entry.Entry. This interface allows getting and set attribute values and especially the DN of the LDAP entry. The siemens.dxm.connector.event.ModifyEvent class is generated according an XML schema, which extends a SPMLv1 request with some information about the event topic and the event source. The following snippet shows how to check, if the attribute \"dxrState\" was modified to the value \"TBDEL\", i.e. if the entry is to be deleted in the connected system: for (DsmlModification mod : event.getModifications().getModification()) { if (\"dxrState\".equalsIgnoreCase(mod.getName()) && (\"TBDEL\".equalsIgnoreCase(mod.getValue(0)) { entryDeleted = true; break; } } Note that you shouldn’t store the entry changes yourself. This is done by the workflow at the end of the event processing, if the entry was changed. But if you change other entries, you need to store them yourself. See \"Using Event Contexts\" how to do this. processDeleteEvent(DeleteEvent event) The workflow calls this method, when the entry was deleted in the Identity domain. It passes only the delete event as the entry itself is not available any more. The siemens.dxm.connector.event.DeleteEvent class is generated according an XML schema. In addition to the event topic and the event source the embedded SPMLv1 delete request contains the DN of the deleted entry. See the following snippet how to read the DN: String dn = SpmlUtils.getIdString(event); This allows you to search for other entries referencing the deleted one and perform some cleanup. close(): The workflow calls this method after all entries of the batch are processed. It allows the user hook to perform some housekeeping. A user hook for an event-based maintenance workflow may use an event context object. An event context implements the interface com.siemens.idm.jobs.ebr.api.EventContext*. It is passed in the method *setEventContext of the IEventProcessor interface. The event context provides some useful helper methods: getDomainRoot() Returns the DN of the Identity domain root node. getLDAPConnection() Returns an established LDAP connection to the Identity domain. getEntry(String dn) Reads the entry with the given DN from the Identity domain. It returns an object, which implements the com.siemens.dxm.api.entry.Entry API. This API allows reading and setting attributes. searchEntries(String base, String filter) Performs an LDAP search in the Identity domain with the given search base and filter. The method returns the found entries as an enumeration. Each entry implements the com.siemens.dxm.api.entry.Entry API. saveEntry(Entry entry) Stores the entry in the Identity domain. Note that the user hook should not store the entry referenced in the change event, but needs to store all others it has changed. To deploy your user hook, build a jar file with your class and copy this file and any other jar files you need to the following folder of your Java-based Server installation: install_path*/ids-j-domain-S*n*/confdb/common/lib* Make sure the user hook is configured and then re-start the IdS-J server. You can combine a set of Java-based workflows into a \"combined workflow\" and define the sequence in which these workflows should be run. Note that you cannot combine entry change workflows, cluster workflows and combined workflows. For a combined workflow, you select a sequence of workflows. All activities of the selected workflows are copied into the combined workflow (the referenced workflow is only referenced, not changed). Start conditions are adapted so that the activities are started in the defined sequence. The activities are named worklow_name*-join-*sequence-nr.Activity n+1 is started after activity n has finished. For every workflow that is included in the combined workflow, you can also define whether or not it should stop if the preceding workflow or activity finishes with the state WARNING. To create a combined workflow, use the New menu and select Combined Realtime Workflow.In the Workflow Sequence tab, insert the workflows in the order you want to run them. You can start a combined workflow with the DirX Identity Manager by using Run workflow from the context menu at the combined workflow object or you can define a schedule for the combined workflow. Using a combined workflow (instead of scheduling each workflow separately with a given start time) guarantees that the workflows are started in sequence one after the other and ensures that there are no overlays or gaps between the workflows.For example, you can define a combined workflow that first performs a source import from a database, next performs a source import from SAP and then performs user resolution for these imported users. The sections in this chapter include information about Tcl-based workflows: Tcl-based Connectivity architecture - defines the concepts of the DirX Identity Tcl-based workflows Understanding server delta handling Customizing Tcl-based workflows - describes customization procedures and hints. The Tcl-based connectivity architecture is based on a standard script that is designed to handle all transfers between two connected directories in one step.For two-step workflows (which require an additional agent to access the target connected directory’s API), the standard script handles the meta controller (metacp) step. The connectivity standard script can be controlled by about 60 parameters and also by optional user hook routines. It is structured into the following logical sections: A control script, which defines all parameters, including the default values and references to the relevant attributes at the user interface (DirX Identity Manager) level. A profile script, which contains the central algorithm for the connectivity script. The profile script is divided into the following logical sections: The prolog section, which performs preparatory tasks before the loop section is executed, such as opening input and output connections, reading attribute configuration files, and so on. The loop section, which performs, for each entry in the source, all of the necessary actions: mapping, joining, operation on the target system side, and so on. This section is the most complex, because it can handle file and LDAP connections and contains most of the script’s functionality and features. The epilog section, which performs all completion tasks, such as releasing handles and closing connections. All of the parameters that control the script are accessible from Identity Manager. They are distributed into the relevant tabs of the job, channel and connected directory configuration objects, which can be referenced from the relevant wizards. The script’s design is based on the following requirements: One script for all applications Controllable by switches and user hooks Clear separation between central, local and user parts Clear separation between entry masters and attribute masters. An entry master can add and delete entries, while an attribute master can only perform attribute modifications. Handling of multi-entry and attribute masters Support of manual masters (such as Web interfaces) Support of purification workflows (for example, the deletion of entries marked for deletion). Note: This version does not implement this feature. Support of operational attributes (mastership, status, entry and expiration dates) Enhanced tracing (an additional command trace) Delta handling based on date type Tuning parameters (Read DN Only, paged mode) Support of merge and replace modes Standard handling of notifications The script can handle the following types of synchronizations: File to file LDAP to file File to LDAP LDAP to LDAP With extra profile scripts, it can handle DirX change log information and HDMS connections. All LDAP connections can work optionally in paged mode. The next sections provide information about: The script structure The script behavior The switches and parameters that control the script References used in default applications Object class handling The GUID generator Multi-mastered attributes Naming and scopes User hook routines Important Tcl interfaces Global Tcl variables Meta handles The Connectivity standard script consists of logical pieces that are stored in specific physical locations in the installation area or the configuration database. The following sections describe the script’s logical structure and use an example to illustrate its physical structure. The following figure illustrates the logical structure of the DirX Identity Connectivity standard script. Figure 19. DirX Identity Connectivity Script Logical Structure The control script is the script that starts the whole procedure. It contains all of the variables that control the rest of the procedure. The values of these variables are linked by DirX Identity references to the attributes of objects in the configuration directory. It also loads the central routines from the installation area and the profile, mapping and miscellaneous scripts from the job object. The control script calls the profile script, which performs the central algorithm. Different profile scripts are delivered to provide different basic algorithms. Most workflows use the standard script Profile Script, while others use the HDMS Export Profile Script or the LDIF Change Profile Script. One of the most important parts of this algorithm - the mapping script - must be highly configurable, since it is individual to each workflow. The script is divided into a mapping that occurs before the join operation and a post join mapping that occurs after the join operation. All scripts can call common routines provided by the central script (routines that are common to any workflow) and the common script (routines that are used by this type of workflow). The profile script calls local routines (hooks). Default routines for these hooks are loaded with the user hooks default script. You can establish your own extensions by providing routines in the user hooks script (they will overload the default routines). We’ll use an example to explain the physical structure of the Connectivity standard script and its relationship to other objects in the configuration database and the installation area. The following figure illustrates this example. Figure 20. DirX Identity Connectivity Script Physical Structure The job MyMetaCPjob references the MetaCP agent that is of type Meta Controller, which is described by the \"Meta Controller-Job.xml\" definition. The job also relates to channels (here Channel 1) that access the LDAP directory (for example, MetaStore), which is of type LDAP and is described by the \"LDAP-ConnDir.xml\" definition. The mapping script and the user hooks script are local objects of the workflow. They are downloaded to the work area before each workflow run. Only some of the default application workflows initially contain a user hooks script (for example the RACF workflows). The central script, the common script, the post join default script and the user hooks default script (a template) are located in the installation area of DirX Identity (path: install_path*\\lib\\centralTcl*). They are part of the installation and will not be downloaded before each workflow run. Because the common script’s size is more than 130 KB, this saves time. For information purposes, a copy of these scripts is shown at the user interface level in the configuration database. Please note that changing these script copies has no effect! You should instead copy the user hooks default script as an individual user hooks script or post join script under your job object (don’t forget to link it to the job) and modify the routines as required. This user hooks script and all of the other miscellaneous scripts will be downloaded before each workflow run. The control, profile, common, post join default script and user hooks default scripts (together with the messages script that contains all messages) are located in the central configuration area in the section Tcl → Default. Only the control, profile and messages scripts will also be downloaded before each workflow run. Warning: You are not allowed to change the central or common scripts (because any changes will be overwritten during update and upgrade installations!). Instead, you can copy a routine you’d like to change to your local user hooks script. This routine overloads the routine from the central script. The advantage of this method is that you can view all of your changes in one place and that an exchange or update of central script will not affect your workflow at all. The DirX Identity Provisioning workflows use the default DirX Identity Connectivity standard script structure. The following figure illustrates how the DirX Identity Provisioning script structure is embedded in the DirX Identity Connectivity script structure. Figure 21. DirX Identity Provisioning and Connectivity Script Structure The left two columns of the figure represent the default DirX Identity Connectivity script structure. The DirX Identity metacp scripts (mapping, post-join mapping, and user hooks) call functions in the DirX Identity provisioning common script and the provisioning TS common script. The following figure illustrates these interactions in more detail. Figure 22. DirX Identity Connectivity and Provisioning Script Function Calls The provisioning TS common script functions include: accountEnabled() Checks whether the account is enabled or disabled in the target system depending on the passed target system attribute(s), and sets the passed variable AccEnabled to TRUE or FALSE. setPasswordFlags() Sets the password-specific flags of an account in a role depending on the passed target system attribute(s). splitLocalRemoteMembers() Divides the list of the target system group members into local members, which are all members that belong to the target systems users or group root, and remote members, which are outside these roots. setGroupType() Sets the group type attribute in a role depending on the passed target system attribute. The Provisioning common script functions include: addAccountInRole() Sets the dxrTSState attribute of the account in a role to DISABLED or ENABLED depending on the passed AccEnabled parameter. Sets the dxrState attribute to IMPORTED and the dxrToDo attribute to CREATED_IN_TS for a validation workflow. modAccountInRole() Sets the dxrTSState attribute of the account in a role to DISABLED or ENABLED depending on the passed AccEnabled parameter. The function leaves the dxrState attribute as it is and sets the dxrToDo attribute to RECREATED_IN_TS for a validation workflow if dxrState was in the state DELETED. addGroupInRole() Sets the dxrTSState and the dxrState attribute of the group in a role to ENABLED. Sets the dxrTSLocal attribute to TRUE and the dxrToDo attribute to CREATED_IN_TS in case of a validation workflow. Sets dxrGroupMemberImported to the local members of the target system, which were calculated by the splitLocalRemoteMembers function. modGroupInRole() Sets the dxrTSState attribute of the group in a role to ENABLED. The function leaves the dxrState, dxrTSLocal and dxrToDo attributes as they are and sets the group member attributes according to the passed list of local target system group members and of the actual group member states in role. postJoinAddAccInTS() Depending on the account attributes in a role, calls the following functions of the postJoinMapping script of the sync account job, which perform the target system specific attribute settings: setAccEnabled() if the accounts dxrState in role is ENABLED setAccDisabled() if the accounts dxrState in role is DISABLED setPassword() resetPwdNotRequired() setChgPwdAtLogin() resetPwdCantChange() setPwdNeverExpires() if dxrPwdNeverExpires in role is TRUE resetPwdNeverExpires() if dxrPwdNeverExpires in role is FALSE postJoinModAccInTS() Depending on the account attributes in a role, calls the following functions of the postJoinMapping script of the sync account job, which perform the target system-specific attribute settings: setAccEnabled() if the accounts dxrState in role is ENABLED setAccDisabled() if the accounts dxrState in role is DISABLED deletePassword() setPwdNotRequired() if dxrPwdNotRequired in role is TRUE resetPwdNotRequired() if dxrPwdNotRequired in role is FALSE setPwdCantChange() if dxrPwdCantChange in role is TRUE resetPwdCantChange() if dxrPwdCantChange in role is FALSE setPwdNeverExpires() if dxrPwdNeverExpires in role is TRUE resetPwdNeverExpires() if dxrPwdNeverExpires in role is FALSE postJoinDelAccInTS() This function currently does nothing. In the future, it may contain common coding for all target system workflows. postJoinAddGrpInTS() This function currently does nothing. In the future, it may contain common coding for all target system workflows. postJoinModGrpInTS() This function currently does nothing. In the future, it may contain common coding for all target system workflows. postJoinDelGrpInTS() This function currently does nothing. In the future, it may contain common coding for all target system workflows. setTSAttributesInRole() For a validation workflow, sets the dxrLastValidation attribute of the target system object in a role to the current time and the accountRootInTS and groupRootInTS attributes of the target system object in a role to the values passed to the function. del_TS2Role() Called only in the validation workflow for all objects in a metacp search result that cannot be matched to any source entry in order to either delete or modify the object. The function deletes the object in a role if the dxrState attribute of the object is set to DELETED; otherwise, it sets the dxrTSState attribute to DELETED and writes a dxrToDo message. The meta controller is called with the control script as a parameter (see the command line attribute of the job). The next sections describe how the control and profile scripts operate. The Connectivity standard script’s control script contains all of the variable settings; that is, constants or references to attributes of other objects in the configuration database. These variable settings are grouped into the following sections: Common parameters - basic parameters needed for the other sections (for example, the role names of the input and output channels). GUID generator parameters - parameters that control the generation of global unique identifiers. Common job-specific parameters - parameters that belong to the job: tracing, operation control, notification and data control. Source parameters - parameters that control the source connected directory and its channel. Target parameters - parameters that control the target connected directory and its channel. The control script loads the standard scripts in the following sequence: Loads the central.tcl script with the source command. This script contains important routines like dxm_source that are necessary to load scripts with another code set. Reads user_hooks_default.tcl, which contains all relevant empty user hook routines. This action pre-defines these routines. Reads the mapping script. Uses a loop to load all miscellaneous scripts, including the user_hooks.tcl script if it is defined by the user and any other routines needed for the job. Note: Scripts that cannot be edited are not loaded (the common script is an example). Reads the profile script. The control script’s loading logic relies on Tcl’s routine overloading mechanism, in which the last loaded routine is used. The control flow for the standard script consists of several steps. The prolog step prepares all of the necessary prerequisites. The process entry loop reads entries from the source, maps the entries, then joins the mapped entries and writes them to the target. The epilog step closes all channels and handles and performs notifications if necessary. The profile script contains only the main logic. All detailed routines are contained in the common script or the central script. The following figure illustrates the profile script algorithm. Figure 23. Profile Script Algorithm Profile Script - Prolog The prolog step performs the following tasks: Initializes the meta controller. Sets all necessary default values. Calls the uh::Preprocessing user hook, which prepares everything before the rest of the script logic is executed. Note: no handles are available at this point. Opens connections to the source and target connected directories and creates handles for them. This task consists of the following sub-tasks: Reading the attribute configurations (variables: File Name and Encoding). Performing a bind if Directory Type = LDAP (variables: Server Address, Protocol, User, Password, SSL Connection, Authentication, Protocol). Opening a file if Directory Type = File (variables: File Name, File Format, File Mode, Encoding). Creating the necessary handles for the source and target connection. Creating a second handle for the input channel, if Read DN Only is set. Defining Page Size to allow page mode operation if Paged Read is set. Reads the source (variables: Base Object and Subset both from the input channel as well as a Search and OR Filter) and eventually sort it (if Sorted List = true together with Sort Key and Sort Order). This is only necessary when the search result is not sorted and a sorted result is necessary. If Paged Read is set Page Size must be defined to allow page mode operation. If the workflow shall replace all entries in the target; that is, if a deletion of entries that are no longer available compared to the source is necessary, a full target search (variables: Base Object, Subset both from the output channel as well as the Replace Filter) with a subsequent sort is required (variables: Sorted List = true together with Sort Key and Sort Order). The result must be sorted because the Sort Key is used for the find operation later on in the join operation. Calls the uh::Prolog user hook. Now the source and target are prepared. Next, the loop on all entries must be performed. Profile Script - Process Entry Loop The profile script’s standard entry processing loop (used by the profile.tcl script) performs the following tasks: Reads an entry from the source. Initializes the target entry (sets all fields to initial values). Optionally applies an extra filter during the user hook uh::LoopExtraFilter. This filter allows the individual exclusion of entries from further actions. Performs the mapping (subroutine perform_mapping). This routine delivers the return code 0 for OK and 1 for errors that occurred. The sequence of steps is different depending on the Directory Type. If Directory Type = LDAP, the following steps are performed: If Import Mode = Merge, a search based on the Join Expression or Expert Filter is performed in the target directory. In this case a list of searches can be performed. If Import Mode = Replace, the object is retrieved from the existing (and sorted) search result. Depending on the result, an action is calculated (see the subroutine Calculate Action). After calculating the action, a postJoin routine (uh::LoopPostJoin) performs an additional mapping step that merges information from the joined entry with the mapped information. Depending on the calculated action and the join result, the Entry Handling subroutine is called. The possible actions are: action = add A new entry will be created. action = mod The located entry is to be modified. action = modDN The distinguished name (DN) of the located entry will be modified. action = del A delete operation will be performed for this entry depending on the selected deletion mode (see the deletion algorithm ). The user hook uh::Delete is eventually called. action = done The action to be taken has already been carried out. No action is necessary. action = error An error must be reported because something was incorrect. This action will result in a warning at the workflow level. An extra function can be optionally executed (uh::LoopExtraFunction) If Directory Type = FILE, similar procedures are called: A user-specific join routine can be performed (uh::LoopPerformJoin). Depending on the result, an action is calculated (see the Calculate Action subroutine). After calculating the action, a postJoin routine (uh::LoopPostJoin) performs an additional mapping step that merges information from the joined entry with the mapped information. Writes the record to the file. Profile Script - Calculate Action The profile script’s \"calculate action\" subroutine calculates the action to be taken based on any change type, source entry status, and target entry conditions, as illustrated in the following figure. Figure 24. Profile Script - Calculate Action Logic As shown in the figure: A ChangeType condition allows the action in the target directory to be controlled by information coming from the source directory (for example, change types defined in LDIF change syntax). When the source directory keeps status information about new or deleted entries (Source Add Marking Attribute and Value and Source Del Marking Attribute and Value), this information allows the action to be controlled at the target directory side. For example, a customerStatus attribute with the value New in the source directory could force an add operation in the target directory. In some cases, the existence of an attribute in the source directory that comes from the target directory can indicate the existence of a target system entry (Target Entry Exists). This indicator only works when a workflow operates in the opposite direction that handles this attribute. If none of these conditions is met, the action is set to mod. Profile Script - Entry Handling Based on the calculated action and the result of the join operation, the entry is handled as shown in the following figure. Figure 25. Profile Script - Entry Handling Logic As shown in the figure: If no entry is found and action = del, an error is reported or no further action is performed, depending on the exact action switch. If action = mod, an error is reported or an add operation is performed, depending on the exact action switch If exactly one entry is found and action = del, the entry is deleted. Action = modDN results in a modifyDN operation. If action = mod, the entry is modified. Otherwise, the entry is either modified or an error is reported, depending on the exact action switch If more than one entry is found, an error is reported. After the entry processing, a user hook (uh:LoopExtraFunction) allows you to define user-specific additional processing. Note: In the loop, an error means that the workflow’s result will be Warning. Otherwise one single erroneous entry would abort the workflow. Profile Script - Epilog The profile script’s epilog step performs the following tasks: When the script works in replace mode (switch Import Mode), it deletes all entries that were not contained in the source but are contained in the target (in a separate loop after the main loop). When the script works in delta mode (switch Delta Synchronization), it processes the delta information and delivers it to the C++-based identity server. When notifications are required (switch Notify Not OK is set or one of the Entry Handling switches Add Entries, Modify Entries or Delete Entries is set to one of the NTF options), it sends notifications. Closes all connections have (unbind for directories, close for files) Writes statistics (switch Statistics). Terminates the meta controller and automatically closes all handles. Profile Script - Delete Entries The delete routine is either called from the central processing loop for each entry or from the separate loop at the end for all unmarked entries. The following figure illustrates its logic: Figure 26. Profile Script - Entry Deletion Logic As shown in the figure, the delete routine: Does nothing if Delete Entries is not activated. Checks whether the entry is in the Keep Objects list. If yes, it preserves the entry. If Operational Attributes are activated, sets the dxrState to TBDEL and sets the dxrEndDate to the current date. Otherwise, evaluates the Deletion Mode: MARK - Sets the value of the defined marking attribute. MOVE - Moves the entry to the tombstone area (by eventually calling uh::GenerateTombstoneDN). PHYSICAL - Physically deletes the entry. USER - Calls the user hook uh::Delete. You use switches and parameters to control the behavior of the Connectivity standard script. The following sections give information about switches and parameters for: Operational control Notification control Global unique identifier (GUID) generation Trace control Source connected directory specification Input channel specification Target connected directory specification Output channel specification Pre-configured operational attribute handling The following set of switches control the script’s operation: The Delta Synchronization switch allows you to run the meta controller (metacp) job in delta mode based on date information (by default based on creation and modification time stamps or optionally on any other time attribute). For details, see \"Understanding Delta Handling\" in section \"Managing the C++-based Server\" in chapter \"Managing Identity Servers\" in the DirX Identity Connectivity Administration Guide. The Minimum Source Entries switch helps to avoid situations in which the number of source entries differs a lot (due to an error in the generation of the entries) during subsequent runs of a full update or an export. The switch allows you to specify a minimum number of entries that must be available; otherwise, the workflow terminates with error and returns exit code 12. For import workflows running in MERGE mode, this parameter is not evaluated. However it is evaluated for import workflows running in REPLACE mode. In REPLACE mode, this parameter helps to avoid deletion of objects if only a small number of source entries is provided (by mistake). The Exact Action switch allows you to control the algorithm’s automatic correction features. The Init Mode switch allows you to run the meta controller either in real mode, where LDAP operations are performed, or trial mode, where trace information is written but LDAP update operations are not performed (searches are performed to simulate the real behavior). The Test Mapping Only switch allows you to select whether just a test mapping is performed or if all operations (LDAP and file operations) are executed. You can use the Test Max Entries switch to define the number of entries to be mapped. The Operational Attributes switch controls whether operational attributes are to be used, which controls the marking of entries with the master name or the handling of status attributes and entry and expiration dates. See the \"Pre-Configured Operational Attribute Handling\" section for details. The Connectivity standard script currently implements two basic notification mechanisms: The Notify Not OK switch, which allows a notification to be created when the meta controller job runs into an error and/or warning situation. The Entry Handling switches Add Entries, Modify Entries and Delete Entries, which allow data notification to be executed if the switches are set to one of the NTF options. If set to NTF, notification is performed instead of the operation (add, delete or modify), if set to operationNTF (ADDNTF, MODNTF or DELNTF), the operation is performed but the same information is sent via notification. The Connectivity standard script allows global unique identifiers (GUIDs) to be generated for each entry that is to be imported into the Identity Store. See the \"GUID Generation\" section for more information. The parameters for this generation are stored in the field variable GUIDparam. The meta controller can generate a lot of trace information, and you can use the switches Trace Level and Debug Trace to control the granularity of this output. The parameter Max Trace Entries controls the number of hits that are output during a join operation. Trace information can be written into Trace Files or Report Files. The Statistics switch allows you to control whether or not the meta controller writes standard statistics. If you disable the standard statistics, your script must provide its own statistics. This set of parameters is necessary to connect correctly to the specific type of the source connected directory. The most important parameters are the Directory Type and the Directory Subtype, which determine the behavior of the connected directory. The script generally needs the file name of the attribute configuration file, which is controlled via the parameters File Name and Encoding. If Directory Type = LDAP, the additional parameters are required to perform an LDAP bind. These parameters are: Server Address, Protocol, User, Password, Authentication, Protocol and SSL Connection (see the Service and Bind Profile configuration objects for details). If Directory Type = FILE, the following parameters are necessary to handle the file correctly: File Name, File Format, File Mode and Encoding (see the section File Item configuration object for details). The input channel definition allows access to the related connected directory. The parameter Selected Attributes defines he list of attributes that must be handled. If Directory Type = LDAP, a Base Object, the Subset definition, a Search Filter optionally together with an OR Filter and whether the result is to be sorted (Sorted List together with the Sort Key and the Sort Order) must be defined (see Export Properties for details). You can use the switch Read DN Only or Paged Read together with Page Size to optimize memory consumption. If Directory Type = File, no additional parameters need to be specified in the input channel definition. This set of parameters is necessary to connect correctly to the specific type of the target connected directory. The most important parameters are the Directory Type and the Directory Subtype, which determine the behavior of the connected directory. The script needs generally needs the file name of the attribute configuration file, which is controlled via the parameters File Name and Encoding. If Directory Type = LDAP, the following additional parameters are required to perform an LDAP bind: Server Address, Protocol, User, Password, Authentication, Protocol and SSL Connection (see the Service and Bind Profile objects for details). If Directory Type = FILE, the following parameters are necessary to handle the file correctly: File Name, File Format, File Mode and Encoding (see the section File Item configuration object for details). The output channel definition allows access to the related connected directory. The Selected Attributes parameter defines the list of attributes to be handled. If Directory Type = LDAP, a Base Object, the Subset definition, a Join Expression (or alternatively Expert Filters) and whether the result should be sorted (Sorted List together with the Sort Key and the Sort Order) must be defined (see Import Properties for details). You can use the switch Read DN Only or Paged Read together with Page Size to optimize memory consumption. If Directory Type = File, no additional parameters need to be specified in the output channel definition. Entry handling parameters are also required to define the behavior at the target connected directory side. This is the Import Mode that controls whether the script works in merge or replace mode. The Add Entries, Superior Info, and the source and target Add Marking Attribute and Add Marking Value parameters can control the addition of entries. The Modify Entries, Modify Marking Attribute, Modify Marking Value and Rename Entries switches control entry modification. The switches Delete Entries, Deletion Mode, the source and target Del Marking Attribute and Del Marking Value and Keep Objects control entry deletion. DirX Identity provides a pre-configured handling of the operational attributes. By default, dxmOprMaster, dxrStartDate, dxrEndDate and dxrState are used as attribute types if the switch Operational Attributes is on. You can select your preferred set of operational attributes in the user hooks script. The following description works with the standard set of operational attributes. These attributes are only handled for entry masters depending on the calculated action. DxmOprMaster Handling Add: this attribute will be set to the dxmOprMasterName value of the relevant source connected directory. Modify, ModifyDN and Delete: DirX Identity checks the mastership of the relevant entry. Only entries that belong to this entry master may be touched. Entry and Expiration Date Handling Both date values are always set (empty fields cannot occur): Add: the dxrStartDate or dxrEndDate is either set to the mapped value or if not present to the actual date or to 31.12.2037. Modify: if new mapped values are available, dxrStartDate or dxrEndDate are updated. Delete: dxrStartDate is not touched, dxrEndDate is set to the actual date. Status Handling Add: dxrState will be set to ENABLED if dxrStartDate ⇐ actual date NEW if dxrStartDate > actual date Note: The entry will be refused if dxrEndDate ⇐ dxmEntryDate. Modify: dxrState will be set to (tests in this sequence!)* ENABLED* if dxrStartDate ⇐ actual date NEW if dxrStartDate > actual date TBDEL if dxrEndDate ⇐ actual date Note: An error will be reported if dxrEndDate ⇐ dxmEntryDate. Delete: dxrState will be set to TBDEL. References are widely used in DirX Identity’s default applications, allowing a high degree flexibility (especially through copy operations) to be combined with the central configuration of important and widely-used parameters. This section describes some general reference concepts that are used in the default applications: base object references and references in filter expressions. Most references are defined in configuration files (Tcl files, INI files, XML files). For a detailed description of how to create and interpret references, see the chapter \"Customizing Object References\" in the DirX Identity Customization Guide. You can also find some references in attributes at the user interface level. DirX Identity uses a two-step approach to make the configuration of the base object fields in channels easy and consistent. The following figure illustrates this approach. Figure 27. Base Object Reference Concept The Base Object field in an input or output channel can contain values like: or These values are reference variables, which almost completely hide the complexity of references. The DirX Identity default applications contain the following reference variables: - occurs in input channels. Points to the source connected directory to the specific attribute base_obj (named Creation / Search Base at the user interface). - occurs in output channels. Points to the target connected directory to the specific attribute base_obj (named Creation / Search Base at the user interface). - occurs in input channels. Points to the source connected directory to the attribute dxmMasterName (named Master Name at the user interface in the Operational Attributes tab). - occurs in output channels. Points to the target connected directory to the attribute dxmMasterName (named Master Name at the user interface in the Operational Attributes tab). - occurs in output channels. Points to the service object of the target connected directory to the attribute dxmAddress (named IP Address at the user interface). - occurs in output channels. Points to the service object of the target connected directory to the attribute dxmAddress and dxmDataPort (named IP Address and Data Port at the user interface). Note: This reference does not work for SSL connections. You can find the definition of these reference variables in the control Tcl script or at the start of the INI files. The definitions are contained in comments because they only set the variable content that is used later on in other places. They are not visible to the Tcl or INI script. Note: another way to hide this information is to use set_nv instead of set for the variable definition, but this technique makes debugging more difficult because you cannot see the evaluated values. The and reference variables point to the base_obj fields in the connected directories. To make the values here as independent as possible of a specific directory implementation, the values in the base_obj fields can also contain references, for example: ou=mthb, The reference to the specific attribute Base Node allows you to set a central definition of the start node in the directory. For example, DirX Directory delivers samples that start with o=My-Company. In the example (which is valid for most workflows in DirX Identity’s default applications), the workflows use ou=mthb,o=My-Company as the base point. Other variables, such as the Tombstone Base in a connected directory’s Operational Attributes tab, can also use this base value, for example, ou=tombstone,. This method creates very consistent scenarios that can easily be adapted to new situations. Another example is the setting in the Search Base field of the Import Properties tab of the Ident2ADS workflow: LDAP:///. In this case, the search base is built from a constant \"LDAP://\", then the target machine name, another constant \"/\" and then the target base_obj. Fields like Search Filter, OR Filter, Expert Filter or Replace Filter in input or output channels can contain simple or complex LDAP filter expressions, and they can also contain references. For example: \\{dxmOprMaster=} This filter searches for all entries that contain the value of the src_master_name reference in the dxmOprMaster attribute. Simply change the Master Name field of your source connected directory to handle another master source. The advantage of these fields is that both the import and export workflows use them. As a result, you don’t need to set two different values in each workflow - one central change is sufficient. The Connectivity standard script supports easy object class handling. Use these two variables to perform object class handling tasks: dxm_add_objclass - These object classes will be added to the set of object classes. dxm_rem_objclass - These object classes will be removed from the set of object classes. These two variables permit the object classes to be completely handled during add and modify operations. The object classes are calculated in the following steps: Use the mapped target’s objectClass attribute value (for example, rh_ldap(objectClass)) as the starting point. This is supported for compatibility reasons. For a modify operation only, merge the object classes from the target entry. Merge the object classes from the Object Classes field in the target connected directory’s Operational Attributes if available. Merge the list of object classes from dxm_add_objClass. Remove the list of object classes from dxm_rem_objclass Examples: Set dxm_rem_objclass to the object classes of the joined entry. This action removes all object classes from the entry. If you set new object classes with dxm_add_objclass, you can completely replace the object classes. Joined entry object classes = \"person inetOrgPerson\", dxm_add_objclass = \"dxmADsUser\", connected directory object classes = \"person inetOrgPerson organizationalPerson\". These values are merged to \"person inetOrgPerson organizationalPerson dxmADsUser\". Global unique identifiers (GUIDs) significantly ease synchronization work. All processes such as join operations are well-defined and robust. The basic GUID concept is that each entry in the Identity Store contains a unique identifier that is used as much as possible for all synchronizations to target systems (ideally, this identifier is stored in the target systems). A re-synchronization from the target system to the Identity Store can use this identifier to join to the correct entry exactly without any ambiguity. The Connectivity standard script generates a GUID only during add operations. If a GUID is defined in the mapping, this value is taken. Otherwise, DirX Identity Connectivity supports three mechanisms to create a unique GUID: local GUID generation, central GUID generation, and user-defined GUID generation. You can switch between these modes in the job object’s GUID Generation Type. In local GUID generation, a GUID can be generated from a local unique identifier and a unique prefix from the source system. The employeeNumber is a good example of a unique source system identifier. You define this attribute type in the source connected directory’s Local GUID Attribute field. A unique prefix is necessary for creating a unique identifier for the entire scenario. This prefix must be defined manually. It can be stored in the dxmGuidID attribute value of the source connected directory (GUID Prefix). In the target connected directory, you must define the GUID Attribute, which stores the GUID values. DirX Identity Connectivity provides an algorithm that allows for the creation of unique integer numbers. In this case, the highest already used value is stored in a special attribute dxmActualGUIDvalue in the target connected directory object. To generate a new GUID value, this value is retrieved, increased by one and stored again in the actual GUID value attribute. The algorithm guarantees that double generation of a number is impossible. Because each add entry operation would require an additional read and a write operation to this actual GUID attribute, it is possible to reserve n GUID values with one read/write operation. If all of these numbers are not used, this method may lead to unused numbers. The highest possible number (2.147.483.647 for Windows) limits this method. You can specify the block size with the GUID Generation Block Size parameter in the job object. DirX Identity Connectivity provides the following user hooks for implementing user-defined GUID generation: uh:InitCreateGUID - use this routine to initialize your procedure before processing all entries. uh::CreateGuid - use this routine to process a single GUID. uh::CleanupCreateGuid - use this routine to clean up after processing all entries. DirX Identity provides the dxmOprOriginator attribute to handle multiple masters for the different values of multi-valued attributes This attribute keeps the organizational information to handle the different values of multi-valued attributes and is part of the dxrUser object class of a user entry. The dxmOprOriginator attribute is a structured attribute of the form: master_namemaster_rec_IDattribute_name#attribute_value where master_name is the name of the master directory (and should be the dxmMasterName property of the source directory) master_rec_ID is the unique record ID that identifies the record in the source (master) system. attribute_name is the name of the multi-valued attribute. attribute_value is the value of the multi-valued attribute that is mastered. For example: HDMS1#12345#telephoneNumber#+49 89 636 45667 HDMS1#34526#telephoneNumber#+49 89 722 82736 PHONEDIR#43257#telephoneNumber#+49 89 722 34526 HDMS1#12345#faxNumber#+49 89 636 45668 In this example, the phone number +49 89 636 45667 is mastered from the record 12345 in the HDMS1 system together with the FAX number +49 89 636 45668. The record 34526 from same system HDMS1 masters the phone number +49 89 722 82736. Another record (43257) from the system PHONEDIR masters a telephone number of the same user: +49 89 722 34526. This example shows that several systems can handle the same attribute and on the other hand that several attributes can be handled from the same master but from different records. Thus the concept covers all possible cases. Note: This mechanism is currently only used by the HDMS workflows. If you want to use your own functions and variables, you should use name spaces. This approach guarantees that there are no collisions in variable names and procedure names. The default applications use the following name spaces, which you therefore must not use: uh - used for user hooks dxm - reserved for future use (for default applications) hdms - used by the HDMS workflow You are also not allowed to re-define the global variables used in control.tcl (for details, see the \"User Hooks\" section). You can control the standard Connectivity script with the switches and parameters described in the \"Switches and Parameters\" section, and you can also control it by customizing the user hook routines. The following figure shows these routines and their relationship to the standard script structure. Figure 28. User Hook Routines DirX Identity provides the following user hook routines: uh::Initialize Initializes the script. Currently only the array opr is set (defines the names of the operational attributes). uh::Preprocessing Prepares everything that’s needed before the rest of the profile code is executed. No files or handles are open at this time. An example is to set additional control variables with references. uh::Prolog Handles everything that is needed before the loop is entered (for example, opening additional files). Here all handles are already available. When the \"lStringEncrypt\" mapping function is called the very first time, it reads the userCertificate using the latest bind connection. Therefore this user hook provides also the bind information that needs to be used for retrieving the userCertificate. For import workflows, it uses the target connection parameters \"tgt_conn_param\". For export workflows, it uses the source connection parameters \"src_conn_param\". If the user data that needs to be encrypted is not stored in the directory server where the ConfDB tree (which includes the userCertificate) is located, then the user hook needs to be changed. uh::RefineSearch If a search returns with a predefined amount of entries (for example, 4096 for RACF), the default applications try to read pieces of the search result. A default mechanism is provided that can be customized (see an application of this user hook in the RACF workflows). uh::GenerateTombstoneDN Used for move mode in the delete procedure. Generates the Tombstone-DN by concatenating the original DN with the tombstone base by default. Another function can be defined here. uh::LoopExtraFilter Filters entries that are not to be processed in the loop (for example, RACF does not permit entries to be read with a filter condition; filtering must be performed in the central script logic on a per-entry basis). (Mapping) You can freely define the mapping between the source and target entries in the mapping script. uh::LoopPerformJoin Performs a user-specific join routine when type is set to FILE. The routine can be used to compare the actual set of entries with a previous set to calculate delta information. uh::LoopPostJoin Runs after the join operation but before the write/update operation to the target system. The mapping can be adapted according to the results from the read entry of the target system. uh::Delete Defines a user-specific entry deletion method. This routine is only used when the switch Deletion Mode is set to ‘User’. It is used during the main loop processing and during the processing of unmarked entries after the main loop. uh::LoopExtraFunction Performs additional actions for an entry (for example, writing additional log file information into a special file). uh::Epilog Closes and finalizes everything that is needed after the loop has been processed (for example, the closing of additional files). uh::ErrorHandler Error codes that are returned as errorCode value by the general function exec_cmd can be changed here. Codes can be ignored, modified or additional actions can be issued. uh::InitCreateGuid Initializes the GUID generator before processing all entries. uh::CreateGuid Creates a user-specific GUID value. Define your own algorithms here and set the GUID Generation Type to \"User\". uh::CleanupCreateGuid Defines the cleanup code for the GUID generator after processing all entries. See the section \"Important Routines\" for information about the interfaces to some of these routines. To use the user hook routines: Select the job object in the DirX Identity Manager’s expert view. Right-click the job, then select New → Tcl Script. Set the name to \"User Hooks Script\". Open Configuration → Tcl → Default → User Hooks Default Script. Select the Content tab. Click in the edit window. Select the entire code (for example, with Ctrl-A) and copy it (for example, with Ctrl-C). Click the Content tab of your newly created Tcl script. Click Edit. Paste the content of the default script into your script object. Click Save to store it. Note that you can’t copy the User Hooks Default Script object as a whole because it is set to read-only. Consequently, you must copy the content. Link the job to your Tcl script: Click the tab Tcl Scripts, click Edit, create a new line in the Miscellaneous table and link it to the User Hooks Tcl script. Click Save. Note: We recommend that you delete all of the routines in your user hook scripts that you do not use. This action makes your changes more obvious. The user hook routines are defined in the name space uh::. All user hook routines must be called with the prefix uh ==== Important Tcl Interfaces This section describes some important Tcl interfaces in the central.tcl, user_hooks_default.tcl and post_join_mapping.tcl files. The following Tcl interfaces are provided in central.tcl: exec_cmd Executes a metacp command and terminates on error. exec_cmd executes a given command and returns the result of the executed command. The global variable debug_trace should be set to one of the values 8, 9, 12, 13 to make command trace information available in the trace file. The command meta initialize should be the very first command that is executed by exec_cmd; otherwise tracing can’t be successfully performed. When serious errors occur, exec_cmd terminates with exit code 10. exec_cmd does not handle some error situations; for example, the error \"METACP 4852\" (“object doesn’t exist” in case of a search operation) or the error \"METACP 4515\" (“no more results in a paged result request”). In these cases, these error codes are returned. Synopsis: exec_cmd command directory_subtype Parameters: command - the command to be executed dir_subtype - the directory subtype, for example, RACF Global variables used: errorCode - Tcl error code variable debug_trace - level of debug tracing 0 – no trace 4 – Tcl variable trace to stdout 5 – Tcl variable trace to file 8 – command trace to stdout 9 – command trace to file 12 – Tcl variable trace and command trace to stdout 13 – Tcl variable trace and command trace to file trace_file - the name of the trace file notify_not_ok - a flag that indicates whether a notification should be sent in case of errors/warnings notify_notok_file - a notification file DEBUG_COMMAND indicates that Tcl commands should be traced Return values: result - on success, the result string of the executed command. errorCode - on error, the error code of the executed command (for errors that are not serious) Exit codes: 10 on serious errors Example: set result [exec_cmd “meta modifyentry –oldentry old –newentry new”] getCurrentTimeGMT Returns the current time as a GENERALIZED_TIME string. Synopsis: getCurrentTimeGMT Parameters: None. Global variables used: None. Return values: time_value - the current system time as a GENERALIZED_TIME string Example: set current_time [getCurrentTimeGMT] int2zulu Converts a time in seconds into a GENERALIZED_TIME value Synopsis: Int2zulu [time_val] Parameters: time_val - a time value in seconds (optional); if omitted, the current system time is used. Global variables used: None. Return values: value - time value as GENERALIZED_TIME string Example: int2zulu 1000000 - returns the value “19700112134640Z” int2zulu - returns the current time as GENERALIZED_TIME string trace_out Writes trace information to the trace file. trace_out writes the strings given in the parameters string1, string2, … to the trace file, if the global variable debug_trace permits the operation. The parameter mode defines the kind of information that string1, string2, … represent. If the value of mode matches the value of debug_trace, then the trace information will be written. mode is a bit combination of the global variables DEBUG_VARIABLE, DEBUG_COMMAND, DEBUG_LEVEL1, …, DEBUG_LEVEL4. Synopsis: trace_out mode string1 [string2 ..] Parameters: mode - the type of information to be written string1, string2 … - a list of strings to be written Global variables used: debug_trace - for details, see the description in exec_cmd DEBUG_IN_FILE - defines that trace information should be written into the trace file; if not set, tracing is sent to stdout DEBUG_VARIABLE - defines that variable tracing is switched on DEBUG_COMMAND - defines that command tracing is switched on DEBUG_LEVEL1 - defines that trace information of level 1 will be written DEBUG_LEVEL2 - defines that trace information of level 2 will be written DEBUG_LEVEL3 - defines that trace information of level 3 will be written DEBUG_LEVEL4 - defines that trace information of level 4 will be written Return values: None. Example: proc f { global DEBUG_VARIABLE trace_out $DEBUG_VARIABLE “rh_ldap(sn)=$rh_ldap(sn)” } zulu2int Converts a GENERALIZED_TIME value to its representation in seconds Synopsis: zulu2int time_val Parameters: time_val - a GENERALIZED_TIME value Global variables used: None. Return values: seconds - the time value in seconds Example: zulu2int 20031231120000Z - returns the value “1072872000” The following Tcl interfaces are provided in user_hooks_default.tcl: uh::Delete Defines a user-specific entry deletion method. uh::Delete implements a user-defined method of deleting an entry. You define the action to be executed when an entry should be deleted. The routine is used when the deletion_mode switch is set to \"User\". This routine is used in the default applications during the main loop processing and during the processing of unmarked entries after the main loop. Synopsis: uh::Delete tgt_data Parameters: tgt_data - an array of attribute values that represent the object to be deleted Global variables used: tgt_conn_param - the connection parameters to be used when performing a directory update operation Return values: 0 in case of success 1 in case of errors Example: set update_result [uh::Delete tgt] uh::Epilog Closes and finalizes everything that is needed after the loop has been processed (for example, the closing of additional files) Synopsis: uh::Epilog Parameters: None. Global variables used: None. Return values: 0 - on success return_code - on error Example: set return_code [uh::Epilog] uh::ErrorHandler Handles specific errors that were originally returned in \"errorCode\" (in exec_cmd). uh::ErrorHandler is called by the exec_cmd procedure when errors occur. Because error operation is different for various directory systems (for example, RACF is very restrictive and very often returns the LDAP error “LDAP_OTHER”), exec_cmd must handle these situations. You should implement uh::ErrorHandler to return “0” for errors that are not serious and that do not prevent the Connectivity standard script from continuing its entry-processing functions, and return “1” for serious errors. Synopsis: uh::ErrorHandler command result dir_subtype Parameters: command - a command string that has been executed by exec_cmd result - a result returned by exec_cmd dir_subtype - a directory subtype, e.g., RACF Global variables used: errorCode - Tcl error code variable Return values: 0 if a specific error has been handled by that procedure 1 if the error has not been handled by that procedure Example: set return_code [uh::ErrorHandler $command $result RACF] uh::GenerateTombstoneDN Generates a DN when an object that should normally be deleted is moved to a different tombstone branch of the DIT. uh::GenerateTombstoneDN generates the tombstone DN by exchanging the target search base object with the tombstone base object. Synopsis: uh::GenerateTombstoneDN current_dn Parameters: current_dn - the DN of the object to be moved to the tombstone branch Global variables used: tombstone_base - the base DN of the tombstone branch tgt_search_param - the target search parameters Return values: new_dn - tombstone DN Example: set new_dn [uh::GenerateTombstoneDN $current_dn] uh::Initialize Initializes the default applications. uh::Initialize is used to initialize the environment of the default applications. Because it’s the very first statement of the Connectivity standard script, the meta controller’s meta initialize operation has not yet been called, so no tracing can be done in that routine. The routine currently initializes the names of the operational attributes. Synopsis: uh::Initialize Parameters: None. Global variables used: opr - an array of operational attribute names Return values: 0 - on success 1 - on error Example: set rc [uh::Initialize] uh::LoopExtraFilter Filters entries that are not to be processed in the loop (for example, RACF does not permit entries to be read with a filter condition; filtering must be performed in the central script logic on a per-entry basis). For entries that should be ignored, the return code of the function should be set to 1; otherwise, 0 should be returned. Synopsis: uh::LoopExtraFilter data Parameters: data - the name of the Tcl array that holds the source data Global variables used: None. Return values: 0 if the source entry will not be ignored 1 if the source entry will be ignored Example: set rc [uh::LoopExtraFilter rh_ldap] uh::LoopExtraFunction Performs additional actions for an entry. uh::LoopExtraFunction allows to perform additional actions for an entry (for example, to write additional log file information into a special file). Both the names of the source data array and the target data array are passed to the routine so that the user can operate on both arrays. In addition, the executed operation is passed in the operation parameter, the result of that operation in the rc parameter. Synopsis: uh::LoopExtraFunction source target operation rc Parameters: source - the name of the Tcl array that holds the source data target - the name of the Tcl array that holds the mapped target data operation - the operation that has been performed for the entry: “add”: if the entry has been created “del”: if the entry has been deleted “mod”: if the entry has been modified “modifyDN”: if the entry’s name has been changed “error”: if the entry caused multiple matches “done”: if the entry doesn’t exist in the DIT rc - the return code of the directory operation Global variables used: None. Return values: 0 if the source entry will not be ignored 1 if the source entry will be ignored Example: set rc [uh::LoopExtraFunction rh_file rh_ldap $action $update_res] uh::LoopPerformJoin Performs a user-specific join routine when an entry is exported to FILE. You can use this routine to calculate delta information by comparing the current set of entries with a previous set. Synopsis: uh::LoopPerformJoin source target joined_entry num Parameters: source name - the Tcl array that holds the source data target name - the Tcl array that holds the mapped target data joined_entry - OUT: the array of data fields of the joined entry num - OUT: the number of matching entries Global variables used: None. Return values: 0 on success 1 on error Example: set rc [uh::LoopPerformJoin rh_file rh_ldap entry count] Note: When using name spaces, there might be problems using the variable source and target. As an alternative the following expression can be used: \"rh_\" for source \"rh_\" for target uh::Preprocessing Prepares everything that’s needed before the profile code is executed. No files or handles are open at this time. Synopsis: uh::Preprocessing Parameters: None. Global variables used: None. Return values: 0 on success 1 on error Example: set rc [uh::Preprocessing] uh::Prolog Handles everything that’s needed before the loop is entered (for example, opening additional files or setting additional control variables with references). Synopsis: uh::Prolog Parameters: None. Global variables used: None. Return values: 0 on success 1 on error Example: set rc [uh::Prolog] The following Tcl interfaces are provided in post_join_mapping.tcl: uh::LoopPostJoin Performs additional mapping before calling the ADD, DELETE or MODIFY operation. Mappings that are commonly used for ADD, DELETE, and MODIFY operations should be listed in the body of this procedure. Internally, uh::LoopPostJoin calls one of the following subroutines: uh::postMappingAdd uh::postMappingDel uh::postMappingMod The operation-specific mappings should be listed in one of these procedures. The action parameter is used as an input and an output parameter. When used as an input parameter, it indicates the directory operation that should normally be performed. This operation can change if the situation requires an operation other than the initially calculated one. Synopsis: uh::LoopPostJoin source target joined_entry action Parameters: source - the name of the Tcl array that holds the source data target - OUT: the name of the Tcl array that holds the mapped target data joined_entry - the name of the Tcl array that holds the joined entry action - IN/OUT: the calculated action, which is one of the following values: “add” for object creation “mod” for object modification “del” for object deletion Global variables used: None. Return values: 0 - indicates successful post mapping 1 - indicates an error in post mapping Example: set rc [uh::LoopPostJoin rh_file rh_ldap entry mod] uh::postMappingAdd uh::postMappingAdd allows you to perform additional mapping procedures before the final directory update operation (which normally is an ADD operation) is called. The action parameter is used as an input and an output parameter. When used as an input parameter, it indicates the directory operation that should normally be performed. This operation can change if the situation requires an operation other than the initially calculated one. Synopsis: uh::postMappingAdd source target action Parameters: source - the name of the Tcl array that holds the source data target - OUT: the name of the Tcl array that holds the mapped target data action - IN/OUT: the calculated action, which is one of the following values: “add” for object creation “mod” for object modification “del” for object deletion Global variables used: None. Return values: 0 - indicates successful post mapping 1 - indicates an error in post mapping Example: set rc [uh::postMappingAdd rh_file rh_ldap add] uh::postMappingDel uh::postMappingDel allows you to perform additional mapping procedures before the final directory update operation (which normally is a DELETE operation) is called. The action parameter is used as an input and an output parameter. When used as an input parameter, it indicates the directory operation that should normally be performed. This operation can change if the situation requires an operation other than the initially calculated one. Synopsis: uh::postMappingDel source target joined_entry action Parameters: source - the name of the Tcl array that holds the source data target - OUT: the name of the Tcl array that holds the mapped target data joined_entry - the name of the Tcl array that holds the joined entry action - IN/OUT: the calculated action, which is one of the following values: “add” for object creation “mod” for object modification “del” for object deletion Global variables used: None. Return values: 0 - indicates successful post mapping 1 - indicates an error in post mapping Example: set rc [uh::postMappingDel rh_file rh_ldap entry del] uh::postMappingMod uh::postMappingMod allows you to perform additional mapping procedures before the final directory update operation (which normally is a MODIFY operation) is called. The action parameter is used as an input and an output parameter. When used as an input parameter, it indicates the directory operation that should normally be performed. This operation can change if the situation requires an operation other than the initially calculated one. Synopsis: uh::postMappingMod source target joined_entry action Parameters: source - name of the Tcl array that holds the source data target - OUT: name of the Tcl array that holds the mapped target data joined_entry - name of the Tcl array that holds the joined entry action - IN/OUT: the calculated action, which is one of the following values: “add” for object creation “mod” for object modification “del” for object deletion Global variables used: None. Return values: 0 - indicates successful post mapping 1 - indicates an error in post mapping Example: set rc [uh::postMappingMod rh_file rh_ldap entry del] This section describes all of the variables that can be used when working with the Connectivity standard script. The default applications use a set of global variables that are defined in control.tcl. Many of these variables can be used in the user hook routines, if not already passed as argument. The description of the user hook interfaces lists only the global Tcl variables that are currently used by the given routine. Because you can set up very complex user hooks, the description of an interface doesn’t list all of the global variables that are available. It’s up to you to select the relevant variables, if required. The most important global variables are (in alphabetical order): add_entries - NONE = no addition, ADD = addition only, NTF = notification only, ADDNTF = addition and notification. debug_trace - 0 – no trace, 1 – variable trace to screen (compatibility mode), 2 – variable trace to file (compatibility mode), 4 – variable trace to screen, 5 – variable trace to file, 8 – command trace to screen, 9 – command trace to file, 12 – command and variable trace to screen, 13 – command and variable trace to file. delete_entries - NONE = no deletion, DEL = deletion only, NTF = notification only, DELNTF = deletion and notification. deletion_mode - PHYSICAL = physical removal of entry, MARK = entry is only marked, MOVE = entry is moved to tombstone area, USER = user hook defines the mechanism. delta_check - defines whether the script runs in delta mode. FALSE = Delta Mode is off, TRUE = Delta Mode is on. delta_date - the deltaInputData delivered from the Identity server. exact_action - (static) Tcl variable: TRUE = prohibits soft change of action from add to modify or no action when entry is already deleted (if set to TRUE). Reports error instead. FALSE = allows soft change of action. filter_type - defines whether the filter or join_expression field shall be taken for the join operation. Either table or expert. GUIDparam - (static) Tcl array with information for generation of GUIDs; its subcomponents are type - GUID generation type (none, local, global). targetIDattr - attribute where to store the generated GUID in the target directory. blockSize - number of central GUIDs to be generated to minimize read accesses. user - user name to access the configuration tree of Connectivity. pass - password to access the configuration tree of Connectivity. address - server address to access the configuration tree of Connectivity. base - search base. nr_free_guids - internal counter for number of free GUIDs in the block. next_free_guid - next free GUID in the block. sourceGuidID - fixed value to be used as prefix for the generation of a local GUID. sourceIDattr - attribute from which to obtain the variable (unique) part of local GUID to be generated. init_mode - type of script operation: real = real operation. trial = simulation (no real operation, only traces). If trial mode is selected, the meta controller must exit with error (because no valid data has been generated for subsequent steps). join_expression - join expression filter. master_name - master name to be filled into the target entry. max_trace_entries - maximum number of hits displayed in trace file. min_source_entries - minimum number of source entries that must be present (valid for import and export). modify_entries - NONE = No modification, MOD = Modification only, NTF = Notification only, MODNTF = Modification and Notification. notif_notok - 0 = no notification, 1 = notification when workflow ended with warning, 2 = notification when workflow ended with error, 3 = notification when not OK (error or warning). notify_notok_file - the INI file for the \"notify if not ok\" operation. notify_data_file - the INI file for notification to write entries for manual handling. object_class_collection - the object to which the object_classes belong (for example, user or group). object_classes - the object classes that must be handled during an add or modify operation. operational_attributes - whether or not operational attributes like dxrState shall be handled. opr - the operational attributes to be used (by default, dxmOprMaster, dxrState, dxrStartDate, dxrEndDate). rename_entries - FALSE = move DN not allowed, TRUE = move DN allowed. src_conn_param - (static) a Tcl array with information about source connection; its subcomponents are attr_file - name of attribute configuration file. attr_file_localcode - code set of the attribute configuration file. attr_list - list of attributes to be handled at the source side. dir_type - type of source connection. dir_subtype - subtype of LDAP directory (RACF, NDS) to react on specific behavior. superior_info - information to create higher level entries. data_file - name of data file (if dir_type=File). file_format - file format (if dir_type=File). file_mode - read or write mode (if dir_type=File). file_localcode - code set of file (if dir_type=File). authentication - type of authentication. user_name - user name of bind profile. user_pwd - user password of bind profile. ssl - FALSE = no SSL connection, TRUE = SSL connection. server_address - server TCP/IP address and port number. protocol - LDAP protocol (V2 or V3). bind_id - internal name of bind connection. LDIFchangeOutput - write all operations into an LDIF change file instead of direct LDAP operations. LDIFagreementFolder - the folder where DirX changelogs reside. src_data - the name of the Tcl array that holds the source entry. The source entry’s data is available after the source entry has been read from the source directory and therefore can be used in the following user hooks: uh::LoopExtraFilter uh::LoopExtraFunction uh::LoopPerformJoin uh::LoopPostJoin Note: When using name spaces, there might be problems using the variable “src_data”. The following expression can be used as an alternative: \"rh_\" src_add_marking_attr - the attribute type that is used as status attribute to indicate add operations at the source side. src_add_marking_value - the value that indicates an add operation at the source side. src_del_marking_attr - the attribute type that is used as status attribute to indicate delete operations at the source side. src_del_marking_value - the value that indicates a delete operation at the source side. src_search_param - (static) a Tcl array with information about source search parameters; its subcomponents are base_obj - the base object at which to start the search. subset - the search scope, either -baseobject, -onelevel, -subtree. filter - the filter definition for the search. or_filter - the OR filter (optional). read_DN_only - read DNs only. Perform for each entry a separate search afterwards. Either true or false. paged_read - read in paged read mode, either true or false. page_size - the page size for paged read. src_sort_param - (static) a Tcl array with information about source sorting parameters; its subcomponents are sorted_list - FALSE = result not sorted, TRUE = result sorted. key - the attribute to sort when the result shall be sorted. DDN cannot be used! order - ASCENDING = ascending sort order, DESCENDING = descending sort order. start_time - a Tcl variable that holds the start time. statistics - a switch that suppresses standard metacp statistics. target_entry_exists - the name of an attribute that is used to indicate whether an entry exists in the target system. test_mapping_only - FALSE = full operation, TRUE = only mapping is performed. test_max_entries - the number of entries that are mapped when test_mapping_only is TRUE. tgt_add_marking_attr - the attribute type that is used as a status attribute to mark add operations. tgt_add_marking_value - the value that is used as a status attribute to mark add operations. tgt_conn_param - (static) a Tcl array with information about target connection; its subcomponents are the same as in the src_conn_param variable. tgt_data - the name of the Tcl array that holds the target entry. The target entry’s data is available after the target entry has been mapped and therefore can be used in the following user hooks: uh::LoopExtraFilter uh::LoopExtraFunction uh::LoopPerformJoin uh::LoopPostJoin Note: When using name spaces, there might be problems using the variable “tgt_data”. The following expression can be used as an alternative: \"rh_\" tgt_del_marking_attr - the attribute type that is used as a status attribute to mark delete operations. tgt_del_marking_value - the value that is used as a status attribute to mark delete operations. tgt_import_mode - REPLACE = Complete subtree in the target area is replaced by subtree from source, MERGE = Subtree from source is merged into subtree in target. tgt_keep_objects - the objects that are not to be deleted. tgt_mod_marking_attr - the attribute type that is used as a status attribute to mark modify operations. tgt_mod_marking_value - the value that is used as a status attribute to mark modify operations. tgt_search_param - (static) a Tcl array with information about target search parameters; its subcomponents are base_obj - the base object from which to start the search. subset - BASE_OBJECT, ONE_LEVEL, SUBTREE. filter - the filter to perform a join operation. delete_filter - the search filter that searches the set of entries for REPLACE mode. read_DN_only - read DNs only. Perform for each entry a separate search afterwards. Either true or false. paged_read - read in paged read mode, either true or false. page_size - the page size for paged read. tgt_sort_param - (static) a Tcl array with information about target sorting parameters; its subcomponents are the same as the src_sort_param variable. tombstone_base - the base node at which to place the deleted entries (if deletion_mode = MOVE). trace_file - the name of the trace file. trace_level - 1 = Error trace, 2 = Full trace, 3 = Short trace. The profile script profile.tcl also defines some global variables. These variables are created in the procedures listed in common.tcl while executing the synchronization logic. counter - a Tcl array of counters used for additional statistic information; its components are mappingProblem - the number of ignored records/entries due to mapping problems userFilter - the number of ignored records/entries due to user defined filtering wrongDates - the number of ignored records/entries due to expirationDate . You can use this reference in the command line or in any configuration file. The new delta information, which should be stored into the Connectivity configuration, must be written into the first line of the file deltaoutputdata.txt (location must be the work path). Each Tcl-based workflow has a number of parameters that you can change. These parameters are common to most Tcl-based workflows and can all be accessed from the corresponding workflow wizard. The topics in this section describe these parameters for workflows that export data from the Identity Store and workflows that import data from the Identity Store. The most important parameters for workflows that export data from the Identity Store are attribute mapping, base object, filter and tracing. Clicking Help in the relevant wizard step gives you more information about these parameters. You need source and target attributes for attribute mapping. Use the source selected attributes to define the attributes to be exported from the Identity Store. Use the target selected attributes to define the attributes to be imported into the target system. Use the mapping editor to define the mapping from source to target. You can use the pre-defined mapping functions or create additional ones. If the left-hand list in the selected attributes editor does not contain the necessary attributes, you need to add the attributes to your source or target connected directory. Double-click the connected directory icon in the Global View and select the Attribute Configuration step. Add the necessary attributes to the list and set the correct parameters. If the connected directory is of type LDAP or ADS, you can update the list by synchronizing the schema. This parameter defines the base point at which the search is to be performed. For the creation workflows, this variable is set to o=My-Company, which is a combination of a constant (o=My-Company) and a reference. The reference fetches the specific attribute role_user_base from the connected directory. It starts at the job object, selects the connected directory via the input channel, and from the connected directory it uses the specific attribute role_user_base. For the Provisioning synchronization workflows, this variable is set to: The reference starts at the workflow object, goes down to the start activity and then to the job object. At the job level, it selects the connected directory via the input channel, and from the connected directory it takes the specific attribute role_ts_account_base. You could set these parameters directly to the correct values, but then you would lose the advantage of being able to change parameters for an entire set of workflows at the same time because each workflow uses an individual value. In this case, the validation and synchronization workflows use such central parameters. This parameter allows you to define a filter condition in LDAP notation. In the default Connectivity scenario, this field is set in several ways. For the creation workflows, the filter is usually set to a constant value, for example: ( not ( c=\"DE\" ) and not ( c=\"IT\" ) and not ( c=\"US\" ) ) For Provisioning synchronization workflows, the filter is set, for example, to: (objectClass=\"dxrTargetSystemAccount\" and not ( dxrTSState=\"DELETED\" ) ) In this case, the workflow exports target system accounts whose dxrTSState values are not in the DELETED state. Set the trace parameters adequately to debug your workflow during configuration. The most important parameters for workflows that import data to the Identity Store are mapping and selected attributes, base object, import mode, filters for merge/replace, entry handling, tracing, and page mode. Clicking Help in the relevant wizard step gives you more information about these parameters. You need source and target selected attributes for the mapping. Use the source selected attributes to define the attributes to be exported from the source system. Use the target selected attributes to define the attributes to be imported into the Identity Store. It is important to set the correct flags that influence whether attributes may be added, deleted or modified. A combination of these flags for a specific attribute defines the mastership for that attribute. Use the mapping editor to define the mapping from source to target. You can use the pre-defined mapping functions or create additional ones. If the left-hand list in the selected attributes editor does not contain the necessary attributes, you need to add them to your source or target connected directory. Double-click the connected directory icon in the global view and select the Attribute Configuration step. Add the necessary attributes to the list and set the correct parameters. If the connected directory is of type LDAP or ADS, you can update the list by synchronizing the schema. This parameter defines the base point for the join operation. For creation workflows, this value is set to a reference: The reference retrieves the specific attribute role_user_base from the Identity Store object. For Provisioning synchronization workflows, the base point is set to a reference: See the export section for an explanation of this reference. For import operations, you can choose between two modes: Replace and Merge. Replace mode assumes the existence of a full set of entries and therefore cannot handle delta information. In this mode, the source and the target are identical after the operation. This mode can be used for up to 250,000 entries without any problems (typical execution times are 2.5 hours or less). This mode is particularly useful for initial loads. In this case, it is about four times faster than merge mode. Merge mode can handle all kinds of input. Content information can be handled as a full import or as a delta set if only addition and modification are enabled (see the Entry Handling tab for these settings). If the source delivers an operation code (especially for deleted entries), then deletions can be handled in this mode, too. Large numbers of entries (500,000 entries and more) should be handled with this mode in conjunction with a delete operations code. Creation and provisioning workflows use merge mode in the default scenario. Depending on the value of the import mode parameter (Merge or Replace), you need to set either the Filters for Merge or the Filters for Replace parameter. If the import mode is Merge, you use the Join table either in table or expert mode (for details, see the description of this element). Each row in this table defines a separate filter condition that is evaluated one after the other until exactly one match is found. For example, you can first search for the employeeNumber, then for a combination of sn, givenName and telephoneNumber and so on. If the import mode is Replace, you define a Replace Filter, which is a condition that retrieves all entries in the target into the meta controller’s memory. The meta controller compares all source entries with this memory list. Entries that it finds are marked and modified if the content has changed. Entries that it does not find must be added to the target. At the end, all entries that are not marked in the list are subject to be deleted from the target. This algorithm guarantees a consistent set of entries after the operation. In this mode, it is important that the retrieved memory list is sorted with the field that is used for comparison. This field is to be defined as Sort Key. This tab contains a set of properties that allow you to define together with the Import Mode parameter the specific behavior of the entry handling at the target side. You can define parameters for Add, Modify and Delete operations. The Add Entries/Modify Entries/Delete Entries switches each allow four options. You can either forbid the operation (None), allow it (Add, Modify or Delete) or choose instead only notification (NTF), where a file is generated for this type of operation and is sent via e-mail to an administrator, who must then perform the requested task manually. The fourth option permits the performance of both the operation and the notification. This option is useful if the administrator wants to check the operations regularly and is especially useful for additions and deletions. For Add, you should set the Superior Info information. This is not necessary if you are absolutely sure that creation of upper-level nodes is never required. For Modify, you can choose whether you want to allow a DN rename operation (Rename Entries) For Delete, you can choose the Deletion Mode. The selection must be consistent with your delivered data. You can use the Keep Objects field to define DNs that your workflow should not delete. See the script structure sections in the chapter \"Understanding the Default Application Workflow Technology\" for information about the other entry handling properties. Set the adequate trace parameters to debug your workflow during configuration. DirX Identity’s default workflows are configured to run without paging by default. However, if you intend to work with large amounts of data, use paging wherever possible. Otherwise you could reach the limits of the directory server or the operating system. In the latter case, the result is not predictable. Note that for comparison of two result lists, sorting is absolutely necessary if you work in paged mode. You can use request workflows for a variety of tasks, including: Creating objects (user self registration, users, roles, and so on with or without approval) Modifying objects (users, roles, and so on) and approving object attribute changes Approving privilege assignment changes Deleting objects (users, roles, and so on) Performing certifications Performing service management tasks Creation workflows allow you to place controls on the object creation process.Let’s look at several typical examples: User Self Registration Workflows - the Customer Self Registration workflow allows for self registration of a customer Create User Workflows - the Create User With Approval workflow shows how an administrator enters a new user with approval. Create Persona Workflows - the Create Persona from User shows a typical workflow for administrative persona creation. Create User Facet Workflows - the Create User Facet from User shows a typical workflow for creating a user facet. Create Functional User Workflows - the Create Functional User from User shows a typical workflow for administrative functional user creation. Create Privilege Workflows - the Create Role workflow defines a process for role creation. These examples of creation workflows show that you can build various types of creation workflows that satisfy your organizational and process requirements. We recommend that you streamline your processes when defining request workflows so that they are fast and flexible but still maintain regulatory compliance. Self registration workflows have a special function: they are triggered by a user that is not yet registered within DirX Identity. To handle this case, DirX Identity uses the special and reserved user ANYONE, which has the limited access rights defined by access policies that are sufficient to perform the self registration process. See the access policies for ANYONE under Policies → Access Policies → Default → Request Workflow Definitions for more information. You need to supply a password for ANYONE in the file install_path*\\web\\webCenter\\WEB-INF* to enable the self registration process. A typical self registration workflow is the Customer Self Registration workflow: Figure 32. Customer Self Registration Workflow The Customer Self Registration workflow contains the following activities Enter Attributes (people) - displays a set of attributes (mandatory or optional) that the requesting user must supply. Enter Password (people) - requests a password that complies with the defined password policies from the user. Request Services (people) - allows the user to select some of the offered services. The policy execution service can assign additional privileges automatically later on. Confirm Data (people) - presents all entered data to the user, who can change the data if it is not correct and then either confirm or abort the entire self registration process. Notification if Aborted (automatic) - sends a final notification to the requesting user that he aborted the self registration process. Set Constants (automatic) - sets some constant values, for example, the user type to \"Customer\" and the master attribute to \"Self Registration\". Approve Self Registration (people) - requires a set of persons (the participants) to approve this user self registration request. In this case, a fixed group of people defines the list of approvers. Apply Change (automatic) - creates the LDAP entry for the user if the participants in Approve Creation accept the creation request. Up to this point, the user entry does not exist. It exists only as an order object within the workflow instance. Creating the user LDAP entry includes a privilege resolution and generation of events for real-time workflows. Notification if Rejected (automatic) - typically sends an e-mail notification to the initiator of this workflow if the participants reject the user creation request. Notification if EXPIRED (automatic) - sends an e-mail to an administrator that the workflow has expired. Obviously the participants did not react in time. You can create users in various ways. The following figure shows a typical workflow for administrative user creation: Figure 33. Example of a Create User Workflow The workflow shown in the figure contains the following activities: Enter Attributes (people) - displays a set of attributes (mandatory or optional) that the administrator must supply. Request Privileges (people) - allows the administrator to assign some privileges by hand. The policy execution service can assign additional privileges automatically later on. Approve Creation (people) - requires a set of persons (the participants) to approve this administrative request for user creation. There are many ways to define the participants; for example, fixed lists, the members of groups, an LDAP filter definition and so on. For this workflow, a fixed list of approvers that are part of the human resources department is configured. Calculate GUID (automatic) - calculates a standard global unique identifier. Example: uid-c0a8e480—​4b5b380c-121222f6f42—​7fb8. You can create your own UID generator as a custom activity. Apply Change (automatic) - creates the LDAP entry for the user if the participants in Approve Creation accept the creation request. Up to this point, the user entry does not exist. It exists only as an order object within the workflow instance. Creating the user LDAP entry includes a privilege resolution and generation of events for real-time workflows. Notification if Rejected (automatic) - typically sends an e-mail notification to the initiator of this workflow if the participants reject the user creation request. Notification if EXPIRED (automatic) - sends an e-mail to an administrator that the workflow has expired (the participants did not respond in time). You can create personas in various ways. The following figure shows a typical workflow for administrative persona creation: Figure 34. Example of a Create Persona Workflow The workflow shown in the figure is derived from the corresponding create user workflow, which has been extended to include a new first activity: Persona from User (automatic) - creates the default values for the persona to be created from its owner using a special object description. This workflow causes the \"enter attributes\" dialog for personas to be populated with useful default values. All of the other activities for the create persona workflow are the same as the create user workflow described in the previous section. See the section \"Customizing Persona Create Workflows\" in the chapter \"Customizing Program Logic\" in the DirX Identity Customization Guide for information on how to configure the Persona from User activity. You can create user facets in the same ways as for personas. The workflow for creating a user facet is basically the same as the workflow for creating a persona described in the section \"Create Persona Workflows\". The only difference is the first automatic activity User Facet from User, which sets default values for the new user facet taken from the associated user and configured in the object description UserFacetFromUser.xml. See the section \"Customizing User Facet Create Workflows\" in the chapter \"Customizing Program Logic\" in the DirX Identity Customization Guide for information on how to configure the User Facet from User activity. You can create functional users in various ways. The following figure shows a typical workflow for administrative functional user creation: Figure 35. Example of a Create Functional User Workflow The workflow shown in the figure is derived from the corresponding create user workflow, which is extended to include a new first activity: Functional User from User (automatic) - creates the default values for the functional user to be created from its sponsor using a special object description. This workflow causes the \"enter attributes\" dialog for functional users to be populated with useful default values. All of the other activities for the create functional user workflow are the same as the create user workflow described in the previous section. See the section \"Customizing Functional User Create Workflows\" in the chapter \"Customizing Program Logic\" in the DirX Identity Customization Guide for information on how to configure the Functional User from User activity. There are also many ways to define a workflow for a role - or more generally, a privilege - request. The following figure shows a typical workflow definition: Figure 36. Example of a Create Role Workflow Because role creation is a complex task, the workflow takes a two-step approach. First, a person supplies a set of descriptive attributes to request the new role. When this \"basis\" request is approved, the workflow creates the role object and notifies a role administrator to complete the role definition. This workflow contains the following activities: Enter General Attributes (people) - displays a set of descriptive attributes (mandatory or optional ones) the role requester must supply. Approve Role Creation (people) - requires a set of persons (the participants) to approve the role creation request, possibly including a check for an existing role definition that can be used instead of the requested one. Apply Change (automatic) - creates the preliminary LDAP role entry if the participants of Approve Role Creation accept the creation request. Notification if Rejected (automatic) - typically sends an e-mail notification to the initiator of this workflow if the participants of Approve Role Creation reject the role creation request. Perform Administrative Tasks (people) - notifies the role administrator that a preliminary role object has been created and requests that he completes the role definition.This action may include tasks like setting the role ID, assigning permissions, role parameters and senior roles (and perhaps these additional objects must be created first), assigning users as owners and role administrators and defining approval and re-approval parameters. Notification if Role Request Completed (automatic) - typically sends an e-mail notification to the initiator of this workflow when the role administrator can complete the role definition successfully. Notification if Not Completed (automatic) - typically sends an e-mail notification to the initiator of this workflow when the role administrator finds that the role creation is not possible; for example, because there is a conflict with other role definitions. Notification if EXPIRED (automatic) - sends an e-mail to an administrator that the workflow has expired (the participants did not respond in time). This type of workflow allows approval of object modifications if critical attributes are changed.You use attribute policies to define the list of critical attributes for an object type.Managing attribute modification approval comprises these steps: Enabling attribute modification approval via the Attribute Modification Approval flag of the domain object. Configuring the corresponding attribute policies for each object type (critical attributes). Note: either create your own attribute policies or copy the default policies to prevent your policies from being overwritten during upgrade installation. Each matching policy results in the start of one workflow. The next section provides an example for a user attribute modification workflow.You can set up similar modification workflows for other object types. The following figure shows a typical attribute modification workflow that is triggered by a change of the dxroulink or dxrlocationlink attributes. Figure 37. Modify Location and Organization The workflow shown in the figure contains the following activities: Approval of Attribute Modifications (people) - requests that a set of participants approve the modification of critical attributes. In this special case, we use all persons of the HR department as approvers. These persons are also allowed to change some of the attributes to their correct values before they accept the changes. Apply Change (automatic) - changes the LDAP entry if the participants of the previous step accepted the modification. Up to now, the modifications do not exist. They exist only as an order object within the workflow instance. Notification if Rejected (automatic) - typically sends an e-mail notification to the initiator of this workflow if the participants reject the modification request. Notification if EXPIRED (automatic) - sends an e-mail to an administrator that the workflow has expired. Obviously the participants did not react in time. The attribute modification workflow functions as follows: The modification workflow does not allow a participant to accept a part of the attributes and reject the rest. If several participants must approve, and all approve but some make changes to the data before they approve, DirX Identity takes the changes made by the last approver, and ignores the rest. If several workflows are started for the same attribute, DirX Identity takes the changes from the last approved change. This feature is not applicable for: Properties that depend on a master object.In this case, the change of the master attribute must be approved rather than the change of the dependent attribute.For more information, see the section \"Using the Master Attribute\" in the section \"Customizing Objects\" in the DirX Identity Customization Guide. Properties that are used as system properties for privilege assignment.The privilege assignments are handled by extra assignment approval workflows. Properties that are calculated automatically by the system to set some states or other system relevant values. Properties that are specific properties holding a set of individual properties.For example, dxrRPValues cannot be chosen, select dxrRPValues(c) or dxrRPValues(l) instead. The workflow checks these rules and if it detects a violation, it reports it as an error message when the policy is saved. Warning: You can bypass these checks by editing the attributes for approval in the attribute policy with a native LDAP editor (for example, DirX Identity’s Data View).However, this action may result in unexpected problems that are not covered by product support. This type of workflow only handles the approval of privilege assignments.In this section, we: Describe how approval works. Examine the 4-eye approval, automatic (notification-only) approval and risk approval workflows. Explain how to set up approval workflows for different assignment operation types. Give some guidelines for determining when to implement privilege assignment approval and re-approval. The following figure illustrates the approval process in DirX Identity Provisioning. Figure 38. The DirX Identity Provisioning Approval Process The approval process works as follows: A privilege that is flagged for approval is assigned to a user. This action initiates a request workflow configured for assignment approval (the creation request is sent via HTTP/SOAP from the client to the Java-based Server). The request workflow service checks all active workflow templates to determine whether they fit (When Applicable section). The first workflow template that fits is converted to a workflow instance. The state is set to Running. The request workflow service starts all activities whose start conditions are satisfied and performs the assigned actions (for example, sending an e-mail to the relevant approver(s)). The request workflow service waits for responses from the approvers or for new approval workflow requests. Note: from time to time, it performs a full check of the instances to solve the problem of lost SOAP requests. The full check interval is configurable (the default is 5 minutes). When a user performs an approval (he accepts or rejects), a SOAP message informs the request workflow service again. It performs the necessary actions and calculates the next steps. When a workflow instance finishes, either successfully (state Succeeded) or with error (state Failed), the workflow is completed. If the approval was successful, the user-to-privilege assignment is enabled and a privilege resolution is performed automatically. Now the assignment is active. The workflow instance remains in the Identity Store based on the configured Expiration Time. Use the Cleanup Objects workflow with its corresponding cleanup rules to remove the expired instances from the Identity Store regularly. Note that all history information is removed from the expired instances before they can be deleted. Thus it is good practice to run the Extract Audit Trail workflow in advance (or to set up the corresponding collector of DirX Audit). Changing an existing assignment or deleting an assignment also triggers an approval workflow if the privilege is flagged for approval. Let’s look at three examples of approval workflows: 4-eye approval, automatic (notification only) approval and risk approval. You can approve privilege assignments in various ways. A typical approval type is 4-eye approval if you assign a privilege to a user. Both the manager of the user and the manager of the privilege must approve. The following figure shows an example of this workflow: Figure 39. 4-Eye Approval Workflow This workflow contains the following activities: Approval by User Managers (people) - requires the user’s manager(s) to approve the privilege assignment, which means he accepts that the user receives these additional access rights to perform new tasks. Approval by Privilege Managers (people) - requires the privilege’s manager(s) to approve that this user gets this privilege, which means that this user has access to the resources this privilege protects. + Merge (AND) - calculates the result of previous activities, which means that it calculates all applications states via AND. o Merge (OR) - calculates the result of previous activities, which means that it calculates all applications states via OR. Apply Approved Privilege Change (automatic) - assigns the privilege to the user if all participants approve the assignment. This activity includes a privilege resolution and generation of messages for real-time workflows. Notification if Rejected (automatic) - typically sends an e-mail notification to the related user that the privilege is not assigned, if the participants reject the assignment request. Notification if EXPIRED (automatic) - sends an e-mail to an administrator that the workflow has expired (the participants did not respond in time). Note: For details about configuration with access policies, see the subsection \"Policies for Approvals\" in the section \"Delegated Administration\" in the chapter \"Managing Policies\" in the DirX Identity Provisioning Administration Guide. Another example is a workflow that simply sends a notification when a privilege is assigned to a user. In this example, the workflow informs a user that he has received the \"Signature Level 1\" privilege with some valuable hints about using it: Figure 40. Signature Information Workflow This workflow consists of these activities: Apply Privilege and Notify User (automatic) - assigns the privilege to the user automatically, including a privilege resolution and generation of messages for real-time workflows. The activity also sends a notification to the user about this assignment. Notification if EXPIRED (automatic) - sends an e-mail to an administrator that the workflow has expired. Obviously the participants did not react in time. In a risk approval workflow, the first activity calculates the new risk level that would become effective if the assignment was approved. If the risk level is computed to high (is equal to 3), an additional approval step Approval by Company Head must be executed if Approve by Privilege Manager has been accepted. The following figure shows an example of this workflow: Figure 41. Risk Approval Workflow This workflow contains the following activities: Calculate Risk (automatic) - simulates a risk level resolution for the requested privilege assignment. For the new/deleted group assignments, it calculates the risk and then merges these new risks with the risk values already computed to calculate the new potential risk level. The activity then stores this new risk level in the application state and the workflow context (values of 0, 1, 2 and 3 are possible, with 3 corresponding to a high risk assignment). Approval by Privilege Manager (people) - requires the privilege’s manager(s) to approve that this user gets this privilege, which means that this user has access to the resources this privilege protects. + Merge (AND) - calculates the result of previous activities, where Approve by Privilege Manager was accepted and Calculate Risk computed a high risk (a value of 3). Approval by Company Head (people) - requires the company head to approve that this user receive this privilege, which means that this user has access to the resources this privilege protects. This activity is only entered if a high risk for the assignment was calculated and the first approval was accepted. + Merge (AND) - calculates the result of previous activities, which means that it calculates all applications states via AND. Approve by Privilege Manager was accepted and Calculate Risk computed a lower risk (not equal to 3) so that no additional approval is necessary. o Merge (OR) - calculates the result of previous activities, which means that it calculates all applications states via OR. Either Approval by Company Head was accepted or Approve by Privilege Manager was accepted and the risk was not calculated to be high. Apply Approved Privilege Change (automatic) - assigns the privilege to the user if all participants approve the assignment. This activity includes a privilege resolution and generation of messages for real-time workflows. Notification if Rejected (automatic) - typically sends an e-mail notification to the related user that the privilege is not assigned, if the participants reject the assignment request. This activity is called if the privilege manager has rejected the assignment. Notification if High Risk Rejected (automatic) - typically sends an e-mail notification to the related user that the privilege is not assigned, if the participants reject the assignment request. This activity is called if Approval by Company Head was rejected. Notification if EXPIRED (automatic) - sends an e-mail to an administrator that the workflow has expired (the participants did not respond in time). Note: For details about configuration with access policies, see the subsection \"Policies for Approvals\" in the section \"Delegated Administration\" in the chapter \"Managing Policies\" in the DirX Identity Provisioning Administration Guide. DirX Identity can distinguish between several operation types for assignments. These operation types are available: Create - a privilege is assigned either to another privilege or a user. Modify - a privilege assignment to a user is to be modified (for example the end time or a role parameter value changes). Delete - a privilege is removed either from another privilege or a user. SoD - an SoD rule requires approval of a user-to-privilege assignment. Re-Approval - an existing user-to-privilege assignment is to be re-approved at the defined time. You can set up workflows for specific operation types either from a privilege via the corresponding direct workflow link or via the When Applicable section in a request workflow definition. Note that links between privileges allow only the operations assign and remove. When talking about approval of assignments, you should be aware that many privilege assignments in a company do not require approval. For example, consider the following policies: All of your employees - internal and external ones - are to have a Windows account and an e-mail box. This policy is best implemented with a provisioning rule that provides a basic role. Approval does not make sense in this case. All of your internal employees are to have access to public pages in your intranet.This policy is best handled with a provisioning rule that acts on the attribute value employeeType=Internal.Approval does not make sense in this case. There are a lot of other cases where approval does not make sense.A good rule of thumb is to determine whether or not you required approval for a privilege when your process was paper-based.Another important issue is to check whether a privilege is compliance-relevant and should therefore be approved. You should thoroughly define which privileges need approval and only define approval workflows for these items.Otherwise you end up with a lot of unnecessary overhead, which results in additional costs and time-consuming processes because approval costs time. The re-approval feature is even more critical than the approval feature because it generates approval requests fairly frequently.Thus we recommend that you make sure that it’s really necessary to set up re-approval for a specific privilege.Re-approval makes sense for highly critical access to business-critical applications as well as for compliance-relevant access rights. This type of workflow allows approval of object deletions.You use delete policies to define approval for deletion of a specific object type. Managing object deletion approval comprises these steps: Configuring a Delete Policy that contains all object types whose deletion is to be approved. Note: either create your own attribute policies or copy the default policies to prevent overwritten policies during upgrade installation. Defining one or more deletion request workflows for each of these object types.In the When Applicable section of the workflow, set the operation to delete and the subject field to the corresponding object type. Note that you can only define a deletion policy for an object type (for example, roles).It is not possible to define a policy for a portion of the objects. Hint: You can specify different object descriptions as a workaround, but this task requires that you set up a mapping section. For example, you could add a custom flag to the object \"Request workflow for deletion\" and then include this flag into the mapping section of your object descriptions. The next sections provide an overview of the deletion procedure. a list of object types that support deletion workflows. an example of a role deletion workflow. You can set up similar modification workflows for other object types. The deletion procedure depends on the object type and whether auditing is enabled. The basic procedure is shown in the next figure. Figure 42. Deletion Procedure The procedure comprises these steps: Receiving a deletion request, the service layer checks for an active Delete Policy for this object type. If no policy is active, it proceeds with step 5. If a policy is active, a deletion approval workflow is started. If none is found, an error is reported. If the object deletion is rejected, the object is not deleted. If the object deletion is accepted, the deletion procedure is performed. If auditing is disabled, the object-specific procedure is performed immediately. In most cases, this is a direct deletion of the object. If auditing is enabled, history / audit information is written to the objects into the attribute dxrHistory. This means that objects cannot be deleted immediately; they are set to the DELETED state. You must set up workflows for history extraction and object deletion, which guarantees that no audit information is lost. Deletion workflows are not yet supported for all object types. The following types are currently supported (the deletion procedure is briefly described): Groups - are always set to DELETED status. See the chapter \"Managing States\" in the DirX Identity Provisioning Administration Guide for more information. JavaScripts - direct deletion Nationalization - direct deletion Object Descriptions - direct deletion Proposal Lists - direct deletion Role Parameters - direct deletion Roles - direct deletion Permissions - direct deletion Users - are always set to TBDEL status. See the chapter \"Managing States\" in the DirX Identity Provisioning Administration Guide for more information. Policies Access Policies - direct deletion Attribute Policies - direct deletion Audit Policies - direct deletion Delete Policies - direct deletion Event Policies - direct deletion Password Policies - direct deletion SoD Policies - direct deletion Business Objects Context - direct deletion Cost Units - direct deletion Countries - direct deletion Locations - direct deletion Organizations - direct deletion Organizational Units - direct deletion Projects - direct deletion The following figure shows a typical delete workflow that is triggered by a deletion of a role. This workflow is started when the delete policy for roles is active. Figure 43. Delete Role Workflow The workflow shown in the figure contains the following activities: Approval of Object Deletion (people) - requests that the role administrators must approve the deletion of a role. Apply Change (automatic) - changes the LDAP role entry if the participants of the previous step accepted the deletion.Up to this point, the deletion request existed only as an order object within the workflow instance. Notification if Rejected (automatic) - typically sends an e-mail notification to the initiator of this workflow if the participants reject the modification request. Notification if EXPIRED (automatic) - sends an e-mail to an administrator that the workflow has expired (the participants did not respond in time). The object deletion workflow functions as follows: The deletion procedure used depends on the type of object and the audit settings.Users and Privileges are not directly deleted.Instead the status is set to DELETED and the end date is set.The CleanupObjects rule (typically part of a Tcl-based workflow) needs to be run to delete the object completely.This deletion may be delayed until the history (audit) information is removed from the object entry. Other objects are immediately deleted. Certification workflows allow you to certify various object types.DirX Identity currently supports workflows for certification campaigns, which means that you can verify and clean up the manual assignments of a privilege to users. To use this type of certification, perform these steps: Configure the certification campaign feature, including a corresponding schedule. Create a certification campaign for privileges or users. Configure a certification campaign with the Review the revocation of all manually assigned privileges that are rejected or left uncertified option for the Apply Changes configuration field. For details about certification campaigns, read the DirX Identity Use Case Document Certification Campaigns. The certification campaign workflows are normal assignment workflows.For more information about this type of workflow, see the section \"Guidelines for Approving Privilege Assignments\". Service management workflows help to perform tasks in a service management environment (ticket-based workflows). DirX Identity currently supports two use cases: Manual provisioning of offline target systems Workflows for ticket processing from a source ticket system For more information about service management use cases, read the DirX Identity Use Case Document Service Management. DirX Identity currently supports only workflows for manual provisioning, which means that you can handle manual provisioning for systems that are not (yet) connected to the Identity Store. To use this type of workflow, perform these steps: Set up a target system of type Service Management. Part of this setup is the configuration of a Java-based synchronization workflow that uses a request workflow connector to start a corresponding request workflow for each action. Set up the necessary manual provisioning request workflow. The following figure shows a typical manual provisioning workflow that can be used in service management environments. Figure 44. Manual Provisioning The workflow shown in the figure contains the following activities: Split Orders (automatic) - checks the order type (Add, Modify, Delete) and sets the Application State accordingly. The following activities are started according to this value. Addition by Administrator (people) - requests that an administrator adds the object (account or group) with all defined properties into the offline target system. After completion of this task, the approver confirms the activity (accepts it). This step is configured to take the owners of the privilege as approvers. Modification by Administrator (people) - requests that an administrator modifies an object (account or group) with all defined properties in the offline target system. After completion of this task, the approver confirms the activity (accepts it). This step is configured to take the owners of the privilege as approvers. Deletion by Administrator (people) - requests that an administrator deletes the object (account or group) in the offline target system. After completion of this task, the approver confirms the activity (accepts it). This step is configured to take the owners of the privilege as approvers. Set States (automatic) - sets the target system state (dxrTSState) of the object according to the operation; for example, a new account is set from NONE to ENABLED. Notification if Rejected - sends an e-mail to the corresponding user if the manual provisioning request was refused by the administrator. Notification if EXPIRED (automatic) - sends an e-mail to an administrator that the workflow has expired (the participants did not respond in time). The manual provisioning workflow works as follows: In Web Center, the approvers receive a form with the specific request and its details. They perform the corresponding task in the target system. After performing the task, they accept the form. DirX Identity sets the target system state (dxrTSState) attribute for accounts and groups accordingly or moves the user to the correct member attribute (for example, from dxrGroupMemberAdd to dxrGroupMemberOK). For more information about manual provisioning, refer to the DirX Identity Use Case Document Service Management. DirX Identity supports workflows to process incoming tickets from source ticket systems. These tickets are converted into DirX Identity orders that are processed by a corresponding request workflow. To use this type of workflow, perform these steps: Set up a ticket web service interface that consumes the tickets sent from a service management workflow. Use the sample ticket web service interface as starting point. Use the provided \"Process Ticket\" workflow sample and adapt it to your requirements. The following figure shows a typical ticket-processing workflow that can be used in service management environments. Figure 45. Process Ticket The workflow shown in the figure contains the following activities: Add attributes (automatic) - adds some fixed attributes to the subject order. In the pre-configured example, the employeeType is set to Contractor and the dxmOprMaster is set to Service Management. Apply order (automatic) - this step executes the order(s). For example, if you send a create user request with two role assignments, the user is created and the assignments are resolved. If an assignment requires approval, a child workflow is started automatically. Wait for child workflows (conditional) - this activity waits for all started child workflows to complete. Wait for completed provisioning (automatic) - this activity waits for all provisioning actions to target systems to be completed. The Process Ticket workflow as defined in this default workflow works completely automatically without any user interaction. It instantiates or changes the object, assigns privileges and eventually starts a child workflow. Then it waits until the child workflows and the generated provisioning actions are complete. For more information about ticket processing, read the DirX Identity Use Case Document Service Management. Creating a customized DirX Identity scenario both in the Provisioning and Connectivity configuration and maintaining its objects can be a complex task.DirX Identity provides easy-to-use, comprehensive tools to simplify this task.You can use the Identity Manager Provisioning and Connectivity views to create identity creation, maintenance, and provisioning workflows that are consistent with the target system structure in your Provisioning domain. To create and configure a custom DirX Identity scenario for a DirX Identity domain, perform the following steps with Identity Manager: Use the target system creation wizard in Provisioning → Target Systems to create a new target system in your new Provisioning domain.The wizard automatically creates a new scenario in the Connectivity domain provided no other scenarios yet exist and places the necessary configuration objects (connected directories and workflows) into this scenario. Use the Provisioning view to refine the configuration of the newly created target system and its objects. Use the Connectivity view to refine the configuration of the newly created maintenance and target system workflows. Create and maintain additionally the necessary identity creation workflows (source workflows). For additional target systems, perform these steps: Use the target system wizard to create additional target systems. The necessary configuration objects (connected directories and workflows) are added to your existing scenario in the Connectivity view automatically. Use the Provisioning view to refine the configuration of the newly created target system and its objects. Use the Connectivity view to refine the configuration of the newly created maintenance and target system workflows. To create clustered target systems, see the section \"Creating Cluster Target Systems\". You can use the target system creation wizard to create a new target system and a new custom Connectivity scenario for your Provisioning domain. To run the target system creation wizard in this way, you need to have: A fully configured Provisioning customer domain that contains only the default target system DirXmetaRole. An installed Connectivity configuration. To create the first target system and set up the new Connectivity scenario automatically: Log in to DirX Identity Manager and select Provisioning. Click the Domain Configuration view. Click the top-level object (it has the name of your Provisioning domain). Check the Connectivity configuration parameter in the General tab. If it is not correct, change it to the server where your Connectivity configuration domain is installed. Click the Target Systems view. Optionally you can create a folder or several folders that reflect your target system environment. Click either on the top level object Target Systems or on one of the created folders, and then select New → Target System. The Target System Wizard opens. Click Next. Select one of the available target system templates. Click Next. Set the name of the new target system. Click Next. Set the target system advanced parameters. Click Next. Set the target system options. These might differ according to the target system template. Click Next. At this point, we have defined the parameters for the target system object in the Provisioning domain. Now the target system creation wizard detects that a scenario does not yet exist and prompts for the parameters that describe how to create the scenario: The wizard will automatically create a new scenario with the same name as your Provisioning domain and will create a new identity store representation in your new scenario. Next, the wizard prompts for the Maintenance Workflows to copy to the new scenario. Click Next. The wizard copies the workflows (this action takes some time to complete). Now the wizard prompts for the Connected Directory template to be used for the new target system. Use either the proposed templates (Show preferred) or choose any of the other available templates (Show all). The latter choice makes sense, for example, if you intend to create an eDirectory target system. In this case, the Provisioning view assumes an LDAP type, whereas the Connectivity connected directory should be of type NDS (so choose the NDS template). Click Next. You can synchronize the schema and change the attribute configuration of the new connected directory (only for target systems where this makes sense) in the next two steps. Click Next. The wizard’s Configuration step (and depending on the target system, an additional next step) lets you define the most important parameters: Account Base and Group Base of the target system have already been defined and cannot be changed. Set the Service and the Bind Profile parameters to the values of your target system connected directory. Set the Connected Directory parameters. These parameters may differ depending on the connected directory type. Click Next. Now the target system wizard asks for the Provisioning Workflows to create. Select from Synchronization, Validation and Password Synchronization. If you select Password Synchronization, you need to fill in the next four steps. For the other selections, the target system wizard copies and configures the workflows. When the wizard finishes, you should have a completely configured Connectivity scenario with all of the necessary elements. The configured workflows should run. Of course, you might need to change some details, like the mapping of additional account and group attributes. The next section describes how to make these changes. You can use the Provisioning → Target Systems view to maintain your newly created scenario. Click any of the target systems in the Target Systems view and select Connectivity. The subsequent menu selections allow you to: Change the configuration of the connected directory (Configure Connected Directory). View the connected directory (if the Viewer command is entered correctly) (Open Connected Directory). Copy new workflows to the workflow line between Identity Store and the connected directory (New Workflow). Assign an existing workflow to the workflow line between Identity Store and the connected directory (Assign Workflow). Configure, run, report or remove the validation workflow (Validation). Configure, run, report or remove the synchronization workflow (Synchronization). Configure, run, report or remove any of the other assigned workflows (Workflows). You can also manage the Identity Store connected directory from here. Right-click the Target Systems root node and select Connectivity. The subsequent menu selections allow you to: Change the configuration of Identity Store (Configure Connected Directory). View the connected directory (if the Viewer command is entered correctly) (Open Connected Directory). Copy new workflows to the workflow line between Identity Store and the connected directory (New Workflow). Assign an existing workflow to the workflow line between Identity Store and the connected directory (Assign Workflow). Configure, run, report or remove one of the assigned workflows (Workflows). As you can see, the most important features of the Connectivity view are also available in the Provisioning view. Scheduling and Combining Workflows You should set up schedules that define when your created workflows shall run. The methods you use to set up schedules for DirX Identity Connectivity scenarios are highly dependent on your environment. We recommend that you: Run synchronization workflows periodically, for example, every half hour. Optionally you can use a nested workflow that performs account-to-user joining after each run. Run policy execution workflows and privilege execution after each creation workflow or after a sequence of creation workflows (use nested workflows and run them once a day or more often). Run validation workflows each night or during each weekend (depending on the number of accounts and groups in your target systems). We recommend that you use a nested workflow that performs account-to-user joining after each run. Run check consistency workflows every night or during each weekend. The target system creation wizard helps you to create the initial Connectivity scenario and copies and configures everything that is necessary to handle the provisioning of the target systems. However, the wizard does not handle identity creation workflows. You must use the Connectivity view to create and maintain these workflows. For information about these tasks, see the Importing Identities section in the \"Getting Started\" chapter of the DirX Identity Tutorial. Creating clustered target systems is a bit different from creating a single target system. Read the section \"Cluster Workflows\" in the DirX Identity Connectivity Administration Guide to understand the concept of cluster workflows. The chapter \"Java-based Workflow Architecture\" in this guide provides additional information. Before we start with the creation procedure, be aware that the structure for cluster target systems is fixed: Target Systems → cluster_container → cluster → target_system Here is an example that shows how you can use this structure: Target Systems UNIX-Clusters Linux-Cluster Linux1 Linux2 ... Linux Windows-Clusters Europe-Cluster ADS-EU1 ADS-EU2 ... US-Cluster ADS-US1 ADS-US2 ... Other-Clusters + ... The UNIX-Clusters folder comprises a Linux-Cluster with the target systems Linux1 to Linuxn. The configuration of each cluster is identical except for some specific parameters like server addresses and bind profiles. The Windows clusters in this example are structured according to areas. To set up clustered target systems, perform these steps: Select the Target Systems view and then click the top node. Select New Cluster Container from the context menu and create a cluster container. In our example above, these are the UNIX-Clusters and Windows-Clusters objects. Click the created object and then select New Cluster from the context menu. Define a name for your cluster. In our example, this would be for the UNIX-Clusters cluster container the object Linux-Cluster. You can create as many new target systems for your cluster below these clusters as you need. DirX Identity provides Web services for target system creation that are designed to set up cluster target systems efficiently, because this task requires setting many parameters for each system. Alternatively, you can create these target systems by hand, as follows: Use the target system wizard to create a first target system below the cluster folder. Select the workflows that are necessary for provisioning. Select the cluster workflows - if present - for your target system template, or select non-cluster workflows. You can easily adjust them to work with cluster target systems. After creating the first target system, move the Configuration folder one level up just below the cluster folder to allow its use by every subsequently created target system. Remember that all target systems in a cluster use the same set of object descriptions and other configuration definitions. Note that the Configuration folder will not be found if it is located anywhere else; that is, anywhere other than below the target system or - for a cluster - in the cluster folder that corresponds to the target systems that belong to the cluster. If you were not able to select cluster workflows in the step above, change the copied workflows in the Expert view of the Connectivity view group: Change the controller to the corresponding cluster controller type. Adjust any other parameters that need to be adapted. Now you can create additional cluster target systems: Use the target system wizard again, but do not select additional workflows. Remember that you can use one provisioning workflow for all target systems in a cluster. Delete the Configuration folder beneath the target system created again by the target system wizard, because you’ll use the one you moved up one level after you created the first target system. For every created target system, set these parameters: Set the Connected Directory link on the General tab to the same connected directory as the first target system. Create an account object, for example, named bindaccount, for the purpose of binding to the connected system beneath the Accounts or Accounts and Groups container. Account objects are not allowed to be created under a different container. Then move it up one level in the Data View to exclude it from synchronization to the connected system. The link to this bind account is set in the Bind Parameters section in the Server Connection tab of the target system. Set the password of this account in the Data View userPassword attribute. This action sets the dxmPassword accordingly. Using an existing account that is linked to a user can cause problems because the workflow may no longer be able to log in to the connected system if the password is changed. Therefore we recommend using a separate bind account where you manage the password manually. As this account may be used as access for password modifications, it must have sufficient access rights (preferably an administrator account) in the connected system. The dxrName attribute of the bind account must contain the bind user name in the form domain*\\*user name. Set all other necessary parameters on the Workflow Configuration (for some target system types this tab is called Server Connection), Connector Configuration and Environment Properties tabs. These parameters are specific to the target system. Keep in mind that all target systems in the cluster use the same cluster workflows configured in the Connectivity view group. If, for example, you want to specify some connection-specific properties like the following ones for the SapECCUMConnector: you must specify those properties as tag*=value pairs (client=800, accessToCUA=FALSE) in the Connector Configuration tab - or directly dxmSpecificAttributes in the Data View - of the Provisioning Target System object. The tag=value pairs specified in the Connector Configuration or Server Connection tabs are stored in the LDAP attribute dxmSpecificAttributes and added to the section of the specific target system connector on workflow execution. The tag=*value pairs specified in the Environment Properties tab are stored in the LDAP attribute dxrEnvironmentProperties. The environment properties must contain at least those attributes that are needed in a non-clustered workflow and specified in the Provisioning tab of the Connected Directory, like role_ts_account_base, role_ts_group_base or user_base. You can specify any property here and refer to it on the Connectivity workflow side - for example, in channel search base definitions like $\\{env.user_base} - to restrict the search to a target system-specific user base, or you can refer to the environment properties in the mapping. Note that some attributes like the base nodes for accounts and groups exist both in the Provisioning-side target system and the Connectivity-side connected directory. The Connectivity-side attributes, if specified, are overwritten by the target system attributes when the workflow runs for that specific target system. If the target system type of the cluster is OpenICF, every target system contains an additional tab where bind parameters and server address/port and the bundle-specific parameters are stored for the OpenICF server. Like the target system itself, the OpenICF server bind profile requires an additional account object which is referenced here; to exclude it from any synchronization, we recommend placing this account object alongside the target systems in the cluster. If several OpenICF servers belong to the cluster, but the bind password is the same for all of them, one such account object is sufficient; otherwise several must be created. One additional restriction applies to target systems in an OpenICF cluster: while DirX Identity can process the address localhost, the OpenICF server does not recognize a \"root\", so using localhost” results in an error. All the specific attributes in the Workflow Configuration, Connector Configuration, Environment Properties and OpenICF Server Configuration (for OpenICF) tabs are read from the default configuration on the Connectivity side and need only be present on the Provisioning side if the value differs for the target system. If no value is present in the target system, the default is evaluated. For OpenICF, where the server configuration is comprised of several bundle-specific attributes and the necessary bind profile attributes, this means: 1) If only one bundle is used (which we expect to be the main case), the bundle-specific attributes can be used from the workflow and need not be entered in every target system. 2) If the same password is used in all OpenICF servers in the cluster, the bind profile can be used from the connected directory and need not be entered in every target system, thus also making the additional bind account redundant. 3) If only one OpenICF server is used, the bind profile and the server address/port can be used from the connected directory/service and need not be entered in every target system, thus again making the additional bind account redundant. 4) For all other cases, remember that the values entered on the Connectivity side are used. They must only be entered in the actual target system if they differ. png This chapter describes the default Connectivity applications available in the Connectivity view group and how to configure and customize them.For information about the default request workflows, see the DirX Identity Provisioning Administration Guide.The sections in this chapter Describe how to work with the default Connectivity applications as a whole Provide an understanding of the default Connectivity applications Describe how to configure a custom Connectivity scenario The chapters that follow describe the default Connectivity applications and are subdivided into the following: Source workflows Maintenance workflows Target system workflows All default Connectivity application objects are located in Default folders. We strongly recommend that you do not work directly in the default Connectivity scenario or any of its folders. Instead, you should create your own scenarios and create your own connected directories and workflows within your own scenarios. The \"Getting Started\" chapter in the DirX Identity Tutorial provides detailed instructions on how to perform these tasks. When you follow this recommended procedure, all of your objects are created in folders within your own scenario; for example, workflows are created in the Workflows folder, connected directories are created in the Connected Directory folder and so on. DirX Identity automatically uses folders that have the name of your scenario. Important note: The objects you create from default application objects will not be affected by DirX Identity upgrades for two reasons: each object has a unique identifier (and your created objects have these identifiers, too) and DirX Identity preserves all central objects from the previous release by copying them to a version-specific folder (but only if there were changes in these objects). You should also be aware that some default Connectivity applications use central objects like Tcl scripts in the folder Configuration → Tcl. If you change these central objects, all of your copied default applications will be affected by your change. DirX Identity surrounds all property sheets that belong to this central area with a red border that contains the text This object might be shared because it belongs to the Configuration folder. If you do not want this behavior, you should make your copies independent from the central objects by creating local ones. See the section \"Linking Objects\" in the \"Managing Provisioning Workflows\" chapter in the DirX Identity Connectivity Administration Guide to learn more about thi concept.s The default Connectivity applications consist of: Source Workflows - comprise the Source Real-time and Source Scheduled scenarios. These scenarios consist of Java-based / Tcl-based Identity creation workflows, which assist with importing and joining organizational and user information from various sources to create identities within the Identity Store. Update workflows can import attributes back to these source systems. Maintenance Workflows - comprise the Identity Store scenario. This scenario contains Identity maintenance workflows, which help to manage the created identities. Consistency checks, policy execution, privilege resolution and password expiration are examples of this workflow group. Target System Workflows - comprise the Target Real-time and Target Scheduled scenarios. These scenarios contain all Java-based / Tcl-based Identity Provisioning workflows, which offer initial load and validation from connected systems as well as regular synchronization. These scenarios also offer password synchronization and other useful capabilities. These workflows are part of the default Connectivity scenario, which you can view with Identity Manager’s Connectivity → Global view. The following figure illustrates the default Connectivity scenarios and its workflows. Figure 46. DirX Identity Default Connectivity Scenario Identity source workflows synchronize information from existing sources to the Identity Store.This chapter provides detailed information about source workflow features, configuration, and user hooks.The sections in this chapter describe: Java-based source workflows Tcl-based source workflows DirX Identity’s Java-based source real-time workflows provided with the default Connectivity scenario include: Creation workflows - workflows that extract user information from existing identity sources (for example, an HR or a CRM database, an Active Directory system or a file system) and populate the Identity Store with user information. The workflows either use the Full-Import controller, which works in \"Replace\" mode and deletes those users in DirX Identity that do not exist in the source system, or the SyncOneWay2Identity controller, which works in \"Merge\" mode and does not delete DirX Identity user entries that do not exist in the source. Update workflows - workflows that transfer specific information from the Identity Store to the identity sources (for example, e-mail addresses or telephone numbers) to enable them to use the joined, high-quality information in the Identity Store. These workflows use the SyncOneWay2TS controller. DirX Identity provides the following pre-configured creation and update workflows: Import Users from Active Directory - imports Active Directory users to the Identity Store. Import Users from Database - imports users from a relational database to the Identity Store. Import Roles From Database - imports role data from a database to the role catalog of the Identity Store. Import Users from LDIF - imports users from an LDIF content file to the Identity Store. Export Users to LDIF - exports users from the Identity Store to an LDIF content file. Import Users from CSV - imports users from a CSV file to the Identity Store. Export Users from CSV - exports users from the Identity Store to a CSV file. Import of External LDAP Users - imports users from an external LDAP to the Identity Store. DirX Identity also provides the Remote AD workflow, which is intended for deployment with Atos Cloud Service Identity Management as a Service (IDMaaS). The Active Directory (ADS) user import workflow operates between the users folder in the Identity Store and an Active Directory connected system. It uses the same APIs and component deployment as the Java-based Active Directory (ADS) Provisioning workflows. See the section \"Active Directory (ADS) Workflows\" in the chapter \"Using the Target System (Provisioning) Workflows\" in this guide for more details. The workflow is based on Java real-time technology, with the ADS connector accessing an Active Directory via native LDAP protocol and the LDAP connector accessing a DirX Identity domain. The Full-Import controller is configured as the join engine. The controller exports all AD users from the source system and then imports them into the Identity domain user tree. This workflow can also be used as a template for other Java-based source workflows for user objects. Other user data sources instead of ADS can be connected. The connected directory UserADS represents the Active Directory containing the users and the connected directory Identity Store represents the Identity domain. The next sections describe Workflow prerequisites How to configure the workflow The workflow and its activities Ports Channels The workflow allows you to import Identity users from source ADS user entries. The workflow needs only one channel for users and a set of attributes to be imported. The workflow handles these common objects: Users - the user represents in this workflow a common account in an ADS connected system. It typically holds the demographic data and ADS account control attributes. The delivered workflow is: Import Users from ADS - the source Java-based workflow exports all specified ADS users and then imports them into Identity Store. The workflow can be used only with supported versions of Active Directory server. The ADS User Import workflow configuration on the Connectivity side is described in detail in \"Active Directory (ADS) Workflows\" in the section \"Using the Target System (Provisioning) Workflows\". The workflow Import Users from ADS is a Java-based source workflow with two activities: Join activity - implements the user import Error activity - receives update requests that failed despite retries and issues notifications The join activity is controlled by the Full-Import controller. It exports ADS user entries via the connector configured in the TS port and performs updates via the connector configured in the IdentityDomain port, as illustrated in the following figure: Figure 47. ADS User Import Workflow Ports and Channels You can start the workflow either manually or via a schedule. There are no global user hooks and no filters necessary. The workflow supports the following ports: TS port - represents the ADS that contains the users (accounts). The ADS connector is used to access the Active Directory. IdentityDomain port - represents the DirX Identity domain and is accessed via the LDAP connector. Event - used for sending change events. Notify - used for sending e-mails. The workflow needs only one channel per port. It represents the user objects. This port represents the connection to ADS. It is only used for exporting users and attributes from the ADS. The users are expected to be stored in the organizational unit OU=Users,OU=BRQH,OU=CZ. Export: Filter is set to &(objectClass=user)(objectCategory=person). This port represents the connection to the Identity Store. It is used for importing users into an Identity domain. Export: For exporting, the search base is taken from the environment property role_ts_account_base (in the connected directory Provisioning tab). The filter is needed to only export users from an Identity domain. Mapping: The SPML identifier must be set when a user is created. The id is composed by exchanging the base of source ADS identifier (full DN containing DCs and OUs) through the role_ts_account_base. The base of the ADS user is set as the concatenation of the Relative User Base (user_base_rel) settings and Domain. The associated user for a source entry is first searched using the mapped dxmADsGuid attribute value and then via the dxmADsSamAccountName attribute value. The attribute dxrState is mapped specially by a Java class. The resulting values are ENABLED, DISABLED or TBDEL. The states ENABLED and DISABLED are set according to the attribute flag userAccountControl, which controls the account state in ADS. The TBDEL state is set when the source entry in ADS no longer exists. When a change of the dxrState attribute is detected, an appropriate date attribute of the user entry is set with the current date and time. The dxrStartDate attribute is set for newly imported user objects (ENABLED). Deleted entries (TBDEL) have the attribute dxrEndDate set. The change of state ENABLED to DISABLED (DISABLED to ENABLED resp.) is tracked in the attribute dxrDisableStartDate (dxrDisableEndDate resp.). The Import Users from Database workflow imports users and their role assignments from a relational database into a DirX identity domain. It uses the Identity domain connector to access the DirX Identity domain and the JDBC connector to access the relational database. The connected directory UserDB represents the relational database containing the users and their role assignments and the connected directory Identity Store represents the Identity domain. The Full-Import controller is configured as the join engine. The controller exports all users from the database table, adds the assignments from the role assignment table and then imports them into the DirX Identity domain user tree. The Identity domain connector resolves and stores the users along with changed accounts and groups. If a privilege requires approval, the connector starts a request workflow. The sample workflow configuration expects a Microsoft Access database new-hr. It uses the open source JDBC Java driver UCanAccess; the jar file ucanaccess.jar with this driver is deployed with the IdS-J Server in its subfolder confdb/jobs/framework/lib/. The relational database must contain two tables: the EMPL table with a list of users and the EmplRoles table with a list of user-role assignments. They reference the user with their PersonalNr and the role with their roleID. The Import Users from Database workflow configuration conforms to the standard real-time workflow structure: it is composed of a join activity and an error activity. The following figure illustrates this configuration: Figure 48. Relational Database User Import Workflow As shown in the figure, the JDBC connector accesses the relational database, while the Identity domain connector accesses the Identity domain. The JDBC connector configuration obtains its properties from the referenced bind profile (user, password) and the JDBC connected directory’s driverDBType, type and url attributes. In the sample, driverDBtype is the JDBC-ODBC driver (class name: siemens.dxm.connector.jdbc.AccessOverJdbcOdbcDriver) and type is the class name of the driver (net.ucanaccess.jdbc.UcanaccessDriver). The TS port represents the relational database accessed by the JDBC connector. You need to configure a real-time filter for the TS port that adds the user-role assignments from the EmplRoles table as an attribute to the user. The sample configuration uses the filter class net.atos.dirx.dxi.connector.svclayer.workflow.JdbcRoleAsgFilter, which evaluates the following configuration options: assignmentTable - the filter needs to know the name of the table that contains the user-role assignments. As it sees all requests and responses between the join engine and the JDBC connector, it also receives the requests to the users table and must leave them untouched. roleAsgAttribute - the attribute under which the role assignments should be returned to the join engine. If the option is empty, the filter uses the rolesassigned attribute. userIdColumn - the column name of the user-role table that holds the ID of the user. The filter expects the search result to be ordered by this column. All consecutive records with the same user ID are considered to belong to the same user and added as multiple values (one record = one assignment = one value) to the role assignment attribute of the user. roleIdColumn - the column name of the user-role table that holds the identifier of the role. paramIDColumn - the column name of the user-role table that holds the identifier of the role parameter. paramValueColumn - the column name of the user-role table that holds the value of the role parameter. The filter only intersects search requests for the assignment table. It collects all search result entries for the same user and adds them as a multi-value attribute to the first entry for this user. The join engine then adds this attribute to the user attributes list it has obtained by reading from the user’s table. Note that the column names that contain the end date of an assignment, the role parameter UID and the role parameter value are hard-coded in the filter. For a custom workflow, the filter needs to be changed and adapted. The sample filter implementation can be used as a template for custom filters. See the source code in the folder Additions/ServiceLayerConnector and the Javadoc in the folder Documentation/DirX identity/ServiceLayerConnector of the product media. The following figure illustrates the workflow’s ports and their channels: Figure 49. Relational Database User Import Workflow Ports and Channels As shown in the figure, the TS port represents the access to the relational database, while the Identity Store port represents the access to the DirX Identity domain. You need to configure two channels for the relational database: User - the primary channel for reading the user attributes. user-roles - the secondary channel that represents the table holding the user-role assignments. Here is a snippet of the EMPL table with the user attributes, including the PersonalNr column, which uniquely identifies the user in this table: Figure 50. Relational Database User Import Workflow EMPL Table Here is a snippet of the EmplRoles table showing its columns: Figure 51. Relational Database User Import Workflow EmplRoles Table Especially the PersonalNr column, which contains the ID of the user and acts as a type of foreign key into the EMPL table in the database. You need to configure three channels for the Identity domain: User - the primary channel that represents the users in the domain. user-roles - the secondary channel that represents the user-role assignments. setPassword - the password channel that defines the password-related attributes. This port is only used for searching, so there is nothing to be configured for the import. The Export tab needs to contain the table name in DN format; in the sample, it is Table=EMPL. The mapping lists all the columns of the table that are to be synchronized to the Identity domain. Note that the identifier is in DN format and should be populated with the EmployeeID, which is considered to be unique. This secondary channel needs to refer to the primary channel User in its Primary Channel tab. For joining an assignment record to the user record, you need to select the user ID column in the assignment table (in the sample, EmplRoles.PersonalNr) and in the users table (in the sample, PersonalNr). The Export tab needs to contain the table name in DN format; in the sample, it’s Table=EMPL. The mapping lists the columns to be exported. As the workflow only reads from the database, you don’t need to configure a mapping. In the Export tab, make sure to sort the entries according to the same attribute as in the database; in the sample, it is the employeeNr, because the personalNr in the database is mapped to it. In the Export tab, configure the parent folder of the users to be exported and imported as the search base. It is taken from the environment variable role_ts_account_base. This variable is set in the connected TS directory (that is, the user database). For simplicity, the folder cn=system under the users folder is selected for the sample because it exists by default and it is empty. The joining of a database user to the user in LDAP is also performed using the unique employeeNr (Join tab). The user-privilege assignments are configured in the separate channel user-roles. As a result, you need to add a reference to this channel to the Member Channel field in the General tab. The user-roles channel represents the privilege assignments of the user. As the sample covers only role assignments, you only need to configure the rolesassigned attribute in the mapping section. You need to configure the attributes permissionsassigned and groupsassigned for permissions and groups. You also need to implement and configure a mapping function for these attributes; in the sample, it is net.atos.dirx.dxi.connector.svclayer.workflow.MapRolesAssigned. This function expects the assignments in the attribute rolesassigned of the source entry in structured JSON format; for details, see the chapter on the Identity Domain Connector in the DirX Identity Connectivity Reference. The mapping replaces the ID of the role that is known in the database with the DN of the role in LDAP. For this purpose, it retrieves a reference to the connector from the environment and requests it to search the role by its role ID. You can use the sample mapping function implementation as a template for custom mappings. See the source code in the folder Additions/ServiceLayerConnector and the Javadoc in the folder Documentation/DirX identity/ServiceLayerConnector of the product media. The setPassword channel represents the password-related attributes of the user. This is expressed by setting a reference to the Password Primary Channel field (in the sample, User) in the General tab. By default, the connector does not store the password itself. Instead, it sends it encrypted within a password change event to the workflow UserPasswordEventManager. This workflow changes the password at the user and initiates an update in corresponding accounts. You don’t need to configure other password-related attributes such as dxrPwdReset explicitly. They are handled automatically by the password change workflows. If you want the connector to store the password as is directly in LDAP and not send a password change event, you must set the configuration attribute suppressPwdEvent to true. You can do this in the port IdentityDomain under the join activity of the workflow and select the tab Target System. The sample workflow imports users and their role assignments. If you want to import users but not their assignments, you can re-use the workflow configuration by making the following changes to it: Delete the channels for the assignments: navigate to the user-roles channel of the connected TS directory (in the sample, this is UserDB), select Go to DataView and then delete the LDAP channel entry in the Data View. Now perform the same actions on the corresponding user-roles channel under the Identity Store connected directory. To find its parent channel, select the IdentityDomain port under the workflow join activity and then navigate to the channel parent. Delete the references from the User channels: under both connected directories, select the User channel. In the General tab, clear the Member Channel field. Delete the role-assignment filter in the TS port: navigate to the join activity in the workflow and then to its TS port. Select the child role-assignment filter. From the context menu, select Go to DataView and then delete the LDAP filter entry in the Data View. Select the workflow wizard wf-UserImportFromDB: In the Wizard field of the workflow entry, select the other wizard from the folder Configuration → Connector Types → SvcLayerConnector → Wizards. The workflow Import Roles from database imports roles from a JDBC database using DirX Identity Provisioning Web Services. The following figure illustrates this workflow. Figure 52. Role Import Workflow The role import workflow is based on Java real-time technology, with the JDBC connector accessing the database and the SPMLV1ToV2 connector accessing DirX Identity domain. The Full-Import controller is configured as the join engine. Full-Import is a one-way controller that exports all roles from the source system and then imports them into the target system; in this case, the Identity domain. This workflow can also be used as a template for normal provisioning workflows to SPMLv2 target systems by setting the SPMLV1ToV2 connector for the target system port, the LDAP connector for the Identity port and the synchronization or validation controller as the join engine. The connected directory RoleDB represents the database containing the roles and the connected directory SPMLv2WebServices represents the Identity domain accessed via the Provisioning Services. The workflow needs only one channel for roles and a minimal set of attributes to be synchronized. The next sections describe Workflow prerequisites How to configure the workflow The workflow and its activities Ports Channels The workflow configuration expects a Microsoft Access database registered as new-hr using the URL \"jdbc:odbc:new-hr\" (see connected directory, tab Configuration). At the Identity side, the Identity Web Services must be deployed. Configure its port at the service associated with the connected directory and then configure the server name at the server object associated with the service. The URL path ProvisioningService/services/Spmlv2RequestService reflects the default path of the Web Services' Provisioning Services deployed with the IdS-J server. The default Connectivity scenario’s Import Role From Database workflow synchronizes role entries from a relational database table to the role catalog in the Identity Store. To run the Import Role From Database workflow successfully, you must perform these steps: Configure the JDBC source. Configure the Role Import workflow. Deploy the Identity Web Services. The example database used for this scenario is delivered with DirX Identity and has the pathname install_path*/data/extension/new-hr.mdb*. It is protected with the password dirx to show the JDBC connector’s password feature. Copy this database to C:/MetahubData (or another location, if you prefer). It is a good idea to make a copy of the new-hr.mdb database, so that you can restore the original later on if the working copy becomes corrupted. Define this HR database to be an ODBC database: On Windows 32bit: Go to Start → Settings → Control Panel and then double-click Administrative Tools Click on Data Sources (ODBC). On Windows 64bit: Run C:/windows/sysWOW64/odbcad32.exe. If you installed DirX Identity with the system account, select the System DSN tab and then click Add…​ or use the User DSN tab. Select Driver to Microsoft Access (*.mdb) and then click Finish. Enter new-hr into the field Data Source Name. Click Select…​. Navigate to the location where you have copied new-hr.mdb, select it and then click OK. A new ODBC source is created. Click OK again. In the activity, select the Full-Import controller, which imports all source entries into the Identity Store and also discovers deleted source entries. In the Identity domain port, specify the following options: URL path: the path of the URL that denotes the Provisioning Web Service. Normally this is: ProvisioningService/services/Spmlv2RequestService. Specify roles as the SPMLv2 PSO Target ID. The reference attributes are dxrPermissionLink and dxrRoleLink. For the reference handler class, specify the default com.siemens.dxm.connector.spmlv1tov2.handler.SimpleReferenceHandler or leave it empty. Only one channel is used per connected directory. The default mapping considers only very few attributes for importing a role into the Identity domain: The identifier is concatenated from the role root entry, configured as role_ts_account_base in the connected directory and the attribute \"name\" of the source entry. The primary key of the source (\"pk\") is mapped to \"dxrRoleId\" and is therefore also used as one of the join conditions. See the chapter \"Web Services → Runtime Operation\" in the DirX Identity Integration Framework Guide for information on how to deploy the Identity Web Services. You can deploy them to the built-in Tomcat in the IdS-J server or set up an additional Tomcat instance for the deployment. The workflow Import Roles from database is a real-time workflow with two activities: Join activity - implements the role import Error activity - receives update requests that failed despite retries and issues notifications The join activity is controlled by the Full-Import controller. It exports entries via the connector configured in the TS port and performs updates via the connector configured in the IdentityDomain port, as illustrated in the following figure: Figure 53. Role Import Workflow Ports and Channels The workflow is not intended to be started on events, since we do not expect change events from the database. There are no global user hooks and no filters necessary. The role import workflow supports the following ports: TS port - represents the database that contains the roles. The JDBC connector is used to access the database. IdentityDomain port - represents the DirX Identity domain and is accessed via the SPMLV1ToV2 connector. The SPMLv2 target identifier roles tell the SPMLv2 Web service to manage role objects. For roles, the references dxrRoleLink and dxrPermissionLink are supported. These items are simple references without attributes, so the simple reference handler is sufficient for the corresponding protocol elements. This workflow does not support any other SPMLv2 capabilities and it does not support passwords. The workflow needs only one channel per port. It represents the roles. Direction: Identity Store → Database This channel is only used for exporting roles from the database. The roles are expected to be stored in the table roles. No filter is required. The column pk contains the primary key of a role and is expected to be created by the database on creation. Therefore this attribute must not be updated and the SPML identifier need not be set when a role is created. In addition, the table contains the columns name and description. Although mapping is not needed, it is configured. It is very simple with only one-to-one mappings. Especially the SPML identifier (table name + primary key) is expected in the attribute dxrRoleID in the corresponding Identity channel. There are two join conditions: The first join condition expects an existing primary key and uses the SPML identifier as its search base. The second join condition tries to join using the mapped value of the name column, assuming that the name is unique in the table. Direction: Database → Identity Store This channel is used for importing roles into an Identity domain. Since only simple references are used, no user hook is necessary. Export: For exporting, the search base is taken from the environment property role_ts_account_base (in the connected directory Provisioning tab). The filter is needed to only export roles and no containers. Since the Web Services by default work with paged read, the appropriate flag is set to active (but can be omitted, since this is not configurable in the connector). Mapping: The SPML identifier must be set when a role is created. It is calculated using the name attribute of the source entry and the role_ts_account_base as the parent folder. This name attribute is also stored in the attribute dxrReference, the primary key is stored in dxrRoleId. The following figure illustrates the channel mapping. Figure 54. Role Import Workflow Channel Mapping Join: The associated role for a source entry is first searched using the mapped SPML identifier and then via the primary key stored in dxrRoleID. The LDIF user import workflow operates between the Users folder in the Identity Store and an LDIF content file as a connected system that contains user entries. The workflow is based on Java real-time technology, with the LDIF connector accessing an LDIF file and the LDAP connector accessing a DirX Identity domain. The SyncOneWay2Identity controller is configured as the join engine. The controller exports all users from the source file system and then imports them into the Identity domain user tree. It works in \"merge\" mode, which means that it doesn’t delete users in the Identity Store that do not exist in the source file. If \"Replace\" mode is desired, you can easily switch to the Full-Import controller in the Controller tab of the workflow’s Join activity. This workflow can also be used as a template for other Java-based source workflows for user objects. Other user data sources instead of LDIF content file may be connected. The connected directory LDIFfile represents the connected file system containing the users and the connected directory Identity Store represents the Identity domain. The next sections describe Workflow prerequisites How to configure the workflow The workflow and its activities Ports Channels The workflow needs only one channel for users and a set of attributes to be imported. The delivered workflow is: Import Users from LDIF - exports all users from the LDIF file found under the specified search base and filter and then imports them into the Identity Store. After performing the following steps, you can run the workflow without changing any configuration parameters: Copy it with the Global View from the default scenario to your domain. Copy the sample source data file install_path/*data/data.ldif* to C:/MetahubData. Start the LDIF User Import workflow configuration wizard from the Global View domain-specific Source Realtime Scenario by right-clicking on the workflow line between the LDIFfile and the Identity Store or from the Expert View by right-clicking on the workflow under your domain and then selecting the configuration wizard. By stepping through the wizard, you can activate or deactivate auditing, choose another controller for the join engine, change the export search conditions, adapt the mapping or change the target join criteria. The workflow Import Users from LDIF is a Java-based source workflow with two activities: Join activity - implements the user import. Error activity - receives update requests that failed despite retries and issues notifications. The join activity is controlled by default by the SyncOneWay2Identity controller. It exports LDIF file user entries via the LDIF connector configured in the TS port and then performs updates via the LDAP connector configured in the IdentityDomain port, as illustrated in the following figure: Figure 55. LDIF User Import Workflow Ports and Channels You can start the workflow either manually or via a schedule. There are no global user hooks and no filters necessary. The workflow supports the following ports: TS port - represents the LDIF file that contains the users (accounts). The LDIF connector is used to access the LDIF file. IdentityDomain port - represents the DirX Identity domain and is accessed via the LDAP connector. Event - used for sending change events. Notify - used for sending e-mails. The workflow needs only one channel per port. It represents the user objects. This port represents the connection to LDIF. This workflow uses it for exporting users and attributes from the LDIF file. Export: Searchbase: CN=Users,CN=My-Company. Filter: &(objectClass=inetOrgPerson)(employeeNumber=*)(ou=Procurement). Searching only users from the organizational unit Procurement is just a sample configuration and can be changed to search and import all users from the delivered sample source file data.ldif. Mapping: Mainly used by the LDIF User Export workflow, which performs the configured mapping from Identity to the configured LDIF data export file. This workflow only reads the selected attributes from the import data file as the source for the mapping to Identity. Join: Only used by the LDIF User Export workflow. Specific Attributes: export_file = C:/MetahubData/data_out.ldif Only used by the LDIF User Export workflow as the data output file. Import_file = C:/MetahubData/data.ldif Used by this workflow as the data input file. Used by an LDIF Change (not Content) User Export workflow as the source connected system user data base for search operations of the join engine to calculate add, modify and delete requests as usual depending on those search results representing the existing user data. This port represents the connection to the Identity Store. This workflow uses it for importing users into an Identity domain. Export: This workflow uses the export settings for joining entries. The search base is composed of the environment property role_user_base (in the connected directory Provisioning tab) and the preceding subfolder “OU=Procurement,O=My-Company” resulting in the complete search base “OU=Procurement,O=My-Company,CN=Users,CN=My-Company”. As mentioned above, reducing the search on the organizational unit Procurement is just a sample and can be changed to search all users in the domain. It should correspond to the search base defined in the Export tab of the Users Channel at TS port. The filter is needed to only export users from an Identity domain. Mapping: The SPML identifier must be set when a user is created. The id is mapped in a java source mapping, which just takes the id of the source entry and assigns it to the target id. The attribute dxrState is set to “NEW” in case an entry is created, otherwise it is not changed (flag onAddOnly=true). Join: The associated user for a source entry is searched using the mapped employeeNumber attribute. The LDIF user export workflow operates between the Users folder in the Identity Store and an LDIF content file as the connected system that contains user entries. The workflow is based on Java real-time technology, with the LDIF connector accessing an LDIF file and the LDAP connector accessing a DirX Identity domain. The SyncOneWay2TS controller is configured as the join engine. The controller exports all users from the Identity domain user tree and then imports them into the connected file system. The connected directory LDIFfile represents the connected file system containing the users and the connected directory Identity Store represents the Identity domain. The next sections describe Workflow prerequisites How to configure the workflow The workflow and its activities Ports Channels The workflow needs only one channel for users and a set of attributes to be exported. The delivered workflow is: Export Users to LDIF - exports all users from the Identity Store found under the specified search base and filter and then writes them into the LDIF content file. After performing the following steps, you can run the workflow without changing any configuration parameters: Copy it with the Global View from the default scenario to your domain. Start the LDIF User Export workflow configuration wizard from the Global View domain-specific Source Realtime Scenario by right-clicking on the workflow line between the LDIFfile and the Identity Store or from the Expert View by right-clicking on the workflow under your domain and then selecting the configuration wizard. By stepping through the wizard, you can activate or deactivate auditing, change the export search conditions, adapt the mapping or change the target join criteria. The workflow Export Users to LDIF is a Java-based workflow with two activities: Join activity - implements the user export. Error activity - receives update requests that failed despite retries and issues notifications. The join activity is controlled by the SyncOneWay2TS controller. It exports Identity Store user entries via the LDAP connector configured in the IdentityDomain port and then performs updates via the LDIF connector configured in the TS port, as illustrated in the following figure: Figure 56. LDIF User Export Workflows Ports and Channels You can start the workflow either manually or via a schedule. There are no global user hooks and no filters necessary. The workflow supports the following ports: IdentityDomain port - represents the DirX Identity domain and is accessed via the LDAP connector. TS port - represents the LDIF file that contains the users (accounts). The LDIF connector is used to access the LDIF file. Event - used for sending change events. Notify - used for sending e-mails. The workflow needs only one channel per port. It represents the user objects. This port represents the connection to the Identity Store. This workflow uses it for exporting users from the Identity domain. Export: This workflow uses the export settings for searching the entries to be exported. The search base is composed of the environment property role_user_base (in the connected directory Provisioning tab) and the preceding subfolder “OU=Procurement,O=My-Company” resulting in the complete search base “OU=Procurement,O=My-Company,CN=Users,CN=My-Company”. Reducing the search on the organizational unit Procurement is just a sample and can of course be extended to search all users in the domain. It should correspond to the search base defined in the Export tab of the Users Channel at TS port. The filter is needed to only export users from an Identity domain. Mapping: Mainly used by the LDIF User Import workflow, which performs the configured mapping from the LDIF data import file to Identity. This workflow only reads the selected attributes from Identity as the source for the mapping to the LDIF content data export file. Join: Only used by the LDIF User Import workflow. This port represents the connection to LDIF. This workflow uses it for exporting users and attributes from the LDIF file. Export: Searchbase: CN=Users,CN=My-Company. Filter: &(objectClass=inetOrgPerson)(employeeNumber=*)(ou=Procurement). Searching only users from the organizational unit Procurement is just a sample configuration and can be changed to search and import all users from the delivered sample source file data.ldif. Mapping: The SPML identifier must be set when a user is created. The id is mapped in a simple expression mapping from the source id, $\\{source.id}, to the target id. Join: The associated user for a source entry is searched using the mapped target id as first join criteria and then the source employeeNumber attribute as second join criteria. Specific Attributes: export_file = C:/MetahubData/data_out.ldif Used by this workflow as the data output file. Import_file = C:/MetahubData/data.ldif Only used by the LDIF User Import workflow as the data input file. DirX Identity delivers Export and Import CSV workflows. This section describes the workflows features that are common to both types of workflow. Rows of a CSV file do not usually have an identifier. The Specific Attribute namingAttr describes which column is used as the identifier. This column should contain a distinguished name. For searches, this column is evaluated for the base object and scope part of the search. The columns and their order are defined by the mapping.Technical attribute. The columns are defined by the dxmselectedAttributes LDAP attribute. You can also define which separator should be used in the CSV file and whether or not the CSV file should include a header line. The CSV user import workflow operates between the Users folder in the Identity Store and a CSV file as the connected system that contains user entries. The workflow is based on Java real-time technology, with the CSV connector accessing a CSV file and the LDAP connector accessing a DirX Identity domain. The SyncOneWay2Identity controller is configured as the join engine. The controller exports all users from the source file system and then imports them into the Identity domain user tree. It works in \"Merge\" mode, which means that it doesn’t delete users in the Identity Store that do not exist in the source file. If you want to run in \"Replace\" mode, you can switch to the Full-Import controller in the Controller tab of the workflow’s Join activity. The connected directory CSV file represents the connected file system containing the users and the connected directory Identity Store represents the Identity domain. The next sections describe Workflow prerequisites How to configure the workflow The workflow and its activities Ports Channels The workflow needs only one channel for users and a set of attributes to be imported. The delivered workflow is: Import Users from CSV - exports all users from the CSV file found under the specified search base and filter and then imports them into the Identity Store. After performing the following steps, you can run the workflow without changing any configuration parameters: Copy it with the Global View from the default scenario to your domain. Copy the sample source data file install_path/*data/datatest.csv* to C:/MetahubData. Start the CSV User Import workflow configuration wizard from the Global View domain-specific Source Realtime Scenario by right-clicking on the workflow line between the CSVFile and the Identity Store or from the Expert View by right-clicking on the workflow under your domain and then selecting the configuration wizard. By stepping through the wizard, you can activate or deactivate auditing, choose another controller for the join engine, change the export search conditions, adapt the mapping or change the target join criteria. The workflow Import Users from CSV is a Java-based source workflow with two activities: Join activity - implements the user import. Error activity - receives update requests that failed despite retries and issues notifications. The join activity is controlled by default by the SyncOneWay2Identity controller. It exports CSV file user entries via the CSV connector configured in the TS port and then performs updates via the LDAP connector configured in the IdentityDomain port, as illustrated in the following figure: Figure 57. CSV User Import Workflow Ports and Channels You can start the workflow either manually or via a schedule. There are no global user hooks and no filters necessary. The workflow supports the following ports: TS port - represents the CSV file that contains the users (accounts). The CSV connector is used to access the CSV file. IdentityDomain port - represents the DirX Identity domain and is accessed via the LDAP connector. Event - used for sending change events. Notify - used for sending e-mails. The workflow needs only one channel per port. It represents the user objects. 1. Users Channel at TS Port This port represents the connection to CSV. This workflow uses it for exporting users and attributes from the CSV file. Export: Searchbase: CN=Users,CN=My-Company. Filter: &(employeeNumber=*)(ou=Procurement). Searching only users from the organizational unit Procurement is just a sample configuration and can of course be changed to search and import all users from the delivered sample source file datatest.csv. Mapping: Mainly used by the CSV User Export workflow, which performs the configured mapping from Identity to the configured CSV data export file. This workflow only reads the selected attributes from the import data file as the source for the mapping to Identity. Mapping includes all columns of the CSV file. The order in the mapping (technical the dxmSelectedAttributes) represents the order in the CSV file. The column specified by namingAttribute defines the identifier. Here a column dn is specified which contains a distinguished name. The value of this column is returned as SPML Id for the row. Join: Only used by the CSV User Export workflow. Specific Attributes: export_file = C:/MetahubData/datatest_out.csv Only used by the CSV User Export workflow as the data output file. Import_file = C/MetahubData/datatest.csv Used by this workflow as the data input file. Naming_attr = dn The column containing the identifier. The has_header attribute is not specified; that is, there is no header line in the CSV file. Define true if the CSV file contains a header line The separator attribute is not specified; that is, the comma is the separator. Define | if the CSV file uses the pipe symbol as a separator Comment: Not specified. When reading, no comment lines are skipped. If specified (for example, #”) every line containing this value is treated as a comment and is skipped during read. Sometines comments are used even though the CSV specification does not support comment lines. 2. Users Channel at Identity Port This port represents the connection to the Identity Store. This workflow uses it for importing users into an Identity domain. Export: This workflow uses the export settings for joining entries. The search base is composed of the environment property role_user_base (in the connected directory Provisioning tab) and the preceding subfolder \"OU=Procurement,O=My-Company\" resulting in the complete search base \"OU=Procurement,O=My-Company,CN=Users,CN=My-Company\". As mentioned above reducing the search on the organizational unit Procurement is just a sample and can of course be extended to search all users in the domain. It should correspond to the search base defined in the Export tab of the Users Channel at TS port. The filter is needed to only export users from an Identity domain. Mapping: The SPML identifier must be set when a user is created. The id is mapped in a Java source mapping, which just takes the id of the source entry and assigns it to the target id. The attribute dxrState is set to \"NEW\" when an entry is created; otherwise, it is not changed (flag onAddOnly=true). Join: The associated user for a source entry is searched using the mapped employeeNumber attribute. This section provides an example of how to customize the CSV User Import workflow to import users from CSV files that do not provide a DN column. In our example, we have a CSV file named Users.csv with user entries. We want to import these entries using the Java-based source workflows. In Users.csv: The first line is the header with the name of the fields. The separator is the semicolon (;). The second line is a user entry Here is an example: sn;givenName;cn;employeeNumber;employeeType;c;l;o;street;telephoneNumber;mail;ou;description;preferredLanguage;dxmOprMaster;dxrSalutation;postalCode;facsimileTelephoneNumber;dxrState Muster;Henry;Muster Henry;5208;Internal;DE;My-Company Munich;My-Company;Teller Str. 1113;+49 89 323-42111;;Sales;Manager of Sales department;de;HR;Hr.;80157;+49 89 323-58564;NEW To customize the workflow to import users from our example CSV file: Copy Users.csv to C:/MetahubData. In DirX Identity Manager, go to Connectivity → Global View → Scenarios → My-Company → Main. Right click and then select New Connected Directory. Right click the new directory and then select Configure. Select CSVfile and click Next. In Name, enter UserCSV and then click Next. Step through the next configuration dialogs without changing anything until you arrive at the Supply Operational Attributes dialog. Define the unique identifier field in your CSV file. In our example, it is employeeNumber. Click Next and then Finish. Right click and select New Workflow Line. Draw a line between UserCSV and IdentityStore. Select the line, right click and select New. Select Import Users from CSV and click Next. In Name, enter Import Users from UserCSV. Click Next to step through the remaining dialogs. Click Finish. In the Expert View, navigate to the Identity Store users channel as shown in the following figure: Select the Export tab. Delete the contents of Search Base and set Filter to none: Select the Mapping tab and then click Edit. Deselect ID mapping and delete the line with Mapping Source dummy. In the Specific Attributes tab, add the following values to the following fields: import_file - C:/MetahubData/Users.csv naming_attr - employeeNumber has_header - true separator - ; Click Save. Select the corresponding UsrCSV user channel as shown in the next figure: Select the Export tab and change Search Base to \"o=My-Company,\" + $\\{env.role_user_base}. In the Mapping tab, change the value in the first line of the Mapping Source column that corresponds to Identifier:DN to the following: \"cn=\" + ${source.givenName} + \" \" + ${source.sn} + \",\" + \"ou=\" + ${source.ou} + \",\" + ${env.user_base}\" In the Specific Attributes tab, add the following parameter and save: user_base : o=My-Company,cn=Users,cn=My-Company Go to the Import Users from UserCSV workflow as shown in the next figure. Click Edit and check Is Active. Right-click on Import Users from UserCSV and then select Load IDS-J Configuration from the context menu. Select Import Users from UserCSV and run the workflow. Check to see if the user was created. The CSV user export workflow operates between the Users folder in the Identity Store and a CSV file as the connected system that contains user entries. The workflow is based on Java real-time technology, with the CSV connector accessing a CSV file and the LDAP connector accessing a DirX Identity domain. The SyncOneWay2TS controller is configured as the join engine. The controller exports all users from the Identity domain user tree and then imports them into the connected file system. The connected directory CSVfile represents the connected file system containing the users and the connected directory Identity Store represents the Identity domain. The next sections describe Workflow prerequisites How to configure the workflow The workflow and its activities Ports Channels The workflow needs only one channel for users and a set of attributes to be exported. The delivered workflow is: Export Users to CSV - exports all users from the Identity Store found under the specified search base and filter and then writes them into the CSV file. After performing the following steps, you can run the workflow without changing any configuration parameters: Copy it with the Global View from the default scenario to your domain. Start the CSV User Export workflow configuration wizard from the Global View domain-specific Source Realtime Scenario by right-clicking on the workflow line between the CSVfile and the Identity Store or from the Expert View by right-clicking on the workflow under your domain and then selecting the configuration wizard. By stepping through the wizard, you can activate or deactivate auditing, change the export search conditions, adapt the mapping or change the target join criteria. The workflow Export Users to CSV is a Java-based workflow with two activities: Join activity - implements the user export. Error activity - receives update requests that failed despite retries and issues notifications. The join activity is controlled by the SyncOneWay2TS controller. It exports Identity Store user entries via the LDAP connector configured in the IdentityDomain port and performs updates via the CSV connector configured in the TS port as illustrated in the following figure: Figure 58. CSV User Export Workflows Ports and Channels You can start the workflow either manually or via a schedule. There are no global user hooks and no filters necessary. The workflow supports the following ports: IdentityDomain port - represents the DirX Identity domain and is accessed via the LDAP connector. TS port - represents the CSV file that contains the users (accounts). The CSV connector is used to access the CSV file. Event - used for sending change events. Notify - used for sending e-mails. The workflow needs only one channel per port. It represents the user objects. 1. Users Channel at Identity Port This port represents the connection to the Identity Store. This workflow uses it for exporting users from the Identity domain. Export: This workflow uses the export settings for searching the entries to be exported. The search base is composed of the environment property role_user_base (in the connected directory Provisioning tab) and the preceding subfolder \"OU=Procurement,O=My-Company\" resulting in the complete search base \"OU=Procurement,O=My-Company,CN=Users,CN=My-Company\". Reducing the search on the organizational unit Procurement is just a sample and can be changed to search all users in the domain. It should correspond to the search base defined in the Export tab of the Users Channel at TS port. The filter is needed only to export users from an Identity domain. Mapping: Mainly used by the CSV User Import workflow, which performs the configured mapping from the CSV data import file to Identity. This workflow only reads the selected attributes from Identity as the source for the mapping to the CSV data export file. Join: Only used by the CSV User Import workflow. 2. Users Channel at TS Port This port represents the connection to CSV. This workflow uses it for exporting users and attributes from the CSV file. Export: Searchbase: CN=Users,CN=My-Company. Filter: &(employeeNumber=*)(ou=Procurement). Searching only users from the organizational unit Procurement is just a sample configuration and can be changed to search and import all users from the delivered sample source file datatest.csv. Mapping: The SPML identifier must be set when a user is created. The id is mapped in a simple expression mapping from the source id, $\\{source.id}, to the target id. Join: The associated user for a source entry is searched using the mapped target id as first join criteria and then the source employeeNumber attribute as second join criteria. Specific Attributes: export_file = C:/MetahubData/datatest_out.csv Used as data output file by this workflow. Naming_attr = dn The column that contains the identifier. The generated identifier is written to this column The has_header attribute is not specified; that is, there is no header line in the CSV file. Define true if the CSV file contains a header line The separator attribute is not specified; that is, the comma is the separator. Define | if the CSV file uses the pipe symbol as the separator Import_file = C:/MetahubData/datatest.csv Only used by the CSV User Import workflow as the data input file. The Remote AD workflow is not a typical source workflow: it is a combination of workflows (AD export and LDIF import) with special data transfer (Web service). DirX Identity can be deployed as part of the Atos Cloud Service Identity Management as a Service (IDMaaS). Provisioning targets can be in the provider’s (Atos) cloud infrastructure, in a public cloud or on customer premises outside of any cloud. The Remote AD workflow is intended for use at customer sites outside of a cloud. The Remote AD connector must be able to work without online (LDAP) connection to the DirX Identity configuration database. On the customer side, a standard framework-based job implements the export to file function. The job obtains its configuration from XML files: one for the job and one for the search request with the filter conditions. An LDIF import workflow imports the file to DirX Directory. The following figure illustrates the Remote AD connector operation: Figure 59. Remote AD Connector Operation See the Remote AD Connector description in the DirX Identity Connectivity Reference for more details. DirX Identity delivers two workflows for importing users from an external LDAP to the Identity Store. They are: Full Import of external LDAP Users - the workflow is started from DirX Identity Manager (either manually or by a schedule) and performs either the initial load of users from an external LDAP directory or the complete re-synchronization of the external LDAP directory. In complete re-synchronization, users may be deleted or marked as to-be-deleted in the Identity Store. Import Users from external LDAP - The workflow is normally started by an event and imports a user (or updates a user or deletes a user or marks a user as to-be-deleted) depending on the incoming event and the existence of that user in the Identity Store. If the workflow is started by DirX Identity Manager manually or triggered by the scheduler, it performs a re-synchronization of the external LDAP users (without deleting users or marking users as deleted). The next sections describe the configuration of the two workflows and how to send events using metacp to trigger the synchronization of an external user. The Full Import of external LDAP Users workflow operates between the Users folder in the Identity Store and an external LDAP directory accessing organizational persons in that directory. The workflow is based on Java real-time technology, with two LDAP connectors accessing the external LDAP directory and the Identity Store. The FullImport controller is configured as the join engine. The controller exports all users from the external LDAP directory and then imports them into the user tree of the Identity Store. It performs the following operations: Adds a user if the entry does not exist in the Identity Store. Modifies a user if the user exists in the Identity Store but has different attribute values. Marks a user as to-be-deleted (dxrState=“TBDEL”) if the user is no longer available in the external LDAP directory (this is the default behavior of the workflow) Deletes a user if it is no longer available in the external LDAP directory. (This mode for external users that have been deleted requires changes to the workflow configuration; specifically, mapping of the dxrState attribute and post mapping) This workflow can also be used as a template for other Java-based source workflows for synchronization of objects other than users. The next sections describe Workflow prerequisites How to configure the workflow The workflow and its activities Ports Channels The workflow needs only one channel for users and a set of attributes to be imported. If you did not create a new Connected Directory when you configured the workflow, you need to create one as follows: Go to the Global View and configure a new Connected Directory by choosing the template UserLDAP from the default folder. In General Parameters, configure LDAP External Service by entering values for IP Address and Data Port. You can also set the SSL, Secure Port and Client Authentication fields if necessary. In Provisioning, define the search bases for searching the users: In Identity → Account Base, define the search bases for searching the users in the Identity Store. In Target System → UserBase, define the search bases for searching the users in the external LDAP directory. In Bind Profile, define the credentials of LDAPAdmin (the administrator of the external LDAP directory). Set at least User, Password, Authentication and Protocol. In Set Directory Name, set the name of the Connected Directory (if you have not yet already done so). Create a new workflow line between the Connected Directory and the Identity Store. Start the Full Import of external LDAP Users workflow configuration wizard: right-click on the workflow line (select New) and then select the Full Import of external LDAP Users template of the default folder. Alternatively you can select the workflow in the Expert View by right-clicking on the workflow under your domain and then selecting the configuration wizard. By stepping through the wizard, you can activate or deactivate auditing, choose another controller for the join engine (not recommended), change the export search conditions, adapt the mapping or change the target join criteria. Keep in mind that you don’t need to set Cluster and Domain in Is Applicable for when defining the General Info parameters. The Full Import of external LDAP Users workflow is a Java-based source workflow with two activities: Join activity - implements the user import. Error activity - receives update requests that failed despite retries and issues notifications. The join activity is controlled by default by the FullImport controller. It exports user entries of the external LDAP directory via the LDAP connector configured in the TS port and then performs updates via the LDAP connector configured in the IdentityDomain port, as illustrated in the following figure: Figure 60. External LDAP Users Full Import Workflow Ports and Channels You can start the workflow either manually or via a schedule. The workflow supports the following ports: TS port - represents the external LDAP directory that contains the users. The LDAP connector is used to access that LDAP directory. IdentityDomain port - represents the DirX Identity domain and is accessed via the LDAP connector. Event - used for sending change events. Notify - used for sending e-mails. The workflow needs only one channel per port. It represents the user objects. 1. Users Channel at TS Port This port represents the connection to the external LDAP directory. This workflow uses it for exporting users and attributes. Export: Searchbase: $\\{env.user_base} matches the definition in the new Connected Directory. Filter: (objectClass=organizationalPerson) Searching all organizational persons below the search base. Mapping: Mainly used by the workflow to perform the mapping to an entry in the Identity Store. The following attributes are defined here (with the ReadOnly flag): cn, description, employeeNumber, facsimileTelephoneNumber, gn, postalCode, postalAddress, sn, st, street, telephoneNumber, title and userCertificate;binary. Join: Not used by the workflow. 2. Users Channel at Identity Port This port represents the connection to the Identity Store. This workflow uses it for importing users into an Identity domain. Channel Userhook: The following user hook (as part of dxmJoin.jar) is used: net.atos.dxm.join.userhook.ldap.UserHookLdapUsers. The user hook has implemented two interfaces: preUpdate: If entries should be marked as deleted (state TBDEL) then additionally the attribute dxrDeleteDate is set. Therefore the domain value of Maximum time in days to delete an object needs to be evaluated first. postUpdate: After successful execution of the update operation in the Identity Store, the attribute businessCategory is set at the user object of the external LDAP directory. The value is updated at time stamp. That interface should be adapted according to your requirements. If you don’t need any information in the external LDAP directory about successful execution of the operation in Identity Store, then simply drop postUpdate. Export: Searchbase: ${env.role_ts_account_base} matches the definition in the new Connected Directory. Filter: ((objectClass=derUser)(!(objectClass=dxrPersona)) (!(objectClass=dxrPersona)) (!(objectClass=dxrFunctionalUser))(!(objectClass=dxrUserFacet)) The workflow searches all organizational persons below the search base. Consequently, you should carefully adapt your workflow to your requirements. If you import the users to an existing subtree, you should mark these users with an additional attribute and use that attribute in the filter. Otherwise the FullImport controller will delete users (or mark the users as deleted) that already exist in that subtree and which have not been imported from the external LDAP directory. Mapping: The SPML identifier is mapped by a simple expression as follows: ${joinedEntry.id} \"cn=\" + ${source.cn} + \",o=LDAP-External,cn=Users,cn=My-Company\" If the entry is already available, then the DN of the existing entry is used. If it is a new entry, then the second expression applies. The workflow uses several 1:1 mappings for the attributes cn, description, employeeNumber, facsimileTelephoneNumber, gn, postalCode, postalAddress, sn, st, street, telephoneNumber, title and userCertificate;binary. The dxrPrimaryKey attribute is set be the expression “$\\{source.id}. Note that dxrPrimaryKey is also used in the join conditions. The dxrState attribute is either set to NEW for new entries or TBDEL if the entry no longer exists in the external LDAP directory. For state TBDEL, the attribute dxrEndDate is set to now and the dxrDeleteDate is set according to the domain value of Maximum time in days to delete an object. If you want to delete the object directly, then you should adapt the mapping for “dxrState” and/or the post mapping (by changing the operation from MODIFY to DELETE). Join: The associated user for a source entry is searched, first with dxrPrimaryKey matching the dn of the external LDAP user and then if not found with the mapped cn attribute. The Import Users from external LDAP workflow operates between the Users folder in the Identity Store and an external LDAP directory accessing organizational persons in that directory. The workflow is based on Java real-time technology, with two LDAP connectors accessing the external LDAP directory and the Identity Store. The SyncOneWay2Identity controller is configured as the join engine. The controller exports all users from the external LDAP directory and then imports them into the user tree of the Identity Store if it is started manually in DirX Identity Manager or triggered by the scheduler. It processes just one user if the workflow is triggered by an event. The workflow performs the following operations: Adds a user if the entry does not exist in the Identity Store. Modifies a user if the user exists in the Identity Store but has different attribute values. Marks a user as to-be-deleted (dxrState=”TBDEL”) if the user is no longer available in the external LDAP directory (this is the default behavior of the workflow). Deletes a user if it is no longer available in the external LDAP directory. (This mode for external users that been deleted requires changes to the workflow configuration; specifically, mapping of the attribute dxrState and post mapping.) This workflow can also be used as a template for other Java-based source workflows for synchronization of objects other than users. The next sections describe Workflow prerequisites How to configure the workflow The workflow and its activities Ports Channels The workflow needs only one channel for users and a set of attributes to be imported. If you did not create a new Connected Directory when you configured the External LDAP User Full Import Workflow, you need to create one as follows: Go to the Global View and configure a new Connected Directory by choosing the template UserLDAP from the default folder. In General Parameters, configure LDAP External Service by entering values in IP Address and Data Port. You can also set SSL, Secure Port and Client Authentication if necessary. In Provisioning, define the search bases for searching the users: In Identity → Account Base, define the search bases for searching the users in the Identity Store. In Target System → UserBase, define the search bases for searching the users in the external LDAP directory. In Bind Profile, define the credentials of LDAPAdmin (the administrator of the external LDAP directory). Set at least User, Password, Authentication and Protocol. In Set Directory Name, set the name of the Connected Directory (if you have not yet already done so). Create a new workflow line between the Connected Directory and the Identity Store. Start the Import Users from external LDAP workflow configuration wizard: right-click on the workflow line (select New) and then select the Import Users from external LDAP template of the default folder. Alternatively you can select the workflow in the Expert View by right-clicking on the workflow under your domain and then selecting the configuration wizard. By stepping through the wizard, you can activate or deactivate auditing, choose another controller for the join engine (not recommended), change the export search conditions, adapt the mapping or change the target join criteria. Keep in mind that you need to set Cluster and Domain in Is Applicable for when defining the General Info parameters. The workflow Import Users from external LDAP is a Java-based source workflow with two activities: Join activity - implements the user import. Error activity - receives update requests that failed despite retries and issues notifications. The join activity is controlled by default by the SyncOneWay2Identity controller. It exports user entries of the external LDAP directory via the LDAP connector configured in the TS port and then performs updates via the LDAP connector configured in the IdentityDomain port, as illustrated in the following figure: Figure 61. External LDAP User Import Workflow Ports and Channels You can start the workflow either manually or via a schedule or set it up to be triggered by an incoming event. The workflow supports the following ports: TS port - represents the external LDAP directory that contains the users. The LDAP connector is used to access that LDAP directory. IdentityDomain port - represents the DirX Identity domain and is accessed via the LDAP connector. Event - used for sending change events. Notify - used for sending e-mails. The workflow needs only one channel per port. It represents the user objects. 1. Users Channel at TS Port This port represents the connection to the external LDAP directory. This workflow uses it for exporting users and attributes. Export: Searchbase: ${env.user_base} matches the definition in the new Connected Directory. Filter: (objectClass=organizationalPerson) Searching all organizational persons below the search base. Mapping: Mainly used by the workflow to perform the mapping to an entry in the Identity Store. Consequently, the following attributes are defined here (with the ReadOnly flag): cn, description, employeeNumber, facsimileTelephoneNumber, gn, postalCode, postalAddress, sn, st, street, telephoneNumber, title and userCertificate;binary. Join: Not used by the workflow. 2. Users Channel at Identity Port This port represents the connection to the Identity Store. This workflow uses it for importing users into an Identity domain. Channel Userhook: The following user hook (as part of dxmJoin.jar is used: net.atos.dxm.join.userhook.ldap.UserHookLdapUsers. The user hook has implemented two interfaces: preUpdate If entries should be marked as deleted (state TBDEL) then additionally the attribute dxrDeleteDate is set. Therefore the domain value of Maximum time in days to delete an object needs to be evaluated first. postUpdate After successful execution of the update operation in the Identity Store, the attribute businessCategory is set at the user object of the external LDAP directory. The value is updated at time stamp. Adapt this interface according to your requirements or simply drop it if you don’t need any information in the external LDAP directory about successful execution of the operation in Identity Store. Export: Searchbase: ${env.role_ts_account_base} matches the definition in the new Connected Directory. Filter: objectClass=derUser)(!(objectClass=dxrPersona (!(objectClass=dxrPersona)) (!(objectClass=dxrFunctionalUser))(!(objectClass=dxrUserFacet)) The workflow searches all organizational persons below the search base. Therefore you should carefully adapt your workflow to your requirements. Mapping: The SPML identifier is mapped by a simple expression as follows: ${joinedEntry.id} \"cn=\" + $\\{source.cn} + \",o=LDAP-External,cn=Users,cn=My-Company\" If the entry is already available, the DN of the existing entry is used. If it is a new entry, the second expression applies. The workflow uses several 1:1 mappings for the attributes cn, description, employeeNumber, facsimileTelephoneNumber, gn, postalCode, postalAddress, sn, st, street, telephoneNumber, title and userCertificate;binary. The attribute dxrPrimaryKey is set be the expression “$\\{source.id}. Note that dxrPrimaryKey is also used in the join conditions. The attribute dxrState is either set to ENABLED for new entries or TBDEL if the entry no longer exists in the external LDAP directory. For state TBDEL, the attribute dxrEndDate is set to now and the dxrDeleteDate is set according to the domain value of Maximum time in days to delete an object. If you want to delete the object directly, then you should adapt the mapping for dxrState and/or the post mapping (by changing the operation from MODIFY to DELETE). Join: The associated user for a source entry is searched first with dxrPrimaryKey matching the DN of the external LDAP user and then if not found with the mapped cn attribute. This section describes how to use metacp to send events that trigger the synchronization of an external user. An event is an XML document compliant with the XML namespace \"urn:siemens:dxm:EVENT:1:0\". This namespace is proprietary and extends the standard namespace SPML v1 \"urn:oasis:names:tc:SPML:1:0\". There are three types of events according the change it wants to notify: entry was created (), changed () or deleted (). Each event extends the corresponding SPML request: , or . For details about SPML v1, see the standard specification; for example, https://www.oasis-open.org/committees/download.php/4137/os-pstc-spml-core-1.0.pdf. Each event document should contain the necessary XML namespaces at the beginning of the document in its first element. These are: xmlns:dsml=\"urn:oasis:names:tc:DSML:2:0:core\" xmlns:spml=\"urn:oasis:names:tc:SPML:1:0\" xmlns:event=\"urn:siemens:dxm:EVENT:1:0\" The remainder of this section assumes the namespace prefixes event, spml and dsml. Each SPML request and the corresponding events contain an element that represents the identifier of the changed entry in the source system. For an LDAP or Active Directory source - as expected in these workflows - it is of type DN. Here is a sample: cn=Abele,ou=Sales,o=My-Company Normal SPML add and modify requests need to contain the list of attributes or modifications. They are not needed here; the identifier is sufficient. The import workflow uses it to read the entry and all configured attributes from the source system. SPML requests and the events can contain a requestID parameter. It is not necessary and might occur in some debug logs. In addition to SPML requests, events contain a mandatory name attribute and an optional element. Both are used for identifying the appropriate workflow that is started to handle the event. The name attribute has the following structure: .dxm.request.importToIdentity..cluster=''.resource=''. Here is an example: my-company.dxm.request.importToIdentity.LDAP.cluster='External'.resource='External'. The part that follows the domain is the queue name to which to send the event and also characterizes the workflow type. Type, cluster and domain normally identify the target system and here identify the workflow. Think about importing users from different sources or importing users and roles. Make sure that these values match the corresponding ones in the Is applicable for section of the workflow definition. The element gives some information about the source of the event. It contains the application as a separate XML attribute as well as type, cluster and resource, which contain the same values as described for the name attribute. The application contains the name of the sending application. When sending the event with metacp, please use the name metacp. The following example shows an add event: cn=Abele,ou=Sales,o=My-Company For sending an event with metacp, you should prepare a template with the event analogous to the example shown in the previous section. Use placeholders for the event type and \"DN of changed entry\" variables. For a specific entry, replace the placeholders and send them with a Tcl script such as the following: set topic \"my-company.dxm.request.importToIdentity.LDAP.cluster='External'.resource='External'\" set event … ats init ats send -topic $topic -message \"$event\" ats term DirX Identity’s Tcl-based source scheduled workflows provided with the default Connectivity scenario include: Creation workflows - workflows that extract user information from existing identity sources (for example, an HR or CRM database) and populate the Identity Store with user information. Update workflows - workflows that transfer specific information from the Identity Store to the identity sources (for example, e-mail addresses or telephone numbers) to enable them to use the joined, high-quality information in the Identity Store. The creation workflows described here all work the same way. They: Extract identity information from the identity source. Merge the extracted information into the Identity Store (the merge mode of the meta controller is used). Use the employeeNumber as join criteria. Create a local GUID for each identity (into the attribute dxmGuid) that is composed of a fixed string and the employeeNumber. Mark all created and modified user entries in the Identity Store for privilege resolution (dxrTBA=TRUE). Set the start and end dates of the identities (setting the end date prepares an identity to be deleted). Set the dxmOprMaster attribute that indicates which identity source controls this identity. This avoids additionally that the same identity is controlled by several masters which would lead to oscillating identity information and to confusion. DirX Identity provides the following pre-configured creation and update workflows: LDIFfile2Ident - imports data from an LDIF content file to the Identity Store and creates or updates the corresponding identities (this file acts as identity master for all German persons from Munich). Ident2LDIFfile - exports all German persons from Munich from the Identity Store to an LDIF content file. Use this information to update the identity source (for example the e-mail addresses or telephone numbers). CSVfile2Ident - imports data from a CSV file to the Identity Store and creates or updates the corresponding identities (this file acts as identity master for all German persons from Berlin). dent2CSVfile - exports all German persons from Berlin from the Identity Store to a CSV file. Use this information to update the identity source (for example the e-mail addresses or telephone numbers). XMLfile2Ident - imports data from an XML file to the Identity Store and creates or updates the corresponding identities (this file acts as identity master for all German persons from Frankfurt). Please note that the DDN must be the first attribute in the Selected Attributes list for this workflow to function properly. Ident2XMLfile - exports all German persons from Frankfurt from the Identity Store to an XML file. Use this information to update the identity source (for example the e-mail addresses or telephone numbers). Please note that the DDN must be the first attribute in the Selected Attributes list for this workflow to function properly. Ident2XSLT - exports all German persons from Frankfurt from the Identity Store to an XML file. Use this information to update the identity source (for example the e-mail addresses or telephone numbers). In contrast to the Ident2XMLfile workflow, an additional XSLT conversion is possible. Please note that the DDN must be the first attribute in the Selected Attributes list for this workflow to function properly. DSMLfile2Ident - imports data from a DSML V1 file to the Identity Store and creates or updates the corresponding identities (this file acts as identity master for all German persons from Frankfurt). Please note that the DDN must be the first attribute in the Selected Attributes list for this workflow to function properly. Ident2DSMLfile - exports all German persons from Frankfurt from the Identity Store to a DSML file. Use this information to update the identity source (for example the e-mail addresses or telephone numbers). Please note too that the DDN must be the first attribute in the Selected Attributes list for this workflow to function properly. CorpDir2Ident - copies all entries that were imported by the LDIFfile2Ident workflow to the tree ou=newTree in the Identity Store. Note that this workflow can only run after a successful run of the LDIFfile2Ident workflow. DirXLDIF2Ident - imports entries in an LDIF content or change file generated by the DirX directory service into the Identity Store. SAP-R3-HR2Ident - imports data from an LDIF file that was generated by DirX Identity’s SAP HR agent to the Identity Store and creates or updates the corresponding identities (this file acts as identity master for all persons from Rome). SAP-R3-OM2Ident - imports organizational data from an LDIF file that was generated by DirX Identity’s SAP HR agent from the SAP OM subsystem to the identity store. It creates a structure of organizational units. LDIFfile2CSVfile - transfers information from an LDIF file to a CSV file. This is an example of a workflow that works without any intermediate Identity Store. The default Connectivity scenario’s CorpDir2Ident workflow synchronizes user entries from an LDAP-enabled corporate directory into the Identity Store. By default, the workflow processes only new and modified users. Users that have been physically deleted from the corporate directory are not recognized, but you can extend the workflow if the deleted users in the source directory are marked with a special attribute. The workflow consists of a metacp activity that exports users from the corporate directory and creates or modifies users in the Identity Store. The workflow performs delta synchronization based on modification time stamps. To run the CorpDir2Ident workflow successfully, you must perform these steps: Go to the connected directory icon CorpDir. In the wizard window, open the Service object and set the correct address and port information. Click the Bind Profiles step. Open the bind profile and set the correct user and password information. Click OK, and then click Finish. Now you must define an LDIF agreement before this workflow can run. See the section \"Configuring the DirXdelta Provisioning Workflow\" for details. The default Connectivity scenario’s DirXLDIF2Ident workflow synchronizes LDIF content and change files supplied by the DirX directory service into the Identity Store. The workflow processes new, deleted and modified users. The workflow consists of one metacp activity that processes all LDIF files supplied in a specific location and creates or modifies users in the Identity Store. All created and modified user entries in the Identity Store are marked for role resolution (dxrTBA=TRUE). The workflow performs delta synchronization based on LDIF change files. To run the DirXLDIF2Ident workflow successfully, you must perform these steps: Go to the connected directory icon DirXLDIF. In the wizard window, click LDIF Agreement Parameters. Change the LDIF Agreement Folder path to suit your DirX installation and the related LDIF agreement (normally the LDIF Agreement Folder should be dirx_install_path*/server/ldif*). Click OK, and then click Finish. Now you must define an LDIF agreement before this workflow can run. For details, see the section \"Configuring the DirXdelta Workflow\". The DirX Identity DirXdelta synchronization workflow DirXdelta2Ident handles synchronization between a DirX LDAP directory that creates LDIF change files based on an LDIF agreement and imports this information into an LDAP directory. Before you can run this workflow, you must set up a DirX LDIF agreement. The following sections describe the rules you need to follow for DirXdelta LDIF agreements and describes how to set up an agreement. The workflow checks the defined directory to which the LDIF change files are written and processes all files with the correct LDIF agreement identifier (by default, 88). In general, you must observe the following rules when creating an LDIF agreement suitable for the pre-configured DirXdelta workflow: The replication area (context prefix + subtree base) must match the workflow’s input base object. Job → Input Channel → Import/Export contains by default a setting \"base_obj ou=Sales, o=PQR\" which is suitable for the samples described in the previous section. Note: It is essential to decide whether or not to place a blank space after the comma in the setting. Place a blank if the LDIF content/change files are generated by the DirX Server (via LDIF agreements). Don’t place a blank if the LDIF change files are written by metacp. For example, you must change this setting to \"base_obj ou=Controlling, o=PQR\" if the related LDIF agreement is designed to process changes of subordinates of \"ou=Controlling, o=PQR\" If your LDIF agreement is configured for both full and incremental refresh, the LDIF policy of this agreement must be \"Save user attributes plus Creation-Time and Modification-Time only\". The LDIF agreement must be specified so that the LDIF files are generated in Latin-1 (ISO 8859-1) format. The workflow is designed to synchronize persons only. Where necessary, intermediate nodes like organizational units are created with dummy attribute values according to the workflow’s superior_info setting. As a result, the LDIF agreement should be defined with a refinement filter to an object class representing a person (as in the sample script create-iper.adm - see the next section \"Setting Up the LDIF Agreement\"). This action prevents confusing “naming violation” error messages during the creation of intermediate nodes. If you intend to synchronize objects other than persons, you must change the mapping so that it is consistent for all objects (for example, one-to-one mapping using lStringEscapeLDIF for all attributes to be synchronized). You can create LDIF agreements with dirxadm scripts or with DirXmanage. For details, see the DirX documentation. The default DirXdelta2Ident workflow requires an LDIF agreement that matches the workflow’s default settings. Our sample agreement writes an LDIF file every hour and has the agreement ID 88. See the section \"DirXdelta LDIF Agreement Rules\" for information about how to set up LDIF agreements correctly. Note: Be sure that the directory to which the DirX server writes the LDIF change files grants read and write access to the DirXdelta workflow (metacp). To create the sample agreement with DirXmanage: Start DirXmanage Open Policies → Shadow Operational Bindings Perform Local Operations → Add → Primary → LDIF agreement Input Data: General: Shadowing Status=Activated, Identifier=88 Shadowing Agreement: Context prefix=/o=pqr Update mode: Window time …​ = 10 sec Update interval …​ = 3600 sec Replication Area: Subtree base=/ou=mthb/ou=Sales Refinement=Internet-Organizational-Person LDIF policy: Click Save user attributes plus Creation-Time and Modification-Time only. Click OK The LDIF agreement is now active and running. You can start the workflow to process the initial LDIF content file. To edit the agreement again: Start DirXmanage Click Policies → Shadow Operational Bindings Click the line with the agreement number 88 Click Local Operations → Terminate Now you can edit the agreement. The following sample scripts illustrate how to create, activate, deactivate and delete the sample agreement: agrenv.tcl - contains the central definition of the agreement identifier (in DirX terminology, this is an operational binding identifier) create.adm - creates the agreement. create-iper.adm - similar to create.adm with the scope of the agreement limited to objects of class inetOrgPerson establish.adm - activates the agreement show.adm - displays the agreement terminate.adm - script for deactivating the agreement delete.adm - script for deleting the agreement Assumptions: Administrator cn=admin,o=pqr with Password dirx Instructions for use: Copy the scripts from the folder install_path*/data/ldifagr/dirx* or install_path*/data/ldifagr/dirx-ee* into a folder of your choice. Open an MS/DOS Command Prompt window or a UNIX shell and navigate to the script folder. Change agreement identifier in agrenv.tcl if necessary. If you change the identifier, don’t forget to update the agreement number in the workflow definition. Create the agreement: dirxadm create-iper.adm (or dirxadm create.adm) -→ An agreement will be created that writes an LDIF change file every hour Activate the agreement: dirxadm establish.adm Display the agreement: dirxadm show.adm Deactivate the agreement: dirxadm terminate.adm Delete the agreement: dirxadm delete.adm The default Connectivity scenario provides a set of creation and update workflows that allow for connectivity to various systems that support data exchange via LDIF, CSV or XML/DSML V1 file formats. Other structured file formats are possible but are not pre-configured. Before you can run these workflows successfully, you need to copy some sample data files to a default location: Open the file directory data in the DirX Identity installation path. Copy the files data.ldif, sapr3_full.ldif, sapr3_om.ldif, data.csv, dsml_data.xml, xml_data.xml to the location C:/ MetahubData. The following file-based source workflows are available and can run without any further configuration steps: LDIFfile2Ident Ident2LDIFfile CSVfile2Ident Ident2CSVfile XMLfile2Ident Ident2XMLfile Ident2XSLT DSMLfile2Ident Ident2DSMLfile SAP-R3-HR2Ident SAP-R3-OM2Ident LDIFfile2CSVfile The relational database workflows provided with the default Connectivity scenario can synchronize user entries from a relational database that is either accessible via ODBC or JDBC into the Identity Store. By default, the workflows process only new and modified users. Users that have been physically deleted from the relational database are not recognized, but you can extend the workflows if the deleted users in the source directory are marked with a special attribute. The import workflows consist of a JDBC or ODBC agent activity that exports the information from the source and a metacp activity that creates or modifies users in the Identity Store. The default Connectivity scenario ODBC/JDBC workflows are: ODBC2Ident Ident2ODBC ODBC_Ident (a sequential combination of the two previous workflows) JDBC2Ident Ident2JDBC To complete and use these workflows, Microsoft Access 20xx must be installed on your computer. The example HR database used in the default scenario is delivered with DirX Identity and has the pathname install_path*/data/personal.mdb*. It is protected with the password dirx to show the ODBC agent’s password feature. Copy this database to C:/MetahubData (or another location, if you prefer). It is a good idea to make a copy of the personal.mdb database, so that you can restore the original later on if the working copy becomes corrupted. Define this HR database to be an ODBC database: Go to Start → Settings → Control Panel and double-click Administrative Tools Click on Data Sources (ODBC). If you installed DirX Identity with the system account, select the System-DSN tab and click Add…​ otherwise use the User DSN tab. Select Driver to Microsoft Access (*.mdb) and then click Finish. Enter personal into the field Data Source Name. Click Select…​. Navigate to the location where you have copied personal.mdb, select it and click OK. A new ODBC source is created. Click OK again. Your ODBC workflows should now run. Note: The password of the Access 20xx database provided with DirX Identity is dirx. To change it, perform these steps: Start Microsoft Access. Click File → Open. Select the database. Click Open Exclusive. Click Tools → Security → Set Database Password. Don’t forget to change the relevant bind profile to the same value. DirX Identity maintenance workflows help to maintain your identity system to ensure consistent and current data of high quality.This chapter provides detailed information about maintenance workflow configuration, special features and user hooks.The sections in this chapter include: Understanding the Java-based Maintenance Workflows - describes configuration, features, and user hooks for Java-based maintenance workflows. Understanding the Tcl-based Maintenance Workflows - describes configuration, features, and user hooks for Tcl-based maintenance workflows. For information about these workflows' theory of operation, see the DirX Identity Connectivity Administration Guide and the DirX Identity Provisioning Administration Guide. Maintenance workflows provided with the Identity Store default Connectivity scenario include workflows that run as threads in the Java-based server (IdS-J). They can run as the result of events and in many cases can be scheduled. The Java-based maintenance workflows include: Entry change workflows - special workflows for each type of entry (user, organization, and so on) that apply provisioning and / or consistency rules, check for broken links or update associated entries (for example, the user, if an organizational unit changed the privilege). Deploying these workflows allows you to minimize how often the Privilege Resolution or the Consistency Rule workflow runs (see the section \"Privilege Resolution Workflow\" for details). Process Tickets Internal - a workflow that processes DirX Identity’s internal tickets. Account Password Manager - a workflow that changes account passwords generated by user requests (event-based mode). Alternatively, it can run scheduled on a specific number of account objects and creates new passwords for accounts whose passwords have expired. Reset Account Passwords - a workflow that resets passwords of either functional or personal accounts. It runs scheduled on a specific number of account objects. Reset Password If Displayed - a workflow that resets passwords of privileged accounts (for example, within 24 hours) after the password has been read by Web Center. It runs scheduled on a specific set of privileged account objects (defined by an LDAP filter). User Password Event Manager - a workflow that changes user passwords and all related account passwords based on user requests (event-based mode). User Password Expiration Notification - a workflow that finds users whose passwords are about to expire and informs the users about it by sending a notification mail. Transport Workflows - a workflow that transfers data between Identity Store instances. Joint Backup - a workflow that performs a synchronized backup of the Java-based Server’s repository and the LDAP Connectivity and Provisioning data store. Workflows for normal entry changes (not password changes) exist for various types of entries: users, organizations, organizational units and contexts. They are invoked by the same mechanism and their processing is very similar. The following figure illustrates how these workflows are invoked: Figure 62. Invoking an Entry Maintenance Workflow Various clients that create, update or delete entries in the Identity domain publish events after their changes. This action is controlled by the Event Policy in the domain. The event is only sent if the corresponding object type is activated in the event policy. Clients that send these types of events are: Web Center and Identity Manager. Provisioning Web Services. Import workflows, both Tcl-based and Java-based workflows. Note that For Tcl-based workflows, metacp must be configured accordingly. For Java-based workflows, the audit object type in the channel that configures the mapping for import into DirX Identity domain must be set. It does not make sense to start these workflows by hand or on a schedule because they only evaluate events. As with other real-time workflows, they are deployed to the IdS-J server if their Is Active flags are set in the configuration. The clients send an event after an entry has been updated successfully. The topic of the event contains: The object description name of the changed object: for example, dxrUser, ctxOrganizationalUnit. The host name of the LDAP server. The clients use the host name as it is configured in their binding configuration. The root DN of the DirX Identity domain (for example \"cn=My-Company\"). There is one deviation from these rules: the Java-based workflows that import accounts and groups use the cluster and domain attribute of the target system rather than the host name and the domain root of the LDAP server. Make sure that the When Applicable section of the workflows contains the proper information. The actions of the workflows depend on the entry type, the event type (add, modify or delete) and on the changed attributes. But typically they: Apply provisioning and / or consistency rules whose filters match the entry attributes. Check for broken links from the entries and especially for links to such an entry, if it has been deleted. Update associated users, if a critical attribute has changed. This is particularly important if a privilege link of a business object has been added or deleted. Call a user hook, if one has been configured. Store the changes for the entry made during this workflow’s operation. Deploying these workflows allows you to avoid having to start a privilege resolution or consistency check workflow on a regular basis (see the section \"Privilege Resolution Workflow\"). The resulting privilege changes and account updates are performed in real time. For more details on the configuration and processing of these workflows, see the following sections. The following sections describe how to configure the event-based maintenance workflow for accounts and the tasks this workflow performs. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then adjust the settings in the following tabs: General tab: Enter an appropriate resource family into Resource Family. It is a good idea to have a separate resource family for this type of workflow to ensure that the corresponding threads do not compete with threads performing other workflows. In the Error Handling section, specify the timeout for the activity, the retry limit and the waiting time between retries. Controller tab: The join engine type AccountEventController should be selected. It automatically determines the proper class name. If you want a user hook to be called during event processing, enter its full class name into Userhook Class Name. Make sure the library (jar file) containing your classes and all others on which they depend are deployed in the following folder beneath the installation: install_path/ids-j-domain-Sn/confdb/jobs/eventBasedRules/lib For information on how to write a user hook, see the DirX Identity Customization Guide. Event Attributes tab: Attributes for finding Users determines a sequence of attribute names that are used for finding the associated user of given account. Each line contains a comma-separated list of attribute names. The event controller searches for users where the values of these attributes match those of the account. If it finds exactly one, it associates the account with the user; that is, it sets the account’s user link. If it finds none or more than one user, it continues with the next list of attributes. Sort Key defines the sort attribute for sorting rules. The default value is “cn” Sort Ascending defines the sort order ascending. The default value is “true” so sorting is ascending. In the General tab of the workflow: Adjust the Is applicable for parameters. In particular, make sure type is set to the object description name SvcTSAccount and the resource and cluster are set to the server and domain name respectively. Set the Active flag of the workflow. Right-click the workflow object and select Load IdS-J Configuration to load the workflow into the Java-based Server. The following figure illustrates how the event-based maintenance workflow operates for accounts: Figure 63. Event-based Maintenance Workflow Operation: Accounts The workflow performs the following operations: It checks the links from this entry to other entries. If a referenced entry cannot be found, the workflow removes the reference. It applies the consistency rules whose filters match the entry’s attributes. It applies the accept and cleanup rules. If one of the account’s group memberships is in the IMPORTED state and the account and the group match an accept or cleanup rule, the workflow changes the state to IGNORE or DELETED respectively. Note that this action occurs only if the memberships are stored at the account. It applies the validation rules. If the account matches a validation rule’s account filter, it becomes an imported member of the respective group(s). If the account does not match the filter, but is an imported member of a matching group for no other reason, it is deleted: the membership state is changed to DELETED. This action triggers a real-time provisioning workflow and updates the state at the connected system. It calls the user hook, if one is configured. The user hook has access to the affected entry and can change it. The user hook does not need to store its changes to the LDAP server because the workflow performs this task in the next step. If the entry was modified, the workflow saves it to the LDAP server. This section describes how to configure the event-based maintenance workflow for organizations and the tasks this workflow performs. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then adjust the settings in the following tabs: General tab: Enter a proper resource family into Resource Family. It is a good idea to have a separate resource family for this type of workflow to ensure that the corresponding threads do not compete with threads performing other workflows. In the Error Handling section, specify the timeout for the activity, the retry limit and the waiting time between retries. Controller tab: Select the join engine type OrganizationEventController. It automatically determines the proper class name. If you want a user hook to be called during event processing, enter its full class name into Userhook Class Name. Make sure the library (jar file) containing your classes and all others on which they depend are deployed in the following folder beneath the installation: install_path/ids-j-domain-Sn/confdb/jobs/eventBasedRules/lib For details on how to write a user hook, see the DirX Identity Customization Guide. Event Attributes tab: Attributes to update Users determines the list of attributes that result in the update of all associated users when one of them has been changed. Sort Key defines the sort attribute for sorting rules. The default value is “cn” Sort Ascending defines the sort order ascending. The default value is “true” so sorting is ascending. In the General tab of the workflow: Adjust the Is applicable for parameters. Make sure type is set to the object description name ctxOrganization and the resource and cluster are set to the server and domain name respectively. Set the Active flag of the workflow. Right-click the workflow object and select Load IdS-J Configuration to load the workflow into the Java-based Server. The following figure illustrates how the event-based maintenance workflow operates for organizations: Figure 64. Event-based Maintenance Workflow Operation: Organizations The workflow performs the following operations: It checks the links from this entry to other entries. If a referenced entry cannot be found, the workflow removes the reference. It applies the consistency rules whose filters match the entry’s attributes. If the privilege link or one of the configured attributes has been changed, it updates all associated users. (Users are associated if they have a reference (dxrOrganizationLink or dxrSecOrganizationLink) to this entry.) The update contains the resolution of the user privileges and includes those privileges referenced from the organization. It calls the user hook, if one is configured. The user hook has access to the affected entry and can change it. The user hook does not need to store its changes to the LDAP server because the workflow performs this task in the next step. If the entry was modified, the workflow saves it to the LDAP server. The following sections describe how to configure the event-based maintenance workflow for organizational units and describe the tasks this workflow performs. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then adjust the settings in the following tabs: General tab: Enter a proper resource family into Resource Family. It is a good idea to have a separate resource family for this type of workflow to ensure that the corresponding threads do not compete with threads performing other workflows. In the Error Handling section, specify the timeout for the activity, the retry limit and the waiting time between retries. Controller tab: Select the join engine type OUEventController. It automatically determines the proper class name. If you want a user hook to be called during event processing, enter its full class name into Userhook Class Name. Make sure the library (jar file) containing your classes and all others on which they depend are deployed in the following folder beneath the installation: install_path/ids-j-domain-Sn/confdb/jobs/eventBasedRules/lib For information on how to write a user hook, see the DirX Identity Customization Guide. Event Attributes tab: Attributes to update Users determines the list of attributes that result in the update of all associated users when one of them has been changed. Sort Key defines the sort attribute for sorting rules. The default value is “cn” Sort Ascending defines the sort order ascending. The default value is “true” so sorting is ascending. In the General tab of the workflow: Adjust the Is applicable for parameters. In particular, make sure type is set to the object description name ctxOrganizationalUnit and the resource and cluster are set to the server and domain name respectively. Set the Active flag of the workflow. Right-click the workflow object and select Load IdS-J Configuration to load the workflow into the Java-based Server. The following figure illustrates how the event-based maintenance workflow operates for organizational units: Figure 65. Event-based Maintenance Workflow Operation: Organizational Units The workflow performs the following operations: It checks the links from this entry to other entries. If a referenced entry cannot be found, the workflow removes the reference. It applies the consistency rules whose filters match the entry’s attributes. If the privilege link or one of the configured attributes has changed, the workflow updates all associated users. Users are associated with an entry if they have a reference (dxrOrganizationalUnitLink or dxrSecOrganizationalUnitLink) to it. The update contains the resolution of the user privileges and includes those privileges referenced from the organizational unit. It calls the user hook, if one is configured. The user hook has access to the affected entry and can change it. The user hook does not need to store its changes to the LDAP server because the workflow performs this task in the next step. If the entry was modified, the workflow saves it to the LDAP server. The following sections describe how to configure the event-based maintenance workflow for context objects and describe the tasks this workflow performs. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then adjust the settings in the following tabs: General tab: Enter a proper resource family into Resource Family. It is a good idea to have a separate resource family for this type of workflow to ensure that the corresponding threads do not compete with threads performing other workflows. In the Error Handling section, specify the timeout for the activity, the retry limit and the waiting time between retries. Controller tab: The join engine type ContextEventController should be selected. It automatically determines the proper class name. If you want a user hook to be called during event processing, enter its full class name into Userhook Class Name. Make sure the library (jar file) containing your classes and all others on which they depend are deployed in the following folder beneath the installation: install_path/ids-j-domain-Sn/confdb/jobs/eventBasedRules/lib For information on how to write a user hook, see the DirX Identity Customization Guide. Event Attributes tab: Attributes to update Users determines the list of attributes that result in the update of all associated users when one of them has been changed. Sort Key defines the sort attribute for sorting rules. The default value is “cn” Sort Ascending defines the sort order ascending. The default value is “true” so sorting is ascending. In the General tab of the workflow: Adjust the Is applicable for parameters. In particular, make sure type is set to the object description name dxrContext and the resource and cluster are set to the server and domain name respectively. Set the Active flag of the workflow. Right-click the workflow object and select Load IdS-J Configuration to load the workflow into the Java-based Server. The following figure illustrates how the event-based maintenance workflow operates for context objects: Figure 66. Event-based Maintenance Workflow Operation: Context Objects The workflow performs the following operations: It checks the links from this entry to other entries. If a referenced entry cannot be found, the workflow removes the reference. It applies the consistency rules whose filters match the entry’s attributes. If the privilege link or one of the configured attributes has changed, it updates all associated users. Users are associated if they have a reference (dxrContextLink) to this entry: the reference can be contained in the attributes dxrContextLink (standard) and in dxrExtensionLink1, …​, dxrExtensionLink10. The update contains resolution of the user privileges and includes those privileges referenced from the context. The dxrExtensionLink attributes are not indexed per default. If you intend to use these links, set the corresponding directory indexes. It calls the user hook, if one is configured. The user hook has access to the affected entry and can change it. The user hook does not need to store its changes to the LDAP server because the workflow performs this task in the next step. If the entry was modified, the workflow saves it to the directory server. The following sections describe how to configure the event-based maintenance workflow for location objects and describe the tasks this workflow performs. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then adjust the settings in the following tabs: General tab: Enter a proper resource family into Resource Family. It is a good idea to have a separate resource family for this type of workflow to ensure that the corresponding threads do not compete with threads performing other workflows. In the Error Handling section, specify the timeout for the activity, the retry limit and the waiting time between retries. Controller tab: Select the join engine type LocationEventController. It automatically determines the proper class name. If you want a user hook to be called during event processing, enter its full class name into Userhook Class Name. Make sure the library (jar file) containing your classes and all others on which they depend are deployed in the following folder beneath the installation: install_path/ids-j-domain-Sn/confdb/jobs/eventBasedRules/lib For information on how to write a user hook, see the DirX Identity Customization Guide. Event Attributes tab: Attributes to update Users determines the list of attributes that result in the update of all associated users when one of them has been changed. Sort Key defines the sort attribute for sorting rules. The default value is “cn” Sort Ascending defines the sort order ascending. The default value is “true” so sorting is ascending. In the General tab of the workflow: Adjust the Is applicable for parameters. In particular, make sure type is set to the object description name ctxLocation and the resource and cluster are set to the server and domain name respectively. Set the Active flag of the workflow. Right-click the workflow object and select Load IdS-J Configuration to load the workflow into the Java-based Server. The following figure illustrates how the event-based maintenance workflow operates for location objects: Figure 67. Event-based Maintenance Workflow Operation: Locations The workflow performs the following operations: It checks the links from this entry to other entries. If a referenced entry cannot be found, the workflow removes the reference. It applies the consistency rules whose filters match the entry’s attributes. If the privilege link or one of the configured attributes has changed, it updates all associated users. Users are associated if they have a reference (dxrLocationLink or dxrSecLocationLink) to this entry. The update contains the resolution of the user privileges and includes those privileges referenced from the location. It calls the user hook, if one is configured. The user hook has access to the affected entry and can change it. The user hook does not need to store its changes to the LDAP server because the workflow performs this task in the next step. If the entry was modified, the workflow saves it to the LDAP server. The following sections describe how to configure the event-based maintenance workflow for cost unit objects and describe the tasks this workflow performs. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then adjust the settings in the following tabs: General tab: Enter a proper resource family into Resource Family. It is a good idea to have a separate resource family for this type of workflow to ensure that the corresponding threads do not compete with threads performing other workflows. In the Error Handling section, specify the timeout for the activity, the retry limit and the waiting time between retries. Controller tab: Select the join engine type CostUnitEventController. It automatically determines the proper class name. If you want a user hook to be called during event processing, enter its full class name into Userhook Class Name. Make sure the library (jar file) containing your classes and all others on which they depend are deployed in the following folder beneath the installation: install_path/ids-j-domain-Sn/confdb/jobs/eventBasedRules/lib For information on how to write a user hook, see the DirX Identity Customization Guide. Event Attributes tab: Attributes to update Users determines the list of attributes that result in the update of all associated users when one of them has been changed. Sort Key defines the sort attribute for sorting rules. The default value is “cn” Sort Ascending defines the sort order ascending. The default value is “true” so sorting is ascending. In the General tab of the workflow: Adjust the Is applicable for parameters. In particular, make sure type is set to the object description name dxrCostUnit and the resource and cluster are set to the server and domain name respectively. Set the Active flag of the workflow. Right-click the workflow object and select Load IdS-J Configuration to load the workflow into the Java-based Server. The following figure illustrates how the event-based maintenance workflow operates for location objects: Figure 68. Event-based Maintenance Workflow Operation: Cost Units The workflow performs the following operations: It checks the links from this entry to other entries. If a referenced entry cannot be found, the workflow removes the reference. It applies the consistency rules whose filters match the entry’s attributes. If the privilege link or one of the configured attributes has changed, it updates all associated users. Users are associated if they have a reference (dxrCostUnitLink or dxrSecCostUnitLink) to this entry. The update contains the resolution of the user privileges and includes those privileges referenced from the location. It calls the user hook, if one is configured. The user hook has access to the affected entry and can change it. The user hook does not need to store its changes to the LDAP server because the workflow performs this task in the next step. If the entry was modified, the workflow saves it to the LDAP server. The following sections describe how to configure the event-based maintenance workflow for project objects and describe the tasks this workflow performs. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then adjust the settings in the following tabs: General tab: Enter a proper resource family into Resource Family. It is a good idea to have a separate resource family for this type of workflow to ensure that the corresponding threads do not compete with threads performing other workflows. In the Error Handling section, specify the timeout for the activity, the retry limit and the waiting time between retries. Controller tab: Select the join engine type ProjectEventController. It automatically determines the proper class name. If you want a user hook to be called during event processing, enter its full class name into Userhook Class Name. Make sure the library (jar file) containing your classes and all others on which they depend are deployed in the following folder beneath the installation: install_path/ids-j-domain-Sn/confdb/jobs/eventBasedRules/lib For information on how to write a user hook, see the DirX Identity Customization Guide. Event Attributes tab: Attributes to update Users determines the list of attributes that result in the update of all associated users when one of them has been changed. Sort Key: defines the sort attribute for sorting rules. The default value is “cn” Sort Ascending: defines the sort order ascending. The default value is “true” so sorting is ascending. In the General tab of the workflow: Adjust the Is applicable for parameters. In particular, make sure type is set to the object description name dxrProject and the resource and cluster are set to the server and domain name respectively. Set the Active flag of the workflow. Right-click the workflow object and select Load IdS-J Configuration to load the workflow into the Java-based Server. The following figure illustrates how the event-based maintenance workflow operates for project objects: Figure 69. Event-based Maintenance Workflow Operation: Projects The workflow performs the following operations: It checks the links from this entry to other entries. If a referenced entry cannot be found, the workflow removes the reference. It applies the consistency rules whose filters match the entry’s attributes. If the privilege link or one of the configured attributes has changed, it updates all associated users. Users are associated if they have a reference (dxrProjectLink) to this entry. The update contains the resolution of the user privileges and includes those privileges referenced from the project. It calls the user hook, if one is configured. The user hook has access to the affected entry and can change it. The user hook does not need to store its changes to the LDAP server because the workflow performs this task in the next step. If the entry was modified, the workflow saves it to the LDAP server. The event-based maintenance workflow for users accepts user change events, applies provisioning and consistency rules, resolves the users as far as necessary and updates the account attributes. Deploying this workflow allows you to avoid having to start a privilege resolution workflow on a regular basis (see the section \"Privilege Resolution Workflow\"). The resulting privilege changes and account updates are performed in real time. If no relevant attributes are changed, users are not resolved and accounts are not updated; this procedure may save a lot of time. You only need privilege resolution if you change the role hierarchy or group attributes and defer the resolution of affected users. The resolution or propagation process in the previous step can start additional provisioning processes to connected systems. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then select the Event Attributes tab. Adjust the following configuration items, which determine when accounts are to be updated: Attributes to include: defines all attributes that should be processed. Attributes to ignore: defines all attributes that should be ignored, if they are not in the previous set Attribute prefixes to include: defines the prefixes to use to update attributes; all attributes starting with these prefixes result in account update if they are not in the \"ignore\" list. Attribute prefixes to ignore: defines the prefixes to use to ignore attributes; if the attributes are not in any of the previous lists, but match one of these prefixes, they are ignored. Searchbase for Consistency Rules: defines the top level folder of the consistency rules that the workflow performs. Searchbase for Provisioning Rules: defines the top level folder of the provisioning rules that the workflow performs. Note that the rules must contain all grant- and deny rules for a given privilege, because they are executed in one common algorithm. Sort Key defines the sort attribute for sorting rules. The default value is “cn” Sort Ascending defines the sort order ascending. The default value is “true” so sorting is ascending. In the General tab of the workflow, set the Active flag. Right-click the workflow object and then select Load IdS-J Configuration to load the workflow into the Java-based Server. The following figure illustrates how the event-based user resolution workflow operates: Figure 70. Event-based User Resolution Workflow Operation The workflow performs the following operations for an add or modify event: It checks the links from this entry to other entries. If a referenced entry cannot be found, the workflow removes the reference. It applies the consistency rules whose filters match the entry’s attributes. It calls the user hook, if one is configured. The user hook has access to the affected entry and can change it. The user hook should not store its changes to the LDAP server because the workflow performs this task in the next step. The workflow applies the matching provisioning rules, assigns new privileges or removes existing privilege assignments based on the new attribute values and at the end resolves the user, if either in the received event or after applying rules and user hook at least one of the changed attributes is among the domain’s permission parameters, is a state attribute, a date, a privilege link or the attribute dxrTBA is enabled. If the user was modified, the workflow stores it to the LDAP server. If one of the attributes has changed that are configured as to be included in the Event Attributes tab of the activity, the attributes of the user’s accounts are updated. This step applies particularly to attributes that are mastered by the user. The user is not resolved. The rules on when to update accounts are as follows: accounts are updated if at least one of the changed attributes is among the configured \"include\" parameters; matches an \"include prefix\", but is not among the \"ignore\" parameters; doesn’t match any of the \"ignore\" and \"ignore prefix\" parameters. If a delete event is received, the workflow: Removes links from associated entries to the deleted entry Calls the user hook. The event-based maintenance workflow for personas accepts persona change events, applies provisioning and consistency rules, resolves the personas as far as necessary and updates the account attributes. Since personas are just another representation of users, the PersonaResolverController uses the same implementation as the UserResolverController. The PersonaResolverController uses an additional configuration field Link Attribute for Owner in the join activity’s Event Attributes tab. It uses this attribute (owner) to check if attributes that are mastered from the owner are part of the event’s modifications. In this case, the persona is saved to update this set of attributes. The use of different workflows for users, personas and functional users enables the use of different folders for consistency rules and provisioning rules for the three user representations. All other aspects of event-based maintenance workflow for personas are common to the event-based maintenance workflow for users, as described in the section \"Users\". The event-based maintenance workflow for functional users accepts functional user change events, applies provisioning and consistency rules, resolves the functional users as far as necessary and updates the account attributes. Since functional users are just another representation of users, the FunctionalUserResolverController uses the same implementation as the UserResolverController. The FunctionalUserResolverController uses an additional configuration field Link Attribute for Sponsor in the join activity’s Event Attributes tab. It uses this attribute (dxrSponsor) to check if attributes that are mastered from the sponsor are part of the event’s modifications. In this case, the functional user is saved to update this set of attributes. The use of different workflows for users, personas and functional users enables the use of different folders for consistency rules and provisioning rules for the three user representations. All other aspects of event-based maintenance workflow for functional users are common to the event-based maintenance workflow for users as described in the section \"Users\". The following sections describe how to configure a generic event-based maintenance workflow for any object type and describe the tasks this workflow performs. Typical use of this workflow is to run consistency rules after an object is created or modified. Configuration is possible for any type of object. Use the object description name to define the applicability of the workflow. You want to run consistency rules whenever a role is created or modified. Then you must perform the following steps: Login into the Provisioning view group of the DirX Identity Manager. Configure or extend the event policy: add dxrRole to the Selected area in the Configuration tab. Note that dxrRole is the standard name of the role object description. If you use several different types of object descriptions, use the appropriate object description name here. Create a folder for the consistency rules to be run with this workflow. Create the consistency rules in this folder. Create a new event-based processing workflow: Log in into the Connectivity view group of the DirX Identity Manager. Click Global View and then select the scenario where you want to create the workflow. Click the line between the two Identity Stores and select New from the context menu. Select the GenericEventBasedProcessing template and click Next. In the General Workflow Info tab define a name and a description, set the active flag. In the Is applicable section configure dxrRole as Type. As above, use here the object description name that defines your object. Set the Cluster field to '*'. In the Event parameters tab set the path to the folder with your previously created consistency rules (Searchbase for Consistency Rules). Click Next and then Finish. Perform Load IdS-J Configuration to load the newly created workflow into the Java-based Server. Now your workflow is ready to be tested. The following figure illustrates how the generic event-based processing workflow operates: Figure 71. Generic Event-based Processing Workflow Operation The workflow performs the following operations for an add or modify event: It applies the consistency rules whose filters match the entry’s attributes. It calls the user hook, if one is configured. The user hook has access to the affected entry and can change it. The user hook does not need to store its changes to the LDAP server because the workflow performs this task in the next step. If a delete event is received, the workflow: Calls the user hook. The Process Tickets Internal workflow runs regularly and processes all tickets where the condition for processing is fulfilled. The figure shows the architecture. Figure 72. Process Tickets Internal Workflow The Process Tickets Internal workflow runs typically scheduled and performs these steps: It reads all tickets that are to process. It processes the tickets. Processing of a ticket might trigger other processes, for example a privilege resolution on a user object. In this case other objects might be created and messages for further processing might be initiated (for example provisioning requests). For a detailed definition of the procedure see the \"Process Tickets Internal Workflow Operation\" chapter. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select your scenario (if not yet present, use the target system wizard from the Provisioning view group to create the scenario). Click the workflow line between the Identity Stores and select New from the context menu. Select the ProcessTicketsInternal workflow template and then click Next. Define the Name and Description fields and set the Is Active flag. Click Next and then Finish to complete the copy operation. Perform Load IdS-J Configuration to load the workflow into the Java-based Server. Now you can run the workflow either by hand or regularly triggered by a schedule. The Process Tickets Internal workflow works in two steps: Procedure on Request Workflows That are Related to Tickets During each run, it checks the status (state and application state) of all request workflows that are associated to tickets. It sets the state of the ticket accordingly. This means that: Workflow State=RUNNING: ticket state is not changed Workflow State=SUCCEEDED and Application State=ACCEPTED: ticket State=Approval.Completed Workflow State=SUCCEEDED and Application State=REJECTED: ticket State=Approval.Rejected Workflow State=FAILED.*: ticket State=Approval.Error Procedure on Tickets It reads all tickets where the due date is reached. It processes the ticket: For ticket State=Approval.Completed it actualizes the order data from the workflow instance and then it processes the ticket. For ticket State=Input.Completed it processes the ticket. Processing the ticket means that the ticket data is applied to the subject; for example, the service changes some attributes at a user entry or some privilege assignments are assigned to a user. If necessary, the subject is further processed; for example, a privilege resolution is performed for a user entry to calculate any changes coming from changed attributes or privilege assignments. Other processes might be triggered via JMS messages; for example, real-time provisioning to connected systems. After successful processing, it sets the ticket State=ApplyChange.Completed. and the DeleteDate=today+TicketLifeTime where Ticket Life Time is the defined value at the domain object. If an error occurs during processing, it does not change the status. The Account Password Manager workflow creates new passwords for DirX Identity accounts after the old password has expired. The following figure illustrates this workflow. Figure 73. Account Password Management: Account Password Manager Workflow If run scheduled, the Account Password Manager workflow searches for accounts with expired passwords according to the configured search settings, it generates a new password, stores it at the account if it is privileged and triggers the target system-specific password change workflows (setPassword workflow). If run event-based, it handles \"password expired\" events (topic dxm.event.SvcTSAccount.pwd.expired) and \"password changed\" events (topic dxm.event.SvcTSAccount.pwd.changed). For a password expired event, it generates a new password, stores it at the account if it is privileged and sets the password reset flag to false. For a password changed event, it takes the password from the event, changes it at the account if it is privileged and sets the password reset flag as desired in the event. In both cases, it then triggers the target system-specific password change (setPassword) workflow. Note that the message topics can contain a domain extension. For more information, see the section \"Message Topics\" in the DirX Identity Connectivity Administration Guide. To run the Account Password Manager workflow successfully, you must perform these steps: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then select the Controller tab. Adjust the settings in this tab as follows: Set the search base to the desired value. Do not change the scope and filter. Set the correct Domain (default: My-Company). Set the parameter Days before Expiration (default: 1 day). Set the parameter Keep Password History at the Account to true if you want to keep a password history at the account. The history is then used to check if the new password has not been used in the past x times where x is defined by the policy. This history keeping is performed by default for privileged accounts but not otherwise. Do not change the topic prefix for the \"to be built\" request that triggers the setPassword workflows. If you want to use own attributes sent to the setPassword workflow, which uses them for resolving placeholders in it’s Notify activity, right click the join activity and choose Edit Content. Go to the controller section of the PwdAccountExpireController and add the multi-value property accountAttrs with the desired attribute list outside the operation section. Set the Active flag of the workflow. Right-click the workflow object and select Load IdS-J Configuration to load the workflow into the Java-based Server. Password expiration for privileged or personal accounts (see the DirX Identity Provisioning Administration Guide for more information on these accounts) depends on the assigned account password policies and on a set of attributes at the policy and the account. If run scheduled, the workflow searches for accounts with expired passwords according to the configured search settings. It generates a new password, stores it at the account if it is privileged and triggers the target system-specific setPassword workflow. If run event-based, it handles \"password expired\" and \"password changed\" requests for a specific account and then proceeds as in the scheduled case. The password policy is assigned via the password policy link (attribute dxrPwdPolicyLink). If no password policy is assigned, the default password policy is used. The expiration calculation depends on the following attributes: dxrPwdMaxAge at the password policy, which defines the maximum allowed age of the password. Days before expire at the join activity, which specifies the time when to reset the account passwords before they expire. If the specified number of days before expiration is reached or passed for an account password, the workflow resets that password. dxrPwdChangedTime at the account, which specifies the last time the password was changed. If the current date is greater than the value (dxrPwdChangedTime+pwdMaxAge-Days before expire), the workflow sets the password to a randomly-generated new value. The password reset flag is not set and the dxrPwdChangedTime is set to the current date and time. The workflow generates a password change event that is to be processed by the corresponding setPassword workflow. The identifier attributes of the password change event are set either with the attributes configured in the multi-value property accountAttrs described above or if not specified (default) with the default list of attributes described in the setPassword Notify activity (see \"Context-senitive Help → Java-based Workflows → Real-time Port → Notification (optional)\" (for Java-based Set Password Workflows) in the DirX Identity Connectivity Administration Guide for details). These attributes - for example mail, cn, sn or givenName - can be used as placeholders (for example, $\\{IDATTR(mail)} ) in the to, from or body fields of the Notify activity. If accountAttrs are specified, they are extended by the list of the above-mentioned default attributes if not already contained. The attributes \"dxrPwdChangedTime\",\"dxrPwdPolicyLink\",\"dxrTSState\",\"dxrName\" and \"dxrPrimaryKey\" are also appended by the Account Password Manager and the Reset Account Passwords workflows and can therefore also be used as placeholder attributes for notification messages. Note that the accountAttrs must be specified in the controller section outside the operation section. For example, set: description givenName ... if you want to add the attributes description and givenName to the default list of identifier attributes. The Reset Account Passwords workflow resets passwords of DirX Identity accounts. This workflow can be used if a restore of a connected system has occurred, for example, due to a system failure that required restoration of the previous backup. The following figure illustrates this workflow. Figure 74. Account Password Management: Reset Account Passwords Workflow The Reset Account Passwords workflow runs only scheduled and searches for accounts according to the configured search settings. When the account is privileged, the workflow generates a new password and stores it at the account. Otherwise it takes the password from the referenced user. Then it triggers the target system-specific password change (setPassword) workflow. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then select the Controller tab. Adjust the following settings in this tab: Set the search base to the desired value. Set the filter accordingly. By default, the workflow selects all objects of type dxrTargetSystemAccount with dxrType=Privileged. Set dxrType=Personal if you intend to handle personal accounts. Set the correct Domain (default: My-Company). If you want to use own attributes sent to the setPassword workflow, which uses them for resolving placeholders in its Notify activity, right click the join activity and choose Edit Content. Go to the controller section of the PwdAccountResetController and add the multi value property accountAttrs with the desired attribute list outside the operation section. Set the Active flag of the workflow. Right-click the workflow object and then select Load IdS-J Configuration to load the workflow into the Java-based Server. The Reset Account Passwords workflow searches for accounts according to the configured search settings. Depending on the account type, the workflow performs these actions: For a personal account, it reads the password from the user. The password reset flag is set accordingly to the user’s password reset flag. For a privileged account, it generates a new password and sets it at the account. The password reset flag is set to true. The workflow generates a password change event that is to be processed by the corresponding setPassword workflow. . For the list of identifier attributes contained in the password change event and used by the setPassword workflow to resolve placeholders for the notification messages see the description in the \"Account Password Manager Workflow\" section above. For more information on personal and privileged accounts, see the DirX Identity Provisioning Administration Guide. The Reset Password If Displayed workflow resets passwords of privileged DirX Identity accounts. This workflow can be used if the password of a privileged account has been read and must be changed within a given time frame (for example, within 24 hours). Figure 75. Account Password Management: Reset Password If Displayed Workflow The Reset Password If Displayed workflow only runs scheduled. Alternatively, it can be started directly using the Run Workflow menu operation in the DirX Identity Manager. It searches for (privileged) accounts according to the configured search settings where the password has been displayed before the last n hours (see the option Hours before Reset). For each such account, it generates a new password. If the account is privileged, it stores the password at the account. It then triggers the password change (setPassword) workflow that is responsible for this target system. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). The workflow wizard guides you through all the required configuration steps. It displays the following steps: Template Select the Reset Password If Displayed workflow General Info Set the workflow name (Name field). Set the Is Active flag. Adapt the workflow timeout (Timeout field). Join Activity General Info Assign the resource family, if necessary (Resource family field). Adapt the Error Handling parameters, if necessary (Timeout, Retry Limit, Wait before Retry fields). Join Activity Search Parameters / Days before Reset Adapt the parameters for retrieving the privileged accounts (Search Base, Scope, Filter). Adapt the Hours before Reset parameter. This parameter defines the minimum time in hours that must have passed before the password is reset. The time at which the password was read is stored in the attribute dxrPwdDisplayTime. A parameter value 0 implies that all accounts are searched where the attribute dxrPwdDisplayTime is set. A value > 0 defines the number of hours that must have passed from now so that the account will be part of the search result. Set Workflow Name Set the workflow name, if not yet done in the General Info step (Name field). Once the workflow has been created successfully, select Connectivity → Expert View and then select the copied workflow object. Right-click the workflow object and then select Load IdS-J Configuration to load the workflow into the Java-based Server. The Reset Password If Displayed workflow searches for (privileged) accounts according to the configured search settings whose password was displayed before the last n hours. For each account in the search result, it obtains the appropriate password policy and then generates a new password that complies with the password policy. The password policy is retrieved as follows: If the account has set the attribute dxrPwdPolicyLink, then that policy is used. Otherwise it looks for the target system’s password policy; that is, the password policy assigned in the target system’s attribute dxrPwdPolicyLink. If the target system has no password policy assigned and the account has an associated user, it takes the password policy referenced from the user. If it does not find any password policy, it takes the default password policy of the domain. If there is no default policy, it generates an error. If the account is privileged, the workflow stores the new password at the account. The workflow generates a password change event that is to be processed by the corresponding setPassword workflow. Note that the setPassword workflow is started so that it does not send e-mails after successful reset of the password in the connected system. For more information on personal and privileged accounts, see the DirX Identity Provisioning Administration Guide. The User Password Event Manager workflow is part of the password provisioning scenario. For more information about the complete scenario, see the chapter \"Managing Passwords\" in the DirX Identity Connectivity Administration Guide. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then adjust the settings in the following tabs: General tab: Enter a proper resource family into Resource Family. It is a good idea to have a separate resource family for this type of workflow to ensure that the corresponding threads do not compete with threads performing other workflows. In the Error Handling section, specify the timeout for the activity, the retry limit and the waiting time between retries. Controller tab: Select the join engine type UserPasswordEventManagerController. It automatically determines the proper class name. If you want a user hook to be called during event processing, enter its full class name into Userhook Class Name. Make sure the library (jar file) containing your classes and all others on which they depend are deployed in the following folder beneath the installation: install_path/ids-j-domain-Sn/confdb/common/lib For information on how to write a user hook, see the DirX Identity Customization Guide. Select the notify part of the join activity and then adjust the settings in the following tabs: Notification tab: Define the mail to be sent on common user password changes. Notification on Reset tab: Define the mail to be sent on reset of a user password. Recipients tab: Define recipients of the notifications for password change and reset operations. In the General tab of the workflow: Set the Active flag of the workflow. Right-click the workflow object and then select Load IdS-J Configuration to load the workflow into the Java-based Server. The User Password Expiration Notification workflow is running in the Java-based Server and has replaced the older PwExpirationNotification workflow running in the C++-based Server. It finds users whose passwords are about to expire and informs the users about it by sending a notification mail. Unlike the old workflow, which used the MailConnector, the new one sends the notifications over the notify port using the NotifyChannelConnector as it is done for almost all other realtime workflows. More information about the notify port functionality can be found in the \"Context Sensitive Help\" in the DirX Identity Connectivity Administration Guide. To run the User Password Expiration Notification workflow successfully you must perform these steps: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then select the Controller tab. Adjust the settings in this tab as follows: Set the Number of Notifications to the desired value. Do not change the selected Join Engine controller PwdUserExpireController unless you have changed the component description PwdUserExpireController.xml of that controller under Expert View → Configuration → GUI → system → componentDescriptions to adjust for example the initial content for the controller’s properties. Those changes would become active then for every newly created workflow. Right-click the join activity and then select Edit Content if you want to adjust the following properties of the PwdUserExpireController’s controller section: searchBase - set to *cn=Users,cn=*domain by default, where domain automatically resolves to the domain to which your workflow was copied. Must not be changed usually. domain - set by default to the domain to which your workflow was copied. It is used for searching the password policies and should not be changed. userAttrs - the multi value property contains the list of all attributes either the PwdUserExpireController needs to calculate the password expiration date, which are dxrPwdChangedTime and dxrPwdExpiryNotified, or those to be used in ${IDATTR()} expressions in the mail parameters of the notify port, for example, in the mail body or mail subject. The attributes configured by default are sn, givenName, mail. If you want to use more attributes, you can extend this multi-value property. There are two pseudo attributes (not in LDAP) that the PwdUserExpireController automatically adds to the userAttrs list which can also be used in the IDATTR expressions of the mail parameters: daysToExpire - the number of days after which the user’s password will expire. expirationDate - the expiration date of the user’s password. Beneath the join activity, select the notify port, then select the Notification tab and adjust the mail parameters to your needs. The ${IDATTR()} expressions can be used for any attributes, that are contained in userAttrs. Set the Active flag of the workflow. Right-click the workflow object and select Load IdS-J Configuration to load the workflow into the Java-based Server. The workflow only runs scheduled and searches for users under the configured search base whose passwords are about to expire and notifies the affected users about it. Password expiration for users depends on the assigned user password policy and on a set of attributes at the policy and the user. The password policy is assigned via the password policy link (attribute dxrPwdPolicyLink). If no password policy is assigned, the default password policy is used. The expiration calculation depends on the following attributes: dxrPwdMaxAge (Maximum age) - at the password policy. It defines the maximum allowed age of the password. dxrPwdExpireWarning (Expiration Warning Time) - at the password policy. It defines the time at which to warn about a pending password expiration. dxrPwdChangedTime (Password Changed Time) - at the user entry. It defines the last time the password was changed. If the current date is greater than (dxrPwdChangedTime+dxrPwdMaxAge-dxrPwdExpireWarning), the workflow sends a notification e-mail. After sending the e-mail, the dxrPwdExpiryNotified (Password Expiration Notified) attribute of the user entry is incremented. If the configured Number of Notifications is reached no more mails are sent on subsequent workflow runs. When the user changes the password or an administrator resets the password with Web Center the dxrPwdExpiryNotified attribute is reset to 0 again. You can transfer data between Identity Store instances with several methods. For an overview see the chapter \"Transporting Data\" in the chapter \"Using Utilities\" of the DirX Identity User Interfaces Guide. This section describes the available transport workflow samples. You can transport data between Connectivity and Provisioning domains. Because this is slightly different, we provide four sample workflows that you can use to set up your own procedures: Export Connectivity Collections - shows how to export data from a Connectivity configuration domain. Import Connectivity Collections - shows how to import data into a Connectivity configuration domain. Export Provisioning Collections - shows how to export data from a Provisioning configuration domain. Import Provisioning Collections - shows how to import data into a Provisioning configuration domain. This sample workflow exports by default Java-based LDAP workflows based on a collection rule. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Make sure your scenario includes an existing ConfDB connected directory from where you want to export. Your scenario should have two instances of this connected directory with an intermediate workflow line between them. Right-click the workflow line and then select New to copy the workflow Export Connectivity Collections. The first tab asks for a new workflow name. Enter your desired name. In the General Workflow Info tab, check the Timeout parameter if appropriate and activate the workflow. In the Connection tab: Open Bind profile and check the bind profile parameters. Open Connected directory and follow the link to Service. Check for correct parameters. In the Export Definitions tab Define either a search in the Filter area to retrieve a set of Connectivity collections to export (you need not define the object class dxmIDMWorkflow, define only additional criteria) or select a list of Connectivity collections in the Collections area. Note that you can only use one of these options. Determine whether to create standard LDIF format with Base64 content or use the default readable format. Because readable format works best for configuration management systems and data that must be changed during import transport workflows, we recommend that you keep the default (no standard LDIF format). If you want to generate data for a configuration management system, restrict the generated line length. Check the configuration management documentation. For ClearCase, we recommend a line length of 2000. Click Finish to store your new workflow. Now you can run the workflow either manually or via a schedule. This sample workflow imports by default the previously exported set of Java-based LDAP workflows (see the Export Connectivity Collections workflow). To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Make sure your scenario includes an existing ConfDB connected directory from where you want to export. Your scenario should have two instances of this connected directory with an intermediate workflow line between them. Right-click the workflow line and then select New to copy the workflow Import Connectivity Collections. The first tab asks for a new workflow name. Enter your desired name. In the General Workflow Info tab, check the Timeout parameter if appropriate and activate the workflow. In the Connection tab: Open Bind profile and check the bind profile parameters for your target connected directory. Open Connected directory and follow the link to Service. Check for correct parameters. In the Deletion tab: Enable the Is Active flag if you intend to delete a set of entries before the import operation. In the Collection area, list all collection definitions (its DNs) that are to be used to delete the entries. In the Import Definitions tab: In the Import area, select all files you want to import. By default, the files are type LDIF. In the SPML area, you can select SPML format and you can select that the SPML file is to be validated before the import. Set the required options in the LDIF area; for example, an input filter that retrieves only specific object types from your files. You can use the dryrun option of the Simulation Mode for a dry run. Use the log file to check the effects. Click Finish to store your new workflow. Import workflows help to filter and adapt the data. To control the mappings, perform these steps: Click the Expert view and locate your workflow in your workflow folder. Open this entry and then open the perform activity. All mappings are located under this entry. Either change one of the existing mappings or create or delete mappings. The sample workflow sets all imported workflows to active and changes the cluster and resource values (as an example). Now you can run the workflow either manually or via a schedule. This sample workflow exports by default the complete privilege tree based on a collection rule. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Make sure your scenario includes an existing Identity Store connected directory from where you want to export. Your scenario should have two instances of this connected directory with an intermediate workflow line between them. Right-click the workflow line and then select New to copy the workflow Export Provisioning Collections. The first tab asks for a new workflow name. Enter your desired name. In the General Workflow Info tab, check the Timeout parameter if appropriate and activate the workflow. In the Connection tab: Open Bind profile and check the bind profile parameters. Open Connected directory and follow the link to Service. Check for correct parameters. In the Export Definitions tab: Define either a search in the Filter area to retrieve a set of Connectivity collections to export (you need not define the object class dxmIDMWorkflow, define only additional criteria) or select a list of Connectivity collections in the Collections area. Note that you can only use one of these options. To get the DNs of the collection objects, right-click the object in the Provisioning view and then select Goto DataView to retrieve the DN of the object. Determine whether to create standard LDIF format with Base64 content or use the default readable format. Because readable format works best for configuration management systems and data that needs to be adapted during import transport workflows, we recommend that you keep the default (no standard LDIF format). If you want to generate data for a configuration management system, restrict the generated line length. Check the configuration management documentation. For ClearCase, we recommend a line length of 2000. Click Finish to store your new workflow. Now you can execute the workflow either manually or via a schedule. This sample workflow imports by default the previously exported complete privilege tree (see the Export Provisioning Collections workflow). To configure the workflow, perform these steps: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Make sure your scenario includes an existing Identity Store connected directory from where you want to export. Your scenario should have two instances of this connected directory with an intermediate workflow line between them. Right-click the workflow line and then select New to copy the workflow Import Provisioning Collections. The first tab asks for a new workflow name. Enter your desired name. In the General Workflow Info tab, check the Timeout parameter if appropriate and activate the workflow. In the Connection tab: Open Bind profile and check the bind profile parameters for your target connected directory. Open Connected directory and follow the link to Service. Check for correct parameters. In the Deletion tab: Enable the Is Active flag if you intend to delete a set of entries before the import operation. List in the Collection area all collection definitions (it’s DNs) that shall be used to delete the entries. In the Import Definitions tab: In the Import area, select all files you want to import. By default, the files are type LDIF. In the SPML area, you can select SPML format and you can select that the SPML file is to be validated before the import. Set the required options in the LDIF area; for example, an input filter that retrieves only specific object types from your files. You can use the dryrun option of the Simulation Mode for a dry run. Use the log file to check the effects. Set the correct Domain Mappings. The default workflow changes all occurrences from \"My-Company\" to \"Customer Domain\". If you have data from different domains, you can define multiple mappings to your target domain. Click Finish to store your new workflow. Import workflows help to filter and adapt the data. To control the mappings, perform these steps: Click the Expert view and locate your workflow in your workflow folder. Open this entry and then open the perform activity. All mappings are located under this entry. Either change one of the existing mappings or create or delete mappings. The sample workflow deletes all dxrGroupMember attribute values (we use the wildcard dxrGroupMember* here). Only the structure is imported, not the specific group members because these are different in your target domain. Now you can run the workflow either manually or via a schedule. The Joint Backup workflow performs a synchronized backup of the Java-based Server’s repository and the LDAP connectivity and provisioning data store. It can also transfer the generated files to a target backup system via the Java-based Server (not currently supported) or via your own user hook class. To transfer all generated backup files to the destination system, you can: Manually transfer the generated files. With this method, files are not automatically cleaned up. Let the IdS-J service transfer the generated files. To use this method, the IdS-J service must have the rights to access all files and the target path. If the system landscape is distributed, the IdS-J service needs to run under an appropriate account with access rights to network shares. With this method, created files are cleaned up if the file transfer fails for any reason. Implement your own Java user class to transfer the files. This method is currently not supported. Contact technical support for more information. Remote LDAP backup has the following constraint: The remote backup of an LDAP data store is performed via an LDAP extended operation. Only DirX Directory V8.1A or newer supports this operation. The DNs of users that are allowed to do a remote backup are maintained in the ldapConfiguration subentry in the attribute ldapExtOpAdmins. See the section \"LDAP Extended Operations Admins\" in the DirX Directory Administration Reference for details. On Windows, you must install gzip 1.3.12 or newer. A suitable gzip is available on http://www.gnu.org. gzip.exe must be found via the PATH environment variable. To configure the workflow: Activate the backup in the Java-based server. (See the section \"Java-based Server - Repository\" in the appendix \"Context Sensitive Help\" in the DirX Identity Connectivity Administration Guide for details.) Administer the LDAP servers: Enter the DNs of the Connectivity Domain Administrator used by IdS-J (cn=DomainAdmin,cn=*your_domain,dxmC=Users,dxmC=DirXmetahub*) and, if necessary, of the Provisioning Domain Administrator used by the IdS-J *(cn=DomainAdmin, cn=*your_domain) in the multi-value attribute ldapExtOpAdmins of the ldapConfiguration subentry of the appropriate DirX LDAP Server. In the Controller tab of the perform activity, ensure that the fully-qualified pathname of the controller is correct: com.siemens.idm.jobs.Backup. In the Backup Parameters tab of the perform activity you must set the folders where to store the backups and indicate whether this folder is located on a Windows system. Ignore the settings for the message server and leave them empty. Note: The location of the Java-based Server’s backup file is configured with the server’s configuration. In the field Connectivity Configuration / Backup Path, specify the fully-qualified pathname of an existing folder for the backup location of the DirX Server that hosts the Connectivity data store. Note that the pathname must not be a part of the installation tree of the DirX Server. This is a mandatory field. Check On Windows System if the DirX Server runs on Windows. If the Provisioning part is hosted on a different LDAP server, specify the fully-qualified pathname of an existing folder for the backup location in the field Provisioning Configuration / Backup Path. See also the notes above. Check On Windows System if the DirX Server runs on Windows. Create a schedule for the workflow. (See the section \"Schedule\" in the appendix \"Context Sensitive Help\" in the DirX Identity Connectivity Administration Guide for details.) If you are letting the IdS-J service transfer the generated files, provide the following information: In the field Target Backup System Path of the Post Operation tab, specify the fully-qualified pathname of an existing folder for the transfer location. On Windows, you can use a shared network drive, but then the IdS-J service must run under a different account from the system account and you must use the UNC syntax for the transfer folder. Check On Windows System if the transfer location is hosted on Windows. If you implemented your own Java user class to transfer the generated files, provide the following information: In Userhook Class Name, specify the name of your own class. Note: This method is not currently supported. Contact technical support for more information. Set the Active flag of the workflow and perform Load IdS-J Configuration from the context menu of the workflow object to load the workflow into the Java-based Server. The Java-based consistency management workflows include: The Check Consistency workflow The Mark Affected Users workflow The User Resolution Workflow These workflows are described in the DirX Identity Provisioning Administration Guide in the section \"Managing Consistency\" in the chapter \"Managing the Provisioning System\". Compared to the Tcl-based maintenance workflows, the Java-based consistency management workflows allow for: Subsetting of objects for deletion and particularly consistency checks. Separate user resolution workflows for clear user subsets. The Java-based and Tcl-based consistency maintenance workflows use common storage mechanisms. For optimization information, see the section \"Using the Maintenance Workflows\" → \"Understanding the Tcl-based Maintenance Workflows\" → \"Consistency Check Workflow\" → \"Consistency Check Workflow Optimization\". The Java-based consistency management workflow Check Consistency applies configured consistency rules and performs basic hard-coded consistency checks. Compared to the Tcl-based Consistency Check workflow: The Java-based workflow is a combination of a policy execution workflow handling consistency policies and the Tcl consistencyCheck workflow. The workflow performs no user resolution. You can select to run only part of the checks this workflow performs. You can select to run the checks on a subset of objects. For more information about this workflow, see the section \"Consistency Check and Consistency Rules\" in the DirX Identity Provisioning Administration Guide. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then select the Check Consistency Attributes tab to modify the configuration. See the context-sensitive help for details about configuration parameters. Right-click the workflow object and then select Load IdS-J Configuration to load the workflow into the Java-based Server. Because the workflow runs in the Java-based Server, you can configure tracing via Identity WebAdmin. The following packages may be involved: com.siemens.idm.jobs.consistencyCheck siemens.dxr.agents siemens.dxm.ruleprocessing.rules The following default values are used for empty attributes in the Check Consistency Attributes tab: LDAP Page Size - 50 Batch Accumulator Size - 500 Cache MRU Size - 10000 Check Users Search Base - cn=users,cn=my-company Check Users Filter - (objectClass=dxrUser) Search Base for Roles - cn=RoleCatalogue,cn=my-company Filter for Roles - (objectClass=dxrRole) Search Base for Permissions - cn=Permissions,cn=my-company Filter for Permissions - (objectClass=dxrPermission) Search Base for Target Systems - cn=TargetSystems,cn=my-company Filter for Target Systems - (objectClass=dxrTargetSystem) Apply Consistency Rules Search Base - no default Apply Consistency Rules Filter - (objectClass=dxrConsistencyRule) Apply Consistency Rules sort attribute - cn Apply Consistency Rules sort ascending - true Apply Consistency Rules LDAP Page Size - 300 Apply Consistency Rules MRU Size - 500 Check Consistency workflow operation depends on the selections configured in the Consistency Check Workflow Attributes tab (visible in the workflow’s join activity). If Check for Privileges To Be Deleted is selected, the workflow: Searches for roles, permissions, and groups in the state TBDEL. For each privilege in the state TBDEL, the workflow: Removes the incoming assignments to users and/or senior privileges and then sets the To Be Analyzed (TBA) flag for the affected objects. Deletes roles/permissions or sets the state to DELETED if history is configured. Sets the state of groups to DELETED. If Check Users is selected, the workflow performs the following steps for users that match the given search base (cn=users,cn=my-company if empty) and filter ((objectClass=dxrUser) if empty): Searches all privilege assignments with relevant start or end dates. The exact filter is: (&(|(objectClass=dxrUserToRole)(objectClass=dxrUserToGroup)(objectClass=dxrUserToPermission))(|(dxrEndDate=*)(dxrStartDate=*))) Deletes outdated start dates, removes assignments with outdated end dates, and marks this user for privilege resolution. Next, the workflow checks the consistency of the matching users. It: Deletes users in the state TBDEL with an expired DeleteDate. Sets the DeleteDate for users in the state TBDEL that do not yet have a DeleteDate set. Sets as the StartDate the current date for users in state NEW that do not yet have a StartDate set. Checks whether the various date fields of the user are consistent with the user state. If not, the user is flagged with TBA for a succeeding privilege resolution. Checks whether the various date fields of the user are consistent, which means that the sequence of the date fields must be StartDate, DisableStartDate, DisableEndDate, EndDate, DeleteDate. Checks for broken references of privilege assignments. Checks for the correct user state and then migrates the old state DELETED to TBDEL. Flags users with TBA if the ErrorExpirationDate is reached. If Check Roles/Permissions is selected, the workflow performs the following steps for objects that match the specified search base and filter: Analyzes the role structures: Works on all matching roles. Checks whether the role is valid, that means it must have a permission or junior role assigned. Checks for broken references to junior roles and assigned permissions. Analyzes the permission structures: Works on all matching permissions. Checks whether the permission is valid, that means it must have a group assigned. Checks for broken references to assigned groups. Checks whether the permission is assigned to users if it is not flagged for user assignment. Checks for correct permission parameters. If Check Accounts/Groups is selected, the workflow performs the following steps for all accounts/groups of the target systems that match the specified search base and filter: Checks whether the Local Admin link of a target system is broken. Works on all matching target system accounts. Deletes all accounts that are marked with Managed in Target System Only that are in state Deleted in the target system. Checks whether the target system of this account is of the correct type and exists. Checks for multiple primary accounts for a user. Checks whether the User Link of the account is broken. Checks for correct account states. Deletes accounts that are in the state DELETED and whose EndDate is expired. Checks that the account is either marked Managed in Target System Only and has no user link assigned or that it is not marked Managed in Target System Only and has a user link assigned. When analyzing target system groups, the workflow: Works on all matching target system groups. Deletes all groups that are marked Managed in Target System Only that are in the state Deleted in the target system. Checks whether all permission parameter values (dxrRPValues) are consistent with the permission parameter definition at the domain root object. Checks for broken obligation links. Checks for broken group members. Checks whether the groups state has a correct value. Deletes groups in the states DELETED or DISABLED with expired EndDates. Updates the distribution list of a virtual group. If Apply Consistency Rules is selected, the workflow applies all consistency rules that match the specified search base and filter. Rule processing works in the Assign privilege only provisioning mode with Suppress Change Events set to true. This processing mode means that no user resolution is performed and no user change events are initiated. The Java-based consistency management workflow Mark Affected Users finds privileges with dxrTBA = true, finds the users that might be affected by a change and sets the flag dxrTBA = true for these users. The User Resolution workflow will then subsequently ensure their resolution. This functionality is the same as provided in the Consistency Check Tcl-based maintenance workflow. In the Mark Affected Users workflow, the functionality is separated into a single workflow and can be run more frequently. It is best to run it before the User Resolution workflow. For more information about this workflow, see the section \"Consistency Check and Consistency Rules\" in the DirX Identity Provisioning Administration Guide. To configure the Java-based Mark Affected Users workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then select the Optimization Attributes tab to modify the configuration. See the context-sensitive help for details about the configuration parameters provided in this tab. Right-click the workflow object and then select Load IdS-J Configuration to load the workflow into the Java-based Server. Because the workflow runs in the Java-based Server, you can configure tracing via Identity WebAdmin. The following packages may be involved: com.siemens.idm.jobs.consistencyCheck siemens.dxr.agents siemens.dxm.ruleprocessing.rules The following default values are used for empty attributes in the Optimization Attributes tab: LDAP Page Size - 50 Batch Accumulator Size - 500 Cache MRU Size - 10000 The Mark Affected Users workflow performs the following steps: Searches the entire user and privilege database. Sets the To Be Analyzed) (TBA) flag for all users that have a privilege assigned that is itself flagged with TBA. The workflow considers direct and indirect relationships (indirect relationships go via a role or permission). The Java-based consistency management workflow User Resolution performs the following tasks: Applies provisioning rules to users. Enables or removes user-privilege assignments where start or end dates are reached. Finds users where the state must be changed because one of the corresponding start or end dates has been changed. Triggers user-privilege resolution for all matching users by sending a message to the Resolution Adapter per user. Compared to its Tcl-based counterpart, the Java-based User Resolution workflow is a combination of a policy execution workflow handling Provisioning rules and parts of the Tcl PrivilegeResolution workflow. You can use configuration parameters to limit the set of users and rules to be evaluated. For more information about this workflow, see the section \"Consistency Check and Consistency Rules\" in the DirX Identity Provisioning Administration Guide. To configure the Java-based User Resolution workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then select the Resolution Attributes tab to modify the configuration. See the context-sensitive help for details about the configuration parameters provided in this tab. Right-click the workflow object and then select Load IdS-J Configuration to load the workflow into the Java-based Server. Because the workflow runs in the Java-based Server, you can configure tracing via Identity WebAdmin. The following packages may be involved: com.siemens.idm.jobs.consistencyCheck siemens.dxr.agents siemens.dxm.ruleprocessing.rules The following default values are used for empty attributes in the Resolution Attributes tab: Filter for users - (objectClass=dxrUser) LDAP Page Size for Provisioning Rules-300 Cache MRU Size for Provisioning Rules - 10000 Batch Accumulator Size for Provisioning Rules - 500 LDAP Page Size for User Resolution - 50 Cache MRU Size for User Resolution - 10000 Batch Accumulator Size for User Resolution- 500 To analyze users and assignments, the workflow performs the following actions for the given user filter and search base: Searches all privilege assignments with relevant start or end dates. The exact filter is: (&(|(objectClass=dxrUserToRole)(objectClass=dxrUserToGroup)(objectClass=dxrUserToPermission))(|(dxrEndDate ... To set up the Evidian ESSO workflow: Create the ADS or LDAP target system for the Evidian ESSO system. Run the validation workflow to get the account data. Link the accounts to the users. Introduce the \"enable SSO\" flag into the target system associated with the application; for example, the Salesforce TS. Create the Evidian ESSO connected directory and then link it to the ADS ESSO target system that you created in the first step. Create the Evidian ESSO workflow and then link to the target system associated with the application. Add the Evidian certificate authority (CA) to cacerts. In the Provisioning tab of the ESSO connected directory configuration object, specify the URL to the Evidian Web Service. In the Bind Profiles tab, specify a user and a password. The following figure shows the Evidian ESSO workflow’s join activity objects at the Identity Store and connected system sides as well as the related ports and channels and their relationships. Figure 81. Evidian ESSO Provisioning Workflow Join Activity, Channels and Objects In General → Associated TS for the Evidian ESSO workflow configuration object, specify the target system that corresponds to the application you want to access via Evidian ESSO. The Is applicable for section for the workflow must match the Match properties defined in the associated target system. The workflow uses the SynchOneWay controller. This section provides information about the Evidian ESSO Provisioning workflow ports. TS Port CF - Crypt Filter The standard crypt filter for password decryption. This section provides information about Evidian ESSO channels. Only accounts are supported. Since a SynchOneWay controller is used, the channel on the Identity side is only relevant for reading the necessary attributes. Direction: Identity Store → ESSO ID is calculated using the environment variables essouser and essoapplication. The environment variable essoapplication is configured at the account channel in the Specific Attributes tab and is always DirXIdentity. com.siemens.dxm.join.userhook.esso.UserHookAccountsTo Implements the \"Process Source Entry\" procedure. It reads the user link of the source entry and tries to find the corresponding account in the ADS/LDAP ESSO target system. It provides the DN (in the connected system) of this account and the State attributes in the following environment properties: essouser, essouserstate, essousercsstate. If the account cannot be found, it returns false and the entry will not be processed (you can’t manage Evidian ESSO accounts without an Active Directory account). A simple expression is used: ${env.essouser} + \",application=\" + ${env.essoapplication} + \",role=DirXIdentity\" The user DN part of the identifier is taken from the environment property essouser which is populated by the processSourceEntry user hook. The application part is taken from the essoapplication environment property. The join expression is just a dummy as the connecter does not support filters. The whole Join criteria is given by the base DN, which identifies exactly one account in the ADS/LDAP ESSO connected system. ID mapping is a Java source mapping. It corresponds to the base object of the export (if no joined entry is found): String adsUserDN = (String) env.get(\"essouser\"); String application = (String) env.get(\"essoapplication\"); targetIdStr = adsUserDN + \",application=\"+application+\",role=DirXIdentity\"; Post mapping is a Java source mapping. The following attributes control the outcome: The State attributes of the corresponding ADS/LDAP ESSO account (from environment) The dxrState of the source entry (the account in the associated target system) The flag that specifies whether ESSO should be enabled in the default dxrOption(enableesso) attribute of the source entry (the account in the associated target system) The joined entry (whether it is available) The application is defined as a Specific Attribute at the channel configuration object. This section describes how to customize the Evidian ESSO Provisioning workflow. If you want to use another attribute or another mechanism to define whether an account should be enabled for SSO: Edit the postmapping to get the flag Adapt the object description to manage this flag (optional) By default, \"cn=Accounts,\"${env.assocts}\"* is used as the search base. If your associated target system holds accounts and groups in the same folder, you need to change this to: *\"cn=Accounts and Groups,\"${env.assocts}\". The Google Apps Provisioning workflows operate between a target system of type LDAP in the Identity Store and the corresponding connected Google Apps endpoint. The workflows use the Google Apps connector for provisioning. This connector communicates with the Google Apps endpoint across the HTTP protocol using a REST API provided by Google, called Admin Directory API. The connector uses Google OAuth service for authentication and authorization purposes. The workflows handle the following objects: Users - the Google Apps users. Groups - the Google Apps groups. The delivered workflows are: Ident_GoogleApps_Realtime - the synchronization workflow that exports detected changes for account and group objects from the Identity Store to the GoogleApps server and then validates the processed changes in Google Apps to the Identity Store. The workflow also generates a password if the object is created. Validate_GoogleApps_Realtime - the validation workflow that imports existing Google Apps users and groups along with group assignments from Google Apps to the Identity Store. SetPassword in Google Apps - the workflow that sets the password for the user object in GoogleApps. The following figure illustrates the Google Apps Provisioning workflow architecture. Figure 82. Google Apps Workflow Architecture The Google Apps connector acts as a remote application to the Google Apps system. As a result, you need to create a Google Admin Account and then link it to a Google Service Account in order to be able to access the API using the OAuth 2.0. (For details, see https://developers.google.com/accounts/docs/OAuth2Login.) To obtain Google Admin Directory API credentials: Log in to the Google Developers Console with your admin user credentials at https://console.developers.google.com. Create a new project. You need only provide a name; for example, DirX-Interop. In the Projects window, navigate to APIs & auth → APIs. Search for the Admin SDK API and enable it for this user. Navigate to APIs & auth → Credentials and then create a new Service Account: In the OAuth section, click Create new Client ID. From the pop-up window, select the Service account and then click Create Client ID. Your Client ID, Service Account Email and Private P12 Key have been generated (Please download your generated key as a P12 file. You will need it when setting up the Google Apps connected directory in DirX Identity). To use the Google Admin Directory API: Log in to the Google Admin Console with your admin user credentials at https://admin.google.com. Navigate to Security → Advanced settings → Manage OAuth Client access. In Client Name, enter the client ID generated by Google in the Developers Console. In One or more API Scopes, enter the Google API scope URLs, separated by commas (we only need to be able to modify users and groups: https://www.googleapis.com/auth/admin.directory.group, https://www.googleapis.com/auth/admin.directory.user). Click Authorize and then check to see that your changes appear in the list below. Note that when you make these changes, it takes Google a little time to apply them on its side. Now you are ready to use the Google Admin Directory API. To configure the connection to Google Apps: Set up the bind credentials of the connected directory that represents the Google Apps system. Use the correct credentials (with sufficient rights). These are the credentials used for administration of the Google Apps domain. The User must be a valid Google Apps user name or e-mail address. Set up the following items in your Google Apps connected directory (in the Google API tab): Private Key - use the P12 file generated by Google for your account. Service Account Email - use the one generated by the Google developer console. Application Name - you can use anything you like. Domain Name - must contain the name of your company domain. (If the domain is not configured (default) it is deduced from the bind profile user id) If necessary, specify the HTTP proxy server in the HTTP/HTTPS Proxy Server tab. Check the provisioning settings used by the connected Google Apps system and set them to the values required by your provisioned Google Apps target system. To run the Google Apps workflows: Assign the resource family GoogleApps in the IdS-J server. The Google Apps target system requires the following layout: Accounts - all accounts (Google Apps users) are located in a subfolder Accounts. Groups - all groups are located in a subfolder Groups. The dxrPrimaryKey attribute of accounts and groups contains the identifier of these objects in the connected system. This attribute is generated only by Google. The group membership is stored at the account object and references the dxrPrimaryKey attribute of group objects. Configure the Domain property at the target system at the Options tab. This value is used as a suffix for Google Apps User Email and Group Email. The following figure shows the layout of the channels that are used by the Google Apps workflow join activity. Figure 83. Google Apps Workflow Channels and Objects The Google Apps users and groups (and memberships) are synchronized via a pair of channels (one channel per direction). The membership in the Identity Store is stored in accounts. See the default Google Apps workflow for details This section describes the Google Apps ports. TS Port CF - Crypt Filter A Google Apps filter is configured implicitly. It is used to send the decrypted password attribute userPassword to the Google Apps endpoint. In the account channel mapping, many LDAP attribute are mapped to/from Google Apps attributes. The following attributes receive special handling: Direction: Identity Store → Google Apps ID - dxrPrimaryKey Join - $\\{source.dxrPrimaryKey} Password - remember that the account’s password is inherited from the user object in Identity Store when you assign a group to a user (and the account is then created implicitly). If no password is present at the user, the account’s password is initially set to the default password. Check to make sure that the passwords comply with the password policies in effect for the Google Apps system. (By default, Google needs a password with a minimum length of eight (8) characters). userName - this attribute doesn’t need mapping because Google automatically generates the user name by concatenating the givenName and familyName givenName - this attribute is set to \"N/A\" if the user doesn’t provide a givenName. orgUnitPath - the root (/) is always mapped to this attribute because the connector doesn’t support the full functionality of the Google Apps organizational units. Direction: Google Apps → Identity Store ID - $\\{joinedEntry.id} or \"cn=\"${source.userName}\",\"+${env.role_ts_account_base} Join - ${target.dxrPrimaryKey} or ${target.id}. givenName - ${joinedEntry.givenName} or ${source.givenName} because the Google Apps system may register the changes after the validate workflow is finished. sn - ${joinedEntry.sn} or ${source.familyName} because the Google Apps system may register the changes after the validate workflow is finished. dxrName - ${joinedEntry.dxrName} or ${source.userName} because the Google Apps system may register the changes after the validate workflow is finished. c, l, postalCode, postalAddress, postOfficeBox, st, street - these attributes are all mapped from Google’s multi-valued addresses attribute only for the address flagged as primary. secretary - Google permits multiple secretaries. Only the first entry is mapped to the Identity Store. employeeNumber - mapped from Google’s multi-valued externalIds attribute only for the externalId of type organization. Mappings are defined for the Google Apps attributes Name, Description and Email. Direction: Identity Store → GoogleApps ID - dxrPrimaryKey Join - ${source.dxrPrimaryKey} Post-Mapping - if the dxrState attribute in the Identity Store is DELETED, the operation (as part of the mapped entry) is set to DELETE. Direction: GoogleApps → Identity Store ID - ${joinedEntry.id} or \"cn=\"${source.groupName}\",\"+ env.role_ts_group_base} Join - ${target.dxrPrimaryKey} or ${target.id}. dxrTSState - the attribute used to detect the current state of the group in Google Apps. It is set to ENABLED for existing entries and to DELETED for non-existing entries. The member-channel configuration holds the mapping of the group members. A password channel updates the Google Apps account passwords. The Imprivata OneSign Provisioning workflows are used to synchronize data between a target system of type SPMLv1 in the Identity Store and the corresponding connected Imprivata OneSign system. The Imprivata OneSign is provisioned via the SPMLv1 messages sent to an enabled Provisioning System Adaptor in the Imprivata OneSign appliance. The workflows handle the following Imprivata OneSign objects: Subscriber - the subscriber represents the physical user. It holds the demographical data and can be used for accessing Imprivata OneSign. Account - each user can have one or more application accounts to log into an application managed via Imprivata OneSign. It stores the application credentials. The delivered workflows are: Ident_Imprivata_Realtime - the synchronization one-way workflow that exports detected changes for a subscriber object from Identity to the Imprivata OneSign and updates the state of the affected entry in Identity. SetPassword in Imprivata - the workflow that sets the password for the subscriber object in Imprivata OneSign. Ident_ImprivataExtranetPortal_Realtime - the synchronization one-way workflow that exports detected changes of application credentials for an application account object from Identity to Imprivata OneSign. The workflow does not update the state of the account entry in the Identity target system. This workflow is a sample that works by default from the Extranet Portal target system in the My-Company sample domain. SetPassword in ImprivataExtranetPortal - the workflow that sets the password for the application account object in Imprivata OneSign. This workflow is a sample that works by default from the Extranet Portal target system in the My-Company sample domain. The subscriber object is directly mapped to the single account object of the corresponding Imprivata target system in the Provisioning configuration. The application account object is mapped to a real account of a target system in DirX Identity, which is configured in Imprivata OneSign as an application for single sign-on (SSO). The following figure illustrates this object mapping. Figure 84. Imprivata Object Mapping As shown in the figure: The Imprivata OneSign Domain is mapped to the DirX Identity target system The Imprivata OneSign Subscriber is mapped to the DirX Identity account in the Imprivata target system The Imprivata OneSign Application is mapped to any DirX Identity target system that allows setting passwords The Imprivata OneSign Account is mapped to the DirX Identity account of any target system that permits passwords to be set At each event, the Imprivata application target systems real-time provisioning triggers two different workflows. One workflow synchronizes the entries for the real application (for example, actualizes an account in an LDAP connected directory) and the other workflow synchronizes the credentials of the user for the LDAP application configured in Imprivata OneSign for SSO. Both workflows handle the events with the same topic. The following figure illustrates these workflows. Figure 85. Imprivata Workflows The subscriber and account objects in an Imprivata OneSign target system and in a target system managed via Imprivata OneSign must be created, modified and deleted in the same time. It is necessary to build a privilege structure that supports the concurrent handling of the Imprivata OneSign subscriber and account objects (use permissions that are linked to the corresponding groups to accomplish this task). The Imprivata Provisioning workflows support: Imprivata OneSign 4.1 SP1 or newer. One-to-one relationship between a subscriber object and an application account object in an application. More accounts for a subscriber in an application are not supported. The Imprivata Provisioning workflows do not support: Disable operation for subscriber objects. Only the delete operation is supported. Reconciliation of the subscriber or account objects due to search operation limitations of the Imprivata OneSign Provisioning System Adaptor. To configure the connection to Imprivata: Specify the IP Address of the Imprivata OneSign host. Imprivata OneSign is typically configured to accept SPMLv1 requests on the pre-configured secure port 443 and forces the use of the secured transport layer (HTTPS). Use the corresponding Imprivata service object which is the part of the connected directory that represents Imprivata OneSign. URL Path and Socket Timeout can be configured at the target system port of the appropriate workflow object. The URL Path of the Imprivata OneSign SPMLv1 provisioning service is pre-configured to the default value sso/provision/spmlrouter, Do not change this setting. Use Socket Timeout to increase the timeout value (in seconds) if necessary. The Imprivata OneSign provisioning service does not use the bind credentials of the connected directory. Use the pre-configured values. The HTTPS protocol requires the Imprivata OneSign certificate used for the secured connection to be trusted by the Java Runtime Environment for DirX Identity which is located in dxi_java_home. Perform trust store administration with Java keytool and import the Imprivata OneSign certificate. (See the chapter \"Using OneSign Provisioning Features\" in the Imprivata OneSign documentation for more details.) Imprivata OneSign workflows use a specially implemented SPMLv1 based connector. Each SPMLv1 request sent to Imprivata OneSign must be identified by a External System Name which is part of the target system port of the appropriate workflow object. It is also pre-configured in the mapping for the channels that synchronize subscriber and account objects. This name is equivalent to the name of the configured Provisioning System Adaptor in the Imprivata OneSign appliance. Set these values in channel mappings and in the connector port according to the values configured in the Imprivata OneSign system. The Imprivata target system requires the following layout: Accounts - one account object exists in the Identity target system for each Imprivata OneSign subscriber object in the connected system. All accounts are located in the subfolder Accounts. Groups - Imprivata OneSign does not use any type of group. Use a pre-configured \"virtual\" group for the creation of the Imprivata OneSign subscribers. The dxrPrimaryKey attribute has a special meaning: it stores the generated Imprivata ID for subscriber objects. The dxrName attribute is a single copy of the employeeNumber attribute by default and is used as the username in Imprivata OneSign. An application target system managed via Imprivata OneSign requires the following layout: Accounts - one account object exists in Identity for every Imprivata OneSign account object in the connected system. All accounts can be located in an Accounts subfolder. Groups - Imprivata OneSign does not require any type of group from the application target system. To assign accounts, use existing groups of the managed application. Accounts and groups - an application can also work with the single common subtree containing both accounts and groups. The dxmGUID attribute has a special meaning for Imprivata OneSign application accounts: it stores the generated Imprivata ID for account objects. The uid attribute is a single copy of the employeeNumber attribute by default. It must be generated in the same way as the dxrName attribute for the subscriber objects since it is used to identify the corresponding subscriber for the account object. The dxrName attribute for the application account objects is mapped to the application username. To keep the mapping from subscriber to account consistent, you may need to update the object descriptions for the target system accounts that are used as accounts for the Imprivata OneSign application (typically, you must define an additional configuration of the uid attribute). The following figures show the layout of the channels that are used by the join activity. Figure 86. Imprivata Workflow Channels for Imprivata OneSign Subscriber Objects As this figure shows, the Imprivata OneSign subscriber objects are synchronized via a pair of channels. The group channels are only present to handle incoming events for groups. Such events are ignored. Figure 87. Imprivata Workflow Channels for Imprivata OneSign Account Objects As this figure shows, the Imprivata OneSign account objects are also synchronized via a pair of channels. The group channels are only present to handle incoming events for groups and are also ignored. This section provides information about the Imprivata workflow ports. TS Port Crypt Filter An Imprivata Filter is configured implicitly. It is used to send the password and applicationPassword subscriber and account application password attributes in the SOAP request decrypted to Imprivata OneSign via SPMLv1. This filter is used only for the password synchronization workflow. The initial password is pre-configured (see the mapping for the channel account on the Identity side for both workflows). This section provides information about Imprivata workflow channels. Direction: Identity Store → Imprivata OneSign userDisabled - the attribute used for disabling of the subscriber object in Imprivata. The value is derived from dxrState attribute of the corresponding account object in DirX Identity. The subscriber cannot be disabled in the default configuration, but it can be deleted. Direction: Imprivata → Identity Store The workflow only uses the one-way synchronization controller, so updates can only be made via a user hook. Direction: Identity Store → Imprivata OneSign ID: dxrPrimaryKey Join: ${target.externalSystemName}, ${target.externalDomainName} and ${target.username} Username: dxrName User hook stores the subscriber ID generated by Imprivata OneSign to the dxrPrimaryKey attribute. It also updates the state of the entry returned by the Imprivata OneSign. Direction: Identity Store → Imprivata OneSign ID: dxmGUID Join: ${target.externalSystemName}, ${target.externalDomainName}, ${target.externalApplicationName} and ${target.username} Username: uid Application username: dxrName User hook stores the account ID generated by Imprivata OneSign to the dxmGUID attribute. PostMapping script changes the type of the request to delete if necessary. Direction: Identity Store → Imprivata OneSign User hook ignores all incoming event to update the group objects to Imprivata OneSign. A password channel updates the subscriber and account passwords. A password channel can also be configured backwards from the connected system to the Identity Store to be able to update some attributes in Identity after a password change or reset has taken place in the connected system. The join engine then synchronizes the attributes specified in the corresponding password channel mapping to the Identity Store as usual after the account with its password-relevant attributes is updated in the connected system. The JDBC Provisioning workflow synchronizes data between a JDBC target system within the Identity Store and a relational database. The following figure shows the deployment. Figure 88. JDBC Provisioning Workflow Architecture The workflow uses the LDAP connector on the Identity Store side and the JDBC connector on the database side. The connector communicates with JDBC drivers. The default JDBC workflow is set up for three application-related database tables that hold accounts, groups and memberships. The membership table keeps the relationship between the accounts and the groups. Handling of other or more tables is a customization task. You must install the driver jar files that correspond to the JDBC drivers you intend to use. For each IdS-J Server installation, place the jar files in the server’s confdb\\common\\lib directory to enable the IdS-J Server to use the drivers. The default for new JDBC target systems is now that memberships are held at the account objects, which enhances performance for the real-time workflows. Because the Tcl-based workflows assume memberships at group objects, you cannot use the Tcl-based JDBC provisioning workflows in parallel with the JDBC real-time workflows for the same target system instance. The JDBC connector runs in lite mode as much as possible, which means that database meta information is read from the database and therefore must not be explicitly configured. To configure the connection to JDBC: Select the type in the Configuration Page of the JDBC Connected Directory and the corresponding Driver Type. Check the driver’s documentation to determine the URL that is required to connect. Memberships are held at the account objects. The default workflow configuration assumes that every provisioned table has an auto-generated primary key. This key cannot be calculated in DirX Identity. It is generated by the database. This key is used as dxrPrimarykey. Attributes in the DirX Identity target system belong to the corresponding attributes in the JDBC target system. DirX Identity - Group JDBC - Group Table Remark cn dxrGroupName Unique name in DirX Identity dxrPrimaryKey, dxrName ID (DB key) Identifiers DirX Identity - Group JDBC - Memberships Table Remark dxrPrimaryKey, dxrName of group GroupID: DB key of group Identifiers DxrPrimaryKey, dxrName of referenced account AccountID: DB key of account Identifiers DirX Identity - Account JDBC - Accounts Table Remark cn DxrAccountName Unique name in DirX Identity dxrPrimaryKey, dxrName ID (DB key) Identifiers The following figure shows the JDBC workflow’s join activity objects at the Identity Store and connected system sides as well as the related ports and channels and their relationships. Figure 89. JDBC Provisioning Workflow Join Activity, Channels and Objects As shown in the figure: The \"accounts\" channel points to the \"member\" channel because the accounts keep the memberships. The primary channel construct defines the memberships in the database. The password synchronization workflow uses the password channel. This section provides information about the JDBC workflow ports. TS Port CF - Crypt Filter The standard crypt filter for password decryption. JF - JDBC Filter A JDBC Filter is configured. It is used to transform multi-value membership attributes in Identity to multiple records in the JDBC membership table. As the Filter is a general Filter for handling transformation of multi-value attributes to multiple records, its configuration is independent of the workflows environment. Configuration: Request: Member Attribute - the attribute that holds the target of the membership. Default: GroupID (because the Accounts table references the Groups table). Member Table - the table that holds memberships. Default: Memberships. Member Source Attribute - the attribute that holds the source of a membership. Default: AccountID as Accounts reference groups. Search Response: Match Type - the attribute used for matching records corresponding to the same identity object. Here it is accountID, as all memberships belonging to this account have the same accountID. Multivalue Attributes - the attribute that should be accumulated. Default: GroupID as all GroupIDs should be stored at the corresponding account. This section provides information about JDBC workflow channels. Direction: Identity Store → JDBC ID is calculated via calculateIdInJdbc. For details, see the Java documentation. Direction: JDBC → Identity Store ID is calculated via CommonProcsJDBC.calculateIdInIdentity. It assumes that the specific attributes \"accountnameatt\" and \"groupnameatt\" (at the JDBC connected directory) contains the attribute names holding the (unique) account name and (unique) group name attributes. dxrName is taken from the database ID column. Direction: Identity Store → JDBC (TS Account-Group-Membership) ID: \"accountId=\"$\\{source.dxrPrimaryKey}\",Table=Memberships\" Primary Channel account Join: Memberships.AccountID = ID Maps the dxmPassword to the password column in your account table. A password channel can also be configured backwards from the connected system to Identity to be able to update some attributes in Identity after a password change or reset has taken place in the connected system. The join engine then as usual synchronizes the attributes specified in the corresponding password channel mapping to Identity after the account with its password-relevant attributes has been updated in the connected system. You can customize the JDBC workflows in two ways: Adapt the database scheme in relationship to a different table layout Call stored procedures In most cases, your database table(s) will differ from the assumed default tables. Table Names In every mapping where the syntax Tablename.ColumnName is used, change the table name IDMapping → JDBC: Change calculateIdInJdbc targetId = CommonProcsJdbc.calculateIdInJdbc( sourceEntry, joinedEntry, env, entry_type, \"Groups\", \"groups-id\"); If your Group Table is named GRP, change to: targetId = CommonProcsJdbc.calculateIdInJdbc( sourceEntry, joinedEntry, env, entry_type, \"GRP\", \"GRP-id\"); Change the Export Search base. At the JDBC CD, set the SpecificAttribute membertable to your membertable. At the JDBC filter, adjust the member table. Column Names You can change the column names directly in every mapping line. If you want to select attribute names from a list, you must edit the JDBC CD attribute configuration. If column names of the columns holding the unique identity attribute (by default, dxrGroupName, dxrAccountName) differs, adjust this in JDBC CD SpecificAttribute accountnameatt / groupnameatt If an ID attribute changes: All mappings containing ID Channels → Id: dxrName/dxrPrimaryKey/dxrPrimaryKeyOld: Javamapping sourceAttrName = \"ID\"; Account-group-membership channel: join condition Primary If accountID/groupID changes in membership table: JDBC filter configuration Adjust Specific attribute memberatt/ membersourceatt at JDBC connected directory ID Mapping → JDBC account-group-membership Primary Channel join secondary account-group-membership Join in account-group-membership channel Primary Key is not an Auto Key This is not possible in pure lite mode. Define instead the primary keys (in TS port): Accounts.ID Groups.ID Memberships.ID Accounts Groups Memberships Here a separate ID column in the membership table is assumed. It’s also possible account-id and group-id defines the key. In this case the definition of the membership table and the corresponding abbreviation is not needed. Use the defined abbreviation for id column in ID mapping targetId = CommonProcsJdbc.calculateIdInJdbc( sourceEntry, joinedEntry, env, entry_type, \"Accounts\", \"account-id\",false); Use CommonProcsJdbc.calculateIdInJdbc with argument autogeneratedkey=false. Use the defined abbreviation in members channel as the primary value in Primary Channel join condition. Use the defined abbreviation in join condition \"accountid=\"+${source.dxrPrimaryKey}+\",Table=Accounts\" Use the defined abbreviations in Primarykey(old) and DxrName Java mapping at Identity side. Change the object description to generate a unique key for dxrPrimaryKey. Use a Column to specify the Account State To configure a column representing the account state in your account table insert a new line at the JDBC connected directory propertypage Specific Attributes. As name enter accountstateatt. Fill in the column name as value. The default dxrTSState Mapping for the account uses this column to set the dxrTSState if the configured column exists. Only the values ENABLED and DELETED are allowed. If your column contains other values, you must map your values to these allowed values. To do this edit the dxrTSState mapping at the account channel. Under the default JDBC TS port, you will find an example for a stored procedure definition. The sample represents a SQL server stored procedure returning 0 on success. It takes two parameters: the ID that identifies the record and the password that should be set. To call this stored procedure, an extended request is necessary. This request may be called in the postmapping or in a user hook. Building the extended request in the postmapping means that it is called after a normal request. Call via postmapping: In the default setPassword channel, you will find an example (in comments): logger.debug(\"SP postmapping called\"); HashMap sourceAttrs = source.getAttrs(); if (sourceAttrs == null) return mappedEntry; // the Stored Procedure + String theSP = \"changePassword\"; ExtendedRequest extReq = new ExtendedRequest(); mappedEntry.addExtendedRequest(extReq); // append the SP call as extended request extReq.setRequestID(\"SPCall\"); OperationIdentifier opId = new OperationIdentifier(); opId.setOperationID(theSP); // name of SP + opId.setOperationIDType(OperationIdentifierOperationIDTypeType.GENERICSTRING); extReq.setOperationIdentifier(opId); ProviderIdentifier provId = new ProviderIdentifier(); provId.setProviderID(\"SP\"); // SP for Stored procedure provId.setProviderIDType(ProviderIdentifierProviderIDTypeType.URN); extReq.setProviderIdentifier(provId); // assume two parameter, the ID the password pw + // first ID from source ??later also from mappedEntry + // only the first element of attArr is computed by the connector + Attributes[] attArr = new Attributes[1]; DsmlAttr pkey =sourceAttrs.get(\"dxrprimarykey\"); DsmlAttr id = new DsmlAttr(); id.setName(\"ID\"); id.addDsmlValue(pkey.getDsmlValue(0)); Attributes atts = new Attributes(); atts.addAttr(id); logger.debug(\"SP argument ID: \"+pkey.getDsmlValue(0).toString()); // second Password from mapped pw attr DsmlModification[] mod = mappedEntry.getModification(\"pw\"); if (mod.length > 0) { // take first DsmlAttr pw = new DsmlAttr(); pw.setName(\"pw\"); pw.addDsmlValue(mod[0].getDsmlValue(0)); atts.addAttr(pw); logger.debug(\"SP argument pw: \"+pw.getDsmlValue(0).toString()); } attArr[0] = atts; extReq.setAttributes(attArr); // only extended Request to be processed mappedEntry.setRequestType(Request.Type.NONE); Here the first argument ID is taken from the source attribute dxrprimarykey. The second argument is taken from the mapped entry. This example shows that you can do some complicated mapping and take the result as an argument. Keep in mind that for mapped attributes, modifications will be generated. If you do not want the password to be set twice (by generated modification an by stored procedure) you can use the attribute flag Readonly to prevent it. In this sample, the RequestType is set to NONE at the end, which means that only the stored procedure is called and other generated modifications are ignored. Normally you do not intend to do this, so all generated modifications are made (for example, the description has changed) and afterwards the stored procedure is called to set the password column. In the com.siemens.dxm.join.userhook.jdbc.UserHookAccountsTo user hook, you will find an example of how to call a stored procedure in a user hook. /** * Call an SP via extended request * * Can also be done in postMapping or another user hook * @see com.siemens.dxm.join.api.IUserHookExt#preUpdate(siemens.dxm.connector.DxmRequestor, siemens.dxm.connector.DxmRequestor, siemens.dxm.connector.spml.Identifier, java.util.HashMap, com.siemens.dxm.join.map.MappedEntry, siemens.dxm.connector.spml.Identifier, java.util.HashMap) */ public boolean preUpdate(DxmRequestor srcConn, DxmRequestor tgtConn, Identifier sourceId, HashMap sourceAttrs, MappedEntry mappedEntry, Identifier joinedId, HashMap joinedAttrs) { // the Stored Procedure String theSP = \"changePassword\"; ExtendedRequest extReq = new ExtendedRequest(); extReq.setRequestID(\"SPCall4SetPassword\"); OperationIdentifier opId = new OperationIdentifier(); opId.setOperationID(theSP); // name of SP opId.setOperationIDType(OperationIdentifierOperationIDTypeType.GENERICSTRING); extReq.setOperationIdentifier(opId); ProviderIdentifier provId = new ProviderIdentifier(); provId.setProviderID(\"SP\"); // SP for Stored procedure provId.setProviderIDType(ProviderIdentifierProviderIDTypeType.URN); extReq.setProviderIdentifier(provId); // we have two parameters, the ID and the password pw // first take ID from source attributes // only the first att is computed by the connector Attributes[] attArr = new Attributes[1]; DsmlAttr pkey =sourceAttrs.get(\"dxrprimarykey\"); DsmlAttr id = new DsmlAttr(); id.setName(\"ID\"); id.addDsmlValue(pkey.getDsmlValue(0)); Attributes atts = new Attributes(); atts.addAttr(id); logger.debug(\"SP argument ID: \" + pkey.getDsmlValue(0).toString()); // second parameter Password from mapped pw attribute DsmlModification[] mod = mappedEntry.getModification(\"pw\"); if (mod.length > 0) { // take first DsmlAttr pw = new DsmlAttr(); pw.setName(\"pw\"); pw.addDsmlValue(mod[0].getDsmlValue(0)); atts.addAttr(pw); logger.debug(\"SP argument pw: \"+pw.getDsmlValue(0).toString()); } attArr[0] = atts; // IN and IN_OUT parameters extReq.setAttributes(attArr); if (tgtConn instanceof DxmConnectorExtended) { // call extended Connector DxmConnectorExtended theConnector = (DxmConnectorExtended)tgtConn; try { ExtendedResponse rsp = theConnector.extendedRequest(extReq); } catch (DxmConnectorException e) { logger.error(\"SP Call failed: \",e); } } // process extended request only // ignore other modifications to avoid a 2nd modification of the mapped pw mappedEntry.setRequestType(Request.Type.NONE); return true; } What’s the difference? In a user hook, you must call the connector’s extendedRequest method explicitly. In postmapping, you just build the extendedRequest and add it to the mapped entry: mappedEntry.addExtendedRequest(extReq); // append th SP call as extended request General Notes: Always set \"SP\" as providerId Attributes Array always has size 1. Every argument is an element of this one and is the only array element. Function or Procedure? The definition of a stored procedure may depend on the database system. For the JDBC connector definition, a function is defined if it returns a value. If no value is returned, it is a procedure. Here is a Microsoft SQL Server 2005 stored procedure: ALTER PROCEDURE [dbo].[changePassword] -- parameters for the stored procedure @userId int, @pw varchar(50) This stored procedure returns an int, which means you must configure this procedure as a function: In Oracle, a stored procedure does not return a value, which means you must configure a procedure. But for a procedure, you must specify the \"return\" argument because the connector needs an indicator for the outcome of the procedure. Therefore, you cannot use a procedure with the same arguments in Oracle. You must wrap the procedure to get an \"out\" argument for return: The LDAP Provisioning workflows operate between a target system of type \"LDAP\" in the Identity Store and the corresponding connected LDAP Directory system. The LDAP connector used in the workflows communicates with the LDAP server across the native LDAP protocol, as shown in the following figure. Figure 90. LDAP Workflow Architecture The workflows allow you to synchronize Identity account and group objects with LDAP Directory users and group objects. The LDAP workflows currently have no prerequisites or limitations. This section provides information about LDAP target system configuration. Connection to the target system: Specify the IP address, the data port, and the secure port at the LDAP service object (LDAP CD → Service). The IP address may contain the server name - fully-qualified or not - or a TCP/IP address. In the Bind Profile (LDAP CD → Bind Profile), specify a user in DN format. For SSL/TLS, fill the following fields: SSL Connection - check it for SSL connections, whether server or client authentication. Client Authentication - check if if you want to use client-side SSL. Path to Key Store File - the file name of the file-based keystore containing the certificate/private key pair and the relevant CA certificates for this client certificate. Key Store Password - the password for accessing the key store. Key Store Alias - the alias name of the keystore entry (optional). Path to Trust Store File - the file name of the file-based truststore containing the LDAP server CA certificate. Trust Store Password - the password for accessing the truststore. Pay attention to the following attributes: The attribute dxrPrimaryKey of accounts and groups contains the object’s target system DN. It is also used as the member attribute of groups. On account creation, it is generated by the tsaccount.xml object description using the connected directory-specific attributes account base and group base. The attribute dxrName of accounts and groups contain the dxrPrimaryKey value. It is used for joining in Identity direction. The following figure shows the layout of the channels that are used by the join activity. Figure 91. LDAP Workflow Channels As the figure shows, there is a pair of channels between accounts, groups and members on each side. The members are linked to the groups on both sides. This section describes LDAP workflow ports. TS Port CF - Crypt Filter The configured Crypt Filter is used to send the password attribute userPassword decrypted to the LDAP server. This section provides information about LDAP workflow channels. Master attributes: Most attributes (except, for example, the dxrTSState attribute) are mastered by DirX Identity. Consequently, these attributes have the OnAddOnly flag in the mapping direction to Identity. This is particularly true for the Identifier, which is also mastered by DirX Identity in the default real-time synchronization workflow. In the target system direction, it is calculated by DirX Identity in the dxrPrimaryKey attribute and results in moving the object in the target system if dxrPrimaryKey changed. In the DirX Identity direction, the Identifier is calculated only on an add operation, otherwise the joined object’s Identifier is taken. Moving account objects: The default LDAP real-time synchronization workflow can perform a rename/move of accounts in the LDAP target system. It operates in the following way: If the dxrPrimaryKey attribute of the account is changed in DirX Identity (as a result of a user resolution and new calculation of the account attributes, which can have dependsOn or masteredBy settings in the account’s object description), the workflow performs the following actions: It takes this as the new DN in LDAP. It tries to find (join) the account with the configured join attributes (trying one after the other). One of the join attributes is the employeeNumber, which shouldn’t change on user resolution in Identity. When it finds the account in LDAP, it takes this DN is as the old DN and renames/removes the account from this old DN to the new DN. On the way back, it puts the actual LDAP DN into the dxrPrimaryKey and dxrPrimaryKeyOld attributes in DirX Identity. The dxrPrimaryKeyOld (as described above) is not taken for sync to TS but for other purposes. Changing the account state holding the attribute employeeType: If you want to use another attribute for holding the account state than employeeType you must do the following mapping adaptions in the account channel: Direction Identity → Connected System Just change the java mapping line with employeeType on the right side by exchanging employeeType with another attribute name. The content of the Java coding on the left side has not to be changed because it references now the term tgtAttrname instead of hard coded employeeType. The Java class name is just changed to the new attribute name if the mapping is saved. Direction Connected System → Identity Adapt the Java mapping to the target attribute dxrTSState and exchange employeeType in the line CommonProcsLdap.setAccountStateAttr(\"employeeType\"); by the new attribute name. PostMapping: A postMapping exists only for the group channel in the target system direction. It is used for changing the request type to DELETE if the dxrState attribute in Identity contains the value DELETED, which results in deleting the object in the target system. For accounts deletion of objects in the target system is handled in the Java mapping to the account state holding attribute, which is by default employeeType. The target system’s password attribute userPassword is updated with the current password of the account in DirX Identity and the pwdReset attribute, which determines whether or not the password must be changed on the next login by the user, is set depending on the source attribute dxmPasswordExpired. This attribute was previously set by the User or Account Password Event Manager workflow listening for requests from Identity Web Center or Password Listener. If you want to enable case-sensitive renames like ou=RedFlag → ou=Redflag, you need to set the operational attribute caseExactRDNComparison to true in the generated request. Use the Op. Mapping tab of your channel get this into the workflow: true For a general explanation of the delta workflows, see the sections under \"Java-based Workflow Architecture\" in \"Understanding the Default Application Workflows\" in this guide. The default LDAP delta workflow LDAP_Ident_Realtime_Delta (as the workflow name already implies) synchronizes deltas from an LDAP connected system to the Identity Store both for accounts and groups. You can verify this function by looking at the deltaSyncOneWay2Identity controller used by the workflow. The delta definitions given in the Delta tab for the LDAP connected directory’s channels apply (Connectivity Configuration Data → Connected Directories → Target Scheduled → LDAP → Channels). Delta synchronization for the LDAP connected directories is based on time stamps: specifically, the LDAP attributes createTimeStamp and modifyTimeStamp. In the Delta tab, Delta Type is set to SearchAttributes and the two LDAP attributes are listed, and in Sort Type, the value String is selected. When searching for deltas, the (configured) export search filter is extended and entries whose createTimeStamp or modifyTimeStamp attributes are set to a value that is more recent than (or equal to) the time stamp of the previous workflow run will be searched. For the first run, the (configured) export filter is not changed because there is no time stamp available for comparison. When evaluating the search result, the most recent time stamp is retained as delta information and is stored in the Identity domain for each channel. This time stamp is subsequently used when the workflow is next activated (either in the DirX Identity Manager or by schedule). The Delta tab of the corresponding channels (that is, the Identity Store channels) hold delta definitions, too. These definitions apply if you have defined a delta workflow for synchronization from the Identity Store to the LDAP connected system. The IBM Notes (formerly Lotus Notes) Provisioning workflow synchronizes data between an IBM Notes target system within the Identity Store and an IBM Domino server. The following figure shows the deployment. Figure 92. IBM Notes Workflows Architecture The join engine running in the Java-based Server needs to send and retrieve data from a Domino server. The Notes API that is used for accessing the Notes address book is a C/C interface. Therefore, the Notes Provisioning workflow provides an SPML/SOAP connector that enables the join engine to exchange SPML requests and responses with the C-based Server. The SPML/SOAP-service running in the C-based Server exchanges the SPML requests and responses with the Notes connector, which finally interacts with the Domino server using the Notes C/C-API. The Notes Provisioning workflow allows you to synchronize accounts and groups with Notes users and groups in the Notes address book. The Notes Provisioning workflow has the following prerequisites and limitations: The workflow requires the version of Notes C/C++-API V 7.0.2 or newer. Before you can use the workflow, you must extend the DirX Identity Store schema with Notes target system-specific attributes and object classes so that the workflows can store Notes-specific information in the Identity Store. For instructions, see the section \"Extending the Schema for the Target System Workflows\". Configuring a Notes Provisioning workflow consists of the following steps: Configuring the Notes Connector (running in the C++-based Server) In Identity Manager, log in to Connectivity, go to the Expert View, and set the Is Active flag in Connectivity Configuration Data → Configuration → DirX Identity Servers → C Servers → server_name → Notes_Connector_name Verify the attributes of the C++-based Server (in ConSvr SOAP Listener and ConSvr SOAP Receiver tab) in Connectivity Configuration Data → Configuration → DirX Identity Servers → C Servers → server_name Configuring the Notes Service Assign the Notes server name in the following (Notes-specific) format: CN=server_name/O=org_name[/…​] Make sure that the attribute types in the server name (for example, CN, O, OU) are specified in uppercase letters. Example 1. Notes server name format CN=my-server/O=my-organization Configuring the Connected Directory Assign the Addr(ess) Book field. In the Provisioning tab, check the fields Account Base and Group Base in \"in Identity\" property page. user Base and Group Base in \"in Target System\" property page. Admin Request Database, Admin Request Author, Group Member Limit and Unique Org Unit Attr in \"Notes specific\" property page. For details see the section \"Static Configuration\" in the DirX Identity Connectivity Reference. Configuring the Bind Profiles At least two bind profiles are required: one for the Notes administrator (Admin) and another one for registering, moving or renaming users (Certifier). Others may be required when moving Notes users to different organizations or organizational units. (one per organization or organizational unit) Note that the User field of the bind profile is used as the file name of the appropriate Notes ID file. Furthermore, make sure that the file name exactly matches the file in the Notes profile when used as “PathFileCertId”. For details, see the section “Static Configuration” in the DirX Identity Connectivity Reference. Configuring the Organizational Specific Profiles For registration of users or moving users in the Notes address book, the Notes APIs need several attributes. For details, see the topic “Notes Connector” in the DirX Identity Connectivity Reference. Profiles are used for storing Notes-relevant attributes per organizational unit in order to avoid storing each attribute in the account separately. The profiles are located in domain_root → TargetSystems → Targetsystem_name → configurations → profiles At least one default profile must exist. It’s used when no organizational unit specific one is available. To support Notes groups and accounts in Identity Store, the service layer makes use of object descriptions and Java scripts that are located in domain_root → TargetSystems → Notes → ObjectDescriptions domain_root → TargetSystems → Notes → JavaScripts The following object descriptions are provided: Group.xml - for creation of Notes groups in the Identity Store Profile.xml - for creation of profile objects (profiles) in the Identity Store TS.xml - for creation of a Notes target system in the Identity Store TSAccount.xml - for creation of Notes accounts in the Identity Store The following Java scripts (called when processing the object descriptions) are also provided: mail.js - for creation of the mail attribute ProfileFromOU.js - for creation of the dxrProfileLink attribute UniqueNameForAccounts.js - for creation of the dxrPrimaryKey attribute for accounts (which represents the attribute FullName in Notes) UniqueNameForGroups.js - for creation of the dxrPrimaryKey attribute for groups (which represents the attribute ListName in Notes) The following section describes these object descriptions in detail. Object Descriptions This section provides detailed information about object descriptions. Group.xml The object description is used for creation of a Notes group in the Identity Store. Profile.xml The Notes APIs need several attributes for registration of users or moving users in the Notes address book. For details, please refer to the section Notes Connector” in the DirX Identity Connectivity Reference. Profiles are used for storing Notes-relevant attributes per organizational unit in order to avoid storing each attribute in the account separately. The profiles are located in domain_root → TargetSystems → Targetsystem_name → configurations → profiles At least one default profile must exist. It is used when no organizational unit specific one is available. The available attributes from the Notes profile objects are: Control parameters: CreateIdFile CreateMailDatabase CreateMailDBNow CreateNorthAmericanId SaveIdInAddressBook SaveIdInFile SaveInternetPassword DeleteMailFile Other attributes: CertifierStructure (will be passed as TargetCertifier to the Notes Connector) ClientType DbQuotaSizeLimit DbQuotaWarningThreshold DefaultMailServer (will normally be mapped to the attribute MailServer) LocalAdmin MailACLManager MailForwardAddress MailOwnerAccess MailServer MailSystem MailTemplate MinPasswordLength OtherMailServers PathFileCertId PathFileCertLog PathUserId RegistrationServer Validity TS.xml The object description is used for creation of a Notes target system in the Identity Store. TSAccount.xml The object description is used for creation of a Notes account in the Identity Store. New accounts inherit many attributes from the user. (for example, description, ou, and so on). The following attributes are explicitly set by the object description and hold the following default values: dxmLNcreateInAddressBook=true dxmLNregisterUser=true dxmLNuserRegistered=false dxmLNuserInAddressBook=false There are a few attributes that depend on others: dxrProfilesLink depends on ou dxrPrimaryKey depends on dxrProfileLink dxmLNuniqueOrgUnit depends on dxrPrimaryKey mail depends on dxmLNshortName Keep in mind that dxrProfileLink is only set for new objects (see description of ProfileFromOU.js) and therefore all the other attributes are only created and never changed. Java Scripts This section provides detailed information about Java scripts. Mail.js In the object description TSAccount.xml, the Java script mail.js is called to generate the mail attribute of the account. The value is calculated whenever the attribute dxmLNshortName changes or is created for the first time. The script checks whether the account object holds the attribute dxrProfileLink. If true, it uses the attribute dxrCreateObjDefaults(mail) of the profile. The value of that attribute is used as a suffix that is blindly appended to the calculated value of the mail address. If dxrCreateObjDefaults(mail) is not set or the attribute dxrProfileLink is not available, then no mail attribute value is returned. If the mail suffix is available, the mail attribute is calculated in the following way: value_of_givenName.value_of_sn.value_of_dxmLNshortName@mail_suffix If one of the attributes givenName, sn (surname), dxmLNshortName is not set, the missing components (including the delimiter for the next component) are dropped. The return value of the Java script is stored in the variable \"mail\". ProfileFromOU.js In the object description TSAccount.xml, the Java script ProfileFromOU.js is called to generate the dxrProfileLink attribute of the account. The value is returned in the variable dxrProfile and is set based on the value of the attribute ou. If a value of the organizational unit is present, the script tries to find the appropriate profile in the target system specific subtree domain_root → TargetSystems → TargetSystem_name → configuration → profiles by matching the ou value with the cn value of the profile. If no profile for that organizational unit was found or if the ou attribute in the account is empty, the Java script tries to find the default profile. If there is no default profile, the return value dxrProfile of the Java script is \"\". Note that the attribute dxrProfileLink is only calculated for new objects. If, for example, the ou changes in the user object, then the ou attribute in the account changes, too (by a master mechanism); nevertheless, the attribute dxrProfileLink is not updated (even if it depends on attribute ou). It is a workflow task (in the user hooks) to update the attribute dxrProfileLink after having renamed the user in the Notes address book. UniqueNameForAccounts.js In the object description TSAccount.xml, the Java script UniqueNameForAccounts.js is called to generate the dxrPrimaryKey attribute of the account. The value is returned in the variable UniqueNameAccount. The attribute UniqueNameAccount must be unique and is generated the following way: CN=value_of_givenName value_of_initials value_of_sn/OU=value_of_uniqueOrgUnit/O=value_of_orgUnit Setup of CN is straightforward. Missing components are simply ignored and the delimiter moves to the next components. The other components require a more sophisticated approach. For the components O and OU, the Java script reads the attributes dxrCreateObjDefaults(Unique) dxrOptions(TargetCertifier) of the relevant profile (that is defined in the attribute dxrProfileLink). The attribute dxrOptions(TargetCertifier) is used as value of the component O. The component OU is only set, if the attribute UniqueNameAccount is not yet unique. Therefore the Java script searches all accounts whose attribute dxrPrimaryKey matches the component CN and component OU. If no object with that name is found UniqueNameAccount is returned as CN=value_of_givenName value_of_initials value_of_sn/O=value_of_orgUnit If more than one object has been found, then the Java script function getUniqueOrgUnit analyzes the search results and returns the next available value for OU by using the base for OU (dxrCreateObjDefaults(Unique)) and appending a unique number. As opposed to UniqueNameForGroups.js, a unique account name is generated by the script itself. There is no need for the service layer to call the script several times to generate a unique value by a trial and error procedure. UniqueNameForGroups.js In the object description Group.xml, the Java script UniqueNameForGroups.js is called to generate the dxrPrimaryKey attribute of the group. The value is returned in the variable ListName. The Java script uses the attribute cn of the group as the ListName and generates a unique name by simply appending an integer value. The service layer provides the current value of that integer value in the variable $UniqueOrgUnit. The service layer tries to create the group with that name; if not unique, it will call the Java script again with an incremented value of $UniqueOrgUnit. If the Java script reaches the limit 100, it returns the string JavaScript.Error, which causes the service layer to stop creation of the group (because no unique list name could be generated). UniqueShortName.js In the object description TSAccount.xml, the Java script UniqueShortNames.js is called to generate the dxmLNshortName attribute of the account. The value is returned in the variable ShortName. The Java script sets up the value as follows: first letter of givenName first letter of sn employeeNumber The Java script checks whether that value is unique by calling the Java script function searchAccountName, which searches all accounts whose dxmLNshortName attribute matches that value (initial substring matching). If the attribute value is not unique, the Java script calls the function getUniqueCounter, which calculates the next available number to make the basic value unique. getUniqueCounter analyzes the search result (returned by searchAccountName) and returns the next available unique number. This unique number is appended to the basic value. As opposed to UniqueNameForGroups.js, a unique short name is generated by the script itself. There is no need for the service layer to call the script several times to generate a unique value by a trial and error procedure. The following figure shows the layout of the channels that are used by the join activity. Figure 93. Notes Workflow Channels and Objects The workflows handle these Notes objects: Person - a physical user in the Notes address book Group - a group in the Notes address book DirX Identity supports these Notes workflows: Ident_Notes_Realtime - this workflow is a Java-based synchronization workflow. It can run either scheduled or event-based. Event-based means that it is triggered by an account or group change in DirX Identity. Each modification of an account or a group, for example, adding an attribute to an account, adding a new group, adding/removing a member to or from a group or changing the group owner starts a workflow that propagates this change to Notes. Once the change is applied, it is propagated back to the account or group object in the DirX Identity target system, for example to adjust the group’s state or other data. Restore_Notes_Ident - this workflow is a scheduled validation workflow running from the Identity Store to the Notes address book. It imports persons and groups in the Notes address book using the associated Identity target systems accounts and groups. It creates new persons and groups in the Notes address book modifies existing persons and groups (for example, modifies the group’s members and other attributes according to the current group state) deletes persons and groups in the Notes address book This workflow is used to perform an initial load of the Notes address book and to keep the Notes address book in sync if changes are done in Identity target system (for example, accounts or groups are added or deleted). SetPassword_in_Notes - this workflow is a Java-based synchronization workflow that synchronizes the attribute dxmPassword of a target system account with the attribute HTTPPassword of a person in the Notes address book. Validate_Notes_Ident - this workflow is a scheduled validation workflow. It imports persons and groups from the Notes address book to the associated Identity target systems and creates new accounts and groups in the Identity Store modifies existing accounts and groups (for example, modifies the group’s members and other attributes according to the current group state) deletes accounts and groups in the Identity Store This workflow is used to perform an initial load of the Identity Notes target systems and to keep the Identity target systems in sync if changes are done in Notes (for example, persons or groups are added or deleted). This section describes Notes workflow ports. TS Port The ts port references the Notes connected directory and its channels. The channels contain the mapping definitions for the import of persons/groups to the Notes address book and the join definitions. The export parameters are also defined (for exporting persons and groups from the Notes address book). The following filters are defined: CF - Crypt Filter Standard crypt filter for password decryption. IdentityDomain Port The IdentityDomain port references the Notes channels (Channel Parent) of the Identity connected directory. The channels contain the mapping definitions for the import of accounts and groups from the Notes address book and the join definition for Identity. The export parameters are also defined (for exporting persons and groups from the Notes address book). There is no filter defined in the IdentityDomain port. Note that the validation workflow and the sync workflow use the same connected directory and channel configuration. Only the controller class is changed in the join activity. This section provides information about Notes workflow channels. This section describes the mapping and user hook details of the direction Identity Store to IBM Notes. Complex post-mappings and user hooks are required because the Notes target system handles some of the update requests asynchronously (using the adminP process) and problems arise if the previous request has not been successfully processed when the next request arrives. Therefore the Notes real-time workflows use an internal attribute dxrPendingRequest that indicates whether or not a request can be sent to the Notes system without resulting in an error. For details, please refer to the following sections. For a complete list and explanation of Notes-specific attributes, see the attribute section of the Notes connector description in the DirX Identity Connectivity Reference. Post-Mapping for Groups If the attribute dxrState in Identity Store is \"DELETED\", the operation (as part of the mapped entry) is set to DELETE. Post-Mapping for Accounts If the attribute dxrState in Identity Store is “DELETED”, the operation (as part of the mapped entry) is set to DELETE and the value of the attribute DeleteMailFile is set to 0. For Modify Requests, the following steps apply: For each modify request to the Notes connector, a check is performed whether there is a pending request available (these pending requests are stored in the attribute dxrPendingRequest). Presence of a pending request results in a check of the FullName of Notes against the attribute dxrPrimaryKey in the Identity Store. If the attributes are still the same, a trace entry (a warning) is written indicating that the current request will not be propagated (the Request-Type in the mapped entry is set to NONE). If the attribute values differ, then later on, the attribute dxrPendingRequest will be removed by the user hook preUpdate, because the user hook knows the connector for updating the attribute whereas the post-mapping procedure doesn’t. Next, the current request is analyzed. A check is made as to whether the request would result in both a Rename and a MoveInHierarchy operation. The Rename operation is detected by comparing the attributes LastName, FirstName, MiddleInitial and UniqueOrgUnit (identified by the UniqueOrgUnitAttrType attribute) of Notes against sn, givenName, initials and dxmLNuniqueOrgUnit in the Identity Store. If one of the values is different, a Rename operation is propagated. A MoveInHierarchy operation is detected by the existence of the attribute PathFileTargetCertId in the attribute list.) If both a Rename and MoveInHierarchy operation are detected, then the parameters for the MoveInHierarchy operation are dropped and a logging entry (a warning) is written. The MoveInHierachy operation (PathFileTargetCertId) will be propagated the next time the account is synchronized again to Notes. AC - com.siemens.dxm.join.userhook.notes.UserHookAccountsTo (user hooks for accounts) The following user hooks are used: User hook preUpdate This user hook checks whether the attribute dxrPendingRequest (set by an earlier request) could be reset. This is indicated by a change of the FullName which means that the request has been processed by Notes. If the FullName of Notes is different from the attribute dxrPrimaryKey in the Identity Store, then the attribute dxrPendingRequest is deleted. The user hook must provide additional attributes that are kept in the Notes profile object in the Identity Store. For this reason, the profile identified by the value of the attribute ou is selected. If no such profile exists or the value of ou is empty, then the default profile is selected. The source attribute list is extended by a set of attributes from the profile object. For details, see the section \"Notes Dynamic Configuration\" in the DirX Identity Connectivity Reference. Next, the user hook checks whether the account has been moved to another organizational unit in the Identity Store. This is indicated by a change of the ou attribute, whereas the attribute dxrProfileLink was not changed. If the entry was moved, then a potentially new Notes profile object needs to be assigned in the attribute dxrProfileLink. The user hook preUpdate determines which profile applies and stores the name of the new profile in the member variable newProfileName of the user hook. Later on, the user hook postUpdate will update that profile name in the Identity Store. Assignment of a new profile updates these attributes:* PathFileTargetCertId* (derived from the attribute PathFileCertId of the new profile) TargetCertifier Validity If no profile is available for the new ou and the old value of dxrProfileLink was mapped to the default profile, then propagation of MoveInHierachy to Notes is not possible as no new information for PathFileTargetCertId and TargetCertifier is available. If the attribute dxrProfileLink is not set (for example, because the account was created in an earlier DirX Identity version that did not support this attribute) then the user hook preUpdate evaluates a profile name using the value of ou. User hook postUpdate After a successful update in Notes this user hook checks whether the attribute dxrPendingRequest needs to be set. The existence of the attribute dxrPendingRequest guarantees that no other critical update operation (rename or move) on the same objects is initialized while the previous one is still running. The check comprises these tests: If the attribute dxmLNregisterUser is set to true, the user is registered in the Notes server and normally the FullName is generated. If the FullName is not available in the SPML-Response of the update request, then a pending request is generated. The attributes LastName, FirstName, MiddleInitial and UniqueOrgUnit (stored in the attribute defined by uniqueOrgUnitAttrType) of Notes are checked against the attributes sn, givenName, initials and dxmLNuniqueOrgUnit of the Identity Store. If there is a difference in one of these attributes and the FullName of Notes is still the same as dxrPrimaryKey in Identity Store, the attribute dxrPendingRequest is set. If the attribute PathFileTargetCertId is present in the attribute list, then a MoveInHierarchy operation needs to be executed by Notes. This is an indication to set the attribute dxrPendingRequest. The format of the attribute dxrPendingRequest is: date=date;PendingOperation=operation;PathFileCertId=value;PathFileTargetCertId=value;FullName=value Furthermore, if a requested move operation was successful, then the attribute dxrProfileLink is set to the value of the previously evaluated newProfileName (see the preUpdate user hook). This section describes the user hook details of the direction Identity Store to IBM Notes. For a complete list and explanation of Notes-specific attributes that are kept in the Identity Store, see the attribute section of the Notes connector description in the DirX Identity Connectivity Reference. AI - com.siemens.dxm.join.userhook.notes.UserHookAccountsFrom (user hooks for accounts) The following user hooks are used: User hook postUpdate The user hook checks after a successful update in Identity Store, whether the attribute dxrPendingRequest could be deleted. If the request contained an update of the attribute dxrPrimaryKey, then the attribute dxrPendingRequest has to be read first. The reason is, that it could have been set in the postUpdate user hook of Identity Store to Notes synchronization. Therefore, it is not available in the attribute list of the Identity Store on the way back due to the fact that the Identity Store is normally not read again. If dxrPendingRequest exists it will be deleted. A password channel updates the account passwords. A password channel can also be configured backwards from the connected system to Identity to be able to update some attributes in Identity after a password change or reset has taken place in the connected system. The join engine then as usual synchronizes the attributes specified in the corresponding password channel mapping to Identity after the account with its password-relevant attributes was updated in the connected system. The Medico Provisioning workflows operate between a target system of type Medico in the Identity Store and the corresponding connected Medico system. Because Medico provides an SPML/SOAP service, the workflows use the SPML connector (SpmlV1SoapConnector2TS) for provisioning. This connector communicates with the Medico SPML server. The following figure illustrates the Medico Provisioning workflow architecture. Figure 94. Medico Provisioning Workflow Architecture The workflows handle the following Medico objects: Person - the physical user. The Person object holds the demographic data and is not used for login. LoginID (or User ID) - the user login account ID. Each user can have one or more accounts to log into a Medico application. Different accounts are needed for different access rights. Access rights are expressed in terms of roles, profiles and groups. There are special accounts (“Sonderbenutzer” / “Sonderrolle”) with high access rights that are reserved for emergency situations. Role - the role associated with the LoginID. A role is composed of a set of entry points that regulate the applications and menu entries that are allowed for and presented to a LoginID. Profile - the profile associated with the LoginID. The profile contains information used mainly to determine the stations (beds) for which physicians are responsible. Group - the group associated with the LoginID. The group exists for historical reasons, but it can be used to specify general access rights, for example, printer access. A LoginID must have exactly one group associated with it. The following figure illustrates the relationships between Medico and DirX Identity objects. Figure 95. Relationships between Medico and DirX Identity Objects As shown in the figure, a Person and LoginID object on the Medico side are created from the Account entry on the Identity side. Groups within the Medico target system in DirX Identity have a type attribute. The corresponding object on the Medico side (Role, Profile, Group) is mapped according to this type attribute. The memberships between a LoginID and a Role or Profile are described as member attributes of a Role or Profile. Membership changes result in an add or delete member attribute at the Identity side. The membership between a LoginID and a Group is described in the groupid attribute of the LoginID. The Medico workflow requires medico//s Release 16 or higher. The Medico SPML server supports a subset of the SPML V1 request; in particular, the server does not support search requests without filter specifications. As a result, you must be careful when changing the configuration. For detailed information on the Medico SPML server, see the Medico documentation. This limitation also means that the real-time password workflow SetPassword currently does not work. Please use the \"setPassword in Medico\" workflow instead. To configure the connection to Medico: Specify the IP address and the data port at the Medico service object (Medico CD → Service). Configure the socket timeout at the workflow’s TS port. You may increase the timeout value (in seconds) for long SPML requests to the Medico SPML server (for example, searches with a large result set). Do not change the URL path. The Medico target system requires the following layout: Accounts - for each Medico LoginID, one account with dxrType=login is created in DirX Identity. The Medico target system in the Identity Store does not contain any Person objects. All accounts are located in a subfolder logins. Groups - the Medico role, profile and group objects are represented as groups in the subfolders Medico Roles, Medico Profiles and Medico Groups. The attribute dxrType is used to identify the type. The Medico-specific JavaScript superior.js is used to distribute the objects to the different folders. The following Medico-specific JavaScripts calculate the attributes dxrName and dxrPrimaryKey: calcDxrNameAcc.js calcDxrNameGroup.js calcPrimaryKeyAcc.js calcPrimaryKeyGroup.js The attribute dxrPrimaryKey contains the SPML ID in the target system: loginid=dxrName/employeeNumber,type=login groupid=dxrName,type=group profileid=dxrName,type=profile roleid=dxrName,type=role The attribute dxrName contains the employeeNumber for accounts and the cn for groups. Mastered attributes for accounts include: dxrProfession gender dayOfBirth mail street postalCode l c telephoneNumber title The following figure shows the layout of the channels that are used by the Medico workflow’s join activity. Figure 96. Medico Provisioning Workflow Channels and Objects A pair of channels (one channel per direction) exists for every Medico object (Role, Profile, Group, LoginID, Person). There are no member channels. Memberships are modeled as the member attribute. The following construction is used for the logins and persons channels: Identity side - the logins channel is the primary channel of the persons channel. Person data is merged with the login channel that represents the account. DirX Identity does not model a Person object. Medico side - the persons channel references the Medico Person object. Demographic data is passed in this channel. This section describes the Medico workflow ports. TS Port CR - Crypt Filter The standard crypt filter for password decryption. MF - Medico Crypt Filter A MedicoCrypt filter is implicitly configured. It is used to send the Medico password attribute pawo in the SOAP request decrypted to the Medico SPML server. This filter is used only for the initial password when a new login is added. This section provides information about Medico workflow channels. Direction: Identity Store → Medico mapAttrMaxLength - Medico attributes have a maximum length, and requests with attribute values exceeding this limit will fail. As a result, this mapping function truncates the value. mapAttrDefaultMaxLength - for convenience, an additional mapping function is defined which sets a given default value if there is no source attribute value. The function also truncates the value to the defined maximum length. mapValidFromAttr - in the Medico system, objects are never deleted. Each object has a validFrom and validTo attribute. The conversion is handled within this mapping function. Direction: Medico → Identity Store CommonProcsMedico.calculateIdInIdentity - calculates the Id. dxrType is set according to the type of the channel handles (login, profile, …​). dxrPrimarykey is set to the value of the source ID. dxrName is taken from the Medico id attribute (loginid, profileid, …​). Direction: Identity Store → Medico ID: \"pnr=\"$\\{source.employeeNumber}\",type=person Join: pnr= $\\{source.employeeNumber} A Medico person has two additional name attributes:* Namechr* surname, givenName Namechrnorm Namchr umlauts are expanded and converted to lowercase For details see the JavaDoc of mapNameChr and mapNameChrNorm Medico supports only one e-mail address per person. In DirX Identity, e-mail is defined as a multi-valued attribute. If there is no e-mail attribute value stored in Medico, the first value is taken from the DirX Identity e-mail attribute. If the value in Medico matches one of the DirX Identity values, nothing is changed. If not, the first value is taken. Direction: Medico → Identity Store Primary Channel login - join to primary via employeeNumber. Postmapping - prevents creating a Person object. Action is set to NONE if the action was set to add. Direction: Identity Store → Medico ID: the dxrPrimaryKey is used as the identifying attribute. Join: the join is performed with the ID. loginid: the dxrName value is used as the loginid. For new logins, a constant groupid DIRXOHNE is set (groupid is a mandatory attribute). LC - com.siemens.dxm.join.userhook.medico.UserHookAccountsTo preUpdate - creates a person if necessary postUpdate - if login was renamed, the old login is disabled Direction: Medico→ Identity Store LI - com.siemens.dxm.join.userhook.medico.UserHookAccountsFrom preUpdate: merge the person attribute to account. In the current workflow version, it should work without this user hook (primary channel construct). If you have an older version of this workflow, you need this user hook. A password channel updates the login passwords. A Password Channel can also be configured backwards from the Connected System to Identity to be able to update some attributes in Identity after a password change or reset has taken place in the Connected System. The join engine then as usual synchronizes the attributes specified in the corresponding Password Channel Mapping to Identity after the account with its password relevant attributes was updated in the Connected System. The Office 365 Provisioning workflows operate between a target system of type Office 365 in the Identity Store and the corresponding connected Office 365 endpoint. The workflows use the Office 365 connector (Office365Connector) for provisioning. This connector communicates with the Office 365 endpoint using RESTful API with JSON requests. The connector uses Office 365 OAuth server for authentication and authorization. The Office 365 workflows handle the following Office 365 objects: Account - the common Office 365 (Windows Azure) accounts. Group - the common Office 365 (Windows Azure) security groups. Role - the predefined Office 365 (Windows Azure) administrative roles. Service Plan - the access to the predefined Office 365 applications bound to a single Office 365 license (subscribed sku). The delivered workflows include: Validate_Office365_Realtime - the validation workflow that imports existing Office 365 accounts, security groups, roles and service plans together with assignment from Office 365 server to the Identity Store. Ident_Office365_Realtime - the synchronization workflow that exports detected changes for account and group objects including assignments from Identity Store to the Office 365 endpoint in the first step. The second step is to validate the processed changes in Office 365 endpoint to the Identity Store. SetPassword in Office365 - the SetPassword workflow that sets the password for the user object in Office 365. The following figure illustrates the Office 365 Provisioning workflow architecture. Figure 97. Office 365 Provisioning Workflow Architecture The Office 365 Provisioning workflows support only those object and attributes supported by the Office 365 connector. The workflows can handle only one valid Office 365 license (subscribed sku). Verify that services are correctly configured at the Office 365 connected directory. The Office 365 Service referenced by the connected directory should contain the default value graph.microsoft.com with SSL enabled. The referenced Office 365 OAuth Service should contain the full URL https://login.microsoftonline.com/*tenantID/oauth2/token*. Verify that both Graph API (https://graph.microsoft.com) and the OAuth service (https://login.microsoftonline.com/tenantID/oauth2/token) are accessible from the host where the Office 365 workflows will run. Office 365 connected directory and provisioning workflows support the central HTTP proxy server configuration. See the section \"HTTP Proxy Server Configuration\" for details. DirX Identity must be registered as a valid principal service for your existing Office 365 tenant domain. Use Windows PowerShell commands to create a principal service. You can also use an existing script CreateServicePrincipal.ps1 which can be freely downloaded from Internet. As a result of the configuration, you will obtain an application principal ID and a symmetric key used for authentication to the OAuth service. Configure the tab Graph API and enter your Office 365 Tenant and Application ID. Enter the generated client key in the Application Secret field. Make sure that the registered principal service representing DirX Identity has sufficient rights. For basic user synchronization and group assignment, the Office 365 role User Account Administrator is sufficient. The assignment of the Office 365 roles requires assignment of the Company Administrator role. Use Microsoft PowerShell to administer the rights of the principal service. Note that the default validity for the Application Secret is one year. The Office 365 OAuth service will refuse incoming requests that use an expired key. Renew the Application Secret also in Microsoft PowerShell when necessary. Check the Provisioning settings used by the connected directory and then set them to the real values for your provisioned target system. The Office 365 target system requires the following layout: Accounts – all Office 365 accounts are located in a subfolder Accounts. Groups/Security Groups – all Office 365 groups are located in a subfolder Security Groups. Groups/Roles – all Office 365 roles are located in a subfolder Roles. Groups/Service Plans – all Office 365 service plans that belong to a single valid Office 365 license (subscribed sku) are located in a subfolder Service Plans. The dxrPrimaryKey attribute of accounts, groups, roles and service plans contains the unique ID generated by the Office 365 endpoint. The dxrLicense attribute is automatically populated if any active service plan assignment exists. It’s deleted when the last service plan is unassigned from a user. It uses the obligation mechanism (see service plan objects) and the target system-specific JavaScript AccountSkuId.js. The group membership (security groups, roles and service plans) is stored at the account object and references the dxrPrimaryKey attribute of group objects. Configure the Tenant Domain property at the target system at the Options tab. This value is used as a suffix for the Office 365 User Principal Name (dxmADsUserPrincipalName). The following figure shows the layout of the channels that are used by the join activity. Figure 98. Office 365 Provisioning Workflow Channels and Objects The Office 365 objects and membership are synchronized via a pair of channels (one channel per direction). This section describes the Office 365 workflow ports. TS Port CF - Crypt Filter An Office 365 filter is configured implicitly. It is used to send the decrypted password attribute password to the Office 365 endpoint. This section provides information about Office 365 workflow channels. Direction: Identity Store → Office 365: ID: dxrPrimaryKey Join: ${source.dxrPrimaryKey} accountEnabled - the attribute used to disable the account object in Office 365. The correct value is derived from the dxrState attribute of the corresponding account object in the Identity Store. AC - com.siemens.dxm.join.map.office365.accounts.to.UserHookSyncServicePlansAndSkuId preUpdate - removes the mapped values for the attributes skuId and disabledPlans with values for joined entry in order to prevent the synchronization of these attributes. postUpdate – checks whether a synchronization of the skuId and disabledPlans attributes is necessary. It actualizes the list of disabled service plans according to the current list of assigned service plans in Office 365. It also removes an unused license (sku) for an Office 365 account. Direction: Office 365 → Identity Store ID: ${joinedEntry.id} or \"cn=\"${source.displayName}\",\"+${env.role_ts_account_base} Join: ${source.dxrPrimaryKey} or ${target.id}. dxrTSState - the attribute used to detect the current state of the account in Office 365. The correct value is derived from the accountEnabled attribute of the corresponding account object in Office 365. It is set to DELETED when no account entry is found. AI - com.siemens.dxm.join.map.office365.accounts.from.UserHookGetServicePlans prolog - creates a list of available service plans for a valid Office 365 license. It makes them available for other mapping classes. Direction: Identity Store → Office 365 ID: dxrPrimaryKey Join: ${source.dxrPrimaryKey} Post-Mapping - if the dxrState attribute in the Identity Store is DELETED, the operation (as part of the mapped entry) is set to DELETE. Direction: Office 365 → Identity Store ID: ${joinedEntry.id} or \"cn=\"${source.displayName}\",cn=security groups,\"+${env.role_ts_group_base} Join: ${source.dxrPrimaryKey} or ${target.id}. dxrTSState - the attribute used for detection of the real state of the group in Office 365. It is set to ENABLED for existing entries; for non-existing entries, it is set to DELETED. Direction: Identity Store → Office 365 RC - com.siemens.dxm.join.map.office365.roles.to.UserHookRolesTo processSourceEntry - prevents synchronization of role objects to Office 365 since roles are read-only. Direction: Office 365 → Identity Store ID: ${joinedEntry.id} or \"cn=\"${source.displayName}\",cn=roles,\"+${env.role_ts_group_base} Join: ${source.dxrPrimaryKey} or ${target.id}. dxrTSState - the correct value is derived from the roleDisabled attribute of the corresponding role object in Office 365. It is set to DELETED when no role entry is found. Direction: Identity Store → Office 365 SC - om.siemens.dxm.join.map.office365.plans.to.UserHookServicePlansTo processSourceEntry – this user hook prevents synchronization of service plan objects to Office 365 since service plan are read-only parts of an existing Office 365 license. Direction: Office 365 → Identity Store ID: ${joinedEntry.id} or \"cn=\"${source.servicePlanName}\",cn=service plans,\"+${env.role_ts_group_base} Join: ${source.dxrPrimaryKey} or ${target.id}. dxrTSState - the attribute used for detection of real state of the service plan in Office 365. It is set to ENABLED for existing entries, for non-existing entries it is set to DELETED. A password channel updates the Office 365 account passwords. The member channel configuration holds the mapping of the group members. Direction: Identity Store → Office 365 The mapping of the memberOf attribute is handled in a special Java mapping function. It separates membership for service plans and sends the result to Office 365. The Office 365 connector can handle both role and group memberships. The service plans and license assignments are handled in the AC user hook (user channel user hook). Direction: Office 365 → Identity Store The mapping of the member state dxrGroupMember attributes is standard for all attributes. The information about assigned groups, roles and service plans in Office 365 is joined. The OpenICF Windows Local Accounts Provisioning workflows operate between a target system of type OpenICF in the Identity Store and the corresponding OpenICF .Net connector server, which is configured for communication with a Windows Local Accounts and Groups database using the OpenICF connector bundle WindowsLocalAccounts.Connector.dll. The WindowsLocalAccounts.Connector.dll bundle represents the OpenICF Windows Local Accounts connector, which is described in the DirX Identity Connectivity Reference in the section \"OpenICF Windows Local Accounts Connector\". The following figure illustrates the OpenICF Windows Local Accounts deployment. Figure 99. OpenICF Windows Local Accounts Deployment As shown in the figure, the Java-based UNIX-OpenICF connector sends a request to an OpenICF .Net connector server which runs on a Windows platform. The OpenICF connector server passes the request to the Windows Local Accounts connector bundle. The bundle then establishes a connection to the specified Windows host and performs the operations on the host’s local Security Account Manager (SAM) database. It is possible to provision several Windows hosts using a single OpenICF .Net connector server. For a more detailed description about deployment scenarios, see the DirX Identity Connectivity Reference → \"OpenICF Windows Local Accounts Connector\". For a detailed description of the DirX Identity Java-based UNIX-OpenICF connector, see the DirX Identity Connectivity Reference → \"UNIX-OpenICF Connector\". The following figure illustrates the OpenICF Windows Local Accounts Provisioning workflow architecture. Figure 100. OpenICF Windows Local Accounts Provisioning Workflow Architecture The workflows handle the following Windows local system objects: Account (synonymously also named User) - the Windows local system accounts. Group - the Windows local system groups. The delivered workflows are: Ident_WinLA-OICF_Realtime - the synchronization workflow that exports detected changes for account and group objects from the Identity Store to the Windows system and then validates the processed changes in the Windows system to the Identity Store. SetPassword in WinLA-OICF - the workflow that sets the password for the account in the Windows system. Validate_WinLA-OICF_Realtime - the validation workflow that imports existing Windows accounts and groups including group assignments from the Windows system to the Identity Store. All prerequisites and limitations refer to the connector and are therefore described in the DirX Identity Connectivity Reference \"OpenICF Windows Local Accounts Connector\" section. Before you configure the workflows, install and configure the OpenICF .Net Connector Server as described in the DirX Identity Connectivity Reference → OpenICF Windows Local Accounts Connector. Then configure the following: From the WinLA-OpenICF connected directory that represents the Windows Local Accounts system to be provisioned, go to the OpenICF Connector Server tab and from there to the connected directory that represents the OpenICF Server (Generic connected directory type) and specify the IP address or the host name and the data port of the OpenICF Server service object. Adapt the bind profile for the OpenICF Server: set the password that is configured as a shared secret with the OpenICF connector server and enable SSL if it is enabled on the OpenICF server side. Using SSL may require additional configuration steps. See the section \"UNIX-OpenICF Connector\" in the DirX Identity Connectivity Reference for details. On the WinLA-OpenICF connected directory, specify the IP address or the host name of the targeted Windows system at the WinLA-OpenICF service object. No port number is required here. Then set the bind profile properly. Because the OpenICF .Net Connector Server is started under credentials with appropriate access rights for managing the target Windows systems, no user name must be specified. A user name beginning with \"dummy\" would have the same effect because it is not used for building a connection to the target Windows system. The password is ignored in these cases. Specify the Response Timeout property on the OpenICF Connector Server tab of the WinLA-OpenICF Connected Directory. The default value is 30 and should be sufficient. Check the settings related to the OpenICF connector bundle at the TS port object tab OpenICF Connector Bundle, which usually must not be changed. The properties to define are Bundle Name (default: WindowsLocalAccounts.Connector), Bundle Version (default: 1.4.0.0) and Class Name (the default is Org.IdentityConnectors.WindowsLocalAccounts.WindowsLocalAccountsConnector). Assign the resource family OpenICF in the IdS-J server. The target system requires the following layout: Accounts - all Windows accounts are located in a subfolder Accounts. Groups - all Windows groups are located in a subfolder Groups. The attributes dxrName and dxrPrimaryKey of accounts contain the name (SamAccountName) of these objects in the connected Windows system. The standard JavaScript dxrNameForAccounts.js generates the attribute dxrName for the Windows account. The attributes dxrName and dxrPrimaryKey of groups contain the name (SamAccountName) of these objects in the connected Windows system. The account object also stores the group membership and references the dxrPrimaryKey attribute of the group objects. The following figure shows the layout of the channels that are used by the OpenICF Windows Local Accounts workflow’s join activity: Figure 101. OpenICF Windows Local Accounts Provisioning Workflow Channels This section describes the ports of the workflows. TS Port CF - Crypt Filter This filter is configured implicitly. It is used to send the decrypted password attribute PASSWORD to the OpenICF connector server. This section provides information about the OpenICF Windows Local Accounts workflow channels. Direction: Identity Store → WinLA -OpenICF Direct mapping dxrPrimaryKey → ID - where dxrPrimaryKey is built by the common JavaScript dxrNameForAccounts, producing a unique account name in the Identity target system. Java Source mapping → ENABLE - the attribute is used for enabling or disabling the account in the Windows system. The value is derived from the dxrState attribute of the corresponding account object in DirX Identity. Direct mapping dxmPassword → PASSWORD - which is used only on an add request. Join - ${source.dxrPrimaryKey} Direction: WinLA -OpenICF → Identity Store Join via the dxrName attribute that is mapped in the same way as the dxrPrimaryKey attribute from $\\{source.id}. Direction: Identity Store → WinLA -OpenICF Direct mapping dxrPrimaryKey → ID– where dxrPrimaryKey is taken from the cn of the group in the Identity target system. Join - ${source.dxrPrimaryKey} PostMapping script - changes the type of the request to delete if dxrState=DELETED. Direction: WinLA -OpenICF → Identity Store Join via the dxrName attribute that is mapped in the same way as the dxrPrimaryKey attribute from ${source.id}. Direction: Identity Store → WinLA-OpenICF Java common class mapping Members → GROUPS. Direction: Identity Store → WinLA-OpenICF Direct mapping dxmPassword → PASSWORD Direct mapping dxmPasswordExpired → PASSWORD_EXPIRED The RACF Provisioning workflows operate between a target system of type RACF in the Identity Store and the corresponding connected RACF system. The RACF connector used in the workflows communicates with the LDAP server across the native LDAP protocol, as shown in the following figure: Figure 102. RACF Workflow Architecture The delivered workflows include: Ident_RACF_Realtime - the synchronization workflow that exports detected changes for account and group objects from Identity Store to the RACF end system and then validates the processed changes in RACF to the Identity Store. The workflow also generates a password if the object is created. When this workflow is triggered by a schedule or started directly in DirX Identity Manager, it also synchronizes the Users and Groups subtrees. SetPassword_in_RACF - the SetPassword workflow that synchronizes the user’s password to RACF when a password change in the Identity Store is detected. Validate_RACF_Realtime - the validation workflow that imports existing RACF accounts and RACF groups from RACF to the Identity Store. The RACF workflows have the following prerequisites and limitations: The RACF connector does not support nested group assignments. They cannot be read or written. The workflow and the connector do not handle the RACF group member limit for groups that are not default groups. Group memberships in the DirX Identity target system must be stored at the account. Group memberships must be stored at the accounts, so Reference Group from Account must be checked. Each RACF user must have a RACF default group. When a RACF user is to be created, the channel user hook of the Provisioning workflow calculates the default group to be used. It selects from a list of default groups that are configured in the target system using the Options tab → Default Groups. Make sure to fill in this list with enough groups to hold all the RACF users and make sure they already exist in RACF. Keep in mind that the maximum number of users per RACF group is limited to 5900. The Options tab of the target system also shows the field Last Used Default Group. It is managed by the workflow user hook and holds the last used default group. You do not need to fill in this field. As the RACF connector accesses the RACF system via LDAP, the properties for the LDAP service and bind profile apply. As with the LDAP connected directory, it is important to configure the base nodes for users and groups within the DirX Identity target system folder and in the connected system. The corresponding fields can be set in the connected directory’s Provisioning tab. If the tab is not visible, perform Reload Object Descriptors from the context menu. In addition, for a RACF system, you must configure the parent node for the connection objects (representing RACF user - group memberships) in the Specific Attributes tab. Provisioning Account Base - the base node for the account tree in the DirX Identity target system. Group Base - the base node for the group tree in the DirX Identity target system. User Base - the base node for the accounts in the RACF connected system. Group Base - the base node for the groups in the RACF connected system. Specific Attributes connect_base - the base node for the connect objects (user-group memberships) in the RACF connected system. This section describes RACF workflow ports. TS Port CF - Crypt Filter The configured Crypt Filter decrypts the password attribute racfPassword before passing it to the RACF connector. The attribute name is configured in the Target System tab of the TS port. This section provides information about RACF workflow channels. The members channel must be referenced from the accounts channel. Note the following attributes: racfid The racfid is used as an identifier for users in RACF and is stored in the DirX Identity target system account in the attribute racfid. The racfid cannot have more than 8 characters. racfDefaultGroup The default group for a RACF user is calculated in the channel user hook and passed as an artificial attribute of the source entry. For details on configuring default groups, see the section “Configuring the RACF Target System” in this guide. racfAttributes The racfAttributes attribute triggers special processing in the RACF LDAP service and represents their result when reading. The following values related to activating / deactivating a RACF user are set by the connector. They are calculated in the mapping function configured for this attribute: RESUME – set for unlocking a RACF user. REVOKE – set for locking a RACF user. After successful processing, RACF sets the value REVOKED. racfPassword Make sure to set an initial password when the account is created in the DirX Identity target system and map it from dxmPassword to racfPassword. When you observe the values PASSWORD or PROTECTED in the user’s racfAttributes in the RACF system, the typical reason is that the user has no password or an expired one. For more details on racfAttributes, see the IBM documentation, for example, https://www.ibm.com/docs/en/zos/2.5.0?topic=information-associating-ldap-attributes-racf-fields. Note that the attributes racfSuperiorGroup, racfOwner, and racfSubGroupName are only read from the RACF system. The racfid is used as identifier for groups in RACF and is stored in the DirX Identity target system group in the attribute racfid. Note that the racfid cannot have more than 8 characters. The members channel must be referenced from the accounts channel. The attribute dxrPrimaryKey must be mapped to the identifier. Password change operation The old password must be part of the password change request because RACF does not allow resetting a password. After the password is set, the connector performs an extra bind operation with the RACF user and the old password to set the new password. The two passwords are delivered in one string, separated by a slash character, for example, oldpassword/newpassword. The Salesforce Provisioning workflows operate between a target system of type Salesforce in the Identity Store and the corresponding connected Salesforce system. The Salesforce connector uses the REST API, which provides a powerful, convenient and simple Web services API for interacting with the Salesforce system. The Salesforce workflows handle the following Salesforce tables (note: in this section, SF indicates Salesforce objects and DXI indicates DirX Identity objects): SF Account - the Salesforce accounts. This table represents an individual account, which is an organization or person involved with a business (such as customers, competitors, and partners) and holds a ContactID, which is the ID of the user who currently owns the account. SF Contact - the Salesforce contacts. This table represents a contact, which is a person associated with an account. It holds the following important attributes: ContactID - the ID of the account that’s the parent of this contact. OwnerID - the ID of the owner of the account associated with this contact. SF PermissionSet - the Salesforce permission sets. This table represents a set of permissions used to grant more access to one or more users without changing their profiles or reassigning profiles. (The Permission Set object is available in the SalesForce API version 22.0 and newer.) SF Profile - the Salesforce profiles. This table represents a profile, which defines a set of permissions to perform different operations, such as querying, adding, updating, or deleting information. It holds a UserLicenseId, which is the ID of the UserLicense associated with this profile. SF User - the Salesforce users in an organization. This table holds the following important attributes: AccountID - the ID of the account associated with a customer portal user. This field is null for Salesforce users. ContactID - the ID of the contact associated with this account. This field is null for Salesforce users. The Salesforce workflows synchronize a Salesforce user (with its profile/user license information and optionally one or more permission sets) to a target system account in DirX Identity and store the SF Profile and SF PermissionSets as target system groups. Salesforce also supports the concept of community users, which are external users with access to a Salesforce community. These users require holding information about SF Contacts and SF Accounts. A community user uses one of the following user licenses: Customer_Community, Customer_Community_Login, Partner_Community, Partner_Community_Login. Salesforce stores community users in the same user table as other users. The only difference is the use of a few ProfileIds that are attached to these community user licenses. As a result, community users appear in the DirX Identity account tree of the target system. SF Accounts are mapped to DXI Organizations. They should reside in the subfolder Business Objects/SalesforceAccounts to distinguish them from other organizations. SF Contacts are mapped to DXI users. These users are assumed to be associated with organizations such as customers. Storing SF Contacts in the DirX Identity user tree makes them available to user relations and to delegated user management. Thus they can also be provisioned to other target systems. This design supports a global view compared to having everything in a target system. SF Contacts should reside in the subfolder Users/SalesforceContacts to distinguish them from internal users. The following figure illustrates how DirX Identity represents the Salesforce object model: Figure 103. DirX Identity - Salesforce Object Model The figure shows the DirX Identity objects on the left and the Salesforce objects on the right. On the DirX Identity side: The target system holds the DirX Identity accounts (which are SF users and SF (Community) users) and the DirX Identity groups (which are the SF Profiles and the SF Permission Sets). Outside the target system are the DirX Identity business organizations for SF Accounts and the DirX Identity users (for SF Contacts). The names enclosed in brackets () represent DirX Identity objects. The names of objects that appear underneath the DirX Identity objects are the corresponding Salesforce objects. On the Salesforce side: The SF users and the SF (Community) users are enclosed in a dashed-line box to indicate that \"normal\" users have no relationship to SF Account and SF Contacts whereas the SF (Community) users require the existence of an entry in the SF Account and in the SF Contact table. The arrows represent the links between the tables. The delivered Salesforce workflows include: Ident_Salesforce_Realtime - the synchronization workflow that exports detected changes for account and group objects from Identity Store to the Salesforce cloud and then validates the processed changes in Salesforce to the Identity Store. The workflow also generates a password if the object is created. When this workflow is triggered by a schedule or started directly in DirX Identity Manager, it also synchronizes the Users/SalesforceContacts and the Business Objects/SalesforceAccounts subtrees. Ident_Salesforce_SLSFAccounts_Realtime - the synchronization workflow that is triggered by an entry change event and exports detected changes for an object in the Business Objects/SalesforceAccounts subtree in Identity Store to the Salesforce cloud and then validates the processed changes in Salesforce to the Identity Store. Note that this workflow uses an entry change topic and therefore uses the following definition in the WhenApplicable section: Topic Prefix: dxm.event.ebr Type: aSFOrganization Cluster; * Domain: * This definition implies that an event policy for the object description aSFOrganization and the LDAP object class dxmSLSFaccount needs to be active. Ident_Salesforce_SLSFContacts_Realtime - the synchronization workflow that is triggered by an entry change event and exports detected changes for an object in the Users/SalesforceContacts subtree in Identity Store to the Salesforce cloud and then validates the processed changes in Salesforce to the Identity Store. Note that this workflow uses an entry change topic and therefore uses the following definition in the WhenApplicable section: Topic Prefix: dxm.event.ebr Type: aSFContact Cluster; * Domain: * This definition implies that an event policy for the object description aSFContact and the LDAP object class dxmSLSFcontactt needs to be active. Validate_Salesforce_Realtime - the validation workflow that imports existing SF Accounts, SF Contacts, SF PermissionSets and SF Profiles from the Salesforce cloud to the Identity Store. SetPassword in Salesforce - the SetPassword workflow that synchronizes the user’s password to Salesforce when a password change in the Identity Store is detected. The following figure illustrates the Salesforce Provisioning workflow architecture. Figure 104. Salesforce Provisioning Workflow Architecture SF Profiles and SF PermissionSets are only administered in Salesforce directly. (One of the reasons for this is that SF PermissionSets are very complex objects with a huge variety of permission flags). As a result, you always need to start by running the Validate_Salesforce_Realtime workflow to make these objects available in the TS groups subtree. Once these objects are available, you can fully administer the SF Accounts, SF Contacts and SF users directly in the Identity Store. When creating new entries in DirX Identity, the (Salesforce) Id attribute of such an entry is not yet known; it is synchronized back from Salesforce to Identity and the object in Identity is renamed (because the Id is stored in the cn in Identity). DirX Identity provisions both SF Profiles and SF Permission Sets as groups and stores them in the TS subtree groups → Profiles and groups → PermissionSets. When you assign Salesforce groups to a user, you must assign exactly one group that is an SF Profile and optionally one or more SF PermissionSets. SF Profiles and SF PermissionSets can be differentiated by the description attributes. SF Profiles are identified by the (PRF) prefix, for example: (PRF): Chatter Free User; (UL): Chatter Free Note that the substrings (UL) identify the underlying user license on which the SF Profile is based. SF PermissionSets are identified by the (PERM) prefix; for example: (PERM): (PRF): Chatter Free User; (UL): Chatter Free (PERM): (PRF): -; (UL): - (PERM): (PRF): -; (UL): Salesforce The substring (PRF) identifies the SF Profile that is assigned to that SF PermissionSet. The (UL) prefix identifies the underlying user license on which the SF Profile is based. (PRF) and (UL) may be absent (represented by a hyphen (-), if the SF PermissionSet is not attached to an SF Profile. In this case, such permission sets can be used in addition to any SF profile. Keep in mind that the SF Profile and the SF PermissionSet profile definitions must match. If they do not, they are in conflict and can’t be assigned in parallel. Before you can use the Salesforce workflows, you must perform the following tasks: Create and register a Remote Access application in the Salesforce system, as described in \"Registering the Remote Access Application\". Create the customer-specific attribute StatusInfoc to manage the status of Salesforce user deletion, as described in \"Creating the StatusInfoc Attribute\". Extend the DirX Identity Store schema with Salesforce target system-specific attributes and object classes so that the workflows can store Salesforce-specific information in the Identity Store, as described in the section \"Extending the Schema for the Target System Workflows\". The Salesforce connector acts as a remote application to the Salesforce system. As a result, you need to create a Remote Access application in the Salesforce system before you can use the Salesforce workflows. (For details, see https://developer.salesforce.com/page/Getting_Started_with_the_Force.com_REST_API). To register the remote access application: Log in to Salesforce.com with your (developer) account and then navigate to Setup > Develop > Remote Access. In the Connected Apps section, click New. In the next dialog, enter the following items: Connected App Name; for example, DirXIdentityConnector API Name; for example, DirXIdentityConnector Contact Email - your e-mail address In API (Enable OAuth Settings), select Enable OAuth Settings. Enter the following items: Callback URL; for example, https://localhost:88123/REST-API/callback Selected OAUth Scopes - select full access (full) When you click Save, you will see the following items in the API (Enable OAuth Settings) section: Consumer Key Consumer Secret Now your remote access application has been created. Consumer Key and Consumer Secret must be provided in the connected directory for Salesforce as described in \"Configuring the Salesforce Workflows\". Salesforce users can’t be deleted. In the Salesforce system, each user has an IsActive attribute that is set to false if the user is deleted. Furthermore the workflow sets the customer specific attribute StatusInfo__c of the Salesforce user to DELETED. So there is another task before you can run the workflows. You have to create the customer specific attribute StatusInfo_c: Log in to Salesforce.com with your (developer) account and then navigate to Setup > Build > Customize > Users > Fields. In the section User Custom Fields, click New. In the Data Type section, select Text and then click Next. In Step 2. Enter the details, enter the following fields: Field Label: StatusInfo Length: 16 Field Name: StatusInfo and then click Next. In Step 3. Establish field level security, select the Visible field and then click Next. In Step 4. Add to page layouts, the Add field and User Layout should already be selected. If they are not selected, select them, and then click Save. You will see the User Custom Fields again and you will see the new attribute StatusInfo with its internal API name StatusInfo__c. The internal name StatusInfo__c is used in the account-channel mapping and in the account-channel Export section as a filter. If you want to use another Salesforce attribute, you must change the account-channel mapping and the account-channel Export section. The following limitations apply: Currently, only Salesforce users and profiles are synchronized. A Salesforce user can only hold one value in the ProfileId attribute. Consequently, you can only assign one group (=Salesforce Profile) to a DirX Identity account. Salesforce users can’t be deleted. In the Salesforce system, each user has an IsActive attribute that is set to false if the user is deleted. Furthermore the workflow sets the customer-specific attribute StatusInfoc of the Salesforce user to DELETED, as described in \"Creating the StatusInfoc Attribute\". When you remove a group from an Identity Store user, the account is normally disabled. At the account (which also received the state DISABLED), you normally no longer see the assigned group in the Member of tab. The Salesforce workflows have a different behavior concerning the deletion of groups. The ProfileId attribute (which represents the assigned group) can’t be deleted at the Salesforce user. Thus, when synchronizing back to the Identity Store, the ProfileId is still returned in the search result and so, when applying the mapping for the dxrGroupMemberDelete attribute, the value doesn’t change (will not be deleted). As a result, you will always see the group (ProfileId) with the state DELETE in the Member of tab of the account. Salesforce profiles can’t be created/deleted using the Salesforce connector. As a result, you must run the Validate_Salesforce_Realtime workflow as the first action once you have set up your environment. When doing so, the Salesforce profiles are created as groups in the Identity Store. From now on, you can assign one of these groups to your Identity Store users. To configure the connection to Salesforce: Specify the IP Address in the Salesforce service object; for example, login.salesforce.com. Check the SSL flag. No Ports are required. Set up the bind credentials of the connected directory that represents the Salesforce system. Use a Salesforce user with sufficient rights. Enter Name, Password and Security Token (which you normally receive as e-mail from Salesforce, if you registered for the first time or if you changed your password). Set up the following items in your Salesforce connected directory (in the Salesforce tab): URL-Suffixes: For connecting to the Salesforce system using OAuth, enter: /services/oauth2/token For performing search and updates requests, enter the Salesforce API version you want to use. For example: /services/data/v30.0 Consumer Key - enter the consumer key of your remote access application. Consumer Secret - enter the consumer secret of your remote access application. Set up the following items in your Salesforce connected directory, if required (in the HTTP/HTTPS Proxy Server tab): In Proxy Server, the link to the proxy server modeled as a connected directory object. In Proxy Server Bind Profile, the link to the bind profile used by the proxy server. To configure the Salesforce workflows: Install the schema extensions required by the Salesforce workflows as described in the section \"Extending the Schema for the Target System Workflows\", selecting the Salesforce extensions. Assign the resource family Salesforce in the IdS-J server. The Salesforce target system requires the following layout: Accounts - all accounts (Salesforce users) are located in a subfolder Accounts. Groups - all groups (Salesforce profiles) are located in a subfolder Groups. The Salesforce users and profiles are synchronized via a pair of channels (one channel per direction). The membership in Identity (Salesforce attribute ProfileId) is stored on accounts. See the default Salesforce workflow for details. This section describes the Salesforce workflow ports. TS Port CF - Crypt Filter A Salesforce crypt filter is implicitly configured. It is used to send the decrypted password attribute Password to the Salesforce system. In the Account channel mapping, many LDAP attributes are mapped one-to-one to Salesforce attributes. The following attributes receive special handling: EmailEncodingKey, LanguageLocaleKey, LocaleSidKey, TimeZoneKey - these mandatory attributes are generated via a Java Source mapping, but only for an ADD operation. The attributes are not stored in the Identity Store. In the Java Source mapping, either the LDAP attribute language or c is evaluated. Password - remember that the account’s password is inherited from the user object in Identity Store when you assign a group (=Salesforce profile) to a user (and then implicitly the account is created). If no password is present at the user, the account’s password is initially set to dirxdirx1. Check to make sure that the passwords comply with the password policies in effect for the Salesforce system. If the default password dirxdirx1 is not useful for your purposes, you need to change the object description for Salesforce (cn=TSAccount.xml,cn=Object Descriptions,cn=Salesforce,cn=TargetSystems,cn=Configuration,cn=). Email - the Email attribute in the Salesforce system is a single-valued attribute; in the Identity Store, the corresponding LDAP mail attribute is a recurring attribute. As a result, the Java Source mapping operates as follows: If the attribute is not yet set in the Salesforce system, the value of mail that fits best with the attribute dxrName is mapped to Email. (remember that the Username attribute in Salesforce is derived from dxrName in the Identity Store, and that Username and Email in the Salesforce system normally appear to be similar or are even the same.).If none of the values of mail matches with dxrName, the first value of mail is mapped to Email. If the value of Email is already set in the Salesforce system, this value is retained \"as is\" if it is available in the mail attribute in the Identity Store. If the value of Email in the Salesforce system is completely different from the values of mail in the Identity Store, the value is generated as if it was not yet set in the Salesforce system. Phone - the Phone attribute in the Salesforce system is a single-valued attribute; in the Identity Store, the corresponding LDAP attruibute telephoneNumber is a recurring attribute. As a result, the Java Source mapping operates as follows: If the attribute is not yet set in the Salesforce system, the first value of telephoneNumber is mapped to Phone. If the value of Phone is already set in the Salesforce system, this value is retaiined \"as is\" if it is available in the telephoneNumber attribute in the Identity Store. If the attribute value of Phone in the Salesforce system is completely different from the values of telephoneNumber in the Identity Store, the first value of telephoneNumber is mapped to Phone. StatusInfoc - the customer-specific attribute StatusInfoc is set to DELETED if the corresponding dxrState attribute in the Identity Store is set to DISABLED or DELETED. IsActive - the IsActive attribute is set to true if the corresponding dxrState attribute in the Identity Store is set to DISABLED or DELETED. When a new account is created by assigning a Salesforce group to a user in Identity Store. Mappings are defined for the Salesforce attributes Name, Description, LicenseId and ProfileId. However, because SF PermissionSets cannot be added, modified or deleted, you should avoid making changes to the groups in Identity Store. (Note that these mappings are only present to define the set of attributes that is read when synchronizing from Salesforce to Identity Store.) Make the changes in Salesforce and then run the Validate_Salesforce_Realtime workflow to update the groups in the Identity Store. Many attributes are simply mapped one to one or comparable attribute names are mapped (for example, Name to cn). The dxrPrimaryKey attribute of groups contains the identifier (the Id attribute in Salesforce) of the Salesforce profile objects. The dxrName attribute contains the Salesforce Name attribute. Mappings are defined for the Salesforce attributes Name, Description, UserLicenseId and UserType. However, because Salesforce profiles cannot be added, modified or deleted, you should avoid making changes to the groups in Identity Store. (Note that these mappings are only present to define the set of attributes that is read when synchronizing from Salesforce to Identity Store.) Make the changes in Salesforce and then run the Validate_Salesforce_Realtime workflow to update the groups in the Identity Store. Many attributes are simply mapped one to one or comparable attribute names are mapped (for example, Name to cn). The dxrPrimaryKey attribute of groups contains the identifier (the Id attribute in Salesforce) of the Salesforce profile objects. The dxrName attribute contains the Salesforce Name attribute. Mappings are defined for the Salesforce attributes Name, Description, LicenseId and ProfileId. However, because SF PermissionSets cannot be added, modified or deleted, you should avoid making changes to the groups in Identity Store. (Note that these mappings are only present to define the set of attributes that is read when synchronizing from Salesforce to Identity Store.) Make the changes in Salesforce and then run the Validate_Salesforce_Realtime workflow to update the groups in the Identity Store. Many attributes are simply mapped one to one or comparable attribute names are mapped (for example, Name to cn). The dxrPrimaryKey attribute of SF Accounts contains the identifier (the Id attribute in Salesforce) of the SF Accounts objects. The dxrName attribute contains the Salesforce Name attribute. When creating an SF Account in Identity Store, take the following steps: Set the attribute “Provision To Salesforce”; if it is not set, the SF Account is not synchronized to Salesforce. Assign an “Owner” in the “Owner Information” section; note that the “Owner Id” is automatically set when assigning the “Owner”. Set additional attributes. Note that the BO organization in Identity Store that you just created is renamed by the workflow and the cn then holds the id attribute of the new SF Account in Salesforce. Many attributes are simply mapped one to one or comparable attribute names are mapped (for example, dxmSLSFwebSite to cn). The dxrPrimaryKey attribute contains the identifier (the Id attribute in Salesforce) of the SF Contact objects. The dxrName attribute contains the Salesforce Name attribute. The member channel mapping for PermissionSetId (which contains both the Ids for the SF Profile and the SF PermissionSets) sets the attribute ProfileId in Salesforce when assigning groups to a user in Identity Store. It also creates/updates/removes the internal Salesforce Permission Set assignment. Password changes in the Identity Store (in the LDAP attribute dxmPassword) are transferred as a modification of the pseudo-attribute Password. An additional modification request is also sent to the Salesforce system to reset the user’s password. When you subsequently log in to Salesforce, the system asks you to enter a security question with its answer. On this Web page, you need to enter the new password (and the security question/answer); but you don’t need to change the password again. Many attributes are simply mapped one-to-one or comparable attribute names are mapped (for example, CompanyName to o). The dxrPrimaryKey attribute of accounts contains the identifier (the Id attribute in Salesforce) of the Salesforce user object. The attribute dxrName contains the Salesforce Username. Remember, too, that for most of the attributes, the onAddOnly flag is set in the mapping because the assumption is that the Identity Store holds the master data and thus the Identity Store will never be overwritten with updates from Salesforce. Many attributes are simply mapped one-to-one or comparable attribute names are mapped (for example, UserLicenseId to dxmSLSFuserLicenseId). The dxrPrimaryKey attribute of accounts contains the identifier (the Id attribute in Salesforce) of the SF Profile object. The attribute dxrName contains the Salesforce Name. Many attributes are simply mapped one-to-one or comparable attribute names are mapped (for example, LicenseId to dxmSLSFuserLicenseId). The dxrPrimaryKey attribute of accounts contains the identifier (the Id attribute in Salesforce) of the SF PermissionSet object. The attribute dxrName contains the Salesforce Name. Many attributes are simply mapped one-to-one or comparable attribute names are mapped (for example, Fax to facsimileTelephoneNumber). Note that the schema maps the Salesforce attributes to attributes in the Identity Store using the same name and the prefix dxmSLSF; for example, Site is mapped to dxmSLSFsite. The dxrPrimaryKey attribute contains the identifier (the Id attribute in Salesforce) of the SF Account object. The attribute dxrName contains the Salesforce Name. Many attributes are simply mapped one-to-one or comparable attribute names are mapped (for example, MobilePhone to mobile). Note that the schema maps the Salesforce attributes to attributes in the Identity Store using the same name and the prefix dxmSLSF; for example, OtherPhone is mapped to dxmSLSFotherPhone. The dxrPrimaryKey attribute contains the identifier (the Id attribute in Salesforce) of the SF Contact object. The attribute dxrName contains the Salesforce Name. The SAP ECC (formerly R/3) UM Provisioning workflows synchronize data between a target system of type SAPR3UM in the Identity Store and the corresponding connected SAP ECC system. In the following sections, R/3 is synonymous with ECC. The SAP R/3 UM connector used in the workflows communicates with the SAP R/3 system across the SAP Java connector JCo. The following figure illustrates the SAP R/3 UM workflow architecture. Figure 105. SAP R/3 UM Workflow Architecture The validation, synchronization and password workflows allow you to synchronize DirX Identity account and group objects with SAP R/3 user, role and profile objects. The SAP R/3 UM workflows have the following prerequisites and limitations: The SAP Java Connector JCo must be installed on the machine where the SAP R/3 UM connector runs. It can be downloaded free of charge from the SAP Web pages. Roles and profiles are not allowed to be created in SAP R/3 by the underlying SAP BAPI interfaces, so the synchronization workflows can only modify user-SAP role or user-SAP profile assignments. Before you can use the workflows, you must extend the DirX Identity Store schema with SAP R/3 UM target system-specific attributes and object classes so that the workflows can store SAP R/3 UM-specific information in the Identity Store. For instructions, see the section \"Extending the Schema for the Target System Workflows\". This section provides information about SAP R/3 UM target system configuration. Connectivity View Configure the SAPR3UM connected directory with the connected directory configuration wizard from the Global View target real-time scenario. You are guided through the steps. The main configuration tasks are: Specify the IP address or host name of the SAP R/3 UM service object (SAP application server). Specify username and password in the bind profile. Specify account and group base of the target system in provisioning. Specify the values on the parameters page, mainly client Id, system number and whether you work with a CUA enabled system or not. Provisioning View When creating the account, the attribute dxrName is created with a target system-wide unique value. You can see this in the tsaccount.xml object description. Also the attribute sapUsername is filled with this value. sapUsername is used for generating the identifier passed to the SAP R/3 connector when synchronizing the account to the SAP R/3 connected system. In the DirX Identity direction, the dxrName attribute is used for joining. In the SAP R/3 UM target system, the members are referenced from the account objects. The reference attribute is the cn attribute of the groups. Also in the connected SAP R/3 system the memberships are held by the accounts. The following figure shows the layout of the channels that are used by the join activity. Figure 106. SAP R/3 UM Workflow Channels and Objects As the figure shows, there is a pair of channels between accounts, groups and members on each side. The members are linked to the accounts on both sides, so there is no cross channel relationship. This section describes SAP R/3 UM workflow ports. TS Port CF - Crypt Filter The configured crypt filter is used to send the password attribute PASSWORD.BAPIPWD decrypted to the SAP R/3 system. This section provides information about SAP R/3 UM workflow channels. Master attributes Almost all attributes except a few special ones like dxrTSState are mastered by DirX Identity. Consequently, in the mapping direction to DirX Identity, these attributes have set the OnAddOnly flag and in the target system direction this flag is not set. However, some attributes cannot be changed for single users through the mapping. Those attributes, for example ADDRESS.STREET, are linked to an extra table for a certain group of users, where they are set by the SAP R/3 administrator. CUA- or non CUA system The workflow does not need to be adapted depending on whether or not the connected system is a CUA (Central User Administration) system. The workflow mappings and post-mappings handle the difference transparently. Direction: Identity → Connected System The attribute dxrTSState is a pseudo attribute of the SAP R/3 connector. That is it is not passed to the SAP R/3 system as an attribute, but is interpreted by the connector, which performs the corresponding actions depending on the values ENABLED, DISABLED or DELETED. Direction: Connected System → Identity The attributes ISLOCKED.LOCAL_LOCK and ISLOCKED.GLOB_LOCK, which are set depending on whether a CUA or non-CUA system is connected, are read from the SAP R/3 connected system and converted by the dxrTSState Java mapping to the corresponding states in DirX Identity. Direction: Identity → Connected System The group mapping only results in modifications to the corresponding role in SAP R/3 because roles and profiles are not allowed to be created in SAP R/3 via an interface. Add operations are rejected by the SAP R/3 connector. Direction: Connected System → Identity The mapping, the export filters and the join filters of the group channels are configured to synchronize SAP R/3 roles - not profiles - to Identity groups. In both systems, DirX Identity and SAP R/3, accounts hold the memberships. Therefore, no cross-channel relationship is required. Direction: Identity → Connected System Post-Mapping If a non-CUA system is connected, the target attribute ACTIVITYGROUPS.AGR_NAME must be mapped. If a CUA system is connected, the attribute dxrRole.NAME must be set. This action is handled in the Java PostMapping, which must have access to both attributes. The target systems password attribute PASSWORD.BAPIPWD is updated with the current password of the account in DirX Identity contained in the attribute dxmPassword. The dxrPwdReset attribute of the SAP R/3 connector, which determines whether the user must change the password on the next login, is set depending on the source attribute dxmPasswordExpired. This attribute was set beforehand by the Password Event Manager workflow listening for requests of Web Center or Password Listener. A Password Channel can also be configured backwards from the Connected System to Identity to be able to update some attributes in Identity after a password change or reset has taken place in the Connected System. The join engine then as usual synchronizes the attributes specified in the corresponding Password Channel Mapping to Identity after the account with its password relevant attributes was updated in the Connected System. The workflows can be customized to synchronize SAP R/3 profiles instead of SAP R/3 roles. To make this customization: Set up a corresponding object structure on the Identity side. Specify the prefix \"PROFILE:\" instead of \"ROLE:\" in the workflows export filter and identifier mapping of the group channel. Specify the corresponding member attributes in the membership mapping. The Service Management Provisioning workflows operate between a target system of type RequestWorkflow in the Identity Store and the external offline system. Instead of direct provisioning, the Java-based workflows start a corresponding request workflow instance for each provisioning action via the DirX Identity Request Workflow Services. This model assumes that there is an acting administrator who receives tasks via request workflow approval activities. He performs manual provisioning and then approves the task. For more information about manual provisioning, read the corresponding section in the DirX Identity Use Case Document \"DXI Service Management\". The workflows handle these common objects: Account - the account represents a common account in a target system. It represents any account-like object in the real (offline) system. Group - the group represents a common group in a target system. It represents any group-like object in the real (offline) system. The delivered workflows are: Ident_SvcMgmt_Realtime - the synchronization one-way workflow that exports detected changes for account or group objects from DirX Identity to the Workflow Service, which creates the appropriate request workflow instances. The Connectivity workflow does not update the entries in the external offline system directly. It only invokes a special request workflow that contains tasks for a human administrator. This means that there is no direct provisioning to the offline system. In this scenario, password management does not make sense because the administrator would see all user passwords. The scenario does not comprise initial load or validation workflows. Such workflows must be built as project-specific solutions; for example, via files. To configure the Service Management workflows, use the connected directory and workflow wizards. Connected Directory Wizard Open the connected directory wizard and open the Service object. Specify the IP Address of the host where the DirX Identity Request Workflow Service runs. This is the Java-based Server that is configured for the domain. DirX Identity is typically configured to accept SOAP requests for request workflow management on the pre-configured unsecured port 40000 (and on the secured port 40443). Workflow Wizard Open the workflow wizard. Click the Join Activity General Info tab. Here you can configure the timing parameters for the join activity. Click the Request Workflows Settings tab. Here you can configure the URL Path and Socket Timeout at the target system port of the appropriate workflow object. The URL Path of the Workflow Service is pre-configured to the default value workflowService/services/WorkflowService. Do not change this setting. Set the timeout value (in seconds) in Socket Timeout if necessary. Enter LDAP name of the provisioning domain into the optional Domain property. It enables the Java-based Server to identify if the request is for the correct domain. Primary Workflow DN is the valid DN of the active request workflow definition, which will be used for handling the generated requests. The primary workflow will always be invoked for account objects if configured. It will also be used for group objects if the Secondary Workflow DN is not set. Secondary workflow can be configured only for handling the group objects. The secondary workflow configuration is valid only if the primary workflow is also configured. If both primary and secondary workflow configurations are not set, the Workflow Service will try to find a suitable request workflow definition according to its When Applicable settings. It is recommended to configure at least a primary workflow. Remember that using a single request workflow definition requires an implementation that can handle two different object types. A service management target system requires the following layout: Accounts - in the DirX Identity target system, a corresponding account object exists for every account in the external offline system. All accounts are located in the subfolder Accounts. Groups - in the DirX Identity target system, a corresponding group object exists for every group in the external offline system. All groups are located in the subfolder Groups. The attribute dxrPrimaryKey has a special meaning. It stores the identification of the account or group object in the offline system. It is also a description that should be well-understood by an administrator performing the manual operation in the offline system. The slight modification of the object descriptions for account and group objects in the Provisioning configuration may be necessary in order to satisfy this goal. The following figure shows the layout of the channels that are used by the join activity: Figure 107. Service Management Channels and Object Types The service management account and group objects are synchronized via a pair of channels. Both channels use the same user hook implementation. This section describes the Service Management ports. TS Port Crypt Filter a service management filter is configured implicitly. It is pre-configured for custom usage only. This section provides information about Service Management Workflow channels. Direction: Identity Store → Service Management The workflow uses a special channel user hook implementation. The workflow gets the original SPMLv1 event along with tracked attribute changes initiated by the saved change of an account or a group object. Add or delete events are directly transformed to add or delete types of the mapped SPMLv1 request. A modify event can be transformed to a delete type if the tracked event modifications contain the change of the dxrState attribute with the added value \"DELETED\". Add and modify events always contain a list of changed attributes. These event attributes are taken and compared with the list of mapped attributes (channel configuration). The result contains the intersection of the attribute names contained in the event and in the mapped entry. If such an intersection is empty, no request is propagated. The generated request always contains the attribute values taken from the corresponding mapped attribute. Attribute values contained in the event are ignored. Direction: Service Management → Identity Store The workflow uses the one-way synchronization controller. Therefore no direct updates are possible. Direction: Identity Store → Service Management ID: ${source.id} Join: is not applicable since the connector always returns an empty result. State attribute: dxrState The user hook handles the events along with the mapped entries; see \"Common Aspects\". Direction: Identity Store → Service Management ID: ${source.id} Join: is not applicable since the connector always returns an empty result. State attribute: dxrState The user hook handles the events along with the mapped entries; see \"Common Aspects\". The SharePoint Provisioning workflows provision groups and group memberships between a target system of type SharePoint in the Identity Store and the corresponding connected SharePoint system. Supported SharePoint systems are SharePoint Server 2007, SharePoint Server 2010, SharePoint Server 2013 and SharePoint Server 2016. Microsoft introduced the claims-based identity model in SharePoint Server 2013. A claim is a piece of identity information, like name, email address, group membership or type of the identity. This model includes that SharePoint group memberships are kept in the form claims-based identity prefixdomain_name\\user_name. For instructions on how to configure the SharePoint workflows and the SharePoint target system to correctly provision group memberships, see the sections \"Configuring the SharePoint Target System\" and \"SharePoint Workflow Channels\". Because SharePoint uses the accounts from the Active Directory, a corresponding ADS workflow must be configured. The SharePoint workflow’s join activity uses the LDAP connector to connect to the Identity Store and the SharePoint connector to connect to the SharePoint server. Two default workflows are provided for DirX Identity SharePoint synchronization: Ident_SharePoint_Realtime_Clustered - performs synchronization to SharePoint. Validate_SharePoint_Ident_Clustered - helps to validate the SharePoint connected system with the related DirX Identity target system. The following figure illustrates the SharePoint Provisioning workflow architecture. Figure 108. SharePoint Provisioning Workflow Architecture Data Structures SharePoint is organized into sites. Each site has its own set of groups with a different set of access rights (called roles in SharePoint). SharePoint uses the Windows account names to identify users. Adding an account to a SharePoint group will grant the user the access rights that are attached to the group. Each SharePoint site has its own bind credentials that are related to a bind account. DirX Identity’s target system cluster feature is used to map this structure to DirX Identity. Each SharePoint site has its counterpart in a DirX Identity target system that is part of a common SharePoint cluster. The advantages of this approach are that only one workflow needs to be configured for use by all the clustered target systems and that clusters support a bind account mechanism. Each target system references one bind account that holds the credentials for the target system connection. This mechanism fits perfectly with the requirement of different bind credentials per site. Since SharePoint uses the Windows Active Directory accounts, account objects are not held in the SharePoint target systems. Each SharePoint target system references the associated Active Directory target systems by a peer target system link. In a group of an Identity SharePoint target system, the members are DN links to the user objects. Special SharePoint user hooks are added to the SharePoint workflows that transform user DNs to account names and vice-versa by evaluating the accounts in the linked peer target system related to the user by the dxrUserLink attribute. The SharePoint workflows have the following prerequisites and limitations: Before you can use the workflows, you must extend the DirX Identity Store schema with SharePoint target system-specific attributes and object classes so that the workflows can store SharePoint-specific information in the Identity Store. For instructions, see the section \"Extending the Schema for the Target System Workflows\". Configuring the SharePoint workflows consists of the following steps: Setting up SharePoint clustered target systems Setting up the SharePoint workflows Setting up a SharePoint SSL connection To set up a SharePoint cluster in the Identity Manager: Select the Provisioning → Target System view. Select New → Cluster Container at the top-level node and create a cluster container. For example, name it SharePoint. Select this container, and then select New Cluster to create a cluster for your SharePoint server. For example, name it SharePointServer1. It shall contain all SharePoint sites as target systems. Select the cluster object, and then select New Target System for each site. This action starts the Target System wizard. Note that the wizard does not create Java-based workflows because only one workflow is necessary for a SharePoint cluster (it handles all contained sites). To set up the synchronization and validation workflows, perform the procedure described in \"Configuring SharePoint Workflows\". The result is a structure like this: SharePoint SharePointServer1 Site1 Site2 …​ SharePointServer2 Site1 …​ All target systems use a common configuration tree with common object descriptions. Thus, after you create the first target system, move the configuration container from the target system one level up. Now it is a child of the cluster and lies in parallel with the target system. If you add the next target system to the cluster, the configuration container is automatically omitted. The following configuration steps must be performed at each SharePoint target system: In the General tab, add the links to the related peer target systems. These are the target systems containing the related active directory accounts. In the Server Connection tab, enter the URL of the related SharePoint site. In the Server Connection tab, edit the bind account. Click Edit and enter the bind credentials for the SharePoint site: domain**loginname (for example, *domain1\\admin*) and password. Save bind account and target system. If you don’t want to use the Target System wizard to create the SharePoint workflows, you can also: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select the copied workflow from the context menu of the workflow line, and then select Configure. Check that the Is applicable for parameters section is set correctly (for the synchronization workflow only; leave the parameters empty for the validation workflow): Type - must be set to SharePoint. Cluster - should be set to the Cluster field value of the target system objects in your corresponding cluster (Advanced tab, Match properties). Domain - set this field to '*'. This action defines that this workflow runs for all target systems in your target system cluster, which means it runs for all sites in your SharePoint server. To create an SSL connection to SharePoint: Create a trust store (a keystore containing the certificate of the trusted root certification authority). Configure SSL in DirX Identity. Creating the Trust Store The trust store is a Java keystore that is created using the keytool supplied with the Java Runtime Environment. The certificate is obtained by exporting it from the Internet Explorer’s key store of trusted root certification authorities. Export the certificate as DER encoded binary X.509 (.CER) to file, for example, SharePointCa.cer. To create a Java keystore containing this file, call the Java keytool with the following arguments: keytool -import -alias alias -storepass password -keystore keystore_filename -file certificate_filename alias can be randomly chosen, and it must be unique if multiple certificates are stored in the keystore. password is the keystore password. It must be entered later on as the trustStorePassword in the DirX Identity target system configuration. keystore_filename is the keystore file name. It should have the extension .jks certificate_filename denotes the file containing the certificate, with the extension .cer keytool asks if this certificate is trusted. You must answer \"Yes\" if you want to use this certificate. Here is a sample call: keytool -import -alias sharepoint -storepass changeme -keystore SharePointCaCerts.jks -file SharePointCa.cer This call creates a keystore file SharePointCaCerts.jks containing the certificate exported in the first step. It is called a trust store since it contains certificates of trusted authorities. Configuring SSL in DirX Identity Select the DirX Identity target system and choose the Server Connection tab. Set the following parameters to set up SSL: Site URL - set the site URL beginning with https and using the secure port (by default, 443). A sample structure of the URL is https://server:port/sites/site Path to Trust Store File - set the fully-qualified path name of the trust store file created in the preceding step. Trust Store Password - set the trust store password. Note that the password should be scrambled or RSA-encrypted. You must then restart the Java-based Server to apply the changes. Users are not created in SharePoint but are taken from a peer target system. Note that the SharePoint user hook supports multiple peer target system links. If you set multiple links, all accounts a user has in the related target systems are enabled for the SharePoint site. The next sections describe the settings of the target system in more detail. Advanced Settings The match properties Type, Cluster and Domain are part of the event topic that is sent when a group is changed. They are used to select the appropriate workflow and to identify the target system in the workflow: Type - must contain the fixed value SharePoint (do not change!). Cluster - should contain the name of your SharePoint server (can be a symbolic name). Domain - should contain the SharePoint site name. The assignment properties should not be changed. You must check Enable Realtime Provisioning to start an event-based workflow for a group change. Disable Password Sync should be set because the accounts reside in the Active Directory domain. Server Configuration This tab allows setting the URL. It contains the host address and the port. Normally SharePoint is accessed via port 80. In case of SSL, port 443 is used. The reference to the bind account is entered here, holding the bind credentials for the related site. Note that the account’s dxrName attribute must contain domain*\\account;* for example, domain1\\admin. The password must be stored in the bind account’s dxmPassword attribute. To achieve this, you must change the userPassword attribute of the bind account in the Data View. Connector Configuration You can configure the following values for an optional proxy server: Host - host name of the proxy server (optional). Port - port of the proxy server (optional). User - user for proxy server authentication (optional). Password - password for proxy server authentication (optional). You can configure the following values for the connector: User Name Prefix - is used in sites whose members follow the syntax prefixaccount_name. For example the prefix ptdssomember: is used for sites with member syntax ptdssomember:*account_name. Note that you must configure an empty *domainnameattribute at the connected directory of those sites. Search Groups from Site Collection - a Boolean flag indicating that the groups must be searched from the site collection rather than from the specified (sub)site. If the subsite on your SharePoint server was created with inheriting the site collection (parent site) permissions, the groups created in this subsite are part of the site collection and are only contained in the search result for the subsite if this flag is set. If the subsite to be provisioned was created with unique permissions, this flag must not be set (default) if only the subsite’s groups are to be provisioned and not all site collection groups including those of subsites with inherited permissions, too. Debugging trace file: Trace File - a path and filename for the request. This file is useful in debugging mode to inspect the SPML requests towards the connector and the corresponding responses. Once the workflows become productive, delete or rename the option to prevent writing to the trace file. Environment Properties You can configure the following values: Domain\\Userloginname - a valid default user login name for a new group.. A user name in SharePoint versions before SharePoint Server 2013 is presented in the form domain**account. From SharePoint Server 2013 on, a user name is presented in the form of a claims-based identity type prefix (for a Windows claims identity type, the prefix is *i:0#.w|*) followed by domain*\\*account. If this default_userloginname is set, it is used as the defaultUserLoginName when a new group is created in SharePoint. If it is left empty, the group’s default userloginname is populated from the user provided with the bind account. Default Owner → Owner - the default owner, if a group’s owner attribute on the DirX Identity side is not populated. The SharePoint attribute ownerIdentifier is mandatory for creating a group in SharePoint. The owner type, whose default value can be set in the environment property default_owner_type, must be either User or Group. If the owner type is User, the value for the default owner must be a valid username in the syntax domain**account or claims_based_prefixdomain*\\*account depending on the SharePoint Server version as described in Domain\\Userloginname. If the owner type is Group, the default owner must be the name of a group in the same SharePoint site.. Default Owner → Owner Type - the default owner type. Allowed values are User and Group. Base DN (mandatory) - the base DN for groups in the current target system. This DN is used as a parent folder for the groups imported from the validation workflow. It is automatically set during save of the target system to the value *cn=Groups,*dn of target system. The following figure shows the layout of the channels that are used by the SharePoint workflow’s join activity. Figure 109. SharePoint Provisioning Workflow Channels and Objects DirX Identity supports these SharePoint workflows: Ident_SharePoint_Realtime_Clustered - this workflow is a Java-based synchronization workflow. It can run either scheduled or event-based. Event-based means it is triggered by a group change in DirX Identity. Each modification of a group - for example, adding a new group, adding/removing a member to a group or changing the group owner - starts a workflow that propagates this change to SharePoint. Once the change is applied, it is propagated back to the group object in the DirX Identity target system, for example, to adjust the group’s state or other data. Validate_SharePoint_Ident_Clustered - this workflow is a scheduled validation workflow. It imports groups from SharePoint sites to the associated DirX Identity target systems and modifies the group’s members and other attributes according to the current group state. This workflow is used to perform an initial load of the DirX Identity SharePoint target systems and to keep the DirX Identity target systems in sync if changes are made in SharePoint (for example, groups are added or deleted). This section describes the SharePoint workflow ports. TS Port The TS port references the SharePoint connected directory and its channels. The channels contain the mapping definitions for export of groups to SharePoint and the join definition for SharePoint. IdentityDomain Port The IdentityDomain port references the SharePoint channels (Channel Parent) of the DirX Identity connected directory. The channels contain the mapping definitions for import of groups from SharePoint and the join definition for DirX Identity. Note that the SharePoint validation workflow and the synchronization workflow use the same connected directory and channel configuration. Only the controller class is changed in the join activity. This section provides information about SharePoint workflow channels. At the SharePoint connected directory, the directory type LDAP is used since the required configuration parameters are almost the same. The clustered workflows ignore the SharePoint target system service and the bind profiles. These parameters are read from the target systems/bind profiles in the Provisioning domain. The Identity → Group Base property must not be set at the connected directory because it is different for each target system. In a clustered workflow, this value is overwritten by the target system-specific configuration attribute Group Folder → Base DN in the Environment Properties tab (attribute role_ts_group_base) in the Provisioning domain. The Target System → Group Base property of the connected directory must be set even though it is ignored when exporting the groups from the SharePoint server since all groups per site are flat. Some specific attributes of the Connected Directory are important for the workflows: accountnameattribute (mandatory) - the name of the LDAP attribute holding the Windows account name in the peer target system’s account objects. delete_group_enabled - a boolean flag. If set to true, deleting a group in DirX Identity results in a physical deletion of the group in the connected SharePoint site. If set to false, groups are not deleted in SharePoint. debug_to_screen - a boolean flag. If set to true, extra debug information is written to stdout. This attribute must be set to false in a production environment. domainnameattribute - the name of the LDAP attribute holding the Windows domain name in the peer target system’s account objects. If no value is specified, the domain of the bind account is added to the account name. In SharePoint Server versions prior to SharePoint Server 2013, the user name is composed of domain**account. In SharePoint Server 2013 and higher, the user name is composed of a claims-based identity type prefix (for a Windows claims identity type, the prefix is i:0#.w|) followed by domain**account. This means that the domain attribute (the default attribute name holding the domain name is dxmAdsDomain) of an account in the peer target system must consist of this claims-based prefix plus the domain name; for example, *i:0#.w|domain1*. In SharePoint sites that use the member syntax prefixaccount (for example, *ptdssomember:*account) the domainnameattribute must be left blank. This leads to the following behavior: In the sync direction (Identity to SharePoint) the members are created without the domain prefix in the join engine. The SharePoint connector then adds the prefix to the account name. In the validation direction (SharePoint to Identity), the connector strips off the configured prefix from the members. In the join engine, the corresponding accounts then are searched without domain name, only with the filter *cn=*account. If you use both sites with and without user name prefix, it may be necessary that you must configure two SharePoint clusters: one for the use with user name prefix (and empty domainnameattribute), and one for the use for members with syntax domain*\\*account (with domainnameattribute configured). filterblocksize - the maximum number of account names in one search filter. The account name-to-user mapping is performed via LDAP searches in DirX Identity. This attribute adjusts the maximum number of account names that are combined in one search filter. Direction: Identity Store → SharePoint GC - com.siemens.dxm.join.userhook.sharepoint.UserHookGroupsTo This user hook performs the following mapping functions: The group member DNs are converted to the target account names by searching the accounts in the peer target system according to their dxrUserLinks. The references member DN to domainname_account name_ are extracted from the accounts. If the owner DN points to a user, it is converted to domainname_account_ by the same mechanism. If it is a group, the group name is extracted. Export Section This section contains the search filter to export all SharePoint groups of one site. In the future, other object types (beside groups) may be handled, so an object class Group is introduced here. Mapping Section The DirX Identity to SharePoint mapping is: Identifier - the identifier is created in a Java mapping function. It contains the group’s cn. objectClass - set to the fixed value \"Group\" groupName - the cn of the group. ownerIdentifier - a Java source mapping that performs the following mapping: If a value for owner is present in the source entry, this valued is returned in the map result. Otherwise, the value for default_owner_type is read from the environment and returned in the map result. If none of the above is present, the ownerIdentifier is not deleted for a modify group operation; the old value is kept instead. For an add operation, the group creation will fail, because the ownerIdentifier attribute in SharePoint is mandatory. ownerType - a Java source mapping that performs the following mapping: If a value for owner is present in the source entry, this value is returned in the map result. Otherwise, the value for default_owner_identifier is read from the environment and returned in the map result. role - in the sample workflow, dxrHistoryRemoved holds the SharePoint role names. It is directly mapped to the sharePoint role attribute. You must choose your own attribute here if you intend to provision role names. description - direct mapping to the same attribute. defaultUserLoginName - a Java source mapping that performs the following mapping: If a value for owner is present in the source entry and the owner is a user, this value is returned in the result. Otherwise, the value for default_userloginname is read from the environment and returned in the result. Operational Mapping Section The remote members of the group are mapped to the operational attribute \"localMember\". This mechanism preserves local members so that they are not deleted in SharePoint. Join Section The join filter matches the group’s cn in DirX Identity against its SharePoint group name. Direction: SharePoint → Identity Store GI - com.siemens.dxm.join.userhook.sharepoint.UserHookGroupsFrom This user hook performs the following mapping functions: The target account names are converted to user DNs. Through the domainnameattribute and the accountnameattribute in the connected directory configuration, the account is searched in the peer target system. If found, the dxrUserLink attribute if populated holds the related user DN. If no DN is found for an account name, the member is mapped to \"remotemember\". The owner identifier is converted to a user or a group DN. If no DN is found, the owner is mapped to \"remoteowner\". Export Section The export section defines the search filter to export all groups of a SharePoint target system. As the search base role_ts_group_base is used, it is defined in the DirX Identity target system configuration (Base DN in the Environment Properties tab). Mapping Section The SharePoint to DirX Identity mapping is: Identifier - the identifier is created in a Java mapping function. If a joinedId already exists, this value is used. In a validation workflow, the group’s DN is built from the SharePoint groupName and the role_ts_group_base configured at the corresponding DirX Identity target system. objectClass - defines the object classes required for a target system group. description - direct mapping from the description in SharePoint. ownerType - the type of the SharePoint owner is mapped to dxrDefaultGroupType in the sample. You may need to change this mapping if you use dxrDefaultGroupType for other purposes. owner - the owner is mapped from the ownerIdentifier. Note that the user hook runs prior to the mapping and thus the ownerIdentifier is already a DN here. cn - the group’s common name is filled with the SharePoint groupName. dxrHistoryRemoved - this attribute is used to hold the SharePoint role names in the sample workflow. You should change this to another attribute if you intend to provision the roles. dxrState, dxrTSState, dxrTSLocal and dxrToDo - the standard mapping as, for example, in the LDAP-to-LDAP workflows is used here, too. Join Section The group is joined in DirX Identity by its DN created in the mapping section. The member channel configuration holds the mapping of the group members. Direction: Identity Store → SharePoint The mapping of the member attribute is handled in a special Java mapping function. It was copied from the LDAP-to-LDAP workflow. Direction: SharePoint → Identity Store Mapping Section The DirX Identity to SharePoint mapping is: dxrGroupMember attributes - the mapping of the member state attributes is standard for most attributes. Only dxrGroupMemberRemote and uniqueMember are mapped with special Java functions. dxrGroupMemberRemote - before the mapping, remotemember contains all SharePoint user names that cannot be mapped to a DirX Identity user. This situation occurs if the Windows account is not managed in a peer target system. The Java mapping function maps remotemember to dxrGroupMemberRemote. If no remotemember exists, dxrGroupMemberRemote is deleted. uniqueMember - in a target system without accounts but with states, uniqueMember must contain all users referencing the group. Once the user is removed from all group members, it is also removed from uniqueMember. The Unify Office Provisioning workflows operate between a target system of type Unify Office in the Identity Store and the corresponding connected Unify Office endpoint. The workflows use the Unify Office connector (UnifyOfficeConnector) for provisioning. This connector communicates with the Unify Office (RingCentral) endpoint using RESTful API with JSON requests. The connector uses the Unify Office (RingCentral) OAuth server for authentication and authorization. The Unify Office workflows handle the following Unify Office objects: Account - the common Unify Office (RingCentral) user (SCIMv2 conformant, translates to RingCentral extension object). The delivered workflows include: Validate_UnifyOffice_Realtime - the validation workflow that imports existing Unify Office users from Unify Office (RingCentral) server to the Identity Store. Ident_UnifyOffice_Realtime - the synchronization workflow that exports detected changes for account from Identity Store to the Unify Office (RingCentral) endpoint and then validates the processed changes in Unify Office (RingCentral) endpoint to the Identity Store. The following figure illustrates the Unify Office (RingCentral) Provisioning workflow architecture. Figure 110. Unify Office Provisioning Workflow Architecture The Unify Office Provisioning workflows only offer channels for the SCIM objects and attributes provided by the appropriate RingCentral API endpoint. The Unify Office Connector supports other objects as well, but since these are specific for voice telephony they are out of scope. Verify that services are correctly configured at the Unify Office connected directory. The Unify Office Service referenced by the connected directory should contain the default value platform.devtest.ringcentral.com with SSL enabled. This platform connects to the sandbox account; for production, it must be changed to platform.ringcentral.com. The Unify Office connected directory and Provisioning workflows support the central HTTP proxy server configuration. See the section “HTTP Proxy Server Configuration” for details. DirX Identity must be registered as a valid principal service for your existing Unify Office tenant (account). Use the Unify Office (RingCentral) developer portal https://developers.ringcentral.com/ to create your app and generate your client ID and client secret. Configure the bind profile for the Admin User when you plan to use the Resource Owner Password Flow and configure the bind profile for client authentication with the generated client ID and Client Secret field from your generated app. Check the Provisioning settings used by the connected directory and then set them to the real values for your provisioned target system. The Unify Office target system requires the following layout: Accounts - all Unify Office accounts are located in a subfolder Accounts. The dxrPrimaryKey attribute of accounts contains the unique ID generated by the Unify Office (RingCentral) endpoint. The following figure shows the layout of the channels that are used by the join activity: Figure 111. Unify Office Provisioning Workflow Channels and Objects The Unify Office objects are synchronized via a pair of channels (one channel per direction). This section describes the Unify Office workflow ports. TS Port CF - Crypt Filter A connector filter is configured implicitly. It is used to send decrypted passwords to the Unify Office endpoint. This section provides information about Unify Office workflow channels. Direction: Identity Store → Unify Office: ID: dxrPrimaryKey Join: ${source.dxrPrimaryKey} or userName=${target.userName} accountEnabled - the attribute used to disable the account object in Unify Office. The correct value is derived from the dxrState attribute of the corresponding account object in the Identity Store. Direction: Unify Office → Identity Store ID: \"cn=\"${source.userName}\",\"+${env.role_ts_account_base} or ${joinedEntry.id} Join: ${target.dxrPrimaryKey} or ${target.dxrName} or ${target.id}. dxrTSState - the attribute used to detect the current state of the account in Unify Office. The correct value is derived from the accountEnabled attribute of the corresponding account object in Unify Office. It is set to DELETED when no account entry is found. The UNIX-OpenICF Provisioning workflows operate between a target system of type OpenICF in the Identity Store and the corresponding connected OpenICF connector server which is configured for communication with a UNIX (Linux) system using the OpenICF connector bundle org.forgerock.openicf.connectors.solaris-connector (UNIX connector). The following figure illustrates the OpenICF connector server architecture. Figure 112. UNIX-OpenICF Connector Server Architecture As shown in the figure, the Java OpenICF connector sends a request to an OpenICF connector server which runs on a supported platform. Note that single an OpenICF server may support more connector bundles at the same time. The OpenICF server passes the request to the UNIX connector bundle. The bundle then establishes a SSH or telnet connection to a configured UNIX host and executes the necessary scripts. It is possible to provision more UNIX hosts using the single OpenICF connector server. The workflows use the specially preconfigured DirX Identity OpenICF connector for UNIX provisioning (OpenIcfConnector2Unix). This connector communicates with the OpenICF connector server using the special OpenICF protocol. See the section \"OpenICF Connector\" in the DirX Identity Connectivity Reference for more details. The following figure illustrates the UNIX-OpenICF Provisioning workflow architecture. Figure 113. UNIX-OpenICF Provisioning Workflow Architecture The workflows handle the following UNIX objects: Account - the common UNIX accounts. Group - the common UNIX groups. The delivered workflows are: Ident_UNIX-OICF_Realtime - the synchronization workflow that exports detected changes for account and group objects from Identity Store to the UNIX system and then validates the processed changes in the UNIX system to the Identity Store. SetPassword in UNIX-OICF - the workflow that sets the password for the account in the UNIX system. Validate_UNIX-OICF_Realtime - the validation workflow that imports existing UNIX accounts and groups with group assignments from the UNIX system to the Identity Store. The UNIX-OpenICF workflows have the following prerequisites and limitations: The delivered workflows require a properly deployed OpenICF connector server with a supported version of org.forgerock.openicf.connectors.solaris-connector (UNIX connector). DirX Identity delivers an enhanced version of this bundle based on version 1.1.1.0-SNAPSHOT. Some SUSE Enterprise Server distributions may not be able to completely remove secondary group assignments for a user. The OpenICF UNIX connector uses the common UNIX command usermod -G \"\" account_name. This command might not work correctly on SUSE distributions. In this case, deprecated secondary group assignments will remain unassigned. Before you can use the workflows, you must extend the DirX Identity Store schema with UNIX-OpenICF target system-specific attributes and object classes so that the workflows can store UNIX-OpenICF-specific information in the Identity Store. For instructions, see the section \"Extending the Schema for the Target System Workflows\". When performing the procedures described in this section, select the extensions for PAM-UNIX and UNIX. Building the connection to the UNIX system consists of two steps: Installing and configuring the Java-based OpenICF connector server Configuring the connection to the OpenICF connector server This section provides information on how to set up the Java-based OpenICF connector server. OpenICF Server Download a stable installation package for the Java OpenICF connector server on http://www.forgerock.org/openicf-archive.html. We recommend the version OpenICF Java 1.1.1.0 for compatibility reasons. Follow the installation instructions on http://openicf.forgerock.org/connector-framework-internal/connector_server.html. Configure the OpenICF server port, shared secret and create host certificates if you intend to use SSL. OpenICF UNIX Connector Bundle Deploy the delivered improved version of the UNIX connector bundle to your OpenICF connector server installation directory. After you have installed the feature for OpenICF connectivity, you can find the UNIX connector in the folder install_path/connectors/OpenICF/bundles/java (the file name is in the form solaris-connector-.jar*). Copy the file to the openicf_install_path*/bundles* directory. If there is an older version of the file solaris-connector-.jar* in this folder, delete it. The configuration of the connector bundle does not require any special steps. To configure the connection to a UNIX system using an OpenICF connector server: Specify the IP address or the host name and the data port of the OpenICF connector server with the deployed UnixConnector bundle. Adapt the bind profile for the OpenICF server - set the password that is configured as a shared secret with the OpenICF connector server and enable SSL if it is enabled on the OpenICF server side. Using SSL may require additional configuration steps. See the section \"OpenICF Connector\" in the DirX Identity Connectivity Reference for more details. All of these properties can be configured using the connected directory (Generic connected directory type) that represents the OpenICF server. It is referenced from the connected directory that represents the UNIX system (the OpenICF Server and OpenICF Server Bind Profile property on the OpenICF Connector Server tab). Specify the IP address or the host name of the UNIX system at the UNIX-OpenICF service object and then set the bind profile properly. UNIX-OpenICF connected directory represents a real UNIX system that will be provisioned by our workflows. Use the correct port numbers that are configured on the UNIX host for the desired type of communication (SSH or telnet). Use credentials with sufficient access rights (UNIX account and group management). Specify the Response Timeout property on the OpenICF Connector Server tab of the UNIX-OpenICF connected directory. Set the value that is sufficient for the selected bundle type (UnixConnector). The default value is 30. Check the settings related to the OpenICF connector bundle at the TS port of the workflow object (OpenICF Connector Bundle tab). The Bundle Specification area allows you to define the Bundle Name (the default is org.forgerock.openicf.connectors.solaris-connector), Bundle Version (the default is 1.1.1.0-SNAPSHOT) and Class Name property (the default is org.identityconnectors.solaris.UNIXConnector). Only use values that are valid for a connector bundle deployed on the OpenICF connector server. Override default values if necessary. The Bundle Settings area lets you choose the Unix Mode (use linux for Linux flavors), Connection Type (use ssh or telnet) and set the Shell Prompt (use the string character that is displayed at the beginning of the UNIX command prompt for the connected user. The hash tag (#) sign is typically used for the root account.) The UNIX-OpenICF target system requires the following layout: Accounts - all UNIX accounts are located in a subfolder Accounts. Groups - all UNIX groups are located in a subfolder Groups. The attributes uid, dxrName and dxrPrimaryKey of accounts contain the name (uid) of these objects in the connected UNIX system. The standard JavaScript dxrNameForAccounts.js generates the attribute uid for the UNIX account. The attributes dxrName and dxrPrimaryKey of groups contain the name (gid) of these objects in the connected UNIX system. The attribute dxmUnixPrimaryGroup for the UNIX account (refers to the primary UNIX group of the account) is by default automatically chosen as one of the currently assigned UNIX groups. It uses the obligation mechanism (see group objects) and the UNIX-OpenICF specific JavaScript AccountPrimaryGroup.js. The JavaScript updates the dxmUnixPrimaryGroup when necessary. You can change the primary group manually at the account object. The account object also stores the group membership and references the dxrPrimaryKey attribute of the group objects. The workflows support disabling of the accounts. In this case, a special primary group needs to be assigned for a disabled account since the primary group membership is mandatory for UNIX systems. You can configure the name of the group that will be used solely for disabled accounts. See the UNIX-OpenICF tab of the target system instance and the property Group for disabled accounts. Create a real group in the connected UNIX system with no access rights with the corresponding name (gid). The following figure shows the layout of the channels that are used by the UNIX-OpenICF workflow’s join activity: Figure 114. UNIX-OpenICF Provisioning Workflow Channels and Objects The UNIX objects account and group (and membership) are synchronized via a pair of channels (one channel per direction). This section describes the UNIX-OpenICF workflow ports. TS Port CF - Crypt Filter A UNIX-OpenICF filter is implicitly configured. It is used to send the decrypted password attribute PASSWORD to the OpenICF connector server. This section provides information about UNIX-OpenICF workflow channels. Direction: Identity Store → UNIX-OpenICF ENABLE - the attribute used for disabling the account in UNIX. The value is derived from dxrState attribute of the corresponding account object in DirX Identity. secondary_group - the attribute for secondary UNIX group membership detects changes of primary group assignment and adds the deprecated primary membership to secondary UNIX groups if necessary. It also removes primary groups from the list of secondary (supplementary) groups. Direction: Identity Store → UNIX-OpenICF ID: dxrPrimaryKey Join: ${source.dxrPrimaryKey} or ${source.uidNumber} The GROUPS attribute holds the name of the primary group. Direction: UNIX-OpenICF → Identity Store Join via the dxrName attribute that is mapped identically as the uid and dxrPrimaryKey attribute. Direction: Identity Store → UNIX-OpenICF ID: dxrPrimaryKey Join: ${source.dxrPrimaryKey} or {source.gidNumber} PostMapping script changes the type of the request to delete if necessary. Direction: UNIX-OpenICF → Identity Store Join via the dxrName attribute that is mapped identically as the dxrPrimaryKey attribute. The topics in this section provide configuration information about the Tcl-based target system (Provisioning) workflows, including: The types of Provisioning workflows that exist for each target system Object identification and group-to-account referencing A summary of target system reference, join, and primary key attributes For a description of the script structure used by the target system workflows, see \"Understanding the Default Application Workflow Technology\" > \"Understanding Tcl-based Workflows\" > \"Tcl-based Connectivity Architecture\" > \"Provisioning Workflow Script Structure\". This section provides details about the Tcl-based default target system workflows, including: HiPath workflow (Siemens) - describes details about the HDMS / HiPath 4000 Manager workflow Note that the Siemens HiPath synchronization workflow does not work from a DirX Identity target system - it works from the user tree of the Identity Store. See the HiPath workflow section for more information. ODBC workflow - describes details about the ODBC workflow RACF workflow (IBM) - describes details about the RACF workflow SiPass workflow (Siemens) - describes details about the SiPass workflows Each target system has a validation and a synchronization provisioning workflow. You can run the validation workflow in one of two modes: InitialLoad - exports all of the accounts and groups and the relationships between them from the target system and imports them into the relevant target system subtree in the Identity Store. It performs a full export of the target system and an import to DirX Identity in replace mode. This is the default mode. Validation - detects deviations between the state known in DirX Identity and in the target system, for example about created or deleted accounts and groups or their relationships in the target system. It writes messages about the deviations it finds into the \"to do\" fields of the affected target system objects in the Identity Store. It does a full export of the target system and an import to DirX Identity in replace mode. Initial load and validation modes use the same jobs and are almost identical. The only difference between them is the specific attribute mode of the workflow object, which is set to InitialLoad for the initial load workflow. The Provisioning common script checks this flag and writes the dxrToDo fields for a validation workflow run. The synchronization workflow exports all relevant changes from the DirX Identity accounts and groups subtree, imports them into the target system and acknowledges the changes back to the Identity Store. It does a delta export in both directions and imports the data to DirX Identity in merge mode. Both synchronization and validation workflows update the dxrTSState attribute and the group member attributes of the affected target system objects in the DirX Identity store with the state of the object in the target system. The Provisioning workflows for the default Connectivity scenario operate on both \"hierarchical and \"non-hierarchical\" target systems. In a hierarchical target system, entries (typically, accounts and groups) are ordered hierarchically in trees; LDAP and ADS are examples of hierarchical target systems. A non-hierarchical target system has a \"flat\" ordering of entries; Windows is an example of a non-hierarchical target system. This section provides referencing and joining information about the hierarchical and non-hierarchical target system workflows provided with the default scenario. This section provides general, referencing, and joining information for the ADS, Exchange, SAP EP UM, and LDAP hierarchical target system workflows. The hierarchical workflows for the ADS, Exchange, SAP EP UM and LDAP target systems map the hierarchical tree structure of the target system to the DirX Identity target system accounts and groups subtree. They use the DirX Identity attribute dxrPrimaryKey for account and group objects to hold the target system DN of the object. At the end of the initial load and validation workflows, the AccountRootInTs and GroupRootInTs parameters of the target system object in DirX Identity Provisioning are set to the values specified in DirX Identity Connectivity in the target system connected directory in the provisioning step. They define the account and group root distinguished name (DN) in the target system and are used in DirX Identity to create the dxrPrimaryKey attribute of an account or group object that is created in DirX Identity. The workflows for the target systems ADS, Exchange, LDAP and SAP EP UM use the dxrPrimaryKey attribute as the reference attribute from a group to an account. Because it holds the DN of the object in the target system, the DirX Identity group member attributes can be mapped directly to the target system member attribute and vice-versa. The Exchange and SAP EP UM workflows use the dxrPrimaryKey attribute for joining (identifying) a target system object with an object in the Identity Store. The LDAP workflows use the employeeNumber attribute and the ADS workflows use the sAMAccountName attribute for joining. This usage has the advantage that objects that have been moved in the LDAP or ADS directory are identified in the Identity Store and can be moved there if the flag Rename Allowed is set in the import properties of metacp. This section provides information about referencing and joining for the Windows NT and ODBC non-hierarchical workflows. The NT and ODBC non-hierarchical workflows use the cn attribute as the reference attribute from groups to accounts. The ODBC workflows supply an ODBC unique identifier in the dxrPrimaryKey attribute and use it for joining in subsequent workflows. The Windows NT workflows do not use the dxrPrimaryKey attribute; instead, they use cn, which holds the Windows NT account name, for joining. In the non-hierarchical workflows RACF and SAP R3 UM, the accounts contain the group member lists so that the groups are referenced from the accounts. This flag is set in the target system advanced page. The reference attribute of the RACF target system is the racfid of a group, and the reference attribute of the SAP R3 UM target system is the cn of a group. Neither of these target system workflows use the dxrPrimaryKey attribute. The RACF workflow uses the racfid for joining and the SAP R3 UM workflow uses sapUsername. The following table provides the reference attribute, reference direction, join attribute and dxrPrimaryKey for all of the target systems supported by DirX Identity. Reference Attribute Reference Direction Join Attribute dxrPrimaryKey ADS dxrPrimaryKey Group - Group sAMAccountName DN of TS object LDAP dxrPrimaryKey Group - Group employeeNumber DN of TS object LDAPXXL dxrPrimaryKey Account - Group employeeNumber DN of TS object ODBC cn Group - Group dxrPrimaryKey ODBC unique identifier JDBC cn Group - Group dxrPrimaryKey JDBC unique identifier Notes cn Group - Group cn (=LNfullName) not used RACF racfid Account - Account racfid not used SAPR3UM cn Account - Account sapUsername not used SAPEPUM uid Group - Group dxrPrimaryKey DN of TS object The reference direction indicates how the group memberships are stored in DirX Identity and in the target system. For example \"Group - Group\" indicates: Identity Store: the memberships are stored in attributes that point from the groups to the accounts. Target system database: the memberships are stored in attributes that point from the groups to the accounts. The group-side storage does not work for very large numbers of group members. In a company with 500,000 employees, all might be in the group \"Standard Employee\" which resides in 500,000 attribute values in one group attribute. Target systems (for example, LDAP directories) cannot handle groups of any size. If the memberships are stored on the account side, the limit is less critical because the number of groups of which a user can be a member will not be more than 10,000. This number can be handled by any LDAP server. The HiPath Workflow Ident_HiPath handles bi-directional synchronization between a Siemens Hicom Domain Management System (HiPath 4000) and the Identity Store (user area, not target system area!). The workflow communicates with the HiPath database using the Hicom XIE import/export interface. The following HiPath systems are supported: HDMS 3.1 HDMS 3.6 HDMS-US 5.2 HiPath 4000 Manager V1.0 HiPath 4000 Manager V3.1 The basic assumptions and prerequisites for the HiPath workflow are: MetaStore is entry master for the HiPath database. The HiPath database is attribute master for telephoneNumber and facsimileTelephoneNumber (hardcoded). The person entry in the LDAP directory must contain the attribute dxmOprOriginator. In the DirX Identity default scenario this is guaranteed via the objectClass dxrUser. The workflow performs the following steps in sequence: Activity Meta2HiPath_HiPath Activity HiPath2Meta_HiPath Before you can use the HiPath workflow, you must extend the DirX Identity Store schema with HDMS target system-specific attributes and object classes so that the workflow can store HDMS-specific information in the Identity Store. For instructions, see the section \"Extending the Schema for the Target System Workflows\". The default scenario HiPath workflow is: Ident_HiPath To complete the configuration for this workflow, you must set up the environment and then adapt some values in the Connectivity configuration. Set and test the environment as described in the \"Environment Setup\" topic in \"Default Application Reference\". Use the configuration wizard in the Identity Manager Global View as follows: Go to the Default scenario and double-click the connected directory icon HiPath. In the wizard window, click the icon to the right of the Service field. Set the Server Name and IP Address fields. Click OK. Click Hicom DMS Parameters. Select the HiPath Version and set the correct Remote Mode parameters (see the context- sensitive help in the DirX Identity Connectivity Administration Guide). Click OK, and then click Finish. Next, set the parameters of the workflow as follows, but only if you selected HDMS 5.2 as the version: Right-click the workflow line between the connected directory icons Identity Store and HiPath. In the pop-up menu, select the workflow Ident_HiPath and then click Configure. Click Ident2HiPath Attribute Mapping, then: Change the output attribute text3 (this one is not supported by the US version) to another unused attribute, for example info3. Change the output attribute longname (this one is not supported by the US version) to another unused attribute, for example room. Click HiPath2Ident Attribute Mapping, then: Change the input attribute text3 (this one is not supported by the US version) to another unused attribute, for example info3 (use the same one you selected for Ident2HiPath Attribute Mapping). Click Finish to close the wizard and save your changes. Now the workflow should run. The workflow transfers some information back to the Identity Store (for example, the telephoneNumber and facsimileTelephoneNumber). This workflow does not create or delete any entries (it assumes that the Identity Store is the master for entries). For details, see the next sections. This section describes the operation and the prerequisites of the Ident2HiPath_HiPath activity. Delta operation at the LDAP side. Filter: Status = ENABLED or TBDEL. Updates HiPath in merge mode (ADD operations are converted to INSERT operations in HiPath, MODIFY operations are converted to UPDATE operations in HiPath and DELETE operations are converted to DELETE operations in HiPath). The workflow handles referential integrity for HDMS 3.X: If the Workflow detects that entries in HDMS tables COMPIMP, ORGIMP, BUILDIMP, LOCIMP are required before creating a Person in HDMS, it will create these entries implicitly. The basic assumptions and prerequisites for this activity are: The attributes dxrState, dxmOprOriginator and createTimeStamp should be selected at the source side. If you intend to use an attribute other than dxrState as the status attribute, you need to customize the export post mapping and the export search filter. This activity performs a full or delta export of meta directory entries into a CSV file, which it then imports into an HiPath database. It has the following phases: Initialization - This phase reads the relevant directory data and the complete HiPath database into a data file. This phase also creates a metacp index list handle that represents the database sorted by DMSIDs and a handle that represents the database sorted by join criteria (for example, employee Number) which is created in full mode only. Comparison - This phase compares the directory and HiPath and derives the required HiPath update actions, including creation of the related HiPath update request file. Update - This phase updates the HiPath database using the request file created in the comparison phase. In full mode, export works as follows: it selects entries from the Identity Store (filter dxmOprStatus = ENABLED or TBDEL) and transfers them to the HiPath directory. For each entry in the directory search result, it considers the following cases: Directory entry has related HiPath entries. In this case, perform these steps for each related DMSID: Find related HiPath entry by DMSID. If there is no match, this is considered as an inconsistency to be resolved by the administrator. The entry will be documented in the trace file as missing in HiPath. If there is one match, update the related HiPath entry if directory entry is in state ENABLED (in particular, trace HiPath entry as up-to-date if no changes have been detected), and delete the related HiPath entry if the directory entry is in state TBDEL Directory entry does not have related HiPath entries. Try to find the related HiPath-entry via best-guess-match and distinguish the following cases: No HiPath-entry matches. If the Directory entry is in state TBDEL, nothing is to be done for that entry. Otherwise INSERT entry into HiPath. More than one HiPath-entry matches. This ambiguity will be documented in the trace file. Exactly one HiPath-entry matches. Consider the following subcases: Directory entry is in state ENABLED. If the match is unique also in the directory. perform an UPDATE operation for updating the related HiPath-entry where the attributes to be synchronized are taken from the directory. The directory entry will also be updated with the related DMS-Identifier (if not yet present in the directory entry). Directory entry is in state TBDEL If the match is unique also in the directory, then DELETE the related entry in HiPath. In delta mode, there is a slight difference: for directory entries without related HiPath entries: The creationTimestamp of the Directory entry is evaluated (no best-guess-match). Entries with a creationTimestamp that is more recent than export-last-update-time will lead to an INSERT in HiPath. Entries with a creationTimestamp that is less recent than export-last-update-time are assumed to have related HiPath entries from previous synchronization cycles. Therefore, such an entry (old creationTimestamp and no related HiPath entry) will be discarded and documented in the trace file. The HDMSAgent uses a remote copy command in order to transfer files to the remote host, and a remote shell command to execute the HDMS request on the remote host: The related remote copy command is rcp (remote copy) if the value of the remote_secure_interaction parameter is FALSE, and the command scp (secure shell), if the parameter value is TRUE. The related remote shell command is rsh (remote shell) if the value of the remote_secure_interaction parameter is FALSE, and the command ssh (secure shell), if the parameter value is TRUE. The meta controller script controls the remote HiPath system as follows: Creation of a request file, for example, x.req. Copy request file to remote host, using the remote copy command. Invoke the script remote_hdms on remote host, using said remote shell command. The script remote_hdms calls dmsieproc with request file (for example, x.req), the response file (for example, x.rsp) contains the result of each request specified in request file. Copy response file from remote host using the remote copy command. To make this work correctly, you must set up the environment. See the section \"Setting Up the HiPath Environment\" for details. This section describes the operation and the prerequisites of the HiPath2Ident_HiPath activity. Updates Directory in merge mode. Performs MODIFY operations only. A DELETEd HiPath-Entry is propagated as Directory MODIFY operation (it removes those attribute values which are correlated with the HiPath-Entry). A INSERTed/UPDATEd HiPath-Entry is propagated as Directory MODIFY operation (it updates those Attribute values which are correlated with the HiPath-Entry). It links multiple HiPath entries to one Directory Entry. The basic assumptions and prerequisites for this activity are: The attributes objectClass, dxmOprOriginator and all attributes necessary for the join operation must be selected at the target side. This step performs a full or delta export of HiPath Person (PERS) entries into a CSV file, which it then imports into a meta directory database. The performed steps are: Getting updated/deleted PERS-table entries from HiPath. In delta-mode, an appropriate SQL-like filter regarding creation/modification time is passed to HiPath. Connecting to the directory. For each record in the result obtained in step 1, try to find the related Directory entry first by a join operation with employeeNumber, then with DMS-Identifier in the dxmOprOriginator attribute. If the number of matches is different from one, document this fact in trace file. If the match is unique, perform a MODIFY operation as follows: For a deleted HiPath entry, remove the corresponding phone and fax numbers from the directory entry. For an inserted/updated HiPath entry, update the corresponding phone and fax numbers from the directory entry. Notes: The parameter Multi Master Attribute List (from HiPath2Ident Entry Handling) specifies the list of attributes being subject to the special handling in import as described in this section above. The default setting defines the special handling (including maintenance of attribute dxmOprOriginator) to be applied for attributes telephoneNumber and facsimileTelephoneNumber only. The parameter Keep Unmastered Attributes (from HiPath2Ident Entry Handling, default “TRUE”) controls whether or not unmastered (for example, manually entered attribute values) will be preserved. The agent can handle LDAP directory entries and HiPath PERS table entries. Each LDAP directory entry that corresponds one-to-one with a HiPath entry will be extended by the objectClass value dxrUser. This concept is a general concept for multi mastering of attribute values. Currently it is only implemented for the HiPath workflow. The method should be used sparingly because it decreases performance when used with a high number of entries. The relevant attributes of this objectClass for the HiPath workflow are: dxrState (status) - Only Directory Entries with status ENABLED and TBDEL are subject to synchronization into HiPath. dxmOprOriginator - A multivalued attribute in the form “value x of attribute y originates from entry of target system system”. The purpose of this attribute is storage of attribute mastership information. The attribute structure is: masterkeyattribute_name#attribute_value with master - Name of the master system. The Master Name operational attribute of the connected directory is taken to define this value. key - unique identifier for an entry in related target system (for the HiPath workflow the DMSID is used) attribute_name - the mastered LDAP attribute name (for example telephoneNumber) attribute_value - the mastered LDAP attribute value (for example +49 89 722 12345) Sample Attribute values are: HDMS#12345#telephoneNumber#+49 89 123 12345 HDMS#23456#facsimileTelephoneNumber#+49 89 987 65432 HDMS#34567## The first line represents the assertion “Attribute value #+49 89 123 12345 of attribute telephoneNumber originates from entry with DMSID=12345 of the master system with Master Name HDMS\". The last line represents just a link to a HiPath entry. This section provides instructions on how to set up the HiPath environment and then test it. To set up the environment: Copy (using ftp, for example) the remote_hdms shell script from the install_path\\*agents\\HDMS* to the subdirectory specified in the remote_subdir parameter relative to the remote account specified by the remote_account parameter. Edit the copied remote_hdms script to ensure that: The DMS_DIR variable setting specified in the script matches the full pathname of the HDMS XIE import/export program on the remote HiPath installation. The DATA_DIR variable setting specified in the script matches the setting in the remote_subdir parameter. Ensure that the account that runs HDMSAgent on the local system has the rights to run rcp and rsh (or scp and ssh, respectively) to access the remote system. Enable the HiPath environment for remote operation, depending on the remote_secure_interaction parameter. Enable the HiPath environment for rsh and rcp (see the section \"Enable HiPath Environment for rsh and rcp\"), if the parameter value is FALSE. Enable the HiPath environment for ssh and scp (see the section \"Enable HiPath environment for ssh and scp\"), if the parameter value is TRUE. Connectivity to a HiPath system requires a UNIX account that has read and write access over the HiPath XIE interface. UNIX accounts created with HiPath 4000 Manager V3.1 do not have these access rights. To create an account with the required access rights: Log in as user engr. This is the root user of the HiPath 4000 system. Run the UNIX command useradd to create the account hdmsuser. In the dmsie subdirectory of your HiPath installation, copy the file root and rename it to hdmsuser. If you want to grant read and write access only for the PERSDAT table, delete all lines that are different from PERSDAT from the hdmsuser file. Allow read access for all users to the file hdmsuser. Add a line:* hdmsuser* to the .users file in the dmsie subdirectory of your HiPath installation. If the .users file does not exist, create this file with owner root, group sys, and access rights 644. Run the following procadmin commands:* procadmin -t -g XIEAPI procadmin -s -g XIEAPI procadmin -l -g XIEAPI* See your HiPath system documentation for details about the procadmin command. Suppose that HDMSAgent runs on system host1 from the account metauser and host1 has the network address ip1. Suppose you want to configure HDMSAgent for interaction with HDMS V3.1 on host2, network address ip2. First, perform the following steps on host2: Create the account hdmsuser as described in the section \"User creation directives for HiPath 4000 Manager V3.1\" above. With XIE, grant full access rights to this account to manage the related tables PERS, COMPIMP, LOCIMP, BUILDIMP, ORGIMP. If you use another user account, be aware of the correct access rights. Log in as hdmsuser. Edit the .rhosts file in the hdmsuser home directory to grant metauser on host1 rsh, rcp and ftp access (by creating an entry ip1 metauser in the .rhosts file). Be sure that the spelling of the metauser account is correct (this field is case-sensitive). Create the subdirectories req and bin. For the actions required on host1, always use the correct (case-sensitive) account name in the login dialog (in our example, metauser instead of Metauser). We recommend that you test your setup by running rcp, rsh, and remote_hdms by hand, as shown in the following example: On host1, remote copy (rcp) a file on the remote host into the req subdirectory of hdmsuser’s home directory: rcp xxx hdmsuser@:req (if host1 is a UNIX host) rcp xxx .hdmsuser:req (if host1 is Windows NT host) On host1, remote copy (rcp) a file from host2 that exists in the req subdirectory of hdmsuser's home directory but that does not exist in your current working directory: rcp hdmsuser@:req/xxx . (if host1 is a UNIX host) rcp hdmsuser@:req/xxx . (if host1 is a Windows NT host) On host1, run a remote execution (rsh) of a simple command. For example: rsh ip2 -l hdmsuser ls -l req On host2: Log in as hdmsuser and create an HiPath request file $HOME/req/xxx.req with the following contents and no leading white spaces: # HDMS Call: xxx.req 1;SELECT * FROM COMPIMP #@* Note*: For HDMS-US 5.2, HiPath 4000 Manager V1.0 and V3.0, the COMIMP table does not exist. Please use any other valid table (e.g. PERSDAT) instead of COMPIMP. Change directory to the hdmsuser home directory. On the command line, type bin/remote_hdms xxx.req. On the command line, type echo$? to check the exit code. On success, the exit code is 0 and the file $HOME/req/xxx.rsp should exist with content that indicates successful execution of the request, such as: # HDMS Call: xxx.req; 2000-03-22 14:00:13.00 #1;1 38500|DE|PQR|||| #@ or (if the HDMS database is empty): # HDMS Call: xxx.req; 2000-03-22 14:00:13.00 #1;0 #@ Define a user account, say some_user_account, that is to run HiPath Workflow. We recommend the DirX Identity installation account for this purpose wherever possible. Deviation from this recommendation will imply some extra work when configuring the workflow. Ensure that some_user_account has the permissions to call the HDMS XIE import/export program and has the permissions to manage the related tables using the XIE program, namely PERS, COMPIMP, LOCIMP, BUILDIMP, ORGIMP for HDMS 3.X PERSDAT for HDMS-US 5.2, HiPath 4000 Manager V1.0 and V3.0 You can also test your setup by running the HiPath Workflow in trial mode. For example, suppose that HDMSAgent runs on system host1 from the account metauser and host1 has the network address ip1. Suppose you want to configure HDMSAgent for interaction with HDMS V3.1 on host2, network address ip2. First, perform the following steps on host1: Login as metauser. Create public/private key with the ssh-keygen command, as shown in the following sample dialog: $ cd $ ssh-keygen -t rsa Enter for all input requests and wait until the generation is finished. Now, perform the following steps on host2: Create the account hdmsuser as described in section \"User creation directives for HiPath 4000 Manager V3.0\" above. With XIE, grant full access rights to this account to manage the related tables PERS, COMPIMP, LOCIMP, BUILDIMP, ORGIMP. If you use another user account, pay attention to the correct access rights. Log in as hdmsuser. Transfer the public key (which you created for account metauser on host host1) to host2, for example scp metauser@host1:.ssh/id_rsa.pub ./metapublickey.txt. Be sure that the spelling of the metauser account is correct (this field is case sensitive). Create the directory $HOME/.ssh if it does not yet exist. Append the public key to the authorized keys file of the user hdmsuser, for example type cat $HOME/metapublickey.txt >> $HOME/.ssh/authorized_keys. Verify the permissions of the file authorized_keys. They should be 644. Create the subdirectories req and bin. For the actions required on host1, always use the correct (case-sensitive) account name in the login dialog (in our example, metauser instead of Metauser). We recommend that you test your setup by running scp, ssh, and the remote_hdms by hand. It is essential that the commands scp and ssh execute without requesting a password. The commands can be tested as shown in the following example: On host1, remote copy (scp) a file on the remote host into the req subdirectory of hdmsuser's home directory. scp xxx hdmsuser@:req On host1, remote copy (scp) a file from host2 that exists in the req subdirectory of hdmsuser's home directory but that does not exist in your current working directory: scp hdmsuser@:req/xxx . On host1, run a remote execution (ssh) of a simple command. For example: ssh hdmsuser@ ls -l req On host2: Log in as hdmsuser and create an HDMS request file $HOME/req/xxx.req with the following contents and no leading white spaces: # HDMS Call: xxx.req 1;SELECT * FROM COMPIMP #@* Note*: For HDMS-US 5.2, HiPath 4000 Manager V1.0 and V3.0, the COMIMP table does not exist. Please use any other valid table (e.g. PERSDAT) instead of COMPIMP. Change directory to the hdmsuser home directory. On the command line, type bin/remote_hdms xxx.req. On the command line, type echo $? to check the exit code. On success, the exit code is 0 and the file $HOME/req/xxx.rsp should exist with content that indicates successful execution of the request, for example: # HDMS Call: xxx.req; 2000-03-22 14:00:13.00 #1;1 38500|DE|PQR|||| #@ or (if the HDMS database is empty): # HDMS Call: xxx.req; 2000-03-22 14:00:13.00 #1;0 #@ Define a user account, say some_user_account, that is to run the HiPath workflow. We recommend the DirX Identity installation account for this purpose wherever possible; deviating from this recommendation will require some extra work when configuring the workflow. Ensure that some_user_account has the permissions to call the HDMS XIE import/export program and has the permissions to manage the related tables using the XIE program, namely PERS, COMPIMP, LOCIMP, BUILDIMP, ORGIMP for HDMS 3.X PERSDAT for HDMS-US 5.2, HiPath 4000 Manager V1.0 and V3.0 You can also test your setup by running the HiPath workflow in trial mode. The export trace file records the progress of the export task and statistical information about the operations being performed. This section describes the format of the generated information, which consists of these sections: Meta directory entries HiPath entries Derived HiPath updates Derived Directory updates HiPath update statistics DMS identifier update statistics Directory entries: Number of meta directory entries to be synchronized into HiPath. Discarded: Number of \"invalid\" meta directory entries to be discarded. By default (that is, default definition of the export user hook uh::LoopExtraFilter), an entry will be discarded in delta mode if it does not have any related HiPath entry but is older than the \"last export\" time. In this case, HiPath Workflow assumes that a previous synchronization attempt of the entry into the HiPath database failed and discards the entry. The meta controller trace file contains notices about such entries. Missing in HiPath: Number of meta directory entries with DMS identifier that are not marked as to be deleted in HiPath, but do not exist in HiPath. The meta controller trace file contains notices about such entries. Deleted in Directory and HiPath: Number of meta directory entries with flag deleted in HiPath set to TRUE. The trace file will contain notices about such entries. To-Be-Deleted, missing in HiPath: Number of meta directory entries with a DMS identifier that are marked as to be deleted in HiPath, but do not exist in HiPath. The trace-file will contain notices about such entries. Ambiguous in Directory: Number of meta directory entries where the related HiPath entry has been found by best-guess match, but where multiple entries have the same related HiPath entry. The meta controller trace file will contain notices about such entries. Ambiguous in HiPath: Number of meta directory entries where the related HiPath entry cannot be determined uniquely by best-guess match. The meta controller trace file will contain notices about such entries. Up-to-date in HiPath: Number of meta directory entries where the related HiPath entry is already up-to-date with respect to the attributes to be synchronized. Example: # Directory entries: 9 # Discarded: 0 # Missing in HDMS: 0 # Deleted in Directory and HDMS : 0 # To-Be-Deleted, missing in HDMS: 0 # Ambiguous in Directory: 0 # Ambiguous in HDMS: 0 # Up-to-date in HDMS: 3 In this example, 9 meta directory entries have been detected to be synchronized into HiPath, 3 of them are already up-to-date. If HiPath workflow has loaded the PERS table and one or more of its dependent tables (COMPIMP, ORGIMP, LOCIMP, and BUILDIMP) were examined for referential integrity, this section shows the number of entries in each table. For example: # HDMS PERS-table entries: 6 # HDMS COMPIMP-table entries: 1 # HDMS ORGIMP-table entries: 5 # HDMS LOCIMP-table entries: 4 # HDMS BUILDIMP-table entries: 4 If HiPath workflow does not need to load one or more of these tables (for example, if it detects only up-to-date entries) the section contains a message that the table has not been loaded. For example: # HDMS ORGIMP-table not loaded. The derived HiPath Updates section shows the HiPath database update actions that the HiPath workflow export comparison phase has determined. A counter exists for each action to be performed in the HiPath database. For example: # HDMS-Update-Actions derived in Comparision phase # PERS-table INSERTs: 3 # PERS-table UPDATEs: 1 # PERS-table DELETEs: 2 # COMPIMP-table INSERTS: 0 # ORGIMP-table INSERTS: 2 # LOCIMP-table INSERTS: 0 # BUILDIMP-table INSERTS: 0 In this example, HiPath workflow requests INSERT of 3 PERS-table entries, UPDATE of 1 PERS-table entry, and DELETE of 2 PERS-TABLE entries. In addition, two organizations (ORGIMP table entries) will be created for support of referential integrity. This section shows a counter for each HiPath update action that HiPath workflow can perform and whether or not it succeeded or failed for this synchronization task. The INSERTs are not counted per-table. For example: # HDMS update statistics: # Successful INSERTs: 4 # Unsuccessful INSERTs: 1 # Successful UPDATEs: 1 # Unsuccessful UPDATEs: 0 # Successful DELETEs: 2 You can customize the HiPath workflow in many areas, but it requires Tcl know-how. You must make sure that the HiPath workflow uses the authentication that has been used when testing the remote copy and remote shell command in previous setup steps. Check the Authentication tab of both Jobs of the HiPath Workflow. There are 2 possibilities: If your Identity IdS-C service already runs with the appropriate account (i.e. because in our example above), the authentication tab should not contain any data. If your Identity IdS-C service runs as local system account (on Windows platforms) or another accounts being privileged to launch jobs with different user authentication, you must enter authentication information (i.e. User Name = metauser in our example above and password and domain as appropriate). The correct attribute set is chosen implicitly by the HiPath Workflow itself in dependency of the HDMS Version defined in the related HiPath connected directory. This approach is much more comfortable than selecting dozens of attributes one-by-one and putting them into the appropriate order. There is a drawback of this approach: The Identity Manager will not be able to detect and visualize invalid HiPath attribute mapping rules and select boxes for HiPath join expression The administrator must use the appropriate HiPath attribute abbreviations (when using attributes in customized TCL code) and HiPath attribute names (when using Identity Manager) See section HiPath Tables for valid attribute abbreviations and names for your HDMS/HiPath version. Note: If the HiPath workflow shall support a customer extended HiPath dataschema, you need to customize the file_attr_list variables: Change the statement set src_conn_param(attr_list) \"$file_attr_list_tpl($hdms_version)\" for computation of variable file_attr_list in the script Import HDMS Var Tcl Script of the import task Change the statement set tgt_conn_param(attr_list) \"$file_attr_list_tpl($hdms_version)\" for computation of variable file_attr_list in the script “Export HDMS Var Tcl Script” of the Export Task The default attribute mapping is suitable for a synchronization where entries are joined by a unique identifier (e.g. dxmGUID) which is stored in an unused HiPath attribute (e.g. text3). Moreover, this mapping computes all attributes which are required for creation of person entries and - for HDMS 3.X - implicit creation of additional entries (in tables COMPIMP, ORGIMP, BUILDIMP, LOCIMP). Please note that target attribute text3 is not appropriate for HDMS US 5.2. For this HDMS release, another attribute must be used (e.g. info3). Please note that target attribute longname is not suitable for HDMS-US 5.2. For this HDMS release, another attribute must be used (e.g. room) In general, appropriate mappings must be defined for your attributes constituting your join criteria (HDMS Join expression and Joinback expression). The postmapping section updates the ChangeType based on the status attribute which is dxrState by default. If your status attribute is other than dxrState, then you must customize this section and to cross-check your customization with the source selected attributes and the export filter. Please note some special mapping rules: Special meaning of empty value - An empty string value (“”) for a HiPath attribute denotes, that the related attribute will be left unchanged when modifying a HiPath entry. Special meaning of blank value - If you intend to delete an attribute in HiPath in order to synchronize deletion of related attribute in the Directory, then your mapping must result into a blank value. Example: Suppose you intend to synchronize the ldap attribute description onto HiPath attribute text1. Then you need: A mapping rule mapping description onto text1 A statement in the postmapping section like: if \\{ $rh_dms(TEXT1) == } then \\{ set rh_dms(TEXT1) [llist “ “ ];# list containing non-empty string with a blank} The HDMS Join Expression / Joinback expression parameters define the best-guess-match policy that HiPath Workflow is to use to join meta directory and HiPath entries. Each Attribute in Joinback Expression must correspond one-to-one with an attribute in HiPath Join Expression. For example: Joinback Expression: surname and givenname HDMS Join Expression: name and christianname In this example, HiPath workflow is to match meta directory entries with HiPath entries using a combination of surname and given name. The meta directory sn (surname) attribute maps to the HiPath attribute “name” and the meta directory gn (given name) attribute maps to the HiPath attribute “christianname”. There must be related mapping rules. These settings assume that each meta directory entry can be identified by a unique identifier which is stored in the attribute “text3” of an HiPath entry. Please note that attribute text3 is not appropriate for HDMS US 5.2. For this HiPath release, another attribute must be used (e.g., info3). The postmapping computes a filter value to be used on the attribute dxmOprOriginator in the form: #dmsidval#* The dmsidval variable was computed in the mapping table. This filter works on the dxmOprAttribute that contains values of the form: masternamedmsidvalattributename#attributevalue The specific handling of this attribute is done in the workflow-specific user hook uh::LoopPostJoin. These tables define the relationship between the abbreviation names used in the DirX Identity workflows and the HDMS/HiPath name. The first column contains the field number in the interface file, the second column the DirX Identity abbreviation name and the third the related HDMS/HiPath name. See the Hicom DMS 3.1 SA4, Service Manual, Section \"Import/Export interface API\" for full details about XIE interface request/response format and the meaning of the attributes. 1 - CMD - identifier 2 - C - country 3 - O - company 4 - ORG1 - org1 5 - ORG2 - org2 6 - ORG3 - org3 7 - NAME - name 8 - SRTNAME - sortname 9 - CHN - christianname 10 - TIT - title 11 - SAL - salutation 12 - LOC - location 13 - BUILD - building 14 - LNAME - longname 15 - EXT - extension 16 - SWITCH - switch 17 - POS - position 18 - TIENUM - tienum 19 - EXTAREA - ext_areacode 20 - EXTNET - ext_netcode 21 - EXTEXT - ext_ext 22 - FTN - faxnumber 23 - OWNGROUP - owner_group 24 - DIRTRACC - direct_trunc_acc 25 - TEXT1 - text1 26 - TEXT2 - text2 27 - TEXT3 - text3 See the Hicom DMS 3.6, Service Manual, Section \"Import/Export interface API\" for full details about XIE interface request/response format and the meaning of the attributes. 1 - CMD - Command 2 - C - country 3 - O - company 4 - ORG1 - org1 5 - ORG2 - org2 6 - ORG3 - org3 7 - NAME - name 8 - SRTNAME - sortname 9 - CHN - christianname 10 - TIT - title 11 - SAL - salutation 12 - LOC - location 13 - BUILD - building 14 - LNAME - longname 15 - EXT - extension 16 - SWITCH - switch 17 - POS - position 18 - TIENUM - tienum 19 - EXTAREA - ext_areacode 20 - EXTNET - ext_netcode 21 - EXTEXT - ext_ext 22 - FTN - faxnumber 23 - OWNGROUP - owner_group 24 - DIRTRACC - direct_trunc_acc 25 - TEXT1 - text1 26 - TEXT2 - text2 27 - TEXT3 - text3 28 - TEXT4 - text4 29 - IMPDATA - import_dat 30 - ACCCTRL - access_control 31 - MODDATE - modify_date 32 - EQ - equipment 33-52 - L1-L20 - l1-l20 53 - LPREFIX - l_prefix 54 - EXTCC - ext_cc 55 - COSTCENTRE - costcentre 56 - CHARGEID - charge_id 57 - BANKCODE - bankcode 58 - ACCNUM - accnum See the Hicom DMS-US 5.2, Service Manual, Section \"Import/Export interface API\" for full details about XIE interface request/response format and the meaning of the attributes. 1 - CMD - Command 2 - SWITCH - switch 3 - DOMAIN - domain 4 - C - country 5 - O - company 6 - ORG1 - org1 7 - ORG2 - org2 8 - ORG3 - org3 9 - NAME - name 10 - SRTNAME - sortname 11 - CHN - christianname 12 - TIT - title 13 - ADDR - address 14 - LOC - location 15 - BUILD - building 16 - ROOM - room 17 - STATION - station 18 - POS - position 19 - TIENUM - tienum 20 - EXTAREA - ext_areacode 21 - EXTNET - ext_netcode 22 - EXTEXT - ext_ext 23 - FTN - faxnumber 24 - IMPDATA - import_dat 25 - OWNGROUP - owner_group 26 - MODDATE - modify_date 27 - ACCCTRL - access_control 28 - INFO1 - info1 29 - INFO2 - info2 30 - INFO3 - info3 31 - INFO4 - info4 32 - DIRTRACC - direct_trunc_acc 33 - EQ - equipment 34-53 - L1-L20 - l1-l20 54 - LPREFIX - l_prefix 55 - IDF - idf 56 - IDFCABLEPAIR - Idf_cable_pair 57-71 - INFO5-INFO19 - info5-info19 See the HiPath Manager V1.0, Service Manual, Section \"Import/Export interface API\" for full details about XIE interface request/response format and the meaning, syntax, format and maximum length of the attributes. 1 - CMD - cmd 2 - C - country 3 - O - company 4 - ORG1 - org1 5 - ORG2 - org2 6 - ORG3 - org3 7 - ORG4 - org4 8 - ORG5 - org5 9 - ORG6 - org6 10 - NAME - name 11 - SRTNAME - srtname 12 - CHN - christianname 13 - TIT - title 14 - SAL - salutation 15 - LOC - location 16 - BUILD - building 17 - LNAME - longname 18 - EXT - extension 19 - SWITCH - switch 20 - SEQNUM - seq_num 21 - TIENUM - tienum 22 - EXTAREA - ext_areacode 23 - EXTNET - ext_netcode 24 - EXTEXT - ext_ext 25 - FTN - faxnumber 26 - IMPDATA - import_dat 27 - OWNGROUP - owner_group 28 - MODDATE - modify_date 29 - ACCCTRL - access_control 30 - TEXT1 - text1 31 - TEXT2 - text2 32 - TEXT3 - text3 33 - DIRTRACC - direct_trunc_acc 34 - EQ - equipment 35-54 - L1-L20 - l1-l20 55 - LPREFIX - l_prefix 56 - TEXT4 - text4 57 - EXTCC - ext_cc 58 - CHARGEID - chargeid 59 - BASCHCLASS - basic_charge_class 60 - BANKCODE - bankcode 61 - ACCNUM - accnum 62 - XPREXISTS - xpr_exists 63 - XPRKEY - xpr_key 64 - XPRPIN - xpr_pin 65 - XPRSERVER - xpr_server 66 - XPRVMSADMIN - xpr_vmsadmin 67 - XPRBROADCAST - xpr_broadcast 68 - XPRDCTSEND - xpr_dctsend 69 - XPRDCTRCV - xpr_dctrcv 70 - XPRPWD - xpr_password 71 - XPRNAME - xpr_name 72 - XPRFLAG1 - xpr_flag1 73 - XPRFLAG2 - xpr_flag2 74 - XPRCONNECT - xpr_connect 75 - XPRQUOTA - xpr_quota 76 - XPRRESERVE1 - xpr_reserve1 77 - XPRRESERVE2 - xpr_reserve2 78 - PERSNUM - persnum 79 - DOMAIN - domain 80 - IDF - idf 81 - IDFCABLEPAIR - idf_cable_pair 82-96 - INFO5-INFO19 - info5-info19 97 – VSW – v_switch 98 – HUSID – usid 99 – UMUI – umuid 100 – UMUS – um_user 101 – UMM - um_marked 102 – UMOP - um_operation_id See the HiPath 4000 Manager V3.1, section \"Import/Export interface API\" in the Service Documentation for details about the XIE interface request/response format and the meaning, syntax, format and maximum length of the attributes. 1 through 102 - See the section \"HiPath 4000 Manager V1.0 Conversion Table\" above 103 - APEGRNO apg_group_no 104 - XPRDELPW - xpr_delpwd 105 - XPRDELPWTMP - xpr_delpwd_tmp The DirX Identity ODBC workflows provision an ODBC target system. Two workflows are available: ODBC2Ident_Validation - performs initial load or validation from an ODBC target system Ident_ODBC_Sync - synchronizes the DirX Identity target system and the real ODBC target system The workflows' implementation assumes the following table layout in the ODBC target system: A table of groups, where each row represents one group A table of accounts, where each row represents one account A table of memberships where each row represents a membership of one account in one group The next sections provide conceptual and configuration information about the ODBC Provisioning workflows. Before you can use the ODBC workflows, you must extend the DirX Identity Store schema with ODBC target system-specific attributes and object classes so that the workflows can store ODBC-specific information in the Identity Store. For instructions, see the section \"Extending the Schema for the Target System Workflows\". This section explains the concepts of the workflow implementation. The ODBC Tcl-based workflow assumes the same database structure as the JDBC Java-based workflow. For details, see the section \"Target System Configuration\" in \"JDBC Provisioning Workflows\". Note that the attribute configuration contains two additional pseudo-attributes addMember and delMember that do not exist in the database. These attributes are used to transform multiple joined database records to the DirX Identity multi-valued attributes dxrGroupMemberAdd and dxrGroupMemberDelete and vice-versa. This section provides information about the transformation of DirX Identity multi-valued attributes to ODBC multi-records, from the ODBC-to-Identity direction and vice-versa. From ODBC to DirX Identity: The reading of group memberships in ODBC is performed by special join operations. For every membership, one result record is retrieved. In DirX Identity, each member is stored in a multi-valued attribute (dxrGroupMemberImported, dxrGroupMemberaAdd and dxrGroupMemberDelete). A special profile script ODBC2Role is used for the transformation operation. The script assumes that the ODBC records are sorted by groups. As long as records of the same group are read, only the membership attributes are accumulated. At the end, or when reading a different group record, the accumulated record is written. The following procedure accumulates members: proc appendMV \\{ source_data rec_data first} \\{ # # appends the members to the multi-valued attributes delmember/addmember # depending on the changetype # # Parameters: # src_data name of source handle (if 'src_dir_type' is 'File') # rec_data handle of currently read data record # first TRUE first record of group (use set else lappend) # # Return Values: This default appendMV procedure works well for the synchronization workflow because it handles change types. The ODBC profile script in the validation workflow requires a special appendMV procedure, which is defined in the user hook script of the ODBC2Ident_ValGroup_MetaCP job. Here the members are accumulated in the field AccountDxrName of the source record. The attribute that is used to determine records that belong to same group is hard-coded into GroupDxrName. From Identity to ODBC: DirX Identity uses the multi-valued attributes dxrGroupMemberAdd and dxrGroupMemberDelete to store memberships. For every member to be added, an ODBC add operation to the memberships tables is generated. For every member to be deleted, an ODBC delete operation to the memberships table is generated. This procedure is part of the user hook script of the Role2ODBC_SyncGroupMembers_MetaCP job (LoopExtraFunction). For every member a rh_file_tgt handle is created. The data is mapped to it and the appropriate changetype is set. Afterwards it is written with write_record and then released. Because the DB keys are used for ODBC operation, the DB key for the account is read from the account’s dxrPrimary key Attribute, which results in one extra search per membership. As all mapping is performed in the user hooks routine, the mapping routine itself is very small. In postJoinMapping, the action is set to \"none\", so no extra record is written for this dummy mapped record. The entries from the ODBC database are loaded into DirX Identity. The ODBC database is treated as the entry master. In validation mode, the workflow writes ToDo Messages to the DirX Identity objects that are not synchronized with the ODBC database. The validation workflow uses the following activities: ODBC2Ident_ODBCExport - exports groups with their memberships from the ODBC database. ODBC2Ident_ValGroup_metaCP - handles groups and memberships in DirX Identity. ODBC2Ident_ValAccount_ODBCExport - exports accounts from the ODBC database. ODBC2Ident_ValAccount_metaCP - handles accounts in DirX Identity. The following select statement exports groups and their members: Keys=GroupDxrName,MembershipGroupID,MembershipAccountID Select=AccountDxrName,GroupDxrName,MembershipAccountID,MembershipGroupID,GroupID From=(Groups LEFT JOIN Memberships ON Memberships.GroupID=Groups.ID) LEFT JOIN Accounts ON Accounts.ID=Memberships.AccountID Where=1=1 ORDER BY Groups.dxrGroupname The statement generates one record into the export file for each membership. Groups without members are also exported (LEFT JOIN, one record for each empty group). As described in the section \"Identity Multi-Valued Attribute to ODBC Multi Record Transformation\", all records for a specific group are accumulated to one record, where dxrAccountName contains all members as a multi-valued attribute. The ORDER BY clause is necessary for accumulation. Every group is mapped to a group in the DirX Identity ODBC target system. dxrGroupName → Name (cn) of Group GroupID → dxrPrimaryKey of group Every dxrAccountName is seen as group member. DirX Identity Account Handling Accounts are selected from the ODBC database with the statement: Select= AccountDesc,AccountDxrName,AccountID,AccountOdbcName From=Accounts One record is exported for each account. The dxrAccountName attribute is used as the cn for the DirX Identity account. The database key maps to the dxrPrimaryKeyAttribute. First we’ll look at some ODBC-specific issues. Synchronization enforces changes of groups/accounts and memberships in the ODBC database and synchronizes back these changes to DirX Identity (set the appropriate status attributes, group membership states). Because we don’t want to violate the referential integrity in the ODBC database, the membership should be deleted first, and then the referenced object can be deleted. On the other hand, we need the DB keys to add a new membership. So for newly created accounts/groups, we need to synchronize back the DB key before inserting memberships. The ODBC synchronization workflow uses the following activities and workflows: Ident2ODBC_SyncAccount_MetaCP - an activity that exports Identity accounts with dxrTSState=NONE from the Identity Store. These are accounts that are to be inserted into the ODBC database. Ident2ODBC_ SyncAccount_ODBCImport - an activity that imports new accounts into the ODBC database. ODBC2Ident_SyncNewAccWF - a workflow that exports the delta accounts back to the Identity Store. In addition to the accounts created in the previous step, the workflow handles deleted or modified accounts (initiated by a previous workflow run or by changing the database). Ident2ODBC_SyncGroup_MetaCP - an activity that exports new DirX Identity groups (dxrTSState=NONE) from the Identity Store. IdentODBC_SyncGroup_ODBCImport - an activity that imports these new groups into the ODBC database ODBC2Ident_SyncNewGroupWF - a workflow that exports the delta groups back to the Identity Store. In addition to the groups created in the previous step, the workflow handles deleted or modified accounts (initiated by a previous workflow run or by changing the database). For example, a group in the Identity Store deleted by the last run of the synchronization workflow is produced as delta information and is then \"deleted\" in the Identity Store. Ident2ODBC_SyncGroupMembers_MetaCP - an activity that exports all GroupMembers that are either in status Add or Delete. For each member, one record with a changetype add or delete is exported. Ident2ODBC_SyncGroupMembers_ODBCImport - an activity that adds or deletes memberships in the Memberships table in the ODBC database. Ident2ODBC_SyncAccountDel - a workflow that exports accounts to be deleted from the Identity Store and deletes them in the ODBC database. Ident2ODBC_SyncGroupDel - a workflow that exports groups to be deleted from the Identity Store and deletes them in the ODBC database. ODBC2Ident_SyncGroup_ODBCExport - an activity that exports changed groups with their memberships from the ODBC database. ODBC2Ident_SyncGroup_MetaCP - an activity that imports the changed groups and the related membership changes. Only memberships are updated. Groups are not deleted here. The next synchronization or validation workflow will delete these groups if necessary. ODBC2Ident_SyncAcc_ODBCExport - an activity that exports changed accounts from the ODBC database. ODBC2Ident_SyncAcc_MetaCP - an activity that imports the changed account to the Identity Store. The workflow consists of the following tasks: Handling new accounts in DirX Identity - create in ODBC and synchronize back the dbKey to dxrPrimary key Handling new groups in DirX Identity - create in ODBC and synchronize back the dbKey to dxrPrimary key Handling new/deleted memberships in DirX Identity - the membership table in ODBC is updated Handling accounts in state deleted in the Identity Store - accounts are deleted in ODBC Handling groups deleted in identity store - groups are deleted in ODBC Synchronizing back groups/memberships - only memberships are handled at the moment. Groups are not deleted in Role (use the validation workflow for this task) Synchronize back accounts The ODBC workflow implementation delivered with DirX Identity assumes that all ODBC import tasks do not use stored procedures. Using stored procedures may simplify these tasks. Stored procedures can handle referential integrity - For adds to the membership table, only account/group name is necessary, because stored procedures may get the database keys through selects. So, we don’t need to synchronize back new objects before handling memberships. Instead, the stored procedure handles these issues. Using a stored procedure, the remaining tasks are: Handling all changed accounts in the Identity Store - performs add or delete operations in the Accounts table (implicitly also some memberships might be deleted if a referenced account is deleted). Handling all changed groups in the Identity Store - performs add or delete operations in the Accounts table (implicitly also some memberships might be deleted if a referenced group is deleted). Handling all changed group memberships - performs add or delete operations in the Membership table. Note: One stored procedure can handle these tasks. Synchronize back accounts. Synchronize back groups/memberships. This section describes how to change the workflows when other database structures exist. To change the ODBC synchronization workflow to use additional ODBC attributes: Specify your attributes in the attribute configuration Add the mapping of your attributes as a user hook Extend the selected attributes/mapping with your attributes. Add the correct values to the ODBC export/import properties. The next sections provide details. Attribute Configuration Specify the attributes of your database tables that are not included yet. The following attributes should not be changed: changetype DDN addMember delMember The abbreviations of the following attributes (abbreviations) should not be changed. You can change the Name (table.column) and optionally the prefix: AccountDxrName AccountID GroupDxrName GroupID MembershipAccountID MembershipGroupID MembershipID User Hook in Job Ident2ODBC_SyncGroupMembers_MetaCP In this job, the mapping is performed in the LoopExtraFunction user hook. See the corresponding section in the existing workflow: # mapping set rh_file_tgt(changetype) \"add\" set rh_file_tgt(AccountDxrName) $memb set rh_file_tgt(MembershipGroupID) $src(dxrPrimaryKey) set rh_file_tgt(GroupDxrName) $src(cn) and a similar section with changetype delete. You can add the mapping of your additional attributes here. Selected Attributes / Mapping The existing workflow already contains the minimum set of attributes needed. So in most cases, you just need to extend it with your additional attributes. ODBC Export / Import Properties You will find these properties in the channels under the ODBC connected directory. You do not need to change fields where abbreviations are used. Enter the correct values for your database in the other fields. If your database schema differs from the expected three table structure, no general statements can be made. You can try to change the ODBC Selects so that they produce a similar result as with the given schema. On the other hand, if you have fewer tables, you may simplify the whole workflow by packing some activities into one.. The DirX Identity RACF workflows provision a RACF target system. Two workflows are available: RACF2Ident_Validation - performs initial load or validation from a RACF target system Ident_RACF_Sync - synchronizes between the Identity Store and a RACF target system The RACF workflows are based on the DirX Identity meta controller (metacp). They use the RACF LDAP interface via IBM’s SecureWay LDAP server. The workflows can support all object types and attribute types that are accessible via the RACF interface. Before you can use the RACF workflows, you must extend the DirX Identity Store schema with RACF target system-specific attributes and object classes so that the workflows can store RACF-specific information in the Identity Store. For instructions, see the section \"Extending the Schema for the Target System Workflows\". RACF contains a lot of subsystems that are not used at every customer site. DirX Identity only supports a basic set of subsystems. Others must be configured for a specific customer. The following subsystems are configured in the default applications: TSO (Time Sharing Option) - basic configuration of users, groups, and so on WORKATTR (Work Attributes) - additional attributes OMVS (Open Edition MVS) - UNIX system for MVS, only used for FTP transfer (for all users, not specific for each user) The following subsystems are not configured in the default applications: CICS (Customer Information Control System) - tele-processing monitor for online transaction systems DCE (Distributed Computing Environment) - distributed application handling NETVIEW (Network Automation) - network monitoring and automation OVM (Open Edition VM) - UNIX system for VM OPAPAM - MCS console LANGUAGE - nationalization DFP (SMS Routine = System Managed Storage) - file management, pool sharing, disk management, profile management, disk space management. Note: Due to capabilities that are missing from the RACF LDAP server, it is not possible to read or update the schema via LDAP with DirX Identity automatic schema retrieval. The DirX Identity SiPass workflows provision a SiPass target system. Two workflows are available: SiPass2Ident_Validation - performs initial load or validation from a SiPass target system Ident_SiPass_Sync - synchronizes the DirX Identity target system and the SiPass target system The following restrictions and hints apply to the SiPass standard workflows: The workflows' SiPass agent step runs only on Windows systems. The SiPass agent must run on the machine where the SiPass server is installed. To achieve this you can setup a C++-based secondary server on this machine. We recommend to run the metacp jobs also on this machine to avoid file transfers. The SiPass standard workflow only handles work group objects. It does not handle access groups. Scrambled and encrypted bind passwords and data attributes are not supported. As a result, the \"disable encryption\" flag in the bind profile must be set. SiPass workflows are pre-configured with Regional and Language Options set in Regional Options to standard English (United States). If SiPass is installed on a machine with other regional settings, you must adapt the format strings in SiPass agent jobs (see the Date Formats tab). The SiPass attribute CardNumber is mandatory for each SiPass cardholder. The synchronization workflow is pre-configured to get this attribute from the attribute dxrName that stores the reference number. For a real provisioning application, the CardNumber attribute should be mapped to the dxrCardNumber attribute, which is empty by default. It is necessary to supply this attribute (for example, as a copy from the corresponding user). The dxrName attribute is used as identifier at the SiPass side (CardNumber). Therefore it must be of type integer and it must be unique. Groups must exist in the SiPass system. The agent cannot create groups due to a restriction of the SiPass interface. During initial load a group is loaded that indicates accounts that are not members of another group. The group name is either or depending on the language used. Trying to load accounts with no group membership into SiPass causes an error. The dxrState attribute at the Identity Store stays in state 'None'. SiPass can only assign exactly one group to an account. Build your role structure so that only one group is assigned to an account. DirX Identity does not check this restriction. If an account is assigned to more than one group, the import into SiPass fails. This section contains features that still work but should not be used because better features are available. Use the Java-based workflows instead of the Tcl-based workflows described in this chapter. Note that the features described in this chapter are still supported but will not be enhanced. This section comprises all issues related to Active Directory and Exchange Provisioning workflows. Microsoft strongly recommends that you install Exchange Server 2007 on a 64-bit processor machine with a 64-bit operating system, even though it is possible to install it on a 32-bit processor machine. Also at least one domain controller that is the schema master must have Windows Server 2003 Service Pack 1 installed. For further hardware and software requirements as well as the required steps to prepare Active Directory, the domains and the forest for Exchange 2007, refer to the Microsoft documentation. To administer Exchange Server 2007 including the administration of mailbox-enabled users (if the mailbox Server role was installed) you can install the Exchange 2007 management tools, which consist of the following: Exchange Management Console Exchange Management Shell Exchange Help File Exchange Best Practices Analyzer Tool Exchange Troubleshooting Assistant Tool Creating Mailbox-enabled Users: To create mailbox-enabled users with the Tcl-based provisioning workflows (C++-based AdsAgent) the following changes in the attribute mappings must be done: The attribute “textEncodedORAddress” can be eliminated from the mapping because Exchange 2007 does not support the X400 provider anymore by default. The attribute displayName has to be set to make the created mailbox enabled user work properly together with the Exchange 2007 GUI. For example map the LDAP cn attribute to the Exchange displayName attribute. In addition to the known attributes that must be set on creation of a mailbox-enabled user the following ones can be set: msExchRecipientTypeDetails msExchVersion msExchRecipientDisplayType Setting these attributes prevents the created mailbox to be shown as Legacy Mailbox by the Exchange Management Console tool. By Exchange 2007 a Legacy Mailbox is regarded as a one that resides on an Exchange 2000/2003 server or that has been created by an Active Directory Users and Computers snap in extended by Exchange 2000/2003 functionality. To make a Legacy Mailbox a User Mailbox also the Exchange Management Shell command setMailbox with the ApplyMandatoryProperties parameter can be used: C:\\>Set-Mailbox -Identity USERNAME –ApplyMandatoryProperties Configuring with C++ based AdsAgent: In the import.ini file the attributes must be set with the following types: msExchRecipientTypeDetails=Integer msExchVersion=CaseIgnoreString msExchRecipientDisplayType=Integer Mapping with both C++-based and Java-based agent or connector: Set these attributes in the mapping to constant values: msExchVersion: 4535486012416 (optional) msExchRecipientDisplayType: 1073741824 (optional) msExchRecipientTypeDetails: 1 (mandatory) The DirX Identity Dashboard workflow provisions a Dashboard target system. The following workflow is available: Ident_Dashboard_Sync - exports data from the Identity Store and imports it to the Dashboard target system and vice versa Note that the complexity of the Dashboard system requires a workflow of corresponding complexity to handle all of Dashboard’s features. The next sections provide conceptual and operational information about the Dashboard workflow. DirX Identity synchronization workflows read information from the Identity Store, perform the necessary update operations in the target system, read the target system content and update the Identity Store information accordingly. This procedure sets the status information in the identity store to correct and consistent values. Because the Dashboard system handles a set of other target systems and is not readable through its interfaces, DirX Identity uses a special procedure to handle this target system. The following figure illustrates this procedure. Figure 115. Dashboard Synchronization Workflow Operation As illustrated in the figure: The first activity - the meta controller (metacp) account update - collects the account information from all associated target systems and writes it at the corresponding Dashboard account. The next activity operates like workflows for other target systems. The metacp export activity reads all necessary information from the Identity Store and writes it to the data file. The target system agent (the Dashboard agent) writes this information to the target system. Depending on the result of the corresponding target system interface (API) action, the Dashboard agent writes a response file that contains the distinguished names (DNs) of all accounts where the operation was successful. Other results are only documented in the trace file. An additional meta controller activity - metacp import - uses this response file to update the relevant status information in the Identity Store. The entire procedure assumes that the target system interface (API) reports correctly whether an operation was successful or not. On success, the target system agent writes the corresponding entry into the response file. Before you can use the Dashboard workflow, you must extend the DirX Identity Store schema with Dashboard target system-specific attributes and object classes so that the workflows can store Dashboard-specific information in the Identity Store. For instructions, see the section \"Extending the Schema for the Target System Workflows\". In order to understand the Dashboard workflow, you need to understand the relevant features of the Dashboard system: Each user must have a corresponding account in the Dashboard system. The account name is necessary to authenticate to the Dashboard system. The Dashboard account has a category attribute that defines the authorization to the external applications that are configured in Dashboard. A category can enable access to one or more applications. It is not possible to refine the access to specific functionality within an application. One physical target system can be represented by several applications within Dashboard that model a part of the available functionality. Dashboard can handle single sign-on to the external applications. To provide this feature, Dashboard keeps, for each user, the relevant account information of the external applications (username and password). Three facets exist: Common account: The external application uses the same username and password that Dashboard itself uses. In this case, the account information is set to \"username=\" and \"password=\". Common password: The external application uses a different username but the same password that Dashboard uses. In this case, the account information is set to \"username=TSusername\" and \"password=*\". Diverse account: The external application uses a username and password that are different from the ones that Dashboard uses. In this case, the account information is set to \"username=TSusername\" and \"password=TSpassword\". In a DirX Identity Connectivity scenario, it only makes sense to support the first two facets. The third one is not supported. The Dashboard system also supports several authentication types: Simple type: The password is kept during the Dashboard session. If an external application entry of a Dashboard account contains an asterisk ('*'), the session password is used to log into the external application; otherwise, the stored value is used as the password for login. Password-less type: Other authentication types, for example, reuse of the Windows login, cannot provide the password. Therefore the \"asterisk\" solution does not work. In this case, the password of the Dashboard account and all passwords of the external application entries must be set to the same value. Dashboard’s category feature is a type of role model (with hierarchies and so on.). Users are assigned categories (for example, Physician or Nurse) to enable them to access several specific Web pages that may in turn be bound to external applications. Dashboard only handles the access to the application. It cannot handle fine granular access within the external applications. The next figure shows the Dashboard privilege model and its relationship to external applications. Figure 116. Dashboard Privilege Model Assume a physician needs to work with the external applications Invision and Pharmacy. This access can be modeled as a Physician role that uses a Physician permission that has the following groups assigned to it: One or more categories in the Dashboard target system to obtain basic access to the Dashboard system (to ensure Dashboard account creation and enabling). One or more groups in the Invision target system for fine granular access to Invision. This assignment creates the necessary Invision account. One or more groups in any additional target systems (for example, Pharmacy) for fine granular access to these additional systems. This assignment creates the necessary target system account. The target systems must be marked as Dashboard-relevant systems (The Peer Target System property must point to a Dashboard target system within DirX IdentityTS). With this approach, inconsistencies might occur. If a user gets an account in a target system that is not enabled (on the portal of the user) by one of the assigned Dashboard categories, the user cannot enter the application via Dashboard (but he can via the application’s native access). To ensure that the target system is accessible, you must create an \"access category\" for each target system that is assigned to the user via a permission if one of the groups of the target system is assigned. The advantage of this approach is that the whole access control model is visible within DirX Identity (that is, DirX Identity can ensure correct access to the target system). To summarize the model within DirX Identity: DirX Identity contains a Dashboard target system with all necessary Dashboard accounts. The groups represent the Dashboard categories. A special attribute at the Dashboard target system object defines whether simple or password-less authentication is used. Figure 117. DirX Identity Dashboard Synchronization Model DirX Identity also contains a set of Dashboard-managed target systems. These target systems have their own accounts for these users and target system-specific groups and group memberships. Such a target system can be represented as several external applications in the Dashboard system (e.g., Invision can be represented as Invision1 as Invision2). Because the name of the target system might be different from the names of the external applications which are represented by this target system in Dashboard, you can set the external application names in the Portal External Application property of each of the associated target system. The user can log in to one of the available Invision applications (Invision1 or Invision2). The workflow works as follows: To get the active relevant accounts and its names (dxmDshExternalApp) for one of the Dashboard accounts, the first workflow activity retrieves all non-deleted accounts (active or inactive) for this user from all target systems that have the Dashboard target system set as Peer Target System property. If such a target system has set several names in the Portal External Application property, each name is used as a separate external application for the Dashboard account. The external application account name is then equal to the value of the dxrName attribute of the account in the external application (target system). If the dxrName attribute is empty the attribute cn is used instead. Just one account per target system is selected (the primary one in case of multiple accounts) and is configured for all the names listed in Portal External Application property. The inactive external applications are evaluated as a complement of the currently resolved list of external applications to the list of external applications in a previous run of the workflow and are written to the dxmDshExternalAppDel attribute. Note that this activity needs to know the location of the Dashboard target system account base. This information is retrieved from the Identity Store’s account base attribute that is set automatically from the target system wizard. This concept restricts the number of Dashboard target systems per configured identity store to exactly one. The second activity reads the user’s Dashboard account and all necessary account attributes. Additionally it fetches the related user’s password from the identity store as initial password (specified by the dxrUserLink attribute of the account). This assures that the actual password is taken. If the dxrUserLink attribute of the account is missing or no password for the user exists, a default value is used (configured in the post join mapping script of the second job). The assigned group memberships are transferred as categories to Dashboard. The workflow adds external application attributes (retrieved from the dxmDshExternalApp and dxmDshExternalAppDel attributes) to each Dashboard account entry with account name and password information. If the attribute Prevent Password Synchronization of a Dashboard relevant target system is set, the workflow sets empty passwords for all the related external applications accounts. Otherwise the workflow uses the star ('*') or the value of the user’s password (according to the simple or password-less authentication type setting of the Dashboard target system). All the information is transferred via the Dashboard agent to the Dashboard target system. Dashboard response is joined with the Dashboard user data stored in the identity store. The relevant target system state is set. The Dashboard password synchronization workflow that uses the Dashboard connector synchronizes the Dashboard password and all the Dashboard-related target systems that do not use empty passwords. The external applications for a Dashboard account are taken from the actual values of the attribute dxmDshExternalApp. The password for external applications is then set according to the authentication type of the Dashboard target system. These workflows are no longer usable. Read the information in the chapter DirX Access Workflows to understand how DirX Identity and DirX Access can interact. The DirX Access provisioning workflows work between a target system of type SPMLv1 in the Identity Store and the corresponding connected DirX Access server with configured Provisioning Web Service. The workflows use the SPML connector (SpmlV1SoapConnector2TS) for provisioning. This connector communicates with the DirX Access Provisioning Web Service. The following figure illustrates the DirX Access provisioning workflow architecture. Figure 118. DirX Access Provisioning Workflow Architecture The workflows handle the following objects: User - the common DirX Access user. Role - the common DirX Access business role. The delivered workflows are: Ident_DXA_Realtime - the synchronization workflow exports detected changes for user (account) and business role (group) objects from Identity Store to the DirX Access server in the first step. The second step is to validate the processed changes in the DirX Access server to the Identity Store. Validate_DXA_Realtime - the validation workflow imports existing DirX Access users and business roles with role assignment from the DirX Access server to the Identity Store. The DirX Access workflows support only DirX Access user and business role objects. They do not support password synchronization for DirX Access. To configure the connection to DirX Access: Specify the IP address and the Data Port of the DirX Access SPML v1 Provisioning Web Service. Use the corresponding DirX Access service object which is the part of the connected DirX Access system. You can configure the URL Path and Socket Timeout at the target system port of the appropriate workflow object. (See the DirX Access provisioning workflows configuration in the Expert View in the Connectivity part in the DirX Manager.) You can change the URL Path according to real deployment of the DirX Access Provisioning Web Service. You can increase the timeout value (in seconds) in the Socket Timeout if necessary. Set up the bind credentials of the connected DirX Access system. Use the correct credentials with sufficient rights. Check the provisioning settings used by the connected DirX Access system. Specify them according to real values for your provisioned DirX Access target system. The DirX Access target system requires the following layout: Accounts - all DirX Access users are located in a subfolder Accounts. Groups - all DirX Access business role objects are located in a subfolder Groups. The attribute dxrPrimaryKey of accounts and groups contains the PSO Identifier of these objects in the connected DirX Access system. (See the SPMLv2 specification for more details about PSO Identifiers.) The business role (group) membership is stored at the user (account) object and references the dxrPrimaryKey attribute of business role (group) objects. The following figure shows the layout of the channels that are used by the UNIX-PAM workflow’s join activity: Figure 119. DirX Access Provisioning Workflow Channels and Objects The DirX Access users (with membership) and business roles are synchronized via a pair of channels (one channel per direction). This section describes the DirX Access ports. TS Port CF - Crypt Filter A DirX Access filter is configured implicitly. It is used to send the decrypted password attribute password to DirX Access. This section provides information about DirX Access channels. Direction: Identity Store → DirX Access enabled - the attribute used for disabling of the user object in DirX Access. The correct value is derived from the dxrState attribute of the corresponding account object in the Identity Store. Direction: DirX Access → Identity Store CommonProcsDxa.calculateIdInIdentity - calculates the ID. Direction: Identity Store → DirX Access ID: dxrPrimaryKey Join: ${source.dxrPrimaryKey} or ${source.dxrName} identical to loginName DirX Access requires some mandatory attributes. Mandatory attributes are mapped mostly in a common way, some are mapped as constants. The roles attribute holds the business group membership. Direction: DirX Access → Identity Store Join via the dxrName attribute that is mapped identically to the loginName attribute. Direction: Identity Store → DirX Access ID: dxrPrimaryKey Join: ${source.dxrPrimaryKey} DirX Access requires some mandatory attributes. Mandatory attributes are mapped mostly in a common way, and some are mapped as constants. The mode attribute must be set to 1 for business roles. Direction: DirX Access → Identity Store Join via the dxrName attribute that is mapped identically to the name attribute. Post-mapping removes all administrative roles from the imported DirX Access roles (it simply omits the roles with the mode attribute set to 0). The DirX Identity JDBC workflows provision a JDBC target system. The following workflows are available: JDBC2Ident_Validation - performs initial loads or validations from the JDBC target system Ident_JDBC_Sync - synchronizes between the JDBC target system within DirX Identity and the real JDBC target system. The next sections provide information about JDBC workflow implementation. Because the JDBC workflows assume the same database structure as the ODBC workflows, the workflow structure is also the same. They also use the ODBC Tcl scripts, especially the ODBC profile script. Because JDBC workflows use the JDBC agent, joins are configured here in a special view section. The join feature is not needed in all JDBC jobs, but all jobs are configured the same way. The JDBC agent is always run in full mode (a delta filter feature is not yet available). As a result, deleted records in the JDBC database are never exported. As a result, the TSState attribute in the identity store cannot be updated for deleted accounts or groups. Use the validation workflow to perform this task. The JDBC workflows assume the following table layout in the JDBC target system: A table of groups, where each row represents one group A table of accounts, where each row represents one account A table of memberships, where each row represents a membership of one account in one group The JDBC agent’s import and export configuration files are stored under the JDBC connected directory. As in the attribute configuration, the database schema is described here. Each JDBC export job uses this configuration. For searchRequest for exports, the JDBC2Ident_SyncGroup_JDBCExport and JDBC2Ident_SyncGroup_JDBCExport jobs use their own searchRequest files because they use special anchor values to find the selected attributes. All other JDBC export jobs use the standard searchRequest file. For JDBC agent import: An LDIF change file is generated by the preceding metacp job: Dn: consists of: identifying attribute(s), table=tablename A specific group: dn:DxrGroupName=verynew,table=Groups or a specific membership: dn:MembershipGroupID=1,MembershipAccountID=26,table=Memberships For JDBC agent export: An LDIF content file is generated: A specific group with its memberships: dn: groupid=1,view=members groupdesc: xx groupdxrname: ODBCall groupid: 1 groupodbcname: all accountdxrname: bj099999 Because the JDBC agent cannot currently run in delta mode, the JDBC workflow (JDBC2Ident_SyncGroup_MetaCP job) cannot generate \"add\" and \"delete\" member lists. Instead, the workflow accumulates all memberships in the accountDxrName attribute and synchronizes back the complete member list with the common modGroupInRole routine. This operation is different from the ODBC workflow and will be changed when the delta feature is available. The following LDAP workflows to provision any LDAP directory are available: LDAP2_Ident_Validation - performs initial load or validation from an LDAP directory Ident_LDAP_Sync - synchronizes between the Identity Store and an LDAP directory This chapter defines concepts that are necessary to understand the operation of the LDAP workflows. Per default the workflow assumes groupOfNames at the target system side. LDAP groups contain a member or uniqueMember attribute that cannot be empty (it is mandatory and must have a value). This is handled differently on the DirX Identity and the target system side: In the DirX Identity target system the group is empty. Note that the uniqueMember attribute contains the domain name to fulfill the LDAP requirement that empty groups cannot exist (cn=domainName). The dxrGroupMemberOK, dxrGroupMemberAdd and dxrGroupMember attributes are empty. To overcome the problem on the target system side, the LDAP workflow fills empty groups with a customizable value (default is 'cn=no_member'). For configuration of this feature see the next chapter. The workflow supports enable and disable. The status attribute of DirX Identity is mapped to a freely definable attribute in the target system (default: employeeType). For configuration of this feature see the next chapter. This chapter explains how you can customize specific issues of the LDAP workflows. Open the User Hooks script of the Identity_LDAP_Sync activity for group synchronization. Adapt the default statement in the Preprocessing section: set fixGroupMember \"cn=no_members\" This distinguished name is entered into empty groups on the target system side. If your directory or your applications cannot handle a value that points to nowhere, create an entry in an area that is not synchronized by DirX Identity (to overcome the problem that this entry is synchronized) and set the fixGroupMember value to point to this entry. To change the default attribute employeeType to another attribute, perform these steps: Open the User Hooks script for the account activity of the Identity_LDAP_Sync workflow. Select the attribute in the output channel’s Selected Attributes. Edit the statement in the Preprocessing section: set dxrTSStateAttr \"employeeType\" Open the User Hooks script for the account activity of the Ident2LDAP_Validation workflow. Select the attribute in the input channel’s Selected Attributes. Edit the statement in the Preprocessing section: set dxrTSStateAttr \"employeeType\" Group-side storage of memberships in DirX Identity can cause performance problems when large groups (hundred thousands to millions of members) must be handled. One solution is to store the membership at the account instead of at the groups because the number of memberships for accounts typically does not exceed 1000. If the real target system needs group-side membership storage, DirX Identity can nevertheless store the memberships account-side, which significantly improves all internal service handling. DirX Identity’s LDAP XXL workflows support LDAP target systems with this model. The following LDAP XXL workflows are available: LDAPXXL2_Ident_Validation - performs initial load or validation from an LDAP directory Ident_LDAPXXL_Sync - synchronizes between the Identity Store and an LDAP directory The LDAP XXL workflows operate differently from the standard LDAP workflow, as follows: The validation workflow’s account job reads memberships from the target system and merges them to the identity store accounts. Its group job does not handle memberships. The synchronization workflow’s group job reads memberships from the Identity Store via extra searches and merges them with the groups in the target system. Its account job reads memberships in the target system via extra searches and synchronizes the membership back to the accounts in the Identity Store. Unlike the standard LDAP workflow, the synchronization workflow’s group job uses the following optimizations: It does not read the member attribute in the LDAP target system into memory (avoids large memory lists) It does not use the Tcl lappend command for large lists (slow function) It does not use the rh arrays (slow Tcl behavior). Instead they build obj modify/create strings It appends/creates members in portions (blocks) This section explains LDAPXXL workflow implementation concepts. The two new common procedures are: modGroupStatesInRole addGroupStatesInRole These procedures handle the states but do not handle the memberships as in the mod/addGroupInRole procedures. Uniquemember is no longer in the target selected attribute list, which prevents it from being read during the join operation. PostmappingAdd: The PostmappingAdd: routine: Creates the group via the obj create command. It generates an attribute string for the command from the mapped tgt attributes, and assumes that Abbreviation and Name are identical. Searches the \"add\" members and appends the first portion of members to the command. Adds all other add members in portions via an obj modify -addattr command. Sets the action to none (because add is already done) and sets a special switch restore_action. Restores the action in loopextraFunction so that backward synchronization of the states can be performed for ADD. PostmappingMod: The PostmappingMod: routine: Searches for the members to be deleted. For every member, searches the target system to determine whether or not a delete attribute operation needs to be performed. If it does, the routine builds the list of attributes to be deleted. If a given block size is reached, performs an obj modify -delattr with block_size members. Handles add members analog. Block size is configured at the job (specific attribute block_size defaults to 100). Instead of having a large Tcl (result) list of members, uses the target system as the list. Every search in the list results in an LDAP search. Modifies the other attributes with the standard script operation. Creates a namespace search to handle the searches for add/delete members. It consists of a search and a get(getNextMembers) procedure. The search result is held in this namespace. The get procedure returns the next number of attributes separated by “;”. LoopExtraFunction This routine restores the action if the restore_action switch is set. Additional Statistics The LDAP XXL workflows offer additional statistics. For example: # # Additional statistics: #========================== # Nr of groups created: 0 # Nr of modifies to append members for new groups: 0 # Nr of modifies to change memberships: 3 # Nr of groups for which memberships have changed: 1 Specific Attribute block_size (Job) The job’s block_size attribute is used for creates and modifies. A single create/modify operation handles max block_size members. Paged-Read Integration The following sections provide information about paged-read integration in the LDAPXXL workflows. Group Synchronization Searches for the add/delete memberships in role may return large results. These searches should use paged read to avoid memory problems. All search functionality is extracted in a Tcl file called “Post Join Search Tcl Script”. It contains three namespaces: A namespace searchType to determine what kind of searches are supported A namespace for simple paging (searchPaged) and A namespace for \"simple\" searches (search) are provided Virtual list view (VLV) may be supported in a future release. Simple Paging (paged read) The searchPaged namespace contains procedures for paged read. Paged read requires an extra bind with a -bindid option; for users of the search functionality, this is the only difference in the interface between the several search types. As a result, searchPaged offers a bind procedure. The caller passes the bind ID and the connection parameters. The first time bind is called for the given bind ID, it performs the bind. Subsequent calls with the same bind ID do not result in another bind; the existing bind is used. The page size can be configured at the job object: variable PAGESIZE Uh:: Prolog: set st(paged) 0 set rc [searchType::determineSearchType src_bind_id st] set usePagedResult $st(paged) The variable of uh namespace usePagedResult is set. Here if “simple paging” is possible, usePagedResult is set to 1 (it means true or yes). Otherwise, simple searches are used. If you never want to use simple paging you can hard-code it here. A second index vlv of the st array indicates whether VLV is supported. Post-Join Mapping In postMappingAdd/Mod, the variable usePagedResult is used to determine if search procedures need to be called from search or searchPaged namespace. For usePagedResult, the bind procedure is also called: if {$usePagedResult == 1} { set rc [searchPaged::bind paged_bind_id src_conn_param] } ... if {$usePagedResult == 0} { search::SearchMembers $src_conn_param(bind_id) $role_ts_account_base .. } else { searchPaged::SearchMembers paged_bind_id $role_ts_account_base .. } Account Synchronization The search for the changed accounts in the Identity Store might return a large result. To avoid memory problems, the standard script’s paged read functionality is now used. Paged read is switched on and the page size is set in the account synchronization job’s input channel. Sorting is now disabled (because sorting DDN and paged read is not supported). Perform the following steps to change the Role LDAPXXL workflows from GroupOfUniqueNames to GroupOfNames. For the validation workflow/validate accounts: Go to the wizard step \"Attribute Mapping for Accounts\". Edit PostJoin Mapping. In PostJoinMapping Procedure GetCurrentTSMembers, replace set rc [SearchMembers $bind_id $base_obj GroupOfUniqueNames uniquemember $accountdn locMembs] with set rc [SearchMembers $bind_id $base_obj GroupOfNames member $accountdn locMembs] For the validation workflow/validate groups Wizard step \"Attribute Mapping for Groups\" Select InputChannel Press show button in Export Properties Tab Update the \"Search Filter\" of export properties to objectClass=\"groupOfNames\" For the synchronization workflow/synchronize accounts: In DirX Manager’s expert view: UserHook under the Role_LDAPXXL_SyncAccount_MetaCP job uh: ModifyRoleEntry procedure: replace set rc [SearchMembers $bind_id $base_obj GroupOfUniqueNames uniquemember $accountdn DDN currTSMembs] with set rc [SearchMembers $bind_id $base_obj GroupOfNames member $accountdn DDN currTSMembs] For the synchronization workflow/synchronize groups: Go to the wizard step \"Target Selected Attributes for Groups\": Replace uniqueMember replace-all with member replace-all Go to the wizard step \"Import Properties for Groups\". In Join Expression, change GroupOfUniqueNames to GroupOfNames Go to the wizard step \"Attribute Mapping for Groups\": Edit PostJoin Mapping: postMappingAdd: Change set tgt(objectClass) \"GroupOfUniqueNames top\" to set tgt(objectClass) \"GroupOfNames top\" Change set tgt(uniqueMember) $add_member to set tgt(member) $add_member postMappingMod: Change set members $found_entry(uniqueMember) to set members $found_entry(member) Change set tgt(uniqueMember) $members to set tgt(member) $members In the connected directory LDAPXXL: Configure LDAP TS in Hub: Go to the wizard step \"Operational Attributes\". In ObjectClasses Groups, change GroupOfUniqueNames to GroupOfNames This section comprises all Lotus Notes-specific information for Tcl-based workflows. The DirX Identity Tcl-based Lotus Notes workflows provision a Lotus Notes target system. Two workflows are available: Notes2Ident_Validation - performs initial load or validation from a Lotus Notes target system Ident_Notes_Sync - synchronizes between the Identity Store and a Lotus Notes target system Configuration notes: The parameter \"Account Root in TS\" of the target system object (in the Provisioning view) must contain a structure element like '/o=mycompany' which must match with the one contained in the cert.id file, because the Notes Server creates the fullname of the user by concatenating givenName, surname and this structure part contained in the cert.id file. This fullname also is used in the member attributes of groups in Notes. As a consequence the cn of a Notes target system account in Provisioning is generated like the fullname in Notes to be able to assign group members to accounts in the Provisioning view. The parameter \"Group Root in TS\" must be left empty, because groups are kept flat in Notes and not in the kind of structure like users. Deletion of accounts in Lotus Notes is a specific procedure: The workflow cannot delete accounts directly. Instead it marks an account for deletion in the Lotus Notes system. You can define in the Notes server the time after which an account is physically deleted from the address book (for example, two minutes) and the time after which the mail file is deleted. This feature implies that the dxrTSstate is not set correctly during this run of the synchronization workflow. As a result, the next synchronization workflow will try to delete the same entries again. This action does not result in a warning state. Instead, one of the next synchronization workflows or a validation workflow will set the dxrTS flag accordingly. A Pluggable Authentication Module (PAM) is a method that allows you to provide the authentication for system and other services (login, su, sshd…) using other services (LDAP…). Today the support for PAM is included in most of the common UNIX distributions. PAM was originally developed by Sun Microsystems. The topics in this section describe how PAM works and how to set up PAM Provisioning workflows. The basic idea of the PAM system are pluggable authentication modules - shared object files that are typically located in the /lib/security directory. Applications use for access to these modules two interfaces. The first is a system library attached to the application that allows the application to access the application authentication services directly. The second layer is the system configuration - the administrator specifies here the authentication rules for an application as desired. PAM is used in four areas: user authentication, account control, session management and password change. The PAM modules process control or executive functions: User authentication checks the identity of the user: password check, Kerberos authentication etc. Account control processes some verification which is not directly related to user identity: limited access time for a user, limited number of concurrently logged users etc. Session management is activated before and after service execution: sets the environment variables, execution of chroot, enables network disk connections etc. The control flag describes how to work with the PAM module. The possible values are required, requisite, sufficient and optional. Provisioning of PAM requires the following setup steps: Install an LDAP directory that you can use for PAM. See the specific vender documentation how to perform this task. Install and configure PAM for your UNIX system. See the specific vendor documentation. This includes a setup of the PAM LDAP schema. Important part of the schema are the object classes posixAccount and posixGroup. Check that PAM is working. Create for example an account and a group that allows access to read a file and check that this account can read the file. Create a UNIX PAM target system in the Provisioning view group with Identity Manager. This includes creation of a UNIX PAM LDAP connected directory and the related workflows. Note: the target system wizard copies only the Tcl-based workflows. If you want to use real-time provisioning, copy the relevant workflows in the Connectivity view group as is described in the DirX Identity Connectivity Administration Guide. Test your scenario thoroughly. The UNIX-PAM Provisioning workflows operate between a target system of type LDAP in the Identity Store and the corresponding connected LDAP server that is configured for use with UNIX-PAM (see RFC 2307). The workflows use the standard LDAP connector (LdapConnector) for provisioning. This connector communicates with the LDAP server across the native LDAP protocol. (See the section \"LDAP Workflows\" for more information). The following figure illustrates the UNIX-PAM Provisioning workflow architecture. Figure 120. UNIX-PAM Workflow Architecture The workflows handle the following UNIX objects: Account - the common UNIX accounts (object classes posixUser and shadowUser according to RFC 2307). Group - the common UNIX groups (object classes posixGroup according to RFC 2307). The delivered workflows are: Ident_UNIX-PAM_Realtime - the synchronization workflow that exports detected changes for account and group objects from Identity Store to the LDAP server and then validates the processed changes in the LDAP server to the Identity Store. Validate_UNIX-PAM_Realtime - the validation workflow that imports existing UNIX accounts and groups with group assignment from the LDAP server to the Identity Store. The UNIX-PAM workflows have the following prerequisites and limitations: Before you can use the workflows, you must extend the DirX Identity Store schema with UNIX-PAM target system-specific attributes and object classes so that the workflows can store UNIX-PAM-specific information in the Identity Store. For instructions, see the section \"Extending the Schema for the Target System Workflows\". The workflows support only the object classes posixAccount, shadowAccount and posixGroup defined by RFC 2307. The workflows as delivered do not support password synchronization for UNIX-PAM. (See the section \"LDAP Workflows\" for an example of a password synchronization workflow for a UNIX-PAM (LDAP-based) connected directory.) To configure the connection to UNIX-PAM: Specify the IP address and the data port of the LDAP server that is configured for use with UNIX-PAM. Use the corresponding UNIX-PAM service object that is the part of the connected UNIX-PAM LDAP directory. Use correct port numbers according to your LDAP server settings. You can also set the usage of secure connection (SSL) or enable client authentication. Set up the bind credentials of the connected LDAP directory representing UNIX-PAM. Use the correct credentials (with sufficient rights). These are the credentials used for administration of the LDAP server. Use the valid DN syntax for the user name. Check the provisioning settings used by the connected UNIX-PAM system. Specify them according to real values for your provisioned UNIX-PAM target system. The UNIX-PAM target system requires the following layout: Accounts - all UNIX accounts are located in a subfolder Accounts. Groups - all UNIX groups are located in a subfolder Groups. The attribute dxrPrimaryKey of accounts and groups contains the DN of these objects in the connected system. The standard JavaScript dxrNameForAccounts.js generates the attribute uid for the UNIX account. The UNIX-PAM specific JavaScript uniqueNumber.js generates the attributes uidNumber and gidNumber for the UNIX account. The attribute gidNumber for the UNIX account (refers to the primary UNIX group of the account) is by default automatically chosen as one of the assigned UNIX groups. It uses the obligation mechanism (see group objects) and the UNIX-PAM specific JavaScript AccountGidNumber.js. The JavaScript updates the gidNumber when necessary. You can change the primary group manually at the account object. The group object stores the group membership and references the uid attribute of the account objects. The following figure shows the layout of the channels that are used by the UNIX-PAM workflow’s join activity: Figure 121. UNIX-PAM Provisioning Workflow Channels and Objects The UNIX objects account and group (and membership) are synchronized via a pair of channels (one channel per direction). This section describes the UNIX-PAM ports. TS Port CF - Crypt Filter A UNIX-PAM filter is implicitly configured. It is used to send the decrypted password attribute userPassword to the LDAP server. This section provides information about UNIX-PAM channels. Direction: Identity Store → UNIX-PAM shadowFlag - the attribute used for disabling of the account object in the connected LDAP directory (used for UNIX-PAM). The correct value is derived from the dxrState attribute of the corresponding account object in the Identity Store. This is an experimental setting and must be supported by the relevant UNIX-PAM implementation. Direction: UNIX PAM → Identity Store CommonProcsUnixPam.calculateIdInIdentity - calculates the Id. Direction: Identity Store → UNIX-PAM ID: dxrPrimaryKey Join: ${source.dxrPrimaryKey} or ${source.uidNumber} UNIX-PAM requires some mandatory attributes. (See RFC 2307 for details.) Mandatory attributes are mapped in a common way. The gidNumber attribute holds the primary group membership. Direction: UNIX-PAM → Identity Store Join via the dxrName attribute that is mapped identically to the uidNumber attribute. Direction: Identity Store → UNIX-PAM ID: dxrPrimaryKey Join: ${source.dxrPrimaryKey} or {source.gidNumber} UNIX-PAM requires some mandatory attributes. (See RFC 2307 for details.) Mandatory attributes are mapped in a common way. Direction: UNIX-PAM → Identity Store Join via the dxrName attribute that is mapped identically to the gidNumber attribute.","title":"Application Development Guide","component":"dirx-identity-docs","version":"9.0.0","name":"appl-dev-guide","url":"/dirx-identity-docs/latest/appl-dev-guide/pdf-src/appl-dev-guide.html","titles":[{"text":"Copyright","hash":"_copyright","id":1},{"text":"Preface","hash":"_preface","id":2},{"text":"DirX Identity Documentation","hash":"_prf_dirx_identity_documentation","id":3},{"text":"DirX Identity Document Set","hash":"_dirx_identity_document_set","id":4},{"text":"Notation Conventions","hash":"_notation_conventions","id":5},{"text":"1. Understanding the Default Application Workflow Technology","hash":"_understanding_the_default_application_workflow_technology","id":6},{"text":"1.1. Understanding Request Workflows","hash":"_understanding_request_workflows","id":7},{"text":"1.1.1. Request Workflow Architecture","hash":"_ch1_request_workflow_architecture","id":8},{"text":"1.1.1.1. Understanding Activity Types","hash":"_ch1_understanding_activity_types","id":9},{"text":"1.1.1.2. About the Activity Sub-Structure","hash":"_ch1_about_the_activity_sub_structure","id":10},{"text":"1.1.1.3. Understanding Notifications","hash":"_ch1_understanding_notifications","id":11},{"text":"1.1.1.4. HTML Notifications","hash":"_ch1_html_notifications","id":12},{"text":"1.1.1.5. Understanding Request Workflow States","hash":"_ch1_understanding_request_workflow_states","id":13},{"text":"1.1.1.5.1. Types of Request Workflow States","hash":"_ch1_types_of_request_workflow_states","id":14},{"text":"1.1.1.5.2. Understanding Request Workflow Activity States","hash":"_ch1_understanding_request_workflow_activity_states","id":15},{"text":"1.1.1.6. Understanding the Full Checker","hash":"_ch1_understanding_the_full_checker","id":16},{"text":"1.1.1.6.1. Full Check for Expired Workflows and Activities","hash":"_ch1_full_check_for_expired_workflows_and_activities","id":17},{"text":"1.1.1.6.2. Full Check for All Running Workflows","hash":"_ch1_full_check_for_all_running_workflows","id":18},{"text":"1.1.1.6.3. Full Checker Configuration","hash":"_ch1_full_checker_configuration","id":19},{"text":"1.1.1.7. Request Workflow Error Handling","hash":"_ch1_request_workflow_error_handling","id":20},{"text":"1.1.1.8. Nationalizing Request Workflows","hash":"_ch1_nationalizing_request_workflows","id":21},{"text":"1.1.1.8.1. Understanding Request Workflow Nationalization","hash":"_ch1_understanding_request_workflow_nationalization","id":22},{"text":"1.1.1.8.2. Using the Nationalization Wizard","hash":"_ch1_using_the_nationalization_wizard","id":23},{"text":"1.1.1.8.3. Organizing Message Topics","hash":"_ch1_organizing_message_topics","id":24},{"text":"1.1.1.8.4. Customizing Request Workflow Nationalization","hash":"_ch1_customizing_request_workflow_nationalization","id":25},{"text":"1.1.1.8.5. Using an External Nationalization Editor","hash":"_ch1_using_an_external_nationalization_editor","id":26},{"text":"1.1.1.8.6. Determining the Language","hash":"_ch1_determining_the_language","id":27},{"text":"1.1.1.8.7. Handling Message Items during Runtime","hash":"_ch1_handling_message_items_during_runtime","id":28},{"text":"1.1.1.9. Selecting Request Workflows","hash":"_ch1_selecting_request_workflows","id":29},{"text":"1.1.1.9.1. Creation Workflow Selection","hash":"_ch1_creation_workflow_selection","id":30},{"text":"1.1.1.9.2. Modification Workflow Selection","hash":"_ch1_modification_workflow_selection","id":31},{"text":"1.1.1.9.3. Assignment Workflow Selection","hash":"_ch1_assignment_workflow_selection","id":32},{"text":"1.1.1.10. Executing Request Workflows","hash":"_ch1_executing_request_workflows","id":33},{"text":"1.1.2. Customizing Request Workflows","hash":"_ch1_customizing_request_workflows","id":34},{"text":"1.1.2.1. Using Variable Substitution","hash":"_ch1_using_variable_substitution","id":35},{"text":"1.1.2.1.1. Elements","hash":"_ch1_elements","id":36},{"text":"1.1.2.1.2. Structures","hash":"_ch1_structures","id":37},{"text":"1.1.2.1.3. Server Variables","hash":"_ch1_server_variables","id":38},{"text":"1.1.2.1.4. Workflow Instance","hash":"_ch1_workflow_instance","id":39},{"text":"1.1.2.1.5. Activity Instance","hash":"_ch1_activity_instance","id":40},{"text":"1.1.2.1.6. Control Structures","hash":"_ch1_control_structures","id":41},{"text":"1.1.2.1.7. Reduced Run-time Activities","hash":"_ch1_reduced_run_time_activities","id":42},{"text":"1.1.2.1.8. Filling the Address Fields","hash":"_ch1_filling_the_address_fields","id":43},{"text":"1.1.2.1.9. Participant Calculation","hash":"_ch1_participant_calculation","id":44},{"text":"1.1.2.1.10. Tips and Tricks","hash":"_ch1_tips_and_tricks","id":45},{"text":"1.1.2.2. Implementing a New Activity","hash":"_ch1_implementing_a_new_activity","id":46},{"text":"1.1.2.2.1. Defining Configuration Parameters","hash":"_ch1_defining_configuration_parameters","id":47},{"text":"1.1.2.2.2. Supplying a Component Description","hash":"_ch1_supplying_a_component_description","id":48},{"text":"1.1.2.2.3. Implementing the Job","hash":"_ch1_implementing_the_job","id":49},{"text":"1.1.2.2.4. Reading the Job Configuration","hash":"_ch1_reading_the_job_configuration","id":50},{"text":"1.1.2.2.5. Reading the Workflow Instance Data","hash":"_ch1_reading_the_workflow_instance_data","id":51},{"text":"1.1.2.2.6. Modifying the Workflow Instance Data","hash":"_ch1_modifying_the_workflow_instance_data","id":52},{"text":"1.1.2.2.7. Read and Write Context Properties","hash":"_ch1_read_and_write_context_properties","id":53},{"text":"1.1.2.2.8. Reading and Changing Orders","hash":"_ch1_reading_and_changing_orders","id":54},{"text":"1.1.2.2.9. Deploying the Job","hash":"_ch1_deploying_the_job","id":55},{"text":"1.1.2.2.10. Obtaining a Connection to the Identity Domain","hash":"_ch1_obtaining_a_connection_to_the_identity_domain","id":56},{"text":"1.1.2.2.11. Implementing a Job with access to the Identity Domain","hash":"_ch1_implementing_a_job_with_access_to_the_identity_domain","id":57},{"text":"1.1.2.2.12. Using the DomainSessionAccessor Method","hash":"_ch1_using_the_domainsessionaccessor_method","id":58},{"text":"1.1.2.2.13. Implementing a User Hook for an applyChange Activity","hash":"_ch1_implementing_a_user_hook_for_an_applychange_activity","id":59},{"text":"1.1.2.3. Implementing a Socketed Job Framework-based Activity","hash":"_ch1_implementing_a_socketed_job_framework_based_activity","id":60},{"text":"1.1.2.3.1. Adding the New Socketed Job Framework Activity","hash":"_ch1_adding_the_new_socketed_job_framework_activity","id":61},{"text":"1.1.2.3.2. Specifying Predefined Configuration Parameters","hash":"_ch1_specifying_predefined_configuration_parameters","id":62},{"text":"1.1.2.3.3. Implementing the Job","hash":"_ch1_implementing_the_job_2","id":63},{"text":"1.1.2.3.4. Reading the Job Configuration","hash":"_ch1_reading_the_job_configuration_2","id":64},{"text":"1.1.2.3.5. Reading the Workflow Instance Data","hash":"_ch1_reading_the_workflow_instance_data_2","id":65},{"text":"1.1.2.3.6. Modifying the Workflow Instance Data","hash":"_ch1_modifying_the_workflow_instance_data_2","id":66},{"text":"1.1.2.3.7. Read and Write Context Properties","hash":"_ch1_read_and_write_context_properties_2","id":67},{"text":"1.1.2.3.8. Reading and Changing Orders","hash":"_ch1_reading_and_changing_orders_2","id":68},{"text":"1.1.2.3.9. Deploying the Job","hash":"_ch1_deploying_the_job_2","id":69},{"text":"1.1.2.4. Implementing a Java Class for Finding Participants","hash":"_ch1_implementing_a_java_class_for_finding_participants","id":70},{"text":"1.1.2.4.1. Defining Configuration Parameters","hash":"_ch1_defining_configuration_parameters_2","id":71},{"text":"1.1.2.4.2. Implementing the Java Class","hash":"_ch1_implementing_the_java_class","id":72},{"text":"1.1.2.4.3. Deploying the Java Class","hash":"_ch1_deploying_the_java_class","id":73},{"text":"1.1.2.5. Implementing Participant Filters and Constraints","hash":"_ch1_implementing_participant_filters_and_constraints","id":74},{"text":"1.1.2.5.1. Implementing a Participants Filter","hash":"_ch1_implementing_a_participants_filter","id":75},{"text":"1.1.2.5.2. Implementing Participant Constraints","hash":"_ch1_implementing_participant_constraints","id":76},{"text":"1.1.2.5.3. Configuring a Joblet","hash":"_ch1_configuring_a_joblet","id":77},{"text":"1.1.2.5.4. Implementing a Joblet","hash":"_ch1_implementing_a_joblet","id":78},{"text":"1.1.2.5.5. Deploying Filters and Constraints","hash":"_ch1_deploying_filters_and_constraints","id":79},{"text":"1.1.3. Testing Request Workflows","hash":"_ch1_testing_request_workflows","id":80},{"text":"1.2. Understanding Java-based Workflows","hash":"_understanding_java_based_workflows","id":81},{"text":"1.2.1. Java-based Workflow Architecture","hash":"_ch1_java_based_workflow_architecture","id":82},{"text":"1.2.1.1. Full, Delta and Event-based Workflows","hash":"_ch1_full_delta_and_event_based_workflows","id":83},{"text":"1.2.1.2. Location of Delta State","hash":"_ch1_location_of_delta_state","id":84},{"text":"1.2.1.3. Java-based Workflow Structure","hash":"_ch1_java_based_workflow_structure","id":85},{"text":"1.2.1.4. Controller Types","hash":"_ch1_controller_types","id":86},{"text":"1.2.1.5. Channels and Mapping","hash":"_ch1_channels_and_mapping","id":87},{"text":"1.2.1.6. Cross-Memberships","hash":"_ch1_cross_memberships","id":88},{"text":"1.2.1.7. Starting Java-based Workflows","hash":"_ch1_starting_java_based_workflows","id":89},{"text":"1.2.1.7.1. Event-Based Workflows","hash":"_ch1_event_based_workflows","id":90},{"text":"1.2.1.7.2. Scheduled Workflows","hash":"_ch1_scheduled_workflows","id":91},{"text":"1.2.1.7.3. Starting a Workflow Manually","hash":"_ch1_starting_a_workflow_manually","id":92},{"text":"1.2.2. Customizing Java-based Workflows","hash":"_ch1_customizing_java_based_workflows","id":93},{"text":"1.2.2.1. Using User Hooks","hash":"_ch1_using_user_hooks","id":94},{"text":"1.2.2.1.1. Configuring a User Hook","hash":"_ch1_configuring_a_user_hook","id":95},{"text":"1.2.2.1.2. Implementing a Global User Hook","hash":"_ch1_implementing_a_global_user_hook","id":96},{"text":"1.2.2.1.3. Implementing a Channel User Hook","hash":"_ch1_implementing_a_channel_user_hook","id":97},{"text":"1.2.2.1.4. Implementing a User Hook for Email Notifications","hash":"_ch1_implementing_a_user_hook_for_email_notifications","id":98},{"text":"1.2.2.1.5. Deploying a User Hook","hash":"_ch1_deploying_a_user_hook","id":99},{"text":"1.2.2.1.6. Running Executables from a User Hook","hash":"_ch1_running_executables_from_a_user_hook","id":100},{"text":"1.2.2.2. Mapping with Java Classes","hash":"_ch1_mapping_with_java_classes","id":101},{"text":"1.2.2.2.1. Identifier Mapping","hash":"_ch1_identifier_mapping","id":102},{"text":"1.2.2.2.2. Attribute Mapping","hash":"_ch1_attribute_mapping","id":103},{"text":"1.2.2.2.3. Post Mapping","hash":"_ch1_post_mapping","id":104},{"text":"1.2.2.2.4. Deploying the Mapping Class","hash":"_ch1_deploying_the_mapping_class","id":105},{"text":"1.2.2.2.5. Evaluating a Mapping Entry","hash":"_ch1_evaluating_a_mapping_entry","id":106},{"text":"1.2.2.2.6. Handling Environment Properties","hash":"_ch1_handling_environment_properties","id":107},{"text":"1.2.2.2.7. Handling the Mapped Entry","hash":"_ch1_handling_the_mapped_entry","id":108},{"text":"1.2.2.2.8. Setting the Map Result","hash":"_ch1_setting_the_map_result","id":109},{"text":"1.2.2.2.9. Logging","hash":"_ch1_logging","id":110},{"text":"1.2.2.3. Testing the Real-Time Workflow Mapping Classes","hash":"_ch1_testing_the_real_time_workflow_mapping_classes","id":111},{"text":"1.2.2.3.1. About the Mapping Test","hash":"_ch1_about_the_mapping_test","id":112},{"text":"1.2.2.3.2. About the Mapping Test Structure","hash":"_ch1_about_the_mapping_test_structure","id":113},{"text":"1.2.2.3.3. Testing the LDAP Channel Configuration","hash":"_ch1_testing_the_ldap_channel_configuration","id":114},{"text":"1.2.2.4. Using Connector Filters","hash":"_ch1_using_connector_filters","id":115},{"text":"1.2.2.4.1. Configuring a Connector Filter","hash":"_ch1_configuring_a_connector_filter","id":116},{"text":"1.2.2.4.2. Deploying a Connector Filter","hash":"_ch1_deploying_a_connector_filter","id":117},{"text":"1.2.3. Customizing Password Synchronization Workflows","hash":"_ch1_customizing_password_synchronization_workflows","id":118},{"text":"1.2.3.1. Configuring a Password User Hook","hash":"_ch1_configuring_a_password_user_hook","id":119},{"text":"1.2.3.2. Implementing a Password User Hook","hash":"_ch1_implementing_a_password_user_hook","id":120},{"text":"1.2.3.3. Deploying a Password User Hook","hash":"_ch1_deploying_a_password_user_hook","id":121},{"text":"1.2.4. Customizing Event-based Maintenance Workflows","hash":"_ch1_customizing_event_based_maintenance_workflows","id":122},{"text":"1.2.4.1. Configuring a User Hook for an Event-based Maintenance Workflow","hash":"_ch1_configuring_a_user_hook_for_an_event_based_maintenance_workflow","id":123},{"text":"1.2.4.2. Implementing a User Hook for an Event-based Maintenance Workflow","hash":"_ch1_implementing_a_user_hook_for_an_event_based_maintenance_workflow","id":124},{"text":"1.2.4.3. Using Event Contexts","hash":"_ch1_using_event_contexts","id":125},{"text":"1.2.4.4. Deploying a User Hook for an Event-based Maintenance Workflow","hash":"_ch1_deploying_a_user_hook_for_an_event_based_maintenance_workflow","id":126},{"text":"1.2.5. Using Combined Workflows","hash":"_ch1_using_combined_workflows","id":127},{"text":"1.3. Understanding Tcl-based Workflows","hash":"_understanding_tcl_based_workflows","id":128},{"text":"1.3.1. Tcl-based Connectivity Architecture","hash":"_ch1_tcl_based_connectivity_architecture","id":129},{"text":"1.3.1.1. Connectivity Standard Script Structure","hash":"_ch1_connectivity_standard_script_structure","id":130},{"text":"1.3.1.1.1. Connectivity Standard Script Logical Structure","hash":"_ch1_connectivity_standard_script_logical_structure","id":131},{"text":"1.3.1.1.2. Connectivity Standard Script Physical Structure","hash":"_ch1_connectivity_standard_script_physical_structure","id":132},{"text":"1.3.1.2. Provisioning Workflow Script Structure","hash":"_ch1_provisioning_workflow_script_structure","id":133},{"text":"1.3.1.3. Connectivity Standard Script Operation","hash":"_ch1_connectivity_standard_script_operation","id":134},{"text":"1.3.1.3.1. Control Script Operation","hash":"_ch1_control_script_operation","id":135},{"text":"1.3.1.3.2. Profile Script Operation","hash":"_ch1_profile_script_operation","id":136},{"text":"1.3.1.4. Connectivity Standard Script Switches and Parameters","hash":"_ch1_connectivity_standard_script_switches_and_parameters","id":137},{"text":"1.3.1.4.1. Switches for Operational Control","hash":"_ch1_switches_for_operational_control","id":138},{"text":"1.3.1.4.2. Switches for Notification Control","hash":"_ch1_switches_for_notification_control","id":139},{"text":"1.3.1.4.3. Switches for GUID Generation","hash":"_ch1_switches_for_guid_generation","id":140},{"text":"1.3.1.4.4. Switches for Trace Control","hash":"_ch1_switches_for_trace_control","id":141},{"text":"1.3.1.4.5. Source Directory Parameters","hash":"_ch1_source_directory_parameters","id":142},{"text":"1.3.1.4.6. Input Channel Parameters","hash":"_ch1_input_channel_parameters","id":143},{"text":"1.3.1.4.7. Target Directory Parameters","hash":"_ch1_target_directory_parameters","id":144},{"text":"1.3.1.4.8. Output Channel Parameters","hash":"_ch1_output_channel_parameters","id":145},{"text":"1.3.1.4.9. Switches for Pre-Configured Operational Attribute Handling","hash":"_ch1_switches_for_pre_configured_operational_attribute_handling","id":146},{"text":"1.3.1.5. References in the Default Connectivity Applications","hash":"_ch1_references_in_the_default_connectivity_applications","id":147},{"text":"1.3.1.5.1. Base Object References","hash":"_ch1_base_object_references","id":148},{"text":"1.3.1.5.2. References in Filter Expressions","hash":"_ch1_references_in_filter_expressions","id":149},{"text":"1.3.1.6. Object Class Handling","hash":"_ch1_object_class_handling","id":150},{"text":"1.3.1.7. Global Unique Identifier (GUID) Generation","hash":"_ch1_global_unique_identifier_guid_generation","id":151},{"text":"1.3.1.7.1. Local GUID Generation","hash":"_ch1_local_guid_generation","id":152},{"text":"1.3.1.7.2. Central GUID Generation","hash":"_ch1_central_guid_generation","id":153},{"text":"1.3.1.7.3. User-Defined GUID Generation","hash":"_ch1_user_defined_guid_generation","id":154},{"text":"1.3.1.8. Multi-Mastered Attributes","hash":"_ch1_multi_mastered_attributes","id":155},{"text":"1.3.1.9. Naming and Scopes","hash":"_ch1_naming_and_scopes","id":156},{"text":"1.3.1.10. User Hooks","hash":"_ch1_user_hooks","id":157},{"text":"1.3.1.10.1. Central Tcl Interfaces","hash":"_ch1_central_tcl_interfaces","id":158},{"text":"1.3.1.10.2. Default User Hook Tcl Interfaces","hash":"_ch1_default_user_hook_tcl_interfaces","id":159},{"text":"1.3.1.10.3. Post-Join Mapping Tcl Interfaces","hash":"_ch1_post_join_mapping_tcl_interfaces","id":160},{"text":"1.3.1.11. Global Tcl Variables","hash":"_ch1_global_tcl_variables","id":161},{"text":"1.3.1.11.1. Control Script Variables","hash":"_ch1_control_script_variables","id":162},{"text":"1.3.1.11.2. Profile Script Variables","hash":"_ch1_profile_script_variables","id":163},{"text":"1.3.1.12. Meta Handles","hash":"_ch1_meta_handles","id":164},{"text":"1.3.2. Understanding Delta Handling","hash":"_ch1_understanding_delta_handling","id":165},{"text":"1.3.2.1. Types of Delta handling","hash":"_ch1_types_of_delta_handling","id":166},{"text":"1.3.2.1.1. Date-Oriented Delta Handling","hash":"_ch1_date_oriented_delta_handling","id":167},{"text":"1.3.2.1.2. Client-Side Handling","hash":"_ch1_client_side_handling","id":168},{"text":"1.3.2.1.3. Workflow-Side Handling","hash":"_ch1_workflow_side_handling","id":169},{"text":"1.3.2.1.4. Client-Side Delta Handling","hash":"_ch1_client_side_delta_handling","id":170},{"text":"1.3.2.1.5. Workflow-Side Delta Handling","hash":"_ch1_workflow_side_delta_handling","id":171},{"text":"1.3.2.1.6. USN-Oriented Delta Handling","hash":"_ch1_usn_oriented_delta_handling","id":172},{"text":"1.3.2.1.7. File-Oriented Delta Handling","hash":"_ch1_file_oriented_delta_handling","id":173},{"text":"1.3.2.2. Delta Handling Control","hash":"_ch1_delta_handling_control","id":174},{"text":"1.3.2.2.1. How to Control Delta Runs","hash":"_ch1_how_to_control_delta_runs","id":175},{"text":"1.3.2.2.2. Configuring Delta Handling","hash":"_ch1_configuring_delta_handling","id":176},{"text":"1.3.3. Customizing Tcl-based Workflows","hash":"_ch1_customizing_tcl_based_workflows","id":177},{"text":"1.3.3.1. Customizing Identity Store Export Workflows","hash":"_ch1_customizing_identity_store_export_workflows","id":178},{"text":"1.3.3.1.1. Attribute Mapping","hash":"_ch1_attribute_mapping_2","id":179},{"text":"1.3.3.1.2. Base Object (Export Properties Tab)","hash":"_ch1_base_object_export_properties_tab","id":180},{"text":"1.3.3.1.3. Filter (Export Properties Tab)","hash":"_ch1_filter_export_properties_tab","id":181},{"text":"1.3.3.1.4. Tracing","hash":"_ch1_tracing","id":182},{"text":"1.3.3.2. Customizing Identity Store Import Workflows","hash":"_ch1_customizing_identity_store_import_workflows","id":183},{"text":"1.3.3.2.1. Mapping and Selected Attributes","hash":"_ch1_mapping_and_selected_attributes","id":184},{"text":"1.3.3.2.2. Base Object (Import Properties tab)","hash":"_ch1_base_object_import_properties_tab","id":185},{"text":"1.3.3.2.3. Import Mode (Import Properties Tab)","hash":"_ch1_import_mode_import_properties_tab","id":186},{"text":"1.3.3.2.4. Filters for Merge / Replace (Import Properties Tab)","hash":"_ch1_filters_for_merge_replace_import_properties_tab","id":187},{"text":"1.3.3.2.5. Entry Handling Properties Tab","hash":"_ch1_entry_handling_properties_tab","id":188},{"text":"1.3.3.2.6. Tracing","hash":"_ch1_tracing_2","id":189},{"text":"1.3.3.2.7. Page Mode","hash":"_ch1_page_mode","id":190},{"text":"2. Using Request Workflows","hash":"_using_request_workflows","id":191},{"text":"2.1. Understanding Creation Workflows","hash":"_understanding_creation_workflows","id":192},{"text":"2.1.1. User Self Registration Workflows","hash":"_ch2_user_self_registration_workflows","id":193},{"text":"2.1.2. Create User Workflows","hash":"_ch2_create_user_workflows","id":194},{"text":"2.1.3. Create Persona Workflows","hash":"_ch2_create_persona_workflows","id":195},{"text":"2.1.4. Create User Facet Workflows","hash":"_ch2_create_user_facet_workflows","id":196},{"text":"2.1.5. Create Functional User Workflows","hash":"_ch2_create_functional_user_workflows","id":197},{"text":"2.1.6. Create Privilege Workflows","hash":"_ch2_create_privilege_workflows","id":198},{"text":"2.2. Understanding Modification Workflows","hash":"_understanding_modification_workflows","id":199},{"text":"2.2.1. User Modification Workflows","hash":"_ch2_user_modification_workflows","id":200},{"text":"2.3. Understanding Assignment Workflows","hash":"_understanding_assignment_workflows","id":201},{"text":"2.3.1. How Approval Works","hash":"_ch2_how_approval_works","id":202},{"text":"2.3.1.1. 4-Eye Approval","hash":"_ch2_4_eye_approval","id":203},{"text":"2.3.1.2. Automatic (Notification Only) Approval","hash":"_ch2_automatic_notification_only_approval","id":204},{"text":"2.3.1.3. Risk Approval","hash":"_ch2_risk_approval","id":205},{"text":"2.3.2. Understanding Assignment Operation Types","hash":"_ch2_understanding_assignment_operation_types","id":206},{"text":"2.3.3. Guidelines for Approving Privilege Assignments","hash":"_ch2_guidelines_for_approving_privilege_assignments","id":207},{"text":"2.3.4. Guidelines for Re-Approving Privilege Assignments","hash":"_ch2_guidelines_for_re_approving_privilege_assignments","id":208},{"text":"2.4. Understanding Deletion Workflows","hash":"_understanding_deletion_workflows","id":209},{"text":"2.4.1. Deletion Procedure","hash":"_ch2_deletion_procedure","id":210},{"text":"2.4.2. Supported Object Types","hash":"_ch2_supported_object_types","id":211},{"text":"2.4.3. Role Deletion Workflow","hash":"_ch2_role_deletion_workflow","id":212},{"text":"2.5. Understanding Certification Workflows","hash":"_understanding_certification_workflows","id":213},{"text":"2.5.1. Certification Campaign Workflows","hash":"_ch2_certification_campaign_workflows","id":214},{"text":"2.6. Understanding Service Management Workflows","hash":"_understanding_service_management_workflows","id":215},{"text":"2.6.1. Manual Provisioning Workflows","hash":"_ch2_manual_provisioning_workflows","id":216},{"text":"2.6.2. Process Ticket Workflows","hash":"_ch2_process_ticket_workflows","id":217},{"text":"3. Configuring Custom Scenarios","hash":"_configuring_custom_scenarios","id":218},{"text":"3.1. Creating the New Scenario","hash":"_creating_the_new_scenario","id":219},{"text":"3.2. Refining the Scenario","hash":"_refining_the_scenario","id":220},{"text":"3.3. Creating the Identity Creation Workflows","hash":"_creating_the_identity_creation_workflows","id":221},{"text":"3.4. Creating Cluster Target Systems","hash":"_creating_cluster_target_systems","id":222},{"text":"4. Using the Default Connectivity Applications","hash":"_using_the_default_connectivity_applications","id":223},{"text":"4.1. Working with Default Connectivity Application Objects","hash":"_working_with_default_connectivity_application_objects","id":224},{"text":"4.2. Working with the Default Connectivity Scenario","hash":"_working_with_default_connectivity_scenario","id":225},{"text":"5. Using the Source Workflows","hash":"_using_the_source_workflows","id":226},{"text":"5.1. Understanding the Java-based Source Workflows","hash":"_understanding_the_java_based_source_workflows","id":227},{"text":"5.1.1. Active Directory (ADS) User Import Workflow","hash":"_ch5_active_directory_ads_user_import_workflow","id":228},{"text":"5.1.1.1. ADS User Import Workflow Prerequisites","hash":"_ch5_ads_user_import_workflow_prerequisites","id":229},{"text":"5.1.1.2. ADS User Import Workflow Configuration","hash":"_ch5_ads_user_import_workflow_configuration","id":230},{"text":"5.1.1.3. ADS User Import Workflow and Activities","hash":"_ch5_ads_user_import_workflow_and_activities","id":231},{"text":"5.1.1.4. ADS User Import Workflow Ports","hash":"_ch5_ads_user_import_workflow_ports","id":232},{"text":"5.1.1.5. ADS User Import Workflow Channels","hash":"_ch5_ads_user_import_workflow_channels","id":233},{"text":"5.1.1.5.1. TS Port","hash":"_ch5_ts_port","id":234},{"text":"5.1.1.5.2. Identity Port","hash":"_ch5_identity_port","id":235},{"text":"5.1.2. Relational Database User Import Workflow","hash":"_ch5_relational_database_user_import_workflow","id":236},{"text":"5.1.2.1. Relational Database User Import Workflow Prerequisites","hash":"_ch5_relational_database_user_import_workflow_prerequisites","id":237},{"text":"5.1.2.2. Relational Database User Import Workflow Configuration","hash":"_ch5_relational_database_user_import_workflow_configuration","id":238},{"text":"5.1.2.2.1. JDBC Connector and Connected Directory Configuration","hash":"_ch5_jdbc_connector_and_connected_directory_configuration","id":239},{"text":"5.1.2.2.2. TS Port Filter Configuration","hash":"_ch5_ts_port_filter_configuration","id":240},{"text":"5.1.2.3. Relational Database User Import Workflow Channel Configuration","hash":"_ch5_relational_database_user_import_workflow_channel_configuration","id":241},{"text":"5.1.2.3.1. User Channel at the TS Port","hash":"_ch5_user_channel_at_the_ts_port","id":242},{"text":"5.1.2.3.2. User-roles Channel at the TS Port","hash":"_ch5_user_roles_channel_at_the_ts_port","id":243},{"text":"5.1.2.3.3. User Channel at the Identity Store Port","hash":"_ch5_user_channel_at_the_identity_store_port","id":244},{"text":"5.1.2.3.4. User-roles Channel at the Identity Store Port","hash":"_ch5_user_roles_channel_at_the_identity_store_port","id":245},{"text":"5.1.2.3.5. setPassword Channel at the Identity Store Port","hash":"_ch5_setpassword_channel_at_the_identity_store_port","id":246},{"text":"5.1.2.4. Importing Database Users without their Role Assignments","hash":"_ch5_importing_database_users_without_their_role_assignments","id":247},{"text":"5.1.3. Role Import Workflow","hash":"_ch5_role_import_workflow","id":248},{"text":"5.1.3.1. Role Import Workflow Prerequisites","hash":"_ch5_role_import_workflow_prerequisites","id":249},{"text":"5.1.3.2. Role Import Workflow Configuration","hash":"_ch5_role_import_workflow_configuration","id":250},{"text":"5.1.3.2.1. Configuring the JDBC Source","hash":"_ch5_configuring_the_jdbc_source","id":251},{"text":"5.1.3.2.2. Configuring the Role Import Workflow","hash":"_ch5_configuring_the_role_import_workflow","id":252},{"text":"5.1.3.2.3. Deploying the Identity Web Services","hash":"_ch5_deploying_the_identity_web_services","id":253},{"text":"5.1.3.3. Role Import Workflow and Activities","hash":"_ch5_role_import_workflow_and_activities","id":254},{"text":"5.1.3.4. Role Import Workflow Ports","hash":"_ch5_role_import_workflow_ports","id":255},{"text":"5.1.3.5. Role Import Workflow Channels","hash":"_ch5_role_import_workflow_channels","id":256},{"text":"5.1.3.5.1. TS Port","hash":"_ch5_ts_port_2","id":257},{"text":"5.1.3.5.2. Identity Port","hash":"_ch5_identity_port_2","id":258},{"text":"5.1.4. LDIF User Import Workflow","hash":"_ch5_ldif_user_import_workflow","id":259},{"text":"5.1.4.1. LDIF User Import Workflow Prerequisites","hash":"_ch5_ldif_user_import_workflow_prerequisites","id":260},{"text":"5.1.4.2. LDIF User Import Workflow Configuration","hash":"_ch5_ldif_user_import_workflow_configuration","id":261},{"text":"5.1.4.3. LDIF User Import Workflow and Activities","hash":"_ch5_ldif_user_import_workflow_and_activities","id":262},{"text":"5.1.4.4. LDIF User Import Workflow Ports","hash":"_ch5_ldif_user_import_workflow_ports","id":263},{"text":"5.1.4.5. LDIF User Import Workflow Channels","hash":"_ch5_ldif_user_import_workflow_channels","id":264},{"text":"5.1.4.5.1. Users Channel at TS Port","hash":"_ch5_users_channel_at_ts_port","id":265},{"text":"5.1.4.5.2. Users Channel at Identity Port","hash":"_ch5_users_channel_at_identity_port","id":266},{"text":"5.1.5. LDIF User Export Workflow","hash":"_ch5_ldif_user_export_workflow","id":267},{"text":"5.1.5.1. LDIF User Export Workflow Prerequisites","hash":"_ch5_ldif_user_export_workflow_prerequisites","id":268},{"text":"5.1.5.2. LDIF User Export Workflow Configuration","hash":"_ch5_ldif_user_export_workflow_configuration","id":269},{"text":"5.1.5.3. LDIF User Export Workflow and Activities","hash":"_ch5_ldif_user_export_workflow_and_activities","id":270},{"text":"5.1.5.4. LDIF User Export Workflow Ports","hash":"_ch5_ldif_user_export_workflow_ports","id":271},{"text":"5.1.5.5. LDIF User Export Workflow Channels","hash":"_ch5_ldif_user_export_workflow_channels","id":272},{"text":"5.1.5.5.1. Users Channel at Identity Port","hash":"_ch5_users_channel_at_identity_port_2","id":273},{"text":"5.1.5.5.2. Users Channel at TS Port","hash":"_ch5_users_channel_at_ts_port_2","id":274},{"text":"5.1.6. CSV Workflows","hash":"_ch5_csv_workflows","id":275},{"text":"5.1.6.1. CSV User Import Workflow","hash":"_ch5_csv_user_import_workflow","id":276},{"text":"5.1.6.1.1. CSV User Import Workflow Prerequisites","hash":"_ch5_csv_user_import_workflow_prerequisites","id":277},{"text":"5.1.6.1.2. CSV User Import Workflow Configuration","hash":"_ch5_csv_user_import_workflow_configuration","id":278},{"text":"5.1.6.1.3. CSV User Import Workflow and Activities","hash":"_ch5_csv_user_import_workflow_and_activities","id":279},{"text":"5.1.6.1.4. CSV User Import Workflow Ports","hash":"_ch5_csv_user_import_workflow_ports","id":280},{"text":"5.1.6.1.5. CSV User Import Workflow Channels","hash":"_ch5_csv_user_import_workflow_channels","id":281},{"text":"5.1.6.1.6. Customizing the Workflow to Handle Files without a DN Column","hash":"_ch5_customizing_the_workflow_to_handle_files_without_a_dn_column","id":282},{"text":"5.1.6.2. CSV User Export Workflow","hash":"_ch5_csv_user_export_workflow","id":283},{"text":"5.1.6.2.1. CSV User Export Workflow Prerequisites","hash":"_ch5_csv_user_export_workflow_prerequisites","id":284},{"text":"5.1.6.2.2. CSV User Export Workflow Configuration","hash":"_ch5_csv_user_export_workflow_configuration","id":285},{"text":"5.1.6.2.3. CSV User Export Workflow and Activities","hash":"_ch5_csv_user_export_workflow_and_activities","id":286},{"text":"5.1.6.2.4. CSV User Export Workflow Ports","hash":"_ch5_csv_user_export_workflow_ports","id":287},{"text":"5.1.6.2.5. CSV User Export Workflow Channels","hash":"_ch5_csv_user_export_workflow_channels","id":288},{"text":"5.1.7. Remote AD Workflow","hash":"_ch5_remote_ad_workflow","id":289},{"text":"5.1.8. External LDAP User Import Workflows","hash":"_ch5_external_ldap_user_import_workflows","id":290},{"text":"5.1.8.1. External LDAP User Full Import Workflow","hash":"_ch5_external_ldap_user_full_import_workflow","id":291},{"text":"5.1.8.1.1. External LDAP User Full Import Workflow Prerequisites","hash":"_ch5_external_ldap_user_full_import_workflow_prerequisites","id":292},{"text":"5.1.8.1.2. External LDAP User Full Import Workflow Configuration","hash":"_ch5_external_ldap_user_full_import_workflow_configuration","id":293},{"text":"5.1.8.1.3. External LDAP User Full Import Workflow and Activities","hash":"_ch5_external_ldap_user_full_import_workflow_and_activities","id":294},{"text":"5.1.8.1.4. External LDAP User Full Import Workflow Ports","hash":"_ch5_external_ldap_user_full_import_workflow_ports","id":295},{"text":"5.1.8.1.5. External LDAP User Full Import Workflow Channels","hash":"_ch5_external_ldap_user_full_import_workflow_channels","id":296},{"text":"5.1.8.2. External LDAP User Import Workflow","hash":"_ch5_external_ldap_user_import_workflow","id":297},{"text":"5.1.8.2.1. External LDAP User Import Workflow Prerequisites","hash":"_ch5_external_ldap_user_import_workflow_prerequisites","id":298},{"text":"5.1.8.2.2. External LDAP User Import Workflow Configuration","hash":"_ch5_external_ldap_user_import_workflow_configuration","id":299},{"text":"5.1.8.2.3. External LDAP User Import Workflow and Activities","hash":"_ch5_external_ldap_user_import_workflow_and_activities","id":300},{"text":"5.1.8.2.4. External LDAP User Import Workflow Ports","hash":"_ch5_external_ldap_user_import_workflow_ports","id":301},{"text":"5.1.8.2.5. External LDAP User Import Workflow Channels","hash":"_ch5_external_ldap_user_import_workflow_channels","id":302},{"text":"5.1.8.3. Sending Events to Synchronize External Users","hash":"_ch5_sending_events_to_synchronize_external_users","id":303},{"text":"5.1.8.3.1. Event Types","hash":"_ch5_event_types","id":304},{"text":"5.1.8.3.2. Identifier and requestID","hash":"_ch5_identifier_and_requestid","id":305},{"text":"5.1.8.3.3. Name and Source","hash":"_ch5_name_and_source","id":306},{"text":"5.1.8.3.4. A Complete Sample Event","hash":"_ch5_a_complete_sample_event","id":307},{"text":"5.1.8.3.5. Sent Event with metacp","hash":"_ch5_sent_event_with_metacp","id":308},{"text":"5.2. Understanding the Tcl-based Source Workflows","hash":"_understanding-the-tcl-based-source-workflows","id":309},{"text":"5.2.1. Configuring the Corporate Directory Workflow","hash":"_ch5_configuring_the_corporate_directory_workflow","id":310},{"text":"5.2.2. Configuring the DirX LDIF Directory Workflow","hash":"_ch5_configuring_the_dirx_ldif_directory_workflow","id":311},{"text":"5.2.3. Configuring the DirXdelta Workflow","hash":"_ch5_configuring_the_dirxdelta_workflow","id":312},{"text":"5.2.3.1. DirXdelta LDIF Agreement Rules","hash":"_ch5_dirxdelta_ldif_agreement_rules","id":313},{"text":"5.2.3.2. Setting Up the LDIF Agreement","hash":"_ch5_setting_up_the_ldif_agreement","id":314},{"text":"5.2.3.2.1. Sample Scripts to Handle the Sample Agreement","hash":"_ch5_sample_scripts_to_handle_the_sample_agreement","id":315},{"text":"5.2.4. Configuring the File-Based Source Workflows","hash":"_ch5_configuring_the_file_based_source_workflows","id":316},{"text":"5.2.5. Configuring the Relational Database Workflows","hash":"_ch5_configuring_the_relational_database_workflows","id":317},{"text":"6. Using the Maintenance Workflows","hash":"_using_the_maintenance_workflows","id":318},{"text":"6.1. Understanding the Java-based Maintenance Workflows","hash":"_understanding_java_based_maintenance_workflows","id":319},{"text":"6.1.1. Entry Change Workflows","hash":"_ch6_entry_change_workflows","id":320},{"text":"6.1.1.1. Accounts","hash":"_ch6_accounts","id":321},{"text":"6.1.1.1.1. Configuring the Event-based Maintenance Workflow for Accounts","hash":"_ch6_configuring_the_event_based_maintenance_workflow_for_accounts","id":322},{"text":"6.1.1.1.2. Event-based Maintenance Workflow Operation for Accounts","hash":"_ch6_event_based_maintenance_workflow_operation_for_accounts","id":323},{"text":"6.1.1.2. Organizations","hash":"_ch6_organizations","id":324},{"text":"6.1.1.2.1. Configuring the Event-based Maintenance Workflow for Organizations","hash":"_ch6_configuring_the_event_based_maintenance_workflow_for_organizations","id":325},{"text":"6.1.1.2.2. Event-based Maintenance Workflow Operation for Organizations","hash":"_ch6_event_based_maintenance_workflow_operation_for_organizations","id":326},{"text":"6.1.1.3. Organizational Units","hash":"_ch6_organizational_units","id":327},{"text":"6.1.1.3.1. Configuring the Event-based Maintenance Workflow for Organizational Units","hash":"_ch6_configuring_the_event_based_maintenance_workflow_for_organizational_units","id":328},{"text":"6.1.1.3.2. Event-based Maintenance Workflow Operation for Organizational Units","hash":"_ch6_event_based_maintenance_workflow_operation_for_organizational_units","id":329},{"text":"6.1.1.4. Context Objects","hash":"_ch6_context_objects","id":330},{"text":"6.1.1.4.1. Configuring the Event-based Maintenance Workflow for Context Objects","hash":"_ch6_configuring_the_event_based_maintenance_workflow_for_context_objects","id":331},{"text":"6.1.1.4.2. Event-based Maintenance Workflow Operation for Context Objects","hash":"_ch6_event_based_maintenance_workflow_operation_for_context_objects","id":332},{"text":"6.1.1.5. Location Objects","hash":"_ch6_location_objects","id":333},{"text":"6.1.1.5.1. Configuring the Event-based Maintenance Workflow for Location Objects","hash":"_ch6_configuring_the_event_based_maintenance_workflow_for_location_objects","id":334},{"text":"6.1.1.5.2. Event-based Maintenance Workflow Operation for Location Objects","hash":"_ch6_event_based_maintenance_workflow_operation_for_location_objects","id":335},{"text":"6.1.1.6. Cost Unit Objects","hash":"_ch6_cost_unit_objects","id":336},{"text":"6.1.1.6.1. Configuring the Event-based Maintenance Workflow for Cost Unit Objects","hash":"_ch6_configuring_the_event_based_maintenance_workflow_for_cost_unit_objects","id":337},{"text":"6.1.1.6.2. Event-based Maintenance Workflow Operation for Cost Unit Objects","hash":"_ch6_event_based_maintenance_workflow_operation_for_cost_unit_objects","id":338},{"text":"6.1.1.7. Project Objects","hash":"_ch6_project_objects","id":339},{"text":"6.1.1.7.1. Configuring the Event-based Maintenance Workflow for Project Objects","hash":"_ch6_configuring_the_event_based_maintenance_workflow_for_project_objects","id":340},{"text":"6.1.1.7.2. Event-based Maintenance Workflow Operation for Projects","hash":"_ch6_event_based_maintenance_workflow_operation_for_projects","id":341},{"text":"6.1.1.8. Users","hash":"_ch6_users","id":342},{"text":"6.1.1.8.1. Configuring the Event-based User Resolution Workflow","hash":"_ch6_configuring_the_event_based_user_resolution_workflow","id":343},{"text":"6.1.1.8.2. Event-based User Resolution Workflow Operation","hash":"_ch6_event_based_user_resolution_workflow_operation","id":344},{"text":"6.1.1.9. Personas","hash":"_ch6_personas","id":345},{"text":"6.1.1.10. Functional Users","hash":"_ch6_functional_users","id":346},{"text":"6.1.1.11. Generic Objects","hash":"_ch6_generic_objects","id":347},{"text":"6.1.1.11.1. Configuring the Generic Event-based Processing Workflow","hash":"_ch6_configuring_the_generic_event_based_processing_workflow","id":348},{"text":"6.1.1.11.2. Generic Event-based Processing Workflow Operation","hash":"_ch6_generic_event_based_processing_workflow_operation","id":349},{"text":"6.1.2. Process Tickets Internal Workflow","hash":"_ch6_process_tickets_internal_workflow","id":350},{"text":"6.1.2.1. Configuring the Process Tickets Internal Workflow","hash":"_ch6_configuring_the_process_tickets_internal_workflow","id":351},{"text":"6.1.2.2. Process Tickets Internal Workflow Operation","hash":"_ch6_process_tickets_internal_workflow_operation","id":352},{"text":"6.1.3. Account Password Manager Workflow","hash":"_ch6_account_password_manager_workflow","id":353},{"text":"6.1.3.1. Configuring the Account Password Manager Workflow","hash":"_ch6_configuring_the_account_password_manager_workflow","id":354},{"text":"6.1.3.2. Account Password Manager Workflow Operation","hash":"_ch6_account_password_manager_workflow_operation","id":355},{"text":"6.1.4. Reset Account Passwords Workflow","hash":"_ch6_reset_account_passwords_workflow","id":356},{"text":"6.1.4.1. Configuring the Reset Account Passwords Workflow","hash":"_ch6_configuring_the_reset_account_passwords_workflow","id":357},{"text":"6.1.4.2. Reset Account Passwords Workflow Operation","hash":"_ch6_reset_account_passwords_workflow_operation","id":358},{"text":"6.1.5. Reset Password If Displayed Workflow","hash":"_ch6_reset_password_if_displayed_workflow","id":359},{"text":"6.1.5.1. Configuring the Reset Password If Displayed Workflow","hash":"_ch6_configuring_the_reset_password_if_displayed_workflow","id":360},{"text":"6.1.5.2. Reset Password If Displayed Operation","hash":"_ch6_reset_password_if_displayed_operation","id":361},{"text":"6.1.6. User Password Event Manager Workflow","hash":"_ch6_user_password_event_manager_workflow","id":362},{"text":"6.1.6.1. Configuring the User Password Event Manager Workflow","hash":"_ch6_configuring_the_user_password_event_manager_workflow","id":363},{"text":"6.1.7. User Password Expiration Notification Workflow","hash":"_ch6_user_password_expiration_notification_workflow","id":364},{"text":"6.1.7.1. Configuring the User Password Expiration Notification Workflow","hash":"_ch6_configuring_the_user_password_expiration_notification_workflow","id":365},{"text":"6.1.7.2. User Password Expiration Notification Workflow Operation","hash":"_ch6_user_password_expiration_notification_workflow_operation","id":366},{"text":"6.1.8. Transport Workflows","hash":"_ch6_transport_workflows","id":367},{"text":"6.1.8.1. Export Connectivity Collections","hash":"_ch6_export_connectivity_collections","id":368},{"text":"6.1.8.2. Import Connectivity Collections","hash":"_ch6_import_connectivity_collections","id":369},{"text":"6.1.8.3. Export Provisioning Collections","hash":"_ch6_export_provisioning_collections","id":370},{"text":"6.1.8.4. Import Provisioning Collections","hash":"_ch6_import_provisioning_collections","id":371},{"text":"6.1.9. Joint Backup Workflow","hash":"_ch6_joint_backup_workflow","id":372},{"text":"6.1.9.1. Configuring the Joint Backup Workflow","hash":"_ch6_configuring_the_joint_backup_workflow","id":373},{"text":"6.1.10. Consistency Management Workflows","hash":"_ch6_consistency_management_workflows","id":374},{"text":"6.1.10.1. Check Consistency Workflow","hash":"_ch6_check_consistency_workflow","id":375},{"text":"6.1.10.1.1. Configuring the Check Consistency Workflow","hash":"_ch6_configuring_the_check_consistency_workflow","id":376},{"text":"6.1.10.1.2. Check Consistency Workflow Operation","hash":"_ch6_check_consistency_workflow_operation","id":377},{"text":"6.1.10.2. Mark Affected Users Workflow","hash":"_ch6_mark_affected_users_workflow","id":378},{"text":"6.1.10.2.1. Configuring the Mark Affected Users Workflow","hash":"_ch6_configuring_the_mark_affected_users_workflow","id":379},{"text":"6.1.10.2.2. Mark Affected Users Workflow Operation","hash":"_ch6_mark_affected_users_workflow_operation","id":380},{"text":"6.1.10.3. User Resolution Workflow","hash":"_ch6_user_resolution_workflow","id":381},{"text":"6.1.10.3.1. Configuring the User Resolution Workflow","hash":"_ch6_configuring_the_user_resolution_workflow","id":382},{"text":"6.1.10.3.2. User Resolution Workflow Operation","hash":"_ch6_user_resolution_workflow_operation","id":383},{"text":"6.2. Understanding the Tcl-based Maintenance Workflows","hash":"_understanding_tcl_based_maintenance_workflows","id":384},{"text":"6.2.1. Cleanup Objects Workflow","hash":"_ch6_cleanup_objects_workflow","id":385},{"text":"6.2.1.1. Configuring the Cleanup Objects Workflow","hash":"_ch6_configuring_the_cleanup_objects_workflow","id":386},{"text":"6.2.2. Consistency Check Workflow","hash":"_ch6_consistency_check_workflow","id":387},{"text":"6.2.2.1. Configuring the Consistency Check Workflow","hash":"_ch6_configuring_the_consistency_check_workflow","id":388},{"text":"6.2.2.2. Service Agent Configuration File","hash":"_ch6_service_agent_configuration_file","id":389},{"text":"6.2.2.3. Time Format Syntax","hash":"_ch6_time_format_syntax","id":390},{"text":"6.2.2.4. Consistency Check Workflow Operation","hash":"_ch6_consistency_check_workflow_operation","id":391},{"text":"6.2.2.5. Consistency Check Workflow Optimization","hash":"_ch6_consistency_check_workflow_optimization","id":392},{"text":"6.2.3. Extract Audit Trail Workflow","hash":"_ch6_extract_audit_trail_workflow","id":393},{"text":"6.2.3.1. Configuring the Extract Audit Trail Workflow","hash":"_ch6_configuring_the_extract_audit_trail_workflow","id":394},{"text":"6.2.4. Full SoD Check Workflow","hash":"_ch6_full_sod_check_workflow","id":395},{"text":"6.2.4.1. Configuring the Full SoD Check Workflow","hash":"_ch6_configuring_the_full_sod_check_workflow","id":396},{"text":"6.2.5. Initialize Re-approval Workflow","hash":"_ch6_initialize_re_approval_workflow","id":397},{"text":"6.2.5.1. Configuring the Initialize Re-approval Workflow","hash":"_ch6_configuring_the_initialize_re_approval_workflow","id":398},{"text":"6.2.6. Password Expiration Notification Workflow","hash":"_ch6_password_expiration_notification_workflow","id":399},{"text":"6.2.6.1. Configuring the Password Expiration Notification Workflow","hash":"_ch6_configuring_the_password_expiration_notification_workflow","id":400},{"text":"6.2.6.2. Password Expiration Notification Workflow Operation","hash":"_ch6_password_expiration_notification_workflow_operation","id":401},{"text":"6.2.7. Policy Execution Workflow","hash":"_ch6_policy_execution_workflow","id":402},{"text":"6.2.7.1. Configuring the Policy Execution Workflow","hash":"_ch6_configuring_the_policy_execution_workflow","id":403},{"text":"6.2.7.2. Policy Execution Workflow Optimization","hash":"_ch6_policy_execution_workflow_optimization","id":404},{"text":"6.2.8. Privilege Resolution Workflow","hash":"_ch6_privilege_resolution_workflow","id":405},{"text":"6.2.8.1. Configuring the Privilege Resolution Workflow","hash":"_ch6_configuring_the_privilege_resolution_workflow","id":406},{"text":"6.2.8.2. Privilege Resolution Workflow Operation","hash":"_ch6_privilege_resolution_workflow_operation","id":407},{"text":"6.2.8.3. Privilege Resolution Workflow Optimization","hash":"_ch6_privilege_resolution_workflow_optimization","id":408},{"text":"6.2.9. Run Workflow Externally Workflow","hash":"_ch6_run_workflow_externally_workflow","id":409},{"text":"6.2.9.1. Configuring the Run Workflow Externally Workflow","hash":"_ch6_configuring_the_run_workflow_externally_workflow","id":410},{"text":"6.2.10. Start Re-approval Workflow","hash":"_ch6_start_re_approval_workflow","id":411},{"text":"6.2.10.1. Configuring the Start Reapproval Workflow","hash":"_ch6_configuring_the_start_reapproval_workflow","id":412},{"text":"6.2.11. Status Report Generation Workflow","hash":"_ch6_status_report_generation_workflow","id":413},{"text":"6.2.11.1. Configuring the Status Report Generation Workflow for the Provisioning View","hash":"_ch6_configuring_the_status_report_generation_workflow_for_the_provisioning_view","id":414},{"text":"6.2.11.2. Configuring the Status Report Generation Workflow for the Connectivity View","hash":"_ch6_configuring_the_status_report_generation_workflow_for_the_connectivity_view","id":415},{"text":"7. Using the Target System (Provisioning) Workflows","hash":"_using_the_target_system_provisioning_workflows","id":416},{"text":"7.1. Extending the Schema for the Target System Workflows","hash":"extending_the_schema_for_target_system_workflows","id":417},{"text":"7.1.1. Customizing the LDIF Schema Files","hash":"_ch7_customizing_the_ldif_schema_files","id":418},{"text":"7.1.2. Installing the LDIF Schema Extensions","hash":"_ch7_installing_the_ldif_schema_extensions","id":419},{"text":"7.2. Understanding the Java-based Target System Workflows","hash":"_understanding_java_based_target_system_workflows","id":420},{"text":"7.2.1. General Information","hash":"_ch7_general_information","id":421},{"text":"7.2.1.1. Superior Folder Creation","hash":"_ch7_superior_folder_creation","id":422},{"text":"7.2.1.1.1. In the Connected System","hash":"_ch7_in_the_connected_system","id":423},{"text":"7.2.1.1.2. In the Identity Store","hash":"_ch7_in_the_identity_store","id":424},{"text":"7.2.1.2. HTTP Proxy Server Configuration","hash":"_ch7_http_proxy_server_configuration","id":425},{"text":"7.2.2. Active Directory (ADS) Workflows","hash":"_ch7_active_directory_ads_workflows","id":426},{"text":"7.2.2.1. ADS Workflow Prerequisites and Limitations","hash":"_ch7_ads_workflow_prerequisites_and_limitations","id":427},{"text":"7.2.2.2. Connecting to Active Directory","hash":"_ch7_connecting_to_active_directory","id":428},{"text":"7.2.2.3. Configuring the ADS Target System","hash":"_ch7_configuring_the_ads_target_system","id":429},{"text":"7.2.2.3.1. Setting Match Properties","hash":"_ch7_setting_match_properties","id":430},{"text":"7.2.2.3.2. Special Attributes","hash":"_ch7_special_attributes","id":431},{"text":"7.2.2.3.3. Setting Account- and Group Root in TS","hash":"_ch7_setting_account_and_group_root_in_ts","id":432},{"text":"7.2.2.3.4. Setting Exchange Base Properties","hash":"_ch7_setting_exchange_base_properties","id":433},{"text":"7.2.2.3.5. Enabling User Mailboxes","hash":"_ch7_enabling_user_mailboxes","id":434},{"text":"7.2.2.3.6. Creating Shared, Room and Equipment Mailboxes","hash":"_ch7_creating_shared_room_and_equipment_mailboxes","id":435},{"text":"7.2.2.3.7. Enabling Share, Room and Equipment Mailboxes","hash":"_ch7_enabling_share_room_and_equipment_mailboxes","id":436},{"text":"7.2.2.3.8. Setting Lync Base Properties","hash":"_ch7_setting_lync_base_properties","id":437},{"text":"7.2.2.3.9. Lync Enabling","hash":"_ch7_lync_enabling","id":438},{"text":"7.2.2.4. ADS Workflows and Activities","hash":"_ch7_ads_workflows_and_activities","id":439},{"text":"7.2.2.5. ADS Workflow Ports","hash":"_ch7_ads_workflow_ports","id":440},{"text":"7.2.2.6. ADS Workflow Channels","hash":"_ch7_ads_workflow_channels","id":441},{"text":"7.2.2.6.1. Account and Group Channels","hash":"_ch7_account_and_group_channels","id":442},{"text":"7.2.2.6.2. Password Channel","hash":"_ch7_password_channel","id":443},{"text":"7.2.2.7. Customizing the ADS Workflows","hash":"_ch7_customizing_the_ads_workflows","id":444},{"text":"7.2.2.7.1. ADS Delta Workflows","hash":"_ch7_ads_delta_workflows","id":445},{"text":"7.2.2.7.2. Configuring Exchange","hash":"_ch7_configuring_exchange","id":446},{"text":"7.2.2.7.3. Running PowerShell Scripts","hash":"_ch7_running_powershell_scripts","id":447},{"text":"7.2.2.7.4. Specifying PowerShell Script Names in the Standard ADS Workflows","hash":"_ch7_specifying_powershell_script_names_in_the_standard_ads_workflows","id":448},{"text":"7.2.2.7.5. Remote Folder Management","hash":"_ch7_remote_folder_management","id":449},{"text":"7.2.3. Citrix ShareFile Workflows","hash":"_ch7_citrix_sharefile_workflows","id":450},{"text":"7.2.3.1. Citrix ShareFile Prerequisites and Limitations","hash":"_ch7_citrix_sharefile_prerequisites_and_limitations","id":451},{"text":"7.2.3.2. Connecting to Citrix ShareFile","hash":"_ch7_connecting_to_citrix_sharefile","id":452},{"text":"7.2.3.3. Configuring the Citrix ShareFile Target System","hash":"_ch7_configuring_the_citrix_sharefile_target_system","id":453},{"text":"7.2.3.4. Citrix ShareFile Workflow and Activities","hash":"_ch7_citrix_sharefile_workflow_and_activities","id":454},{"text":"7.2.3.5. Citrix ShareFile Ports","hash":"_ch7_citrix_sharefile_ports","id":455},{"text":"7.2.4. DirX Access Workflows","hash":"_ch7_dirx_access_workflows","id":456},{"text":"7.2.4.1. Using the Target System","hash":"_ch7_using_the_target_system","id":457},{"text":"7.2.4.2. Using LDAP Connectivity","hash":"_ch7_using_ldap_connectivity","id":458},{"text":"7.2.5. Evidian ESSO Workflow","hash":"_ch7_evidian_esso_workflow","id":459},{"text":"7.2.5.1. Evidian ESSO Workflow Prerequisites and Limitations","hash":"_ch7_evidian_esso_workflow_prerequisites_and_limitations","id":460},{"text":"7.2.5.2. Setting up the Evidian ESSO Workflow","hash":"_ch7_setting_up_the_evidian_esso_workflow","id":461},{"text":"7.2.5.3. Connecting to Evidian ESSO","hash":"_ch7_connecting_to_evidian_esso","id":462},{"text":"7.2.5.4. Evidian ESSO Workflow and Activities","hash":"_ch7_evidian_esso_workflow_and_activities","id":463},{"text":"7.2.5.5. ESSO Workflow","hash":"_ch7_esso_workflow","id":464},{"text":"7.2.5.6. Evidian ESSO Workflow Ports","hash":"_ch7_evidian_esso_workflow_ports","id":465},{"text":"7.2.5.7. Evidian ESSO Workflow Channels","hash":"_ch7_evidian_esso_workflow_channels","id":466},{"text":"7.2.5.7.1. Common Aspects","hash":"_ch7_common_aspects","id":467},{"text":"7.2.5.7.2. User Hook","hash":"_ch7_user_hook","id":468},{"text":"7.2.5.7.3. Export/Join","hash":"_ch7_exportjoin","id":469},{"text":"7.2.5.7.4. ID Mapping","hash":"_ch7_id_mapping","id":470},{"text":"7.2.5.7.5. Post Mapping","hash":"_ch7_post_mapping","id":471},{"text":"7.2.5.7.6. Application","hash":"_ch7_application","id":472},{"text":"7.2.5.8. Customizing the Evidian ESSO Workflow","hash":"_ch7_customizing_the_evidian_esso_workflow","id":473},{"text":"7.2.5.8.1. Using a Different Enable-SSO Flag","hash":"_ch7_using_a_different_enable_sso_flag","id":474},{"text":"7.2.5.8.2. Exporting the Search Base on the Identity Side","hash":"_ch7_exporting_the_search_base_on_the_identity_side","id":475},{"text":"7.2.6. Google Apps Workflows","hash":"_ch7_google_apps_workflows","id":476},{"text":"7.2.6.1. Google Apps Workflow Prerequisites and Limitations","hash":"_ch7_google_apps_workflow_prerequisites_and_limitations","id":477},{"text":"7.2.6.2. Connecting to Google Apps","hash":"_ch7_connecting_to_google_apps","id":478},{"text":"7.2.6.3. Configuring the Google Apps Target System","hash":"_ch7_configuring_the_google_apps_target_system","id":479},{"text":"7.2.6.4. Google Apps Workflow and Activities","hash":"_ch7_google_apps_workflow_and_activities","id":480},{"text":"7.2.6.5. Google Apps Ports","hash":"_ch7_google_apps_ports","id":481},{"text":"7.2.6.6. Google Apps Account-Channel Mapping","hash":"_ch7_google_apps_account_channel_mapping","id":482},{"text":"7.2.6.7. Google Apps Group-Channel Mapping","hash":"_ch7_google_apps_group_channel_mapping","id":483},{"text":"7.2.6.8. Google Apps Member-Channel Mapping","hash":"_ch7_google_apps_member_channel_mapping","id":484},{"text":"7.2.6.9. Google Apps SetPassword-Channel Mapping","hash":"_ch7_google_apps_setpassword_channel_mapping","id":485},{"text":"7.2.7. Imprivata Workflows","hash":"_ch7_imprivata_workflows","id":486},{"text":"7.2.7.1. Imprivata Workflow Prerequisites and Limitations","hash":"_ch7_imprivata_workflow_prerequisites_and_limitations","id":487},{"text":"7.2.7.2. Connecting to Imprivata","hash":"_ch7_connecting_to_imprivata","id":488},{"text":"7.2.7.3. Configuring the Imprivata Target System","hash":"_ch7_configuring_the_imprivata_target_system","id":489},{"text":"7.2.7.4. Imprivata Workflow and Activities","hash":"_ch7_imprivata_workflow_and_activities","id":490},{"text":"7.2.7.5. Imprivata Ports","hash":"_ch7_imprivata_ports","id":491},{"text":"7.2.7.6. Imprivata Channels","hash":"_ch7_imprivata_channels","id":492},{"text":"7.2.7.6.1. Common Aspects","hash":"_ch7_common_aspects_2","id":493},{"text":"7.2.7.6.2. Subscriber","hash":"_ch7_subscriber","id":494},{"text":"7.2.7.6.3. Account","hash":"_ch7_account","id":495},{"text":"7.2.7.6.4. Group","hash":"_ch7_group","id":496},{"text":"7.2.7.6.5. Password Channel","hash":"_ch7_password_channel_2","id":497},{"text":"7.2.8. JDBC Workflow","hash":"_ch7_jdbc_workflow","id":498},{"text":"7.2.8.1. JDBC Workflow Prerequisites and Limitations","hash":"_ch7_jdbc_workflow_prerequisites_and_limitations","id":499},{"text":"7.2.8.2. Connecting to JDBC","hash":"_ch7_connecting_to_jdbc","id":500},{"text":"7.2.8.3. Configuring the JDBC Target System","hash":"_ch7_configuring_the_jdbc_target_system","id":501},{"text":"7.2.8.3.1. Attribute Correlation","hash":"_ch7_attribute_correlation","id":502},{"text":"7.2.8.4. JDBC Workflow and Activities","hash":"_ch7_jdbc_workflow_and_activities","id":503},{"text":"7.2.8.5. JDBC Workflow Ports","hash":"_ch7_jdbc_workflow_ports","id":504},{"text":"7.2.8.6. JDBC Workflow Channels","hash":"_ch7_jdbc_workflow_channels","id":505},{"text":"7.2.8.6.1. Common Aspects","hash":"_ch7_common_aspects_3","id":506},{"text":"7.2.8.6.2. Membership","hash":"_ch7_membership","id":507},{"text":"7.2.8.6.3. SetPassword","hash":"_ch7_setpassword","id":508},{"text":"7.2.8.7. Customizing the JDBC Workflows","hash":"_ch7_customizing_the_jdbc_workflows","id":509},{"text":"7.2.8.7.1. Adapting the Database Scheme","hash":"_ch7_adapting_the_database_scheme","id":510},{"text":"7.2.8.7.2. Calling Stored Procedures","hash":"_ch7_calling_stored_procedures","id":511},{"text":"7.2.9. LDAP Workflows","hash":"_ch7_ldap_workflows","id":512},{"text":"7.2.9.1. LDAP Workflow Prerequisites and Limitations","hash":"_ch7_ldap_workflow_prerequisites_and_limitations","id":513},{"text":"7.2.9.2. Configuring the Connection to LDAP","hash":"_ch7_configuring_the_connection_to_ldap","id":514},{"text":"7.2.9.3. Configuring the LDAP Target System","hash":"_ch7_configuring_the_ldap_target_system","id":515},{"text":"7.2.9.4. LDAP Workflow and Activities","hash":"_ch7_ldap_workflow_and_activities","id":516},{"text":"7.2.9.5. LDAP Workflow Ports","hash":"_ch7_ldap_workflow_ports","id":517},{"text":"7.2.9.6. LDAP Workflow Channels","hash":"_ch7_ldap_workflow_channels","id":518},{"text":"7.2.9.6.1. Account and Group Channels in both Directions","hash":"_ch7_account_and_group_channels_in_both_directions","id":519},{"text":"7.2.9.6.2. Password Channel","hash":"_ch7_password_channel_3","id":520},{"text":"7.2.9.6.3. Case-Sensitive Rename","hash":"_ch7_case_sensitive_rename","id":521},{"text":"7.2.9.7. LDAP Delta Workflows","hash":"_ch7_ldap_delta_workflows","id":522},{"text":"7.2.10. IBM Notes Workflows","hash":"_ch7_ibm_notes_workflows","id":523},{"text":"7.2.10.1. Notes Workflow Prerequisites and Limitations","hash":"_ch7_notes_workflow_prerequisites_and_limitations","id":524},{"text":"7.2.10.2. Configuring the Notes Workflow","hash":"_ch7_configuring_the_notes_workflow","id":525},{"text":"7.2.10.3. Configuring the Notes Target System","hash":"_ch7_configuring_the_notes_target_system","id":526},{"text":"7.2.10.4. Notes Workflow and Activities","hash":"_ch7_notes_workflow_and_activities","id":527},{"text":"7.2.10.5. Notes Workflow Ports","hash":"_ch7_notes_workflow_ports","id":528},{"text":"7.2.10.6. Notes Workflow Channels","hash":"_ch7_notes_workflow_channels","id":529},{"text":"7.2.10.6.1. Direction: Identity Store → IBM Notes","hash":"_ch7_direction_identity_store_ibm_notes","id":530},{"text":"7.2.10.6.2. Direction: IBM Notes → Identity Store","hash":"_ch7_direction_ibm_notes_identity_store","id":531},{"text":"7.2.10.6.3. Password Channel","hash":"_ch7_password_channel_4","id":532},{"text":"7.2.11. Medico Workflows","hash":"_ch7_medico_workflows","id":533},{"text":"7.2.11.1. Medico Workflow Prerequisites and Limitations","hash":"_ch7_medico_workflow_prerequisites_and_limitations","id":534},{"text":"7.2.11.2. Configuring the Medico Workflow","hash":"_ch7_configuring_the_medico_workflow","id":535},{"text":"7.2.11.3. Configuring the Medico Target System","hash":"_ch7_configuring_the_medico_target_system","id":536},{"text":"7.2.11.4. Medico Workflow and Activities","hash":"_ch7_medico_workflow_and_activities","id":537},{"text":"7.2.11.5. Medico Workflow Ports","hash":"_ch7_medico_workflow_ports","id":538},{"text":"7.2.11.6. Medico Workflow Channels","hash":"_ch7_medico_workflow_channels","id":539},{"text":"7.2.11.6.1. Common Aspects","hash":"_ch7_common_aspects_4","id":540},{"text":"7.2.11.6.2. Person","hash":"_ch7_person","id":541},{"text":"7.2.11.6.3. Login","hash":"_ch7_login","id":542},{"text":"7.2.11.6.4. Password Channel","hash":"_ch7_password_channel_5","id":543},{"text":"7.2.12. Office 365 Workflows","hash":"_ch7_office_365_workflows","id":544},{"text":"7.2.12.1. Office 365 Workflow Prerequisites and Limitations","hash":"_ch7_office_365_workflow_prerequisites_and_limitations","id":545},{"text":"7.2.12.2. Connecting to Office 365","hash":"_ch7_connecting_to_office_365","id":546},{"text":"7.2.12.3. Configuring the Office 365 Target System","hash":"_ch7_configuring_the_office_365_target_system","id":547},{"text":"7.2.12.4. Office 365 Workflow and Activities","hash":"_ch7_office_365_workflow_and_activities","id":548},{"text":"7.2.12.5. Office 365 Workflow Ports","hash":"_ch7_office_365_workflow_ports","id":549},{"text":"7.2.12.6. Office 365 Workflow Channels","hash":"_ch7_office_365_workflow_channels","id":550},{"text":"7.2.12.6.1. Accounts","hash":"_ch7_accounts","id":551},{"text":"7.2.12.6.2. Groups","hash":"_ch7_groups","id":552},{"text":"7.2.12.6.3. Roles","hash":"_ch7_roles","id":553},{"text":"7.2.12.6.4. Service Plans","hash":"_ch7_service_plans","id":554},{"text":"7.2.12.6.5. Password Channel","hash":"_ch7_password_channel_6","id":555},{"text":"7.2.12.6.6. Member Channel","hash":"_ch7_member_channel","id":556},{"text":"7.2.13. OpenICF Windows Local Accounts Workflows","hash":"_ch7_openicf_windows_local_accounts_workflows","id":557},{"text":"7.2.13.1. OpenICF Windows Local Accounts Workflow Prerequisites and Limitations","hash":"_ch7_openicf_windows_local_accounts_workflow_prerequisites_and_limitations","id":558},{"text":"7.2.13.2. Connecting to the Windows Local Accounts System","hash":"_ch7_connecting_to_the_windows_local_accounts_system","id":559},{"text":"7.2.13.3. Configuring the OpenICF Windows Local Accounts Target System","hash":"_ch7_configuring_the_openicf_windows_local_accounts_target_system","id":560},{"text":"7.2.13.4. OpenICF Windows Local Accounts Workflow and Activities","hash":"_ch7_openicf_windows_local_accounts_workflow_and_activities","id":561},{"text":"7.2.13.5. OpenICF Windows Local Accounts Workflow Ports","hash":"_ch7_openicf_windows_local_accounts_workflow_ports","id":562},{"text":"7.2.13.6. OpenICF Windows Local Accounts Workflow Channels","hash":"_ch7_openicf_windows_local_accounts_workflow_channels","id":563},{"text":"7.2.13.6.1. Accounts","hash":"_ch7_accounts_2","id":564},{"text":"7.2.13.6.2. Groups","hash":"_ch7_groups_2","id":565},{"text":"7.2.13.6.3. Members","hash":"_ch7_members","id":566},{"text":"7.2.13.6.4. setPassword","hash":"_ch7_setpassword_2","id":567},{"text":"7.2.14. RACF Workflows","hash":"_ch7_racf_workflows","id":568},{"text":"7.2.14.1. Prerequisites and Limitations","hash":"_ch7_prerequisites_and_limitations","id":569},{"text":"7.2.14.2. Configuring the RACF Target System","hash":"_ch7_configuring_the_racf_target_system","id":570},{"text":"7.2.14.3. Configuring the Connection to RACF","hash":"_ch7_configuring_the_connection_to_racf","id":571},{"text":"7.2.14.4. Configuring the Connected Directory","hash":"_ch7_configuring_the_connected_directory","id":572},{"text":"7.2.14.5. RACF Workflow Ports","hash":"_ch7_racf_workflow_ports","id":573},{"text":"7.2.14.6. RACF Workflow Channels","hash":"_ch7_racf_workflow_channels","id":574},{"text":"7.2.14.6.1. Accounts Channel","hash":"_ch7_accounts_channel","id":575},{"text":"7.2.14.6.2. Groups Channel","hash":"_ch7_groups_channel","id":576},{"text":"7.2.14.6.3. Members Channel","hash":"_ch7_members_channel","id":577},{"text":"7.2.14.6.4. SetPassword Channel","hash":"_ch7_setpassword_channel","id":578},{"text":"7.2.15. Salesforce Workflows","hash":"_ch7_salesforce_workflows","id":579},{"text":"7.2.15.1. Salesforce Workflow Prerequisites and Limitations","hash":"_ch7_salesforce_workflow_prerequisites_and_limitations","id":580},{"text":"7.2.15.1.1. Registering the Remote Access Application","hash":"_ch7_registering_the_remote_access_application","id":581},{"text":"7.2.15.1.2. Creating the StatusInfo__c Attribute","hash":"_ch7_creating_the_statusinfo_c_attribute","id":582},{"text":"7.2.15.1.3. Salesforce Workflow Limitations","hash":"_ch7_salesforce_workflow_limitations","id":583},{"text":"7.2.15.2. Configuring the Salesforce Workflows","hash":"_ch7_configuring_the_salesforce_workflows","id":584},{"text":"7.2.15.3. Configuring the Salesforce Target System","hash":"_ch7_configuring_the_salesforce_target_system","id":585},{"text":"7.2.15.4. Salesforce Workflow and Activities","hash":"_ch7_salesforce_workflow_and_activities","id":586},{"text":"7.2.15.5. Salesforce Workflow Ports","hash":"_ch7_salesforce_workflow_ports","id":587},{"text":"7.2.15.6. Account-Channel Mapping for SF Users","hash":"_ch7_account_channel_mapping_for_sf_users","id":588},{"text":"7.2.15.7. Group-Channel Mapping for SF PermissionSets","hash":"_ch7_group_channel_mapping_for_sf_permissionsets","id":589},{"text":"7.2.15.8. Group-Channel Mapping for SF Profiles","hash":"_ch7_group_channel_mapping_for_sf_profiles","id":590},{"text":"7.2.15.9. Channel Mapping for SF Accounts","hash":"_ch7_channel_mapping_for_sf_accounts","id":591},{"text":"7.2.15.10. Channel Mapping for SF Contacts","hash":"_ch7_channel_mapping_for_sf_contacts","id":592},{"text":"7.2.15.11. Member-Channel Mapping for SF Users","hash":"_ch7_member_channel_mapping_for_sf_users","id":593},{"text":"7.2.15.12. SetPassword-Channel Mapping for SF Users","hash":"_ch7_setpassword_channel_mapping_for_sf_users","id":594},{"text":"7.2.15.13. Account-Channel Mapping for Identity Store Accounts","hash":"_ch7_account_channel_mapping_for_identity_store_accounts","id":595},{"text":"7.2.15.14. Group-Channel Mapping for Identity Store Profiles","hash":"_ch7_group_channel_mapping_for_identity_store_profiles","id":596},{"text":"7.2.15.15. Group-Channel Mapping for Identity Store PermissionSets","hash":"_ch7_group_channel_mapping_for_identity_store_permissionsets","id":597},{"text":"7.2.15.16. Channel Mapping for Identity Store Organizations (SF Accounts)","hash":"_ch7_channel_mapping_for_identity_store_organizations_sf_accounts","id":598},{"text":"7.2.15.17. Channel Mapping for Identity Store Users (SF Contacts)","hash":"_ch7_channel_mapping_for_identity_store_users_sf_contacts","id":599},{"text":"7.2.16. SAP ECC (R/3) UM Workflows","hash":"_ch7_sap_ecc_r3_um_workflows","id":600},{"text":"7.2.16.1. SAP R/3 UM Workflow Prerequisites and Limitations","hash":"_ch7_sap_r3_um_workflow_prerequisites_and_limitations","id":601},{"text":"7.2.16.2. Configuring the SAP R/3 UM Target System","hash":"_ch7_configuring_the_sap_r3_um_target_system","id":602},{"text":"7.2.16.3. SAP R/3 UM Workflow and Activities","hash":"_ch7_sap_r3_um_workflow_and_activities","id":603},{"text":"7.2.16.4. SAP R/3 UM Workflow Ports","hash":"_ch7_sap_r3_um_workflow_ports","id":604},{"text":"7.2.16.5. SAP R/3 UM Workflow Channels","hash":"_ch7_sap_r3_um_workflow_channels","id":605},{"text":"7.2.16.5.1. Common Aspects","hash":"_ch7_common_aspects_5","id":606},{"text":"7.2.16.5.2. Accounts","hash":"_ch7_accounts_3","id":607},{"text":"7.2.16.5.3. Groups","hash":"_ch7_groups_3","id":608},{"text":"7.2.16.5.4. Memberships","hash":"_ch7_memberships","id":609},{"text":"7.2.16.5.5. Password Channel","hash":"_ch7_password_channel_7","id":610},{"text":"7.2.16.6. Customizing the SAP R/3 UM Workflows","hash":"_ch7_customizing_the_sap_r3_um_workflows","id":611},{"text":"7.2.17. Service Management Workflows","hash":"_ch7_service_management_workflows","id":612},{"text":"7.2.17.1. Service Management Workflow Prerequisites and Limitations","hash":"_ch7_service_management_workflow_prerequisites_and_limitations","id":613},{"text":"7.2.17.2. Configuring Service Management Workflows","hash":"_ch7_configuring_service_management_workflows","id":614},{"text":"7.2.17.3. Configuring the Service Management Target System","hash":"_ch7_configuring_the_service_management_target_system","id":615},{"text":"7.2.17.4. Service Management Workflows and Activities","hash":"_ch7_service_management_workflows_and_activities","id":616},{"text":"7.2.17.5. Service Management Workflow Ports","hash":"_ch7_service_management_workflow_ports","id":617},{"text":"7.2.17.6. Service Management Workflow Channels","hash":"_ch7_service_management_workflow_channels","id":618},{"text":"7.2.17.6.1. Common Aspects","hash":"_ch7_common_aspects_6","id":619},{"text":"7.2.17.6.2. Account","hash":"_ch7_account_2","id":620},{"text":"7.2.17.6.3. Group","hash":"_ch7_group_2","id":621},{"text":"7.2.18. SharePoint Workflows","hash":"_ch7_sharepoint_workflows","id":622},{"text":"7.2.18.1. SharePoint Workflow Prerequisites and Limitations","hash":"_ch7_sharepoint_workflow_prerequisites_and_limitations","id":623},{"text":"7.2.18.2. Configuring the SharePoint Clusters, Workflows and Connection","hash":"_ch7_configuring_the_sharepoint_clusters_workflows_and_connection","id":624},{"text":"7.2.18.2.1. Creating Clustered SharePoint Target Systems","hash":"_ch7_creating_clustered_sharepoint_target_systems","id":625},{"text":"7.2.18.2.2. Configuring SharePoint Workflows","hash":"_ch7_configuring_sharepoint_workflows","id":626},{"text":"7.2.18.2.3. Configuring SharePoint SSL Connections","hash":"_ch7_configuring_sharepoint_ssl_connections","id":627},{"text":"7.2.18.3. Configuring the SharePoint Target System","hash":"_ch7_configuring_the_sharepoint_target_system","id":628},{"text":"7.2.18.4. SharePoint Workflow and Activities","hash":"_ch7_sharepoint_workflow_and_activities","id":629},{"text":"7.2.18.5. SharePoint Workflow Ports","hash":"_ch7_sharepoint_workflow_ports","id":630},{"text":"7.2.18.6. SharePoint Workflow Channels","hash":"_ch7_sharepoint_workflow_channels","id":631},{"text":"7.2.18.6.1. Aspects Common to All Channels and Synchronization Directions","hash":"_ch7_aspects_common_to_all_channels_and_synchronization_directions","id":632},{"text":"7.2.18.6.2. Groups","hash":"_ch7_groups_4","id":633},{"text":"7.2.18.6.3. Member Channel","hash":"_ch7_member_channel_2","id":634},{"text":"7.2.19. Unify Office Workflows","hash":"_ch7_unify_office_workflows","id":635},{"text":"7.2.19.1. Prerequisites and Limitations","hash":"_ch7_prerequisites_and_limitations_2","id":636},{"text":"7.2.19.2. Connecting to Unify Office","hash":"_ch7_connecting_to_unify_office","id":637},{"text":"7.2.19.3. Configuring the Unify Office Target System","hash":"_ch7_configuring_the_unify_office_target_system","id":638},{"text":"7.2.19.4. Workflow and Activities","hash":"_ch7_workflow_and_activities","id":639},{"text":"7.2.19.5. Workflow Ports","hash":"_ch7_workflow_ports","id":640},{"text":"7.2.19.6. Workflow Channels","hash":"_ch7_workflow_channels","id":641},{"text":"7.2.19.6.1. Accounts","hash":"_ch7_accounts_4","id":642},{"text":"7.2.20. UNIX-OpenICF Workflows","hash":"_ch7_unix_openicf_workflows","id":643},{"text":"7.2.20.1. UNIX-OpenICF Prerequisites and Limitations","hash":"_ch7_unix_openicf_prerequisites_and_limitations","id":644},{"text":"7.2.20.2. Connecting to the UNIX System","hash":"_ch7_connecting_to_the_unix_system","id":645},{"text":"7.2.20.2.1. Setting up the Java-based OpenICF Connector Server","hash":"_ch7_setting_up_the_java_based_openicf_connector_server","id":646},{"text":"7.2.20.2.2. Configuring the Connection to the OpenICF Connector Server","hash":"_ch7_configuring_the_connection_to_the_openicf_connector_server","id":647},{"text":"7.2.20.3. Configuring the UNIX-OpenICF Target System","hash":"_ch7_configuring_the_unix_openicf_target_system","id":648},{"text":"7.2.20.4. UNIX-OpenICF Workflow and Activities","hash":"_ch7_unix_openicf_workflow_and_activities","id":649},{"text":"7.2.20.5. UNIX-OpenICF Workflow Ports","hash":"_ch7_unix_openicf_workflow_ports","id":650},{"text":"7.2.20.6. UNIX-OpenICF Workflow Channels","hash":"_ch7_unix_openicf_workflow_channels","id":651},{"text":"7.2.20.6.1. Common Aspects","hash":"_ch7_common_aspects_7","id":652},{"text":"7.2.20.6.2. Accounts","hash":"_ch7_accounts_5","id":653},{"text":"7.2.20.6.3. Groups","hash":"_ch7_groups_5","id":654},{"text":"7.3. Understanding the Tcl-based Target System Workflows","hash":"_understanding_tcl_based_target_system_workflows","id":655},{"text":"7.3.1. Target System Workflow Types","hash":"_ch7_target_system_workflow_types","id":656},{"text":"7.3.2. Object Identification and Group-to-Account References","hash":"_ch7_object_identification_and_group_to_account_references","id":657},{"text":"7.3.2.1. Workflows for the Hierarchical Target Systems","hash":"_ch7_workflows_for_the_hierarchical_target_systems","id":658},{"text":"7.3.2.1.1. General Information","hash":"_ch7_general_information_2","id":659},{"text":"7.3.2.1.2. Referencing Information","hash":"_ch7_referencing_information","id":660},{"text":"7.3.2.1.3. Joining Information","hash":"_ch7_joining_information","id":661},{"text":"7.3.2.2. Workflows for the Non-Hierarchical Target Systems","hash":"_ch7_workflows_for_the_non_hierarchical_target_systems","id":662},{"text":"7.3.2.2.1. Referencing and Joining","hash":"_ch7_referencing_and_joining","id":663},{"text":"7.3.3. Target System Reference and Join Summary","hash":"_ch7_target_system_reference_and_join_summary","id":664},{"text":"7.3.4. HiPath Workflow","hash":"_ch7_hipath_workflow","id":665},{"text":"7.3.4.1. Prerequisites and Limitations","hash":"_ch7_prerequisites_and_limitations_3","id":666},{"text":"7.3.4.2. Configuring the Ident_HiPath Workflow","hash":"_ch7_configuring_the_ident_hipath_workflow","id":667},{"text":"7.3.4.3. Activity Ident2HiPath_HiPath (meta directory export)","hash":"_ch7_activity_ident2hipath_hipath_meta_directory_export","id":668},{"text":"7.3.4.3.1. General Features and Prerequisites","hash":"_ch7_general_features_and_prerequisites","id":669},{"text":"7.3.4.3.2. Basic Operation","hash":"_ch7_basic_operation","id":670},{"text":"7.3.4.3.3. Control of the Remote HiPath System","hash":"_ch7_control_of_the_remote_hipath_system","id":671},{"text":"7.3.4.4. Activity HiPath2Ident_HiPath (meta directory import)","hash":"_ch7_activity_hipath2ident_hipath_meta_directory_import","id":672},{"text":"7.3.4.4.1. General Features and Prerequisites","hash":"_ch7_general_features_and_prerequisites_2","id":673},{"text":"7.3.4.4.2. Basic Operation","hash":"_ch7_basic_operation_2","id":674},{"text":"7.3.4.5. Multiple Entry Handling","hash":"_ch7_multiple_entry_handling","id":675},{"text":"7.3.4.6. Setting up the HiPath Environment","hash":"_ch7_setting_up_the_hipath_environment","id":676},{"text":"7.3.4.6.1. User Creation Directives for HiPath 4000 Manager V3.1","hash":"_ch7_user_creation_directives_for_hipath_4000_manager_v3_1","id":677},{"text":"7.3.4.6.2. Enable HiPath Environment for rsh and rcp","hash":"_ch7_enable_hipath_environment_for_rsh_and_rcp","id":678},{"text":"7.3.4.6.3. HiPath Environment Setup for ssh and scp","hash":"_ch7_hipath_environment_setup_for_ssh_and_scp","id":679},{"text":"7.3.4.7. Export Traces","hash":"_ch7_export_traces","id":680},{"text":"7.3.4.7.1. Meta Directory Entry Section","hash":"_ch7_meta_directory_entry_section","id":681},{"text":"7.3.4.7.2. HiPath Entry Section","hash":"_ch7_hipath_entry_section","id":682},{"text":"7.3.4.7.3. Derived HiPath Updates Section","hash":"_ch7_derived_hipath_updates_section","id":683},{"text":"7.3.4.7.4. HiPath Update Statistics","hash":"_ch7_hipath_update_statistics","id":684},{"text":"7.3.4.8. Customizing the HiPath Workflow","hash":"_ch7_customizing_the_hipath_workflow","id":685},{"text":"7.3.4.8.1. Job Authentication","hash":"_ch7_job_authentication","id":686},{"text":"7.3.4.8.2. Ident2HiPath Target Selected Attributes and HiPath2Ident Source Selected Attributes","hash":"_ch7_ident2hipath_target_selected_attributes_and_hipath2ident_source_selected_attributes","id":687},{"text":"7.3.4.8.3. Ident2HiPath Attribute Mapping","hash":"_ch7_ident2hipath_attribute_mapping","id":688},{"text":"7.3.4.8.4. Ident2HiPath Export Properties","hash":"_ch7_ident2hipath_export_properties","id":689},{"text":"7.3.4.8.5. HiPath2Ident Attribute Mapping","hash":"_ch7_hipath2ident_attribute_mapping","id":690},{"text":"7.3.4.9. HiPath Tables","hash":"_ch7_hipath_tables","id":691},{"text":"7.3.4.9.1. HDMS 3.1 Conversion Table","hash":"_ch7_hdms_3_1_conversion_table","id":692},{"text":"7.3.4.9.2. HDMS 3.6 Conversion Table","hash":"_ch7_hdms_3_6_conversion_table","id":693},{"text":"7.3.4.9.3. HDMS 5.2 Conversion Table","hash":"_ch7_hdms_5_2_conversion_table","id":694},{"text":"7.3.4.9.4. HiPath 4000 Manager V1.0 Conversion Table","hash":"_ch7_hipath_4000_manager_v1_0_conversion_table","id":695},{"text":"7.3.4.9.5. HiPath 4000 Manager V3.1 Conversion Table","hash":"_ch7_hipath_4000_manager_v3_1_conversion_table","id":696},{"text":"7.3.5. ODBC Workflows","hash":"_ch7_odbc_workflows","id":697},{"text":"7.3.5.1. Prerequisites and Limitations","hash":"_ch7_prerequisites_and_limitations_4","id":698},{"text":"7.3.5.2. ODBC Workflow Concepts","hash":"_ch7_odbc_workflow_concepts","id":699},{"text":"7.3.5.2.1. Attribute Correlation","hash":"_ch7_attribute_correlation_2","id":700},{"text":"7.3.5.2.2. Attribute Configuration","hash":"_ch7_attribute_configuration","id":701},{"text":"7.3.5.2.3. Identity Multi-Valued Attribute to ODBC Multi-Record Transformation","hash":"_ch7_identity_multi_valued_attribute_to_odbc_multi_record_transformation","id":702},{"text":"7.3.5.3. ODBC Validation Workflow","hash":"_ch7_odbc_validation_workflow","id":703},{"text":"7.3.5.3.1. Workflow Activities","hash":"_ch7_workflow_activities","id":704},{"text":"7.3.5.3.2. DirX Identity-Groups/Memberships Handling","hash":"_ch7_dirx_identity_groupsmemberships_handling","id":705},{"text":"7.3.5.4. ODBC Synchronization Workflow","hash":"_ch7_odbc_synchronization_workflow","id":706},{"text":"7.3.5.4.1. Workflow Activities","hash":"_ch7_workflow_activities_2","id":707},{"text":"7.3.5.4.2. Workflow Tasks without Stored Procedures","hash":"_ch7_workflow_tasks_without_stored_procedures","id":708},{"text":"7.3.5.4.3. Workflow Tasks with Stored Procedures","hash":"_ch7_workflow_tasks_with_stored_procedures","id":709},{"text":"7.3.5.5. Customizing the ODBC Workflows","hash":"_ch7_customizing_the_odbc_workflows","id":710},{"text":"7.3.5.5.1. Using Additional Attributes","hash":"_ch7_using_additional_attributes","id":711},{"text":"7.3.5.5.2. Using Structurally Different ODBC Databases","hash":"_ch7_using_structurally_different_odbc_databases","id":712},{"text":"7.3.6. RACF Workflows","hash":"_ch7_racf_workflows_2","id":713},{"text":"7.3.7. SiPass Workflows","hash":"_ch7_sipass_workflows","id":714},{"text":"Appendix A: Deprecated Features","hash":"_deprecated_features","id":715},{"text":"A.1. ADS Provisioning Workflows","hash":"_ads_provisioning_workflows","id":716},{"text":"A.1.1. Exchange Server 2007 Provisioning Workflow","hash":"_apx_exchange_server_2007_provisioning_workflow","id":717},{"text":"A.2. Dashboard Workflow","hash":"_dashboard_workflow","id":718},{"text":"A.2.1. Dashboard Workflow: General Issues","hash":"_apx_dashboard_workflow_general_issues","id":719},{"text":"A.2.2. Prerequisites and Limitations","hash":"_apx_prerequisites_and_limitations","id":720},{"text":"A.2.3. Dashboard Workflow: Operational Features","hash":"_apx_dashboard_workflow_operational_features","id":721},{"text":"A.2.4. Dashboard Password Synchronization","hash":"_apx_dashboard_password_synchronization","id":722},{"text":"A.3. DirX Access Workflows","hash":"_dirx_access_workflows","id":723},{"text":"A.3.1. DirX Access Prerequisites and Limitations","hash":"_apx_dirx_access_prerequisites_and_limitations","id":724},{"text":"A.3.2. Configuring DirX Access Workflows","hash":"_apx_configuring_dirx_access_workflows","id":725},{"text":"A.3.3. Configuring the DirX Access Target System","hash":"_apx_configuring_the_dirx_access_target_system","id":726},{"text":"A.3.4. DirX Access Workflows and Activities","hash":"_apx_dirx_access_workflows_and_activities","id":727},{"text":"A.3.5. DirX Access Ports","hash":"_apx_dirx_access_ports","id":728},{"text":"A.3.6. DirX Access Channels","hash":"_apx_dirx_access_channels","id":729},{"text":"A.3.6.1. Common Aspects","hash":"_apx_common_aspects","id":730},{"text":"A.3.6.2. Accounts","hash":"_apx_accounts","id":731},{"text":"A.3.6.3. Groups","hash":"_apx_groups","id":732},{"text":"A.4. JDBC Provisioning Workflows","hash":"_jdbc_provisioning_workflows","id":733},{"text":"A.4.1. General Information about the JDBC Workflows","hash":"_apx_general_information_about_the_jdbc_workflows","id":734},{"text":"A.4.2. JDBC System Table Layout","hash":"_apx_jdbc_system_table_layout","id":735},{"text":"A.4.3. JDBC Workflow Configuration","hash":"_apx_jdbc_workflow_configuration","id":736},{"text":"A.4.4. JDBC Agent Operations","hash":"_apx_jdbc_agent_operations","id":737},{"text":"A.4.5. Add/Delete Membership Lists","hash":"_apx_adddelete_membership_lists","id":738},{"text":"A.5. LDAP Provisioning Workflows","hash":"_ldap_provisioning_workflows","id":739},{"text":"A.5.1. LDAP Provisioning Workflow Concepts","hash":"_apx_ldap_provisioning_workflow_concepts","id":740},{"text":"A.5.1.1. Empty Groups","hash":"_apx_empty_groups","id":741},{"text":"A.5.1.2. Enable / Disable of Accounts","hash":"_apx_enable_disable_of_accounts","id":742},{"text":"A.5.2. LDAP Provisioning Workflow Configuration","hash":"_apx_ldap_provisioning_workflow_configuration","id":743},{"text":"A.5.2.1. Empty Groups","hash":"_apx_empty_groups_2","id":744},{"text":"A.5.2.2. Enable / Disable of Accounts","hash":"_apx_enable_disable_of_accounts_2","id":745},{"text":"A.6. LDAP XXL Provisioning Workflows","hash":"_ldap_xxl_provisioning_workflows","id":746},{"text":"A.6.1. LDAP XXL General Information","hash":"_apx_ldap_xxl_general_information","id":747},{"text":"A.6.2. LDAPXXL Workflow Concepts","hash":"_apx_ldapxxl_workflow_concepts","id":748},{"text":"A.6.2.1. New Common Procedures","hash":"_apx_new_common_procedures","id":749},{"text":"A.6.2.2. Workflow Integration","hash":"_apx_workflow_integration","id":750},{"text":"A.6.3. Detailed Customization","hash":"_apx_detailed_customization","id":751},{"text":"A.7. Lotus Notes Provisioning Workflows","hash":"_lotus_notes_provisioning_workflows","id":752},{"text":"A.7.1. Tcl-based Lotus Notes Provisioning Workflows","hash":"_apx_tcl_based_lotus_notes_provisioning_workflows","id":753},{"text":"A.8. UNIX PAM Provisioning Workflows","hash":"_unix_pam_provisioning_workflows","id":754},{"text":"A.8.1. How PAM Works","hash":"_apx_how_pam_works","id":755},{"text":"A.8.2. Setting Up PAM Provisioning Workflows","hash":"_apx_setting_up_pam_provisioning_workflows","id":756},{"text":"A.9. UNIX-PAM Workflows","hash":"_unix_pam_workflows","id":757},{"text":"A.9.1. UNIX-PAM Workflow Prerequisites and Limitations","hash":"_apx_unix_pam_workflow_prerequisites_and_limitations","id":758},{"text":"A.9.2. Configuring UNIX-PAM Workflows","hash":"_apx_configuring_unix_pam_workflows","id":759},{"text":"A.9.3. Configuring the UNIX-PAM Target System","hash":"_apx_configuring_the_unix_pam_target_system","id":760},{"text":"A.9.4. UNIX-PAM Workflow and Activities","hash":"_apx_unix_pam_workflow_and_activities","id":761},{"text":"A.9.5. UNIX-PAM Ports","hash":"_apx_unix_pam_ports","id":762},{"text":"A.9.6. UNIX-PAM Channels","hash":"_apx_unix_pam_channels","id":763},{"text":"A.9.6.1. Common Aspects","hash":"_apx_common_aspects_2","id":764},{"text":"A.9.6.2. Accounts","hash":"_apx_accounts_2","id":765},{"text":"A.9.6.3. Groups","hash":"_apx_groups_2","id":766}]},"4":{"id":4,"text":"All product names quoted are trademarks or registered trademarks of the manufacturers concerned. © 2024 Eviden All Rights Reserved Distribution and reproduction not permitted without the consent of Eviden.","title":"Copyright","component":"dirx-identity-docs","version":"9.0.0","name":"copyright","url":"/dirx-identity-docs/latest/copyright.html","titles":[]},"5":{"id":5,"text":"This section contains features that still work but should not be used because better features are available. Use the Java-based workflows instead of the Tcl-based workflows described in this chapter. Note that the features described in this chapter are still supported but will not be enhanced. This section comprises all issues related to Active Directory and Exchange Provisioning workflows. Microsoft strongly recommends that you install Exchange Server 2007 on a 64-bit processor machine with a 64-bit operating system, even though it is possible to install it on a 32-bit processor machine. Also at least one domain controller that is the schema master must have Windows Server 2003 Service Pack 1 installed. For further hardware and software requirements as well as the required steps to prepare Active Directory, the domains and the forest for Exchange 2007, refer to the Microsoft documentation. To administer Exchange Server 2007 including the administration of mailbox-enabled users (if the mailbox Server role was installed) you can install the Exchange 2007 management tools, which consist of the following: Exchange Management Console Exchange Management Shell Exchange Help File Exchange Best Practices Analyzer Tool Exchange Troubleshooting Assistant Tool Creating Mailbox-enabled Users: To create mailbox-enabled users with the Tcl-based provisioning workflows (C++-based AdsAgent) the following changes in the attribute mappings must be done: The attribute “textEncodedORAddress” can be eliminated from the mapping because Exchange 2007 does not support the X400 provider anymore by default. The attribute displayName has to be set to make the created mailbox enabled user work properly together with the Exchange 2007 GUI. For example map the LDAP cn attribute to the Exchange displayName attribute. In addition to the known attributes that must be set on creation of a mailbox-enabled user the following ones can be set: msExchRecipientTypeDetails msExchVersion msExchRecipientDisplayType Setting these attributes prevents the created mailbox to be shown as Legacy Mailbox by the Exchange Management Console tool. By Exchange 2007 a Legacy Mailbox is regarded as a one that resides on an Exchange 2000/2003 server or that has been created by an Active Directory Users and Computers snap in extended by Exchange 2000/2003 functionality. To make a Legacy Mailbox a User Mailbox also the Exchange Management Shell command setMailbox with the ApplyMandatoryProperties parameter can be used: C:\\>Set-Mailbox -Identity USERNAME –ApplyMandatoryProperties Configuring with C++ based AdsAgent: In the import.ini file the attributes must be set with the following types: msExchRecipientTypeDetails=Integer msExchVersion=CaseIgnoreString msExchRecipientDisplayType=Integer Mapping with both C++-based and Java-based agent or connector: Set these attributes in the mapping to constant values: msExchVersion: 4535486012416 (optional) msExchRecipientDisplayType: 1073741824 (optional) msExchRecipientTypeDetails: 1 (mandatory) The DirX Identity Dashboard workflow provisions a Dashboard target system. The following workflow is available: Ident_Dashboard_Sync - exports data from the Identity Store and imports it to the Dashboard target system and vice versa Note that the complexity of the Dashboard system requires a workflow of corresponding complexity to handle all of Dashboard’s features. The next sections provide conceptual and operational information about the Dashboard workflow. DirX Identity synchronization workflows read information from the Identity Store, perform the necessary update operations in the target system, read the target system content and update the Identity Store information accordingly. This procedure sets the status information in the identity store to correct and consistent values. Because the Dashboard system handles a set of other target systems and is not readable through its interfaces, DirX Identity uses a special procedure to handle this target system. The following figure illustrates this procedure. Figure 1. Dashboard Synchronization Workflow Operation As illustrated in the figure: The first activity - the meta controller (metacp) account update - collects the account information from all associated target systems and writes it at the corresponding Dashboard account. The next activity operates like workflows for other target systems. The metacp export activity reads all necessary information from the Identity Store and writes it to the data file. The target system agent (the Dashboard agent) writes this information to the target system. Depending on the result of the corresponding target system interface (API) action, the Dashboard agent writes a response file that contains the distinguished names (DNs) of all accounts where the operation was successful. Other results are only documented in the trace file. An additional meta controller activity - metacp import - uses this response file to update the relevant status information in the Identity Store. The entire procedure assumes that the target system interface (API) reports correctly whether an operation was successful or not. On success, the target system agent writes the corresponding entry into the response file. Before you can use the Dashboard workflow, you must extend the DirX Identity Store schema with Dashboard target system-specific attributes and object classes so that the workflows can store Dashboard-specific information in the Identity Store. For instructions, see the section \"Extending the Schema for the Target System Workflows\". In order to understand the Dashboard workflow, you need to understand the relevant features of the Dashboard system: Each user must have a corresponding account in the Dashboard system. The account name is necessary to authenticate to the Dashboard system. The Dashboard account has a category attribute that defines the authorization to the external applications that are configured in Dashboard. A category can enable access to one or more applications. It is not possible to refine the access to specific functionality within an application. One physical target system can be represented by several applications within Dashboard that model a part of the available functionality. Dashboard can handle single sign-on to the external applications. To provide this feature, Dashboard keeps, for each user, the relevant account information of the external applications (username and password). Three facets exist: Common account: The external application uses the same username and password that Dashboard itself uses. In this case, the account information is set to \"username=\" and \"password=\". Common password: The external application uses a different username but the same password that Dashboard uses. In this case, the account information is set to \"username=TSusername\" and \"password=*\". Diverse account: The external application uses a username and password that are different from the ones that Dashboard uses. In this case, the account information is set to \"username=TSusername\" and \"password=TSpassword\". In a DirX Identity Connectivity scenario, it only makes sense to support the first two facets. The third one is not supported. The Dashboard system also supports several authentication types: Simple type: The password is kept during the Dashboard session. If an external application entry of a Dashboard account contains an asterisk ('*'), the session password is used to log into the external application; otherwise, the stored value is used as the password for login. Password-less type: Other authentication types, for example, reuse of the Windows login, cannot provide the password. Therefore the \"asterisk\" solution does not work. In this case, the password of the Dashboard account and all passwords of the external application entries must be set to the same value. Dashboard’s category feature is a type of role model (with hierarchies and so on.). Users are assigned categories (for example, Physician or Nurse) to enable them to access several specific Web pages that may in turn be bound to external applications. Dashboard only handles the access to the application. It cannot handle fine granular access within the external applications. The next figure shows the Dashboard privilege model and its relationship to external applications. Figure 2. Dashboard Privilege Model Assume a physician needs to work with the external applications Invision and Pharmacy. This access can be modeled as a Physician role that uses a Physician permission that has the following groups assigned to it: One or more categories in the Dashboard target system to obtain basic access to the Dashboard system (to ensure Dashboard account creation and enabling). One or more groups in the Invision target system for fine granular access to Invision. This assignment creates the necessary Invision account. One or more groups in any additional target systems (for example, Pharmacy) for fine granular access to these additional systems. This assignment creates the necessary target system account. The target systems must be marked as Dashboard-relevant systems (The Peer Target System property must point to a Dashboard target system within DirX IdentityTS). With this approach, inconsistencies might occur. If a user gets an account in a target system that is not enabled (on the portal of the user) by one of the assigned Dashboard categories, the user cannot enter the application via Dashboard (but he can via the application’s native access). To ensure that the target system is accessible, you must create an \"access category\" for each target system that is assigned to the user via a permission if one of the groups of the target system is assigned. The advantage of this approach is that the whole access control model is visible within DirX Identity (that is, DirX Identity can ensure correct access to the target system). To summarize the model within DirX Identity: DirX Identity contains a Dashboard target system with all necessary Dashboard accounts. The groups represent the Dashboard categories. A special attribute at the Dashboard target system object defines whether simple or password-less authentication is used. Figure 3. DirX Identity Dashboard Synchronization Model DirX Identity also contains a set of Dashboard-managed target systems. These target systems have their own accounts for these users and target system-specific groups and group memberships. Such a target system can be represented as several external applications in the Dashboard system (e.g., Invision can be represented as Invision1 as Invision2). Because the name of the target system might be different from the names of the external applications which are represented by this target system in Dashboard, you can set the external application names in the Portal External Application property of each of the associated target system. The user can log in to one of the available Invision applications (Invision1 or Invision2). The workflow works as follows: To get the active relevant accounts and its names (dxmDshExternalApp) for one of the Dashboard accounts, the first workflow activity retrieves all non-deleted accounts (active or inactive) for this user from all target systems that have the Dashboard target system set as Peer Target System property. If such a target system has set several names in the Portal External Application property, each name is used as a separate external application for the Dashboard account. The external application account name is then equal to the value of the dxrName attribute of the account in the external application (target system). If the dxrName attribute is empty the attribute cn is used instead. Just one account per target system is selected (the primary one in case of multiple accounts) and is configured for all the names listed in Portal External Application property. The inactive external applications are evaluated as a complement of the currently resolved list of external applications to the list of external applications in a previous run of the workflow and are written to the dxmDshExternalAppDel attribute. Note that this activity needs to know the location of the Dashboard target system account base. This information is retrieved from the Identity Store’s account base attribute that is set automatically from the target system wizard. This concept restricts the number of Dashboard target systems per configured identity store to exactly one. The second activity reads the user’s Dashboard account and all necessary account attributes. Additionally it fetches the related user’s password from the identity store as initial password (specified by the dxrUserLink attribute of the account). This assures that the actual password is taken. If the dxrUserLink attribute of the account is missing or no password for the user exists, a default value is used (configured in the post join mapping script of the second job). The assigned group memberships are transferred as categories to Dashboard. The workflow adds external application attributes (retrieved from the dxmDshExternalApp and dxmDshExternalAppDel attributes) to each Dashboard account entry with account name and password information. If the attribute Prevent Password Synchronization of a Dashboard relevant target system is set, the workflow sets empty passwords for all the related external applications accounts. Otherwise the workflow uses the star ('*') or the value of the user’s password (according to the simple or password-less authentication type setting of the Dashboard target system). All the information is transferred via the Dashboard agent to the Dashboard target system. Dashboard response is joined with the Dashboard user data stored in the identity store. The relevant target system state is set. The Dashboard password synchronization workflow that uses the Dashboard connector synchronizes the Dashboard password and all the Dashboard-related target systems that do not use empty passwords. The external applications for a Dashboard account are taken from the actual values of the attribute dxmDshExternalApp. The password for external applications is then set according to the authentication type of the Dashboard target system. These workflows are no longer usable. Read the information in the chapter DirX Access Workflows to understand how DirX Identity and DirX Access can interact. The DirX Access provisioning workflows work between a target system of type SPMLv1 in the Identity Store and the corresponding connected DirX Access server with configured Provisioning Web Service. The workflows use the SPML connector (SpmlV1SoapConnector2TS) for provisioning. This connector communicates with the DirX Access Provisioning Web Service. The following figure illustrates the DirX Access provisioning workflow architecture. Figure 4. DirX Access Provisioning Workflow Architecture The workflows handle the following objects: User - the common DirX Access user. Role - the common DirX Access business role. The delivered workflows are: Ident_DXA_Realtime - the synchronization workflow exports detected changes for user (account) and business role (group) objects from Identity Store to the DirX Access server in the first step. The second step is to validate the processed changes in the DirX Access server to the Identity Store. Validate_DXA_Realtime - the validation workflow imports existing DirX Access users and business roles with role assignment from the DirX Access server to the Identity Store. The DirX Access workflows support only DirX Access user and business role objects. They do not support password synchronization for DirX Access. To configure the connection to DirX Access: Specify the IP address and the Data Port of the DirX Access SPML v1 Provisioning Web Service. Use the corresponding DirX Access service object which is the part of the connected DirX Access system. You can configure the URL Path and Socket Timeout at the target system port of the appropriate workflow object. (See the DirX Access provisioning workflows configuration in the Expert View in the Connectivity part in the DirX Manager.) You can change the URL Path according to real deployment of the DirX Access Provisioning Web Service. You can increase the timeout value (in seconds) in the Socket Timeout if necessary. Set up the bind credentials of the connected DirX Access system. Use the correct credentials with sufficient rights. Check the provisioning settings used by the connected DirX Access system. Specify them according to real values for your provisioned DirX Access target system. The DirX Access target system requires the following layout: Accounts - all DirX Access users are located in a subfolder Accounts. Groups - all DirX Access business role objects are located in a subfolder Groups. The attribute dxrPrimaryKey of accounts and groups contains the PSO Identifier of these objects in the connected DirX Access system. (See the SPMLv2 specification for more details about PSO Identifiers.) The business role (group) membership is stored at the user (account) object and references the dxrPrimaryKey attribute of business role (group) objects. The following figure shows the layout of the channels that are used by the UNIX-PAM workflow’s join activity: Figure 5. DirX Access Provisioning Workflow Channels and Objects The DirX Access users (with membership) and business roles are synchronized via a pair of channels (one channel per direction). This section describes the DirX Access ports. TS Port CF - Crypt Filter A DirX Access filter is configured implicitly. It is used to send the decrypted password attribute password to DirX Access. This section provides information about DirX Access channels. Direction: Identity Store → DirX Access enabled - the attribute used for disabling of the user object in DirX Access. The correct value is derived from the dxrState attribute of the corresponding account object in the Identity Store. Direction: DirX Access → Identity Store CommonProcsDxa.calculateIdInIdentity - calculates the ID. Direction: Identity Store → DirX Access ID: dxrPrimaryKey Join: ${source.dxrPrimaryKey} or ${source.dxrName} identical to loginName DirX Access requires some mandatory attributes. Mandatory attributes are mapped mostly in a common way, some are mapped as constants. The roles attribute holds the business group membership. Direction: DirX Access → Identity Store Join via the dxrName attribute that is mapped identically to the loginName attribute. Direction: Identity Store → DirX Access ID: dxrPrimaryKey Join: ${source.dxrPrimaryKey} DirX Access requires some mandatory attributes. Mandatory attributes are mapped mostly in a common way, and some are mapped as constants. The mode attribute must be set to 1 for business roles. Direction: DirX Access → Identity Store Join via the dxrName attribute that is mapped identically to the name attribute. Post-mapping removes all administrative roles from the imported DirX Access roles (it simply omits the roles with the mode attribute set to 0). The DirX Identity JDBC workflows provision a JDBC target system. The following workflows are available: JDBC2Ident_Validation - performs initial loads or validations from the JDBC target system Ident_JDBC_Sync - synchronizes between the JDBC target system within DirX Identity and the real JDBC target system. The next sections provide information about JDBC workflow implementation. Because the JDBC workflows assume the same database structure as the ODBC workflows, the workflow structure is also the same. They also use the ODBC Tcl scripts, especially the ODBC profile script. Because JDBC workflows use the JDBC agent, joins are configured here in a special view section. The join feature is not needed in all JDBC jobs, but all jobs are configured the same way. The JDBC agent is always run in full mode (a delta filter feature is not yet available). As a result, deleted records in the JDBC database are never exported. As a result, the TSState attribute in the identity store cannot be updated for deleted accounts or groups. Use the validation workflow to perform this task. The JDBC workflows assume the following table layout in the JDBC target system: A table of groups, where each row represents one group A table of accounts, where each row represents one account A table of memberships, where each row represents a membership of one account in one group The JDBC agent’s import and export configuration files are stored under the JDBC connected directory. As in the attribute configuration, the database schema is described here. Each JDBC export job uses this configuration. For searchRequest for exports, the JDBC2Ident_SyncGroup_JDBCExport and JDBC2Ident_SyncGroup_JDBCExport jobs use their own searchRequest files because they use special anchor values to find the selected attributes. All other JDBC export jobs use the standard searchRequest file. For JDBC agent import: An LDIF change file is generated by the preceding metacp job: Dn: consists of: identifying attribute(s), table=tablename A specific group: dn:DxrGroupName=verynew,table=Groups or a specific membership: dn:MembershipGroupID=1,MembershipAccountID=26,table=Memberships For JDBC agent export: An LDIF content file is generated: A specific group with its memberships: dn: groupid=1,view=members groupdesc: xx groupdxrname: ODBCall groupid: 1 groupodbcname: all accountdxrname: bj099999 Because the JDBC agent cannot currently run in delta mode, the JDBC workflow (JDBC2Ident_SyncGroup_MetaCP job) cannot generate \"add\" and \"delete\" member lists. Instead, the workflow accumulates all memberships in the accountDxrName attribute and synchronizes back the complete member list with the common modGroupInRole routine. This operation is different from the ODBC workflow and will be changed when the delta feature is available. The following LDAP workflows to provision any LDAP directory are available: LDAP2_Ident_Validation - performs initial load or validation from an LDAP directory Ident_LDAP_Sync - synchronizes between the Identity Store and an LDAP directory This chapter defines concepts that are necessary to understand the operation of the LDAP workflows. Per default the workflow assumes groupOfNames at the target system side. LDAP groups contain a member or uniqueMember attribute that cannot be empty (it is mandatory and must have a value). This is handled differently on the DirX Identity and the target system side: In the DirX Identity target system the group is empty. Note that the uniqueMember attribute contains the domain name to fulfill the LDAP requirement that empty groups cannot exist (cn=domainName). The dxrGroupMemberOK, dxrGroupMemberAdd and dxrGroupMember attributes are empty. To overcome the problem on the target system side, the LDAP workflow fills empty groups with a customizable value (default is 'cn=no_member'). For configuration of this feature see the next chapter. The workflow supports enable and disable. The status attribute of DirX Identity is mapped to a freely definable attribute in the target system (default: employeeType). For configuration of this feature see the next chapter. This chapter explains how you can customize specific issues of the LDAP workflows. Open the User Hooks script of the Identity_LDAP_Sync activity for group synchronization. Adapt the default statement in the Preprocessing section: set fixGroupMember \"cn=no_members\" This distinguished name is entered into empty groups on the target system side. If your directory or your applications cannot handle a value that points to nowhere, create an entry in an area that is not synchronized by DirX Identity (to overcome the problem that this entry is synchronized) and set the fixGroupMember value to point to this entry. To change the default attribute employeeType to another attribute, perform these steps: Open the User Hooks script for the account activity of the Identity_LDAP_Sync workflow. Select the attribute in the output channel’s Selected Attributes. Edit the statement in the Preprocessing section: set dxrTSStateAttr \"employeeType\" Open the User Hooks script for the account activity of the Ident2LDAP_Validation workflow. Select the attribute in the input channel’s Selected Attributes. Edit the statement in the Preprocessing section: set dxrTSStateAttr \"employeeType\" Group-side storage of memberships in DirX Identity can cause performance problems when large groups (hundred thousands to millions of members) must be handled. One solution is to store the membership at the account instead of at the groups because the number of memberships for accounts typically does not exceed 1000. If the real target system needs group-side membership storage, DirX Identity can nevertheless store the memberships account-side, which significantly improves all internal service handling. DirX Identity’s LDAP XXL workflows support LDAP target systems with this model. The following LDAP XXL workflows are available: LDAPXXL2_Ident_Validation - performs initial load or validation from an LDAP directory Ident_LDAPXXL_Sync - synchronizes between the Identity Store and an LDAP directory The LDAP XXL workflows operate differently from the standard LDAP workflow, as follows: The validation workflow’s account job reads memberships from the target system and merges them to the identity store accounts. Its group job does not handle memberships. The synchronization workflow’s group job reads memberships from the Identity Store via extra searches and merges them with the groups in the target system. Its account job reads memberships in the target system via extra searches and synchronizes the membership back to the accounts in the Identity Store. Unlike the standard LDAP workflow, the synchronization workflow’s group job uses the following optimizations: It does not read the member attribute in the LDAP target system into memory (avoids large memory lists) It does not use the Tcl lappend command for large lists (slow function) It does not use the rh arrays (slow Tcl behavior). Instead they build obj modify/create strings It appends/creates members in portions (blocks) This section explains LDAPXXL workflow implementation concepts. The two new common procedures are: modGroupStatesInRole addGroupStatesInRole These procedures handle the states but do not handle the memberships as in the mod/addGroupInRole procedures. Uniquemember is no longer in the target selected attribute list, which prevents it from being read during the join operation. PostmappingAdd: The PostmappingAdd: routine: Creates the group via the obj create command. It generates an attribute string for the command from the mapped tgt attributes, and assumes that Abbreviation and Name are identical. Searches the \"add\" members and appends the first portion of members to the command. Adds all other add members in portions via an obj modify -addattr command. Sets the action to none (because add is already done) and sets a special switch restore_action. Restores the action in loopextraFunction so that backward synchronization of the states can be performed for ADD. PostmappingMod: The PostmappingMod: routine: Searches for the members to be deleted. For every member, searches the target system to determine whether or not a delete attribute operation needs to be performed. If it does, the routine builds the list of attributes to be deleted. If a given block size is reached, performs an obj modify -delattr with block_size members. Handles add members analog. Block size is configured at the job (specific attribute block_size defaults to 100). Instead of having a large Tcl (result) list of members, uses the target system as the list. Every search in the list results in an LDAP search. Modifies the other attributes with the standard script operation. Creates a namespace search to handle the searches for add/delete members. It consists of a search and a get(getNextMembers) procedure. The search result is held in this namespace. The get procedure returns the next number of attributes separated by “;”. LoopExtraFunction This routine restores the action if the restore_action switch is set. Additional Statistics The LDAP XXL workflows offer additional statistics. For example: # # Additional statistics: #========================== # Nr of groups created: 0 # Nr of modifies to append members for new groups: 0 # Nr of modifies to change memberships: 3 # Nr of groups for which memberships have changed: 1 Specific Attribute block_size (Job) The job’s block_size attribute is used for creates and modifies. A single create/modify operation handles max block_size members. Paged-Read Integration The following sections provide information about paged-read integration in the LDAPXXL workflows. Group Synchronization Searches for the add/delete memberships in role may return large results. These searches should use paged read to avoid memory problems. All search functionality is extracted in a Tcl file called “Post Join Search Tcl Script”. It contains three namespaces: A namespace searchType to determine what kind of searches are supported A namespace for simple paging (searchPaged) and A namespace for \"simple\" searches (search) are provided Virtual list view (VLV) may be supported in a future release. Simple Paging (paged read) The searchPaged namespace contains procedures for paged read. Paged read requires an extra bind with a -bindid option; for users of the search functionality, this is the only difference in the interface between the several search types. As a result, searchPaged offers a bind procedure. The caller passes the bind ID and the connection parameters. The first time bind is called for the given bind ID, it performs the bind. Subsequent calls with the same bind ID do not result in another bind; the existing bind is used. The page size can be configured at the job object: variable PAGESIZE Uh:: Prolog: set st(paged) 0 set rc [searchType::determineSearchType src_bind_id st] set usePagedResult $st(paged) The variable of uh namespace usePagedResult is set. Here if “simple paging” is possible, usePagedResult is set to 1 (it means true or yes). Otherwise, simple searches are used. If you never want to use simple paging you can hard-code it here. A second index vlv of the st array indicates whether VLV is supported. Post-Join Mapping In postMappingAdd/Mod, the variable usePagedResult is used to determine if search procedures need to be called from search or searchPaged namespace. For usePagedResult, the bind procedure is also called: if {$usePagedResult == 1} { set rc [searchPaged::bind paged_bind_id src_conn_param] } ... if {$usePagedResult == 0} { search::SearchMembers $src_conn_param(bind_id) $role_ts_account_base .. } else { searchPaged::SearchMembers paged_bind_id $role_ts_account_base .. } Account Synchronization The search for the changed accounts in the Identity Store might return a large result. To avoid memory problems, the standard script’s paged read functionality is now used. Paged read is switched on and the page size is set in the account synchronization job’s input channel. Sorting is now disabled (because sorting DDN and paged read is not supported). Perform the following steps to change the Role LDAPXXL workflows from GroupOfUniqueNames to GroupOfNames. For the validation workflow/validate accounts: Go to the wizard step \"Attribute Mapping for Accounts\". Edit PostJoin Mapping. In PostJoinMapping Procedure GetCurrentTSMembers, replace set rc [SearchMembers $bind_id $base_obj GroupOfUniqueNames uniquemember $accountdn locMembs] with set rc [SearchMembers $bind_id $base_obj GroupOfNames member $accountdn locMembs] For the validation workflow/validate groups Wizard step \"Attribute Mapping for Groups\" Select InputChannel Press show button in Export Properties Tab Update the \"Search Filter\" of export properties to objectClass=\"groupOfNames\" For the synchronization workflow/synchronize accounts: In DirX Manager’s expert view: UserHook under the Role_LDAPXXL_SyncAccount_MetaCP job uh: ModifyRoleEntry procedure: replace set rc [SearchMembers $bind_id $base_obj GroupOfUniqueNames uniquemember $accountdn DDN currTSMembs] with set rc [SearchMembers $bind_id $base_obj GroupOfNames member $accountdn DDN currTSMembs] For the synchronization workflow/synchronize groups: Go to the wizard step \"Target Selected Attributes for Groups\": Replace uniqueMember replace-all with member replace-all Go to the wizard step \"Import Properties for Groups\". In Join Expression, change GroupOfUniqueNames to GroupOfNames Go to the wizard step \"Attribute Mapping for Groups\": Edit PostJoin Mapping: postMappingAdd: Change set tgt(objectClass) \"GroupOfUniqueNames top\" to set tgt(objectClass) \"GroupOfNames top\" Change set tgt(uniqueMember) $add_member to set tgt(member) $add_member postMappingMod: Change set members $found_entry(uniqueMember) to set members $found_entry(member) Change set tgt(uniqueMember) $members to set tgt(member) $members In the connected directory LDAPXXL: Configure LDAP TS in Hub: Go to the wizard step \"Operational Attributes\". In ObjectClasses Groups, change GroupOfUniqueNames to GroupOfNames This section comprises all Lotus Notes-specific information for Tcl-based workflows. The DirX Identity Tcl-based Lotus Notes workflows provision a Lotus Notes target system. Two workflows are available: Notes2Ident_Validation - performs initial load or validation from a Lotus Notes target system Ident_Notes_Sync - synchronizes between the Identity Store and a Lotus Notes target system Configuration notes: The parameter \"Account Root in TS\" of the target system object (in the Provisioning view) must contain a structure element like '/o=mycompany' which must match with the one contained in the cert.id file, because the Notes Server creates the fullname of the user by concatenating givenName, surname and this structure part contained in the cert.id file. This fullname also is used in the member attributes of groups in Notes. As a consequence the cn of a Notes target system account in Provisioning is generated like the fullname in Notes to be able to assign group members to accounts in the Provisioning view. The parameter \"Group Root in TS\" must be left empty, because groups are kept flat in Notes and not in the kind of structure like users. Deletion of accounts in Lotus Notes is a specific procedure: The workflow cannot delete accounts directly. Instead it marks an account for deletion in the Lotus Notes system. You can define in the Notes server the time after which an account is physically deleted from the address book (for example, two minutes) and the time after which the mail file is deleted. This feature implies that the dxrTSstate is not set correctly during this run of the synchronization workflow. As a result, the next synchronization workflow will try to delete the same entries again. This action does not result in a warning state. Instead, one of the next synchronization workflows or a validation workflow will set the dxrTS flag accordingly. A Pluggable Authentication Module (PAM) is a method that allows you to provide the authentication for system and other services (login, su, sshd…) using other services (LDAP…). Today the support for PAM is included in most of the common UNIX distributions. PAM was originally developed by Sun Microsystems. The topics in this section describe how PAM works and how to set up PAM Provisioning workflows. The basic idea of the PAM system are pluggable authentication modules - shared object files that are typically located in the /lib/security directory. Applications use for access to these modules two interfaces. The first is a system library attached to the application that allows the application to access the application authentication services directly. The second layer is the system configuration - the administrator specifies here the authentication rules for an application as desired. PAM is used in four areas: user authentication, account control, session management and password change. The PAM modules process control or executive functions: User authentication checks the identity of the user: password check, Kerberos authentication etc. Account control processes some verification which is not directly related to user identity: limited access time for a user, limited number of concurrently logged users etc. Session management is activated before and after service execution: sets the environment variables, execution of chroot, enables network disk connections etc. The control flag describes how to work with the PAM module. The possible values are required, requisite, sufficient and optional. Provisioning of PAM requires the following setup steps: Install an LDAP directory that you can use for PAM. See the specific vender documentation how to perform this task. Install and configure PAM for your UNIX system. See the specific vendor documentation. This includes a setup of the PAM LDAP schema. Important part of the schema are the object classes posixAccount and posixGroup. Check that PAM is working. Create for example an account and a group that allows access to read a file and check that this account can read the file. Create a UNIX PAM target system in the Provisioning view group with Identity Manager. This includes creation of a UNIX PAM LDAP connected directory and the related workflows. Note: the target system wizard copies only the Tcl-based workflows. If you want to use real-time provisioning, copy the relevant workflows in the Connectivity view group as is described in the DirX Identity Connectivity Administration Guide. Test your scenario thoroughly. The UNIX-PAM Provisioning workflows operate between a target system of type LDAP in the Identity Store and the corresponding connected LDAP server that is configured for use with UNIX-PAM (see RFC 2307). The workflows use the standard LDAP connector (LdapConnector) for provisioning. This connector communicates with the LDAP server across the native LDAP protocol. (See the section \"LDAP Workflows\" for more information). The following figure illustrates the UNIX-PAM Provisioning workflow architecture. Figure 6. UNIX-PAM Workflow Architecture The workflows handle the following UNIX objects: Account - the common UNIX accounts (object classes posixUser and shadowUser according to RFC 2307). Group - the common UNIX groups (object classes posixGroup according to RFC 2307). The delivered workflows are: Ident_UNIX-PAM_Realtime - the synchronization workflow that exports detected changes for account and group objects from Identity Store to the LDAP server and then validates the processed changes in the LDAP server to the Identity Store. Validate_UNIX-PAM_Realtime - the validation workflow that imports existing UNIX accounts and groups with group assignment from the LDAP server to the Identity Store. The UNIX-PAM workflows have the following prerequisites and limitations: Before you can use the workflows, you must extend the DirX Identity Store schema with UNIX-PAM target system-specific attributes and object classes so that the workflows can store UNIX-PAM-specific information in the Identity Store. For instructions, see the section \"Extending the Schema for the Target System Workflows\". The workflows support only the object classes posixAccount, shadowAccount and posixGroup defined by RFC 2307. The workflows as delivered do not support password synchronization for UNIX-PAM. (See the section \"LDAP Workflows\" for an example of a password synchronization workflow for a UNIX-PAM (LDAP-based) connected directory.) To configure the connection to UNIX-PAM: Specify the IP address and the data port of the LDAP server that is configured for use with UNIX-PAM. Use the corresponding UNIX-PAM service object that is the part of the connected UNIX-PAM LDAP directory. Use correct port numbers according to your LDAP server settings. You can also set the usage of secure connection (SSL) or enable client authentication. Set up the bind credentials of the connected LDAP directory representing UNIX-PAM. Use the correct credentials (with sufficient rights). These are the credentials used for administration of the LDAP server. Use the valid DN syntax for the user name. Check the provisioning settings used by the connected UNIX-PAM system. Specify them according to real values for your provisioned UNIX-PAM target system. The UNIX-PAM target system requires the following layout: Accounts - all UNIX accounts are located in a subfolder Accounts. Groups - all UNIX groups are located in a subfolder Groups. The attribute dxrPrimaryKey of accounts and groups contains the DN of these objects in the connected system. The standard JavaScript dxrNameForAccounts.js generates the attribute uid for the UNIX account. The UNIX-PAM specific JavaScript uniqueNumber.js generates the attributes uidNumber and gidNumber for the UNIX account. The attribute gidNumber for the UNIX account (refers to the primary UNIX group of the account) is by default automatically chosen as one of the assigned UNIX groups. It uses the obligation mechanism (see group objects) and the UNIX-PAM specific JavaScript AccountGidNumber.js. The JavaScript updates the gidNumber when necessary. You can change the primary group manually at the account object. The group object stores the group membership and references the uid attribute of the account objects. The following figure shows the layout of the channels that are used by the UNIX-PAM workflow’s join activity: Figure 7. UNIX-PAM Provisioning Workflow Channels and Objects The UNIX objects account and group (and membership) are synchronized via a pair of channels (one channel per direction). This section describes the UNIX-PAM ports. TS Port CF - Crypt Filter A UNIX-PAM filter is implicitly configured. It is used to send the decrypted password attribute userPassword to the LDAP server. This section provides information about UNIX-PAM channels. Direction: Identity Store → UNIX-PAM shadowFlag - the attribute used for disabling of the account object in the connected LDAP directory (used for UNIX-PAM). The correct value is derived from the dxrState attribute of the corresponding account object in the Identity Store. This is an experimental setting and must be supported by the relevant UNIX-PAM implementation. Direction: UNIX PAM → Identity Store CommonProcsUnixPam.calculateIdInIdentity - calculates the Id. Direction: Identity Store → UNIX-PAM ID: dxrPrimaryKey Join: ${source.dxrPrimaryKey} or ${source.uidNumber} UNIX-PAM requires some mandatory attributes. (See RFC 2307 for details.) Mandatory attributes are mapped in a common way. The gidNumber attribute holds the primary group membership. Direction: UNIX-PAM → Identity Store Join via the dxrName attribute that is mapped identically to the uidNumber attribute. Direction: Identity Store → UNIX-PAM ID: dxrPrimaryKey Join: ${source.dxrPrimaryKey} or {source.gidNumber} UNIX-PAM requires some mandatory attributes. (See RFC 2307 for details.) Mandatory attributes are mapped in a common way. Direction: UNIX-PAM → Identity Store Join via the dxrName attribute that is mapped identically to the gidNumber attribute.","title":"Deprecated Features","component":"dirx-identity-docs","version":"9.0.0","name":"appa_depr","url":"/dirx-identity-docs/latest/appl-dev-guide/appa_depr.html","titles":[{"text":"ADS Provisioning Workflows","hash":"_ads_provisioning_workflows","id":1},{"text":"Exchange Server 2007 Provisioning Workflow","hash":"_exchange_server_2007_provisioning_workflow","id":2},{"text":"Dashboard Workflow","hash":"_dashboard_workflow","id":3},{"text":"Dashboard Workflow: General Issues","hash":"_dashboard_workflow_general_issues","id":4},{"text":"Prerequisites and Limitations","hash":"_prerequisites_and_limitations","id":5},{"text":"Dashboard Workflow: Operational Features","hash":"_dashboard_workflow_operational_features","id":6},{"text":"Dashboard Password Synchronization","hash":"_dashboard_password_synchronization","id":7},{"text":"DirX Access Workflows","hash":"_dirx_access_workflows","id":8},{"text":"DirX Access Prerequisites and Limitations","hash":"_dirx_access_prerequisites_and_limitations","id":9},{"text":"Configuring DirX Access Workflows","hash":"_configuring_dirx_access_workflows","id":10},{"text":"Configuring the DirX Access Target System","hash":"_configuring_the_dirx_access_target_system","id":11},{"text":"DirX Access Workflows and Activities","hash":"_dirx_access_workflows_and_activities","id":12},{"text":"DirX Access Ports","hash":"_dirx_access_ports","id":13},{"text":"DirX Access Channels","hash":"_dirx_access_channels","id":14},{"text":"Common Aspects","hash":"_common_aspects","id":15},{"text":"Accounts","hash":"_accounts","id":16},{"text":"Groups","hash":"_groups","id":17},{"text":"JDBC Provisioning Workflows","hash":"_jdbc_provisioning_workflows","id":18},{"text":"General Information about the JDBC Workflows","hash":"_general_information_about_the_jdbc_workflows","id":19},{"text":"JDBC System Table Layout","hash":"_jdbc_system_table_layout","id":20},{"text":"JDBC Workflow Configuration","hash":"_jdbc_workflow_configuration","id":21},{"text":"JDBC Agent Operations","hash":"_jdbc_agent_operations","id":22},{"text":"Add/Delete Membership Lists","hash":"_adddelete_membership_lists","id":23},{"text":"LDAP Provisioning Workflows","hash":"_ldap_provisioning_workflows","id":24},{"text":"LDAP Provisioning Workflow Concepts","hash":"_ldap_provisioning_workflow_concepts","id":25},{"text":"Empty Groups","hash":"_empty_groups","id":26},{"text":"Enable / Disable of Accounts","hash":"_enable_disable_of_accounts","id":27},{"text":"LDAP Provisioning Workflow Configuration","hash":"_ldap_provisioning_workflow_configuration","id":28},{"text":"Empty Groups","hash":"_empty_groups_2","id":29},{"text":"Enable / Disable of Accounts","hash":"_enable_disable_of_accounts_2","id":30},{"text":"LDAP XXL Provisioning Workflows","hash":"_ldap_xxl_provisioning_workflows","id":31},{"text":"LDAP XXL General Information","hash":"_ldap_xxl_general_information","id":32},{"text":"LDAPXXL Workflow Concepts","hash":"_ldapxxl_workflow_concepts","id":33},{"text":"New Common Procedures","hash":"_new_common_procedures","id":34},{"text":"Workflow Integration","hash":"_workflow_integration","id":35},{"text":"Detailed Customization","hash":"_detailed_customization","id":36},{"text":"Lotus Notes Provisioning Workflows","hash":"_lotus_notes_provisioning_workflows","id":37},{"text":"Tcl-based Lotus Notes Provisioning Workflows","hash":"_tcl_based_lotus_notes_provisioning_workflows","id":38},{"text":"UNIX PAM Provisioning Workflows","hash":"_unix_pam_provisioning_workflows","id":39},{"text":"How PAM Works","hash":"_how_pam_works","id":40},{"text":"Setting Up PAM Provisioning Workflows","hash":"_setting_up_pam_provisioning_workflows","id":41},{"text":"UNIX-PAM Workflows","hash":"_unix_pam_workflows","id":42},{"text":"UNIX-PAM Workflow Prerequisites and Limitations","hash":"_unix_pam_workflow_prerequisites_and_limitations","id":43},{"text":"Configuring UNIX-PAM Workflows","hash":"_configuring_unix_pam_workflows","id":44},{"text":"Configuring the UNIX-PAM Target System","hash":"_configuring_the_unix_pam_target_system","id":45},{"text":"UNIX-PAM Workflow and Activities","hash":"_unix_pam_workflow_and_activities","id":46},{"text":"UNIX-PAM Ports","hash":"_unix_pam_ports","id":47},{"text":"UNIX-PAM Channels","hash":"_unix_pam_channels","id":48},{"text":"Common Aspects","hash":"_common_aspects_2","id":49},{"text":"Accounts","hash":"_accounts_2","id":50},{"text":"Groups","hash":"_groups_2","id":51}]},"6":{"id":6,"text":"The default applications are constructed from three different workflow architectures: Request workflows, which handle self-service and delegated administration requests that may require authorization by one or more human approvers.Request workflows operate inside the DirX Identity Store and allow you to define processes like creating a new user or modifying a user’s attributes and manage the approvals that are often required as part of these processes.Request workflows can work with any DirX Identity object type, for example, roles or policies.Request workflows can automatically trigger Java-based or Tcl-based workflows to provision the resulting identity data updates to the connected systems.The default request workflows provided with DirX Identity are available in the DirX Identity Manager’s Provisioning view group. Java-based workflows, which handle both real-time and scheduled provisioning and synchronization.Java-based workflows work mainly with the user, account and group objects in the Identity Store and the source and connected systems.They operate primarily outside of the Identity Store and perform the provisioning / synchronization of identity data between source systems and the Identity Store and between connected systems and the Identity Store.(Note that it is possible to build Java-based workflows that work from the Identity Store to the Identity Store; the DirX Identity maintenance workflows are representatives of this type.) The runtime environment for Java-based workflows is provided by the Java-based Identity Server (IdS-J).The default Java-based workflows provided with DirX Identity are available in Identity Manager’s Connectivity view group Tcl-based workflows, which handle scheduled provisioning and synchronization using the DirX Identity meta controller (metacp) and agents.Like the Java-based workflows, Tcl-based workflows work mainly with the user, account and group objects in the Identity Store and the source and connected systems, operate primarily outside of the Identity Store (the maintenance workflows are the exception) and provision and synchronize between the source systems, connected systems, and Identity Store.The runtime environment for Tcl-based workflows is provided by the C++-based Identity Server (IdS-C).Like the Java-based workflows, the default Tcl-based workflows provided with DirX Identity are available in Identity Manager’s Connectivity view group. This chapter provides the following information about these workflows: \"Understanding Request Workflows\" describes the architecture used for request workflows and how to customize them to your requirements. \"Understanding Java-based Workflows\" describes the architecture used for the Java-based default connectivity workflows and how to customize them to your requirements. \"Understanding Tcl-based Workflows\" describes the architecture used for the Tcl-based default connectivity workflows and how to customize them to your requirements. This section provides information about Java-based workflows, including information about: Request workflow architecture Customizing request workflows You can use request workflows for a variety of tasks, including: Controlling user self registration Creating objects (users, roles, and so on) with or without approval Modifying objects (users, roles, and so on) and approving object attribute changes Approving privilege assignment changes DirX Identity Provisioning handles request workflows of any complexity with a wide variety of features, including: Graphical workflow configuration with multiple steps Static, dynamic, group-based and rule-based approver list generation Filters to help reduce or adapt a list of approvers Constraints to specify, for example, minimum requirements on the number of participants Dynamic activity generation based on lists Sequential and parallel activity execution Conditions like \"All must succeed\" or \"Only one may decide\" WhenApplicable rules to restrict the application of a specific workflow template Start conditions for activities, including AND and OR Timeout definition for workflow and activities Easy setup of e-mail notification An unlimited number of escalation steps for each activity An \"active\" flag to prohibit the execution of incomplete rules Lifetime definition for workflow instances including automatic removal Auditing The next section discusses the application of request workflows and provides some examples that explain the features in more detail. Request workflows consist of steps that we call \"activities\". Three basic types of request workflow activity exist: People activities - activities executed by one or more persons, which we call \"participants\". This type of activity needs some time (from several seconds to days). Error activities - activities that handle error conditions. These activities generally send e-mail to well-defined administrators. Automatic activities - activities executed by automated procedures. Examples of these activities include creating a global unique ID (GUID) for a user and creating the LDAP entry upon creation approval and sending an e-mail message. Conditional activities - activities that wait for some event. An example is the completion of a sub-workflow. DirX Identity supplies the following default people activities: Approve assignment, which asks a participant to approve a specific user-to-privilege assignment. You define the participants and optionally the escalation steps. You typically set up an e-mail notification to inform the participants about this task. Approve delete, which asks a participant to approve an object deletion. Approve modification, which asks a participant to approve an object modification. Approve object, which presents a list of attributes to a participant that he must approve. You define the list and the sequence of attributes, the participants and optionally the escalation steps. You typically set up an e-mail notification to inform the participants about this task. Enter attributes, which allows a participant to enter a set of attributes for a new object. You define the list of attributes, their display name and whether they are optional or mandatory. Request privileges, which allows a participant to assign privileges. You can define the types of privileges (role, permission, group). Certification Campaigns, which allows a participant to certify a subject: a privilege or a user. For example, he can verify all manually assigned users of a role or manually assigned roles of a user. DirX Identity supplies the following default error activities: General Error, which sends an e-mail notification to someone who can analyze and solve the problem. This activity is discussed in more detail in the section \"Request Workflow Error Handling\". Error Handler, which sends an e-mail notification to someone if the workflow ran on timeout (status FAILED.EXPIRED). DirX Identity supplies the following default automatic activities: Apply approved privileges, which implements a privilege assignment after approval was performed. It performs a privilege resolution and starts the necessary updates by creating update events (but only if Enable Real-time Provisioning is set at the target system). Apply object, which either creates the object if it does not yet exist or it performs all attribute changes as defined in the corresponding subject order (created by previous activity steps or workflows). Creation - can be used for all objects besides users. For users, use the Apply User With Assignments activity instead. Modification - can be used for all objects. It adds new attributes and modifies or deletes existing attributes. If the target object is a user, the activity checks whether one or more attributes are permission parameters and performs a privilege resolution if true. Privilege resolution may result in the creation of events for real-time synchronization workflows. Apply orders from ticket, which applies the subject order (if the flag is selected) that can be either a creation or a modification request for an object. In case of a user object it additionally evaluates assignments and starts (if required) approval workflows as child workflows. In conjunction with a Wait for child workflows activity the parent workflow is notified when the child workflow(s) are complete. If you use the Track changes in child workflows flag then all child workflows propagate their provisioning changes to the parent workflow. You can use the Wait for completed provisioning activity to check for completed provisioning of accounts and groups. Apply user with assignments, which either creates the user if it does not yet exist or it performs all attribute changes as defined in the corresponding subject order (created by previous activity steps or workflows). Additionally it evaluates all assignments as defined in the corresponding resource orders (created by previous activity steps or workflows). If an assignment requires approval, it starts an independent approval workflow. Otherwise, it performs a privilege resolution and starts the necessary updates by creating update events (but only if Enable Real-time Provisioning is set at the target system). Acknowledge update, used in manual provisioning workflows to set the states according to the performed action. Note that this activity cannot verify whether the administrator performed the action correctly. This activity sets the TS State account or group states as defined by the State attribute and the membership states as defined by DirX Identity. Calculate VMID GUID, which calculates a VMID global unique identifier and adds the calculated value into a definable object attribute. Calculate Siemens GUID, which calls the Siemens internal GUID generator web service to calculate a global unique identifier and adds the calculated value into a definable object attribute. The activity provides a new GUID value for an identity or an error message if the request is not sufficient or the identity already exists. An optional search can be configured that retrieves the existing GUID if the GUID generation failed because the identity already exists. Calculate Risk, used in risk approval workflows to compute the risk level that a requested privilege assignment would have if it was approved. For new/deleted group assignments, the activity calculates the risk and then merges these new risks with the risk values that have already been calculated to define the new possible risk level. This new risk level is stored in the application state and in the workflow context (name: risklevel). Values of 0, 1, 2 and 3 are possible, where 3 indicates high risk. The user’s old risk level is stored in the workflow context (name: oldrisklevel). If risk checking is not active at the domain, nothing is done and the activity succeeds. If risk checking is active but there is no active risk policy, the activity generates an error. You can use the parameter Force An Error If no actual RiskLevel is available to control how the activity functions when risk is active but risk values have not already been computed for a given user. If this parameter is unchecked, the value 0 is used as the risk level and is stored in the application state and the workflow context. You can configure your workflow’s start conditions to respond to this value in a particular way; otherwise, an error is generated. You can also use the workflow’s risklevel or oldrisklevel context variables for the start conditions of other activities to respond to special values. Check SoD, which checks for SoD violations and automatically starts approval workflows if an SoD violation is detected. Map attributes, which lets you define additional attributes or recalculate existing ones (in this workflow order). You can use it to set constants or to combine attributes to fill another attribute (for example 'cn=${sn} + \" \" + ${givenName}'). Send e-mail, which sends an e-mail notification. Use this type of activity if the e-mail notification is conditional; that is, it’s only executed if a specific workflow application state (see the section \"Handling Request Workflow States\") or state of the previous activity occurs. Activities of this type are visible in the graphical workflow structure. Split order, which delivers an Application State attribute according to the order type. Valid values are Add, Modify or Delete. Wait for completed provisioning, which is a conditional activity that waits for the completion of all related provisioning steps that were initiated by the parent workflow and all child workflows. The activity polls for the expected provisioning results. On completion, the workflow proceeds and the results are available in the workflow context. If some provisioning results are pending, the activity uses the retry mechanism to wait for some period of time before performing the next check. Configure the retry mechanism - for example, for 500 retries of 5 minutes - to be sure that provisioning has enough time to complete. This activity requires correct settings of previous activities: All apply activities have the flag Track changes. If you set it, all resulting provisioning actions of this activity are noted in a list in the workflow context. The Apply Order activity also has the flag Track Changes in Child Workflow. When set, it enforces the child workflows to propagate all resulting provisioning actions to the parent workflow. They are integrated into the list in the workflow context. The filled list is then used by the Wait for completed provisioning activity to check the results. DirX Identity supplies the following default conditional activities: Wait for child workflows is a conditional activity that waits for completion of child workflows. It checks whether child workflows are started. If so, it stops further execution of the workflow. If a child workflow finishes, it notifies this activity about its completion, its states, and the changes it performed if the flag Track Changes in Child Workflow was checked at the preceding Apply Order activity. Parent and child workflows must be correctly and consistently configured. In the parent workflow, the Wait for child workflows activity requires a preceding Apply Order activity where you can set the aforementioned flag. If all child workflows are finished, workflow execution continues. Request workflow activities have a fixed sub-structure that makes workflow design easier and keeps workflow definitions simple. The following figure illustrates this sub-structure: Figure 1. Activity Sub-structure Activity sub-structure elements are: Pre step - an optional step that typically contains a notification to the participants of the main step. Note that failure of this step is logged but has no effect on the state of the activity. Main step - the main part of the activity, for example, an approval step. This step sets the state and application state values for the entire activity. Post step - an optional step that typically contains a notification after the main activity is completed. Note that failure of this step is logged but has no effect on the state of the activity. Error step - an optional definition of the error notification to be sent to the administrator if the main step fails. If this sub activity is not configured, the activity goes to state Failed and the General Error activity is activated. See the section \"Request Workflow Error Handling\" for more details. Escalations step - an optional definition of escalation steps. If escalations are defined, the complete activity is re-calculated with the escalation definition and run again. The previous activity remains in state Failed.Expired. The main step is always present and must be defined. All other steps are optional. You can activate and deactivate them as required. An active step is shown in yellow, while an inactive step is shown in gray. You can define explicit or implicit notifications: Explicit notifications are directly visible in the graphical workflow structure. You use an explicit notification for conditional e-mail notification; for example, an e-mail to be sent if an approval is rejected or if a previous activity fails. Implicit notifications are part of the (fixed) sub-structure of an activity (see the section \"About the Activity Sub-Structure\" for details). You can activate or deactivate this type of activity. Use an implicit notification if it is closely related to the activity’s main task. Typical uses are a notification request to the participants of an approval task or an informational notification after a task has been performed. In some cases, it is up to you to choose between an explicit or implicit notification. Implicit notifications help to keep workflow definitions simple by reducing superfluous or recurring information. You can send notifications in plain text or in HTML format. Most of the request workflow templates delivered with DirX Identity are set up as plain text mails. One example is set up as HTML mail. Default → Assignments → Manager Nomination → Approval by Company Head (notifyBefore) In this example, we did not set up nationalization to show the HTML code in one piece. P.generalquestions { BORDER-RIGHT: #bcd 1px solid; BORDER-TOP: #bcd 1px solid; FONT-SIZE: 10px; BORDER-LEFT: #bcd 1px solid; COLOR: #039; BORDER-BOTTOM: #bcd 1px solid; FONT-FAMILY: Arial,sans-serif} Dear Mrs. ${to.sn}, Dear Mr. ${to.sn}, Please approve the following privilege assignment: User: ${workflow.subject.cn} Privilege: ${workflow.resources[0].dxrassignto@cn} To approve, follow the link: Web Center This is an automatically generated mail. Please do not reply. For general questions about this workflow please contact: Pitton Lavina Workflow: ${workflow.path} Activity: ${name} The SendMail workflow recognizes the HTML format from the DOCTYPE statement at the very beginning. The example shows that you can integrate variables (for example ${workflow.subject.cn}) and conditional statements (here the statement) without any problems. Read more about using variables and conditional statements in the section \"Using Variable Substitution\". Although you can separate pieces of this code into nationalization items, we recommend setting up the whole HTML code first, testing it and then dividing it into nationalization items that you can then reuse. To play with this example, for example, in the My-Company sample domain: Copy the workflow and activate it. Restart the Java-based Server or perform Load IdS-J Configuration. Assign the workflow to any privilege directly. Assign the privilege to a user. An approval workflow should be started and the mail should be sent. The states of the request workflow and its activities are closely related. This section describes request workflow states and activity states. A request workflow object has two types of state: A workflow state, which indicates the general state of the workflow and has fixed values such as Succeeded or Failed. DirX Identity’s request workflow service automatically sets this state. A workflow application state, which is a programmable state that is controlled by the specific workflow definition. For approval workflows, the possible values for the workflow application state are Accepted or Rejected. DirX Identity customers can define their own states, and if there are no special states defined, the application state value can also be empty. The following figure illustrates request workflow states: Figure 2. Request Workflow States Workflow states are: (None) - the Java-based Identity Server is aware of the workflow definition (because it is flagged as active) but instances of the workflow do not yet exist. Running - the request workflow service has started an instance of this workflow definition after receiving an appropriate event. Succeeded - the run of the workflow instance is formally successful; that is, a final activity has succeeded. If this activity contains an application state, the workflow instance inherits it. The request workflow service takes the application state from the calculated value of the final activity or, if there is no value there, the display name of the start condition. If the display name is empty, the application state will be empty, too. *Failed.*state - the run of the workflow instance has failed. Check the activity states to see the details. state indicates the following special states: Failed.Prepare - the state inherited from the relevant activity, which is the activity that an administrator or the request workflow service (for example, by retries) could not resolve before it reached its defined timeout value and entered an error condition. Failed.Incomplete - the request workflow service discovered a structural error in the workflow definition but the workflow has not yet completed because: - a startable activity no longer exists - a running activity no longer exists - a finished final activity is not available Failed.Expired - there was either a timeout inherited by the relevant activity or a timeout of the complete workflow. Failed.Aborted - either a user has cancelled this workflow instance or the timeout was inherited from the relevant activity (a user has cancelled this activity). If a user cancels the workflow, all activities that are still running go to status Failed.Aborted, too. If parallel activities must all succeed, this state is also reached if one of the parallel activities goes to state REJECTED. Failed - any other error inherited from the relevant activity See the section \"Request Workflow Error Handling\" for more information. The following figure illustrates the request workflow activity states: Figure 3. Request Workflow Activities Activity states are: (None) - the activity instance exists but the start condition is not yet satisfied. Running - the activity instance is running due to a satisfied start condition. Succeeded - the run of this activity instance was successful. Failed.Prepare - an exception occurred during the participant constraint calculation that is not ConstraintViolationException. Failed.Temporary - the activity determined that the error that occurred is only temporary (for example, the network is temporarily unavailable). If retries are configured for this activity, the request workflow service starts the activity after the Wait before retry period to resolve the error. If no retries remain, the activity goes to status Failed.Expired. Failed - the run of this activity instance failed due to a non recoverable error and no Error sub activity is configured. WaitInError - the run of this activity instance failed due to a non-recoverable error and an Error sub activity is configured. This error activity is used to send a notification to the administrator, who can resolve the problem and resume the workflow, or cancel the workflow if he cannot resolve the problem. Failed.Aborted - a user cancelled this activity. Cancelled - the request workflow service canceled this (parallel) activity because another user approved this step. Failed.Expired - the run of this activity instance failed due to a timeout or a Failed.Temporary condition. In this case, the request workflow service checks whether retries are configured. If they are, it restarts the activity. If the activity sub-structure contains a pre-step, it reminds the relevant user that there is still a task to do. If retries are not configured, the workflow engine sets the activity state to Failed.Expired and determines whether an escalations step is configured and still available. If no, the activity is completed and remains in the Failed.Expired state. If yes, the escalation definition is evaluated and a new activity is started. See also the section \"Request Workflow Error Handling\" for more information. The workflow calculates participants in an activity by evaluating: The configured participant calculation mechanism; for example, a static list or access policies. The participants filter (it removes, for example, the initiator of this workflow). The participants constraints, as follows: If participant constraints are not defined and no approver is retrieved, the request workflow service assumes a correct approval (activity state = Succeeded, application state = Accepted). If participant constraints are defined and the exception thrown is ConstraintViolationException, the routine (Java class) that the workflow designer has written to calculate the constraints can set the state and application state to any value and return it to the workflow engine. Thus in this case, the workflow designer has complete control over these values. If participant constraints are defined and the exception thrown is not ConstraintViolationException, the workflow’s General Error activity starts and sets this activity and the workflow state to Failed.Prepare to indicates a serious error. The full checker is a built-in service to handle running request workflow instances. It runs on a regular basis and checks all entries that are still in a \"running\" state for special conditions. The full check that works on all running workflows is no longer needed, thus the checkallinterval is set to 0 to disable it by default. Checks for expired workflows and activities. The filter for workflow instances is: |(&(dxrExpirationDate tag: com.siemens.idm.requestworkflow.tasks.FullCheck 0 **1800000** true **0** You can set the full check interval for expiration checks with the parameter in milliseconds. By default, 1800 000 ms = 30 min are set. You can also set the full check interval for all running workflows with the parameter in milliseconds. By default, this mode is disabled. If you want to run with a large number of running workflows, we recommend using these settings: 3600000 and 0 The request workflow service handles various types of errors. See the section \"Understanding Request Workflow States\" for details. For each request workflow activity, you can configure an Error sub-structure element that allows you to define a specific error notification to be sent to the administrator if the activity’s main step fails (see the section \"About the Activity Sub-Structure\" for details). If a non-recoverable error occurs in an activity, it goes to state WaitInError. If the Error sub-activity is not defined, the activity goes to state Failed and the default error activity General Error takes control. For each workflow, the General Error activity is configured by default as Error Activity, which sends a notification to the workflow initiator that something is wrong. You can create your own workflow-specific or workflow group-specific error activities and link them to a workflow or a group of workflows to implement special behavior. The request workflow service calls the General Error activity once during each workflow re-calculation (either triggered by an internal status change event from an activity or by a full check from the workflow engine itself). The General Error activity: Checks all activities to determine whether they are in a Failed.state that is not Failed.Expired or Failed.Temporary. For activities that meet this determination, the request workflow service aborts the workflow and sets the workflow state and application state to the states of the failed activity. If several activities in a workflow meet the determination, the request workflow service selects one at random and uses its states. You can configure an ErrorHandler for workflow timeout (status FAILED.EXPIRED). Simply add this activity to your workflow definition. It should not be connected to any other activity. It sends an e-mail if the workflow times out. People activities within request workflows create dynamic pages in Web Center. For complete nationalization of Web Center pages, you need to Use the Web Center’s nationalization feature for all static pages (see the chapter \"Adding Languages\" in the Identity Web Center Customization Guide). Use the Request Workflow’s nationalization feature for all dynamic pages. The next section describes the nationalization concept for dynamic pages. Note that DirX Identity is delivered by default with message items in the locales en and de. DirX Identity’s concept for nationalization of dynamic Web Pages and also mail content is based on the Java concept for nationalization. A text element can keep one or more message items that are replaced during runtime with text that corresponds to the user’s requested language. An example for a mail body within a request workflow activity is: #{Request Workflows/Assignment Workflows.AssignmentOfPrivilegeRejected_body} #{Common Text.ContactPersonsThatRejected} #{Request Workflows/Assignment Workflows.AssignmentOfPrivilegeRejected_loopline} #{Common Text.AutomaticGeneratedMail} #{Common Text.GeneralQuestions} If the English language is requested, this generic text definition is resolved as follows: The assignment of privilege ${workflow.resources[0].dxrassignto@cn} to user ${workflow.subject.cn} was rejected. Please contact the persons that rejected the request: - Activity step: '${activity.name}': User ${participant.cn} with reason: ${activity.reason} This is an automatically generated mail. Please do not reply. For general questions about this workflow please contact: ${workflow.owner.mail} + Workflow: ${workflow.path} + Activity: ${name} For example, the definition #{Common Text.AutomaticGeneratedMail} is resolved to This is an automatically generated mail. Please do not reply. Note that message items can contain variables, for example ${workflow.subject.cn} that are replaced during runtime with the corresponding value, in this case the common name of the subject. For more information about this concept, see the section \"Using Variable Substitution\" in the DirX Identity Application Development Guide. Some fields within DirX Identity support nationalization. Typical fields are the subject or the body of a mail definition. To determine whether a field supports nationalization, use the Identity Manager to view the description of the individual field in the online help. Alternatively, you can click in a field and view the context menu, which may show you the menu items of the nationalization wizard. In read mode, one menu item is available: Show resolved text - click this item to resolve all message items to the language definitions defined by the Default Language field in the domain object. In edit mode, these menu items are visible: Insert a message - the nationalization wizard opens and presents the central message item tree under Configuration → Nationalization. Select a message item object in the language of your choice and then select a message from the list of message items. The wizard inserts the corresponding message item at the cursor location. Insert a message relative - the nationalization wizard opens and presents the local message items for this workflow. Select a message item object in the language of your choice and then select a message from the list of message items. The wizard inserts the corresponding message item at the cursor location. Show resolved text - click this item to resolve all message items to the language definitions defined by the Default Language field in the domain object. To optimize nationalization message management, you can define messages at two locations: You can define more common message items in the central Nationalization folder in the Domain Configuration, which allows you to reuse messages in many objects. Message references to these items can be seen as absolute references. You can define specific message items together with your configuration object, for example, the request workflow definition. Message references to these items can be seen as relative references. If you copy this type of configuration object, the message items are also copied and the references are still valid and point to your copied configuration object. Use both methods to structure your message catalog. Try to reuse messages as much as possible. DirX Identity provides three methods for customizing request workflow nationalization: Local message items - you can copy a request workflow together with its local nationalization items. You can change the local items because they are copies of the original objects. You can also extend them with other locales. Central default message items (under the path Nationalization) - you can extend the existing default message items with additional locales but you cannot change the delivered default message items. Custom default message items (under the path Nationalization → Customer Extensions) - if you need additional central message item definitions, define them under this folder. Use folders to structure the items accordingly. Set up items for all required locales. You can use the built-in features of the Identity Manager to create and maintain message items, particularly if you create new workflow definitions with the corresponding message items in the primary language. Use an external nationalization editor primarily to Check the consistency of a large number of message items Add a new language The export file format is comma-separated values (CSV). You can use any tools that allow you to edit CSV files correctly. The following sections explain how to export and import nationalization information and how to edit the items with Microsoft Excel. Exporting Nationalization Information You can export the complete nationalization information into one file or you can select specific parts of the information: File → Export Nationalization Items - use this menu item from the menu bar to export all nationalization information into one file. A file selection dialog asks for the file location and name. Export Nationalization Items - use this context menu item at a message item folder or message item to export a subtree or a single item into a file. A file selection dialog asks for the file location and name. You can specify the delimiter that is used with the parameter nationalization.csv.delimiter in the file dxi.cfg. By default, we use a semicolon ';'. Note: after changing this file, you must restart the Identity Manager. The format of the file looks like this if two languages are exported (Excel representation): path key de en Prov:Configuration/Nat…​ dxrStartDate Start Datum Start Date mobile Mobiltelefonnummer Mobile …​ Prov:Configuration/Nat…​ RequestApproval_body Bitte genehmigen Sie die folgende Anforderung: Benutzer : ${workflow.subject.cn} Berechtigung: ${workflow.resources[0].dxrassignto@cn}\" \"Please approve the following request: User: ${workflow.subject.cn} Resource: ${workflow.resources[0].dxrassignto@cn}\" …​ The first line is the header line. The field definitions are as follows: path - the object path of this message item (for example, \"Conn:Configuration/Nationalization/Attribute Descriptions\"). The last part is the name of the message item (here \"Attribute Descriptions\"). key - the key in the file (for example, mobile). language - a column for each language in alphabetical order. The next lines contain collections of message items (the key and the information for each language). The first line contains the path, while the last line is empty and serves as a separator. Editing in an External Editor You can use any editor that allows editing of CSV files. Examples are Microsoft Excel or Microsoft Access. Before you start editing a large amount of data the first time, we recommend that you test the editor with a small amount of data. Perform an export, edit the data and then import it into DirX Identity. You should then check the following: Were national characters handled correctly? Did the editor handle multi line message items correctly? Could you create a new key with no problems (result should be new message items)? If all these issues worked well, you can start editing. We tested with Microsoft Excel. Here are some hints on how to work with it: Use a colon ';' or a comma ',' as a delimiter for the export. For ease of handling, you should use the default Excel delimiter, which depends on your language settings. The colon is the default delimiter. Double-click the CSV file. Excel should open it with correctly populated columns. If not, you used the wrong delimiter. Now you can edit the file with all Excel features. You can perform these operations: Change an existing language information field. This action changes the corresponding line in the message item. Populate an empty field (translate it from another language). Copy the language item (for example, in the English language) to the empty field. After import, this operation populates the corresponding line in the message item. Add a new line with a key and language information. After import, this operation adds a new line to the corresponding message item. Delete a line with key and language information. After import this removes the line from the corresponding message item. Add a new column to add a new language. Write the language code in the header line (for example 'it'). After import this creates the new message items. You can reorder the language columns for easier editing but do not touch the path or key columns. You can check easily if cells for a specific language are not filled correctly. There are some restrictions: Do not destroy the structure of the file. In particular, do not remove or reorder the path or key columns. These columns must be the first two columns. If you created a new language column and during import the option \"Create empty objects\" is set, a large number of empty objects may be created. There is no way to remove these objects as a whole. If you change the language code in the header, no rename is performed. Instead all objects are created with the new name. The old objects with the old name persist and must be manually removed. Importing Nationalization Information To import exported and edited nationalization information files: Back up the database to be able to revert to the previous state (optional). Select File → Import Nationalization Items from the menu bar within in the Identity Manager. A file selection dialog asks for the file location and name of the file to import. It also contains these parameters: Create empty objects - setting this option will create menu items that contain only keys but no language data. This option is useful for creating empty message items that you populate later on in the Identity Manager. Report object creation as error - setting this option will cause all object creations to be reported as errors. This option is useful if you made changes only in your nationalization information and you want to be warned if you destroyed something. Note that the import method automatically calculates the delimiter from the header line in the file. The process used to determine the correct language to use differs depending on the DirX Identity feature. Web Center Pages The language in which a Web Center page is displayed (this is valid for static and dynamic pages) is calculated in this sequence: The user can select a language from the Web Center language selection. This value is stored in a cookie and is used during the next login. Note: if you delete the cookie, the language setting must be repeated. After login of a user, the configured browser language is used. Note: if SSO with NetWeaver is configured, NetWeaver passes the language setting to Web Center. If the language cannot be evaluated or the evaluated language cannot be resolved (no nationalization text available), English is used by default. Notification Resolution The language that is used to resolve a defined notification object is calculated in this sequence: The Language field of the notification object is evaluated. If this field resolves to a valid language, this language is used. Keep in mind that the resolved message text is shown as ???*original text???* if nationalized messages are not available for that language or if the original text for that language doesn’t exist. If the language cannot be evaluated and resolves to null, English is used by default. DirX Identity handles message items during runtime as follows: During the Java-based Server startup, all message items are read and resolved to Java resource files. If you request a re-load of the server configuration (Load IdS-J Configuration), all message items are re-loaded. The load procedure resolves message items to absolute paths in a pre-defined folder structure: The common path for all message items starts with install_path*\\ids-j-domain-S*n*\\tmp\\nat\\classes\\* Message items for request workflows are located under rqwfs. Global items are resolved to the sub-folder gen. Local items are resolved to the sub-folder wfs. Under the global and workflow paths, the items are located in the corresponding item structure. You will find message files for all locations under this path. The file name is:* messages_*locale*.properties* The content appears as follows if it is identical to the message item content: # #Sun Feb 15 12:51:48 CET 2009 RequestWasRejected_body=We regret to inform you that your self-registration request was rejected. DearUser_body=Dear User, For example: The local definitions of the Customer Self Registration message items reside beneath the path Definitions → Default → Users → Customer Self Registration → _Nationalization. After loading, the path is:_ install_path_*ids-j-*domain*-S*n*\\tmp\\nat\\classes\\rqwfs\\wfs\\Default\\Users\\Customer Self Registration\\_Nationalization* You will find the files messages_en.properties and messages_de.properties Load Effort for Nationalization Reading and processing the nationalization information during startup or during Load IdS-J Configuration of the Java-based Server requires some additional time. You can measure this overhead with the following procedure: Open the Web Admin Select the logging configuration section. Add the Java Class com.siemens.idm.server.nationalization and set the logging to Finest. Restart the Java-based Server. Check in the server log files for this string: \"Loading resource files takes … ms\" Selection of request workflows is different for creation, modification and assignment workflows and also depends on the calling source (Web Center, Manager or Web Services). The next sections describe request workflow selection for: Creation workflows Modification workflows Assignment workflows The selection methods for creation workflows depend on the calling client: Web Center Identity Manager Web Services Workflow Selection from Web Center Workflow selection depends on the type of license you have. If you have a Business Suite license, you cannot run request workflows. In this case, the ability to create a user depends on the creation access policies established for this user. For more information, see the section \"Policies for Object Creation\" in \"Managing Access Policies\" in \"Delegated Administration\" in the \"Managing Policies\" chapter of the DirX Identity Provisioning Administration Guide. If you have the Professional Suite license, you can create objects in three ways (note that you can set up a mix of these methods within one Web Center application): a. Object creation via request workflows (default): If you click, for example, the \"Add user\"' menu item, the Web Center application retrieves all workflows: that the logged-in user is allowed to execute (this depends on the access policies established for this user) that have the Type field in the When Applicable section of the workflow set to Create that have the Subject field set to User and that have an empty Resources field If more than one creation workflow is found, the list is presented to the user for further selection. If only one workflow is found, this workflow is started immediately. If no workflow is found, an error is returned to the user that he is not allowed to execute any creation workflows. The same algorithm is applied if the creation for a different object type is requested (for example, a Role). b. Object creation via the Create user by request workflow flag feature: You can customize Web Center to use the Create user by request workflow flag feature. Collect all necessary information to create an object (for example, user attributes, assignment of privileges) and then save the user object. This results in a start of a request workflow that stores the object later on. Setting the Create user by request workflow flag at the domain object influences the save operation of the object. Instead of saving the object directly, the save operation is converted to a request workflow start where the entered data is transferred as input parameters in the form of an order object. The corresponding activity of the request workflows defines when to store the object (typically this activity is named Apply changes). c. Object creation via Creation Access Policies You can customize Web Center to use Creation access policies. For examples, see the pages set up for the Business Suite license. Workflow Selection from Identity Manager Workflow selection depends upon the type of license you have. If you have a Business Suite license, you cannot run request workflows. In this case, objects are always stored directly when pressing the Save button. If you have a Professional Suite license, the creation depends on the Create user by request workflow flag at the domain object: If the flag is not set, an object is created directly when clicking the Save button. If the flag is set, the system tries to start a corresponding request workflow when clicking the Save button. For example, if a user object is to be created, the Identity services retrieve all workflows: that the logged in user is allowed to execute (this depends on the set up access policies for this user) that have the Type field in the When Applicable section of the workflow set to Create that have the Subject field set to User and that have an empty Resources field If only one workflow is found, this workflow is started immediately. If more than one workflow or no workflow is found, an error is returned to the user if the Create user directly if no workflow available flag is not set. Otherwise the user entry is created directly. The same algorithm is applied if the creation for a different object type is requested (for example, a Role). Workflow Selection from Web Services Workflow selection depends on the Create user by request workflow flag at the domain object: If the flag is not set, an object is created directly when executing an Add Object operation. If the flag is set, the system tries to start a corresponding request workflow when executing an Add Object operation. For example, if a user object is to be created, the Identity services retrieve all workflows: that the requesting service is allowed to execute (this depends on the access policies established for the user account that is used by the service to authenticate) that have the Type field in the When Applicable section of the workflow set to Create that have the Subject field set to User and that have an empty Resources field If only one workflow is found, this workflow is started immediately. If more than one workflow or no workflow is found, an error is returned to the service if the Create user directly if no workflow available flag is not set. Otherwise, the user entry is created directly. The same algorithm is applied if the creation for a different object type is requested (for example, a Role). This section describes the request workflow selection methods for modification workflows. You can set up Attribute Policies for any object type to define the request workflows for attribute modification. (See the section \"Attribute Policies for Users\" in \"Managing Attribute Policies\" in the chapter \"Managing Policies\" in the DirX Identity Provisioning Administration Guide for details. If an attribute of an object is changed, the service layer checks the change against the defined attribute policies: It retrieves all attribute policies for the relevant object type (for example dxrUser). It checks whether the changed attribute is part of the Selected list in the Configuration tab of the attribute policy. If no policy matches, the attribute is changed directly. If a policy matches, the configured approval workflow is started. If more than one policy is configured for an object type (for example, one for mail changes and one for department changes), and both attributes are changed, for each affected policy one workflow is started. If a workflow link is set at the attribute policy, the referenced workflow is started. If no link is set, the workflow being started is selected by evaluating the When Applicable section of all workflows. This mechanism is performed independently for each affected policy. If no matching workflow is found for a policy when saving the object, an error message is displayed. If an attribute policy contains multiple attributes and several of them are changed, only one approval workflow is started. Note that Java-based workflows do not evaluate attribute policies due to performance reasons. They only send events if enabled for an object type. DirX Identity provides two mechanisms to select the correct workflow for a specific privilege: Direct workflow selection - sets a direct link from the privilege to the workflow Rule-based workflow selection - sets up When Applicable at each workflow definition The algorithm is slightly different depending on the assignment environment. We distinguish between these types for user-to-privilege assignments: User-to-Privilege assignment - assignment, modification or removal of a privilege to or from a user (the corresponding operations for the assignment are create, modify, delete) Segregation of duties (SoD) - an SoD policy requests an approval workflow for a user-to-privilege assignment Re-approval - requires regular starts of re-approval workflows for a user-to-privilege assignment Selection of approval for approval of links between privileges is handled in a similar way. Workflow Selection Algorithm for User-to-Privilege Assignments The calculation mechanism for workflow selection works as follows: Calculate all workflows the logged-in user is allowed to execute. You can define the number of workflows for a specific user via access policies. (See the section \"Managing Access Policies\" in the section \"Delegated Administration\" in the chapter \"Managing Policies\" in the DirX Identity Administration Guide for details.) The next steps depend on the direct workflow assignments at the privilege and the rule definitions in the When Applicable tab of the request workflow definitions: If a privilege is flagged with \"Requires Approval\", the service evaluates the type of operation (create, modify or delete) and request from the request workflow engine (running in the Java-based Server) to start a request workflow. The request workflow engine checks whether a direct link to a workflow is set for this privilege and for this type of operation. If yes, it takes this workflow and starts it. If no, it selects all workflows that fit with the defined Type (the operation), the Subject type and the Resource type(s). If an optional Condition is set, it filters the list of workflows accordingly. If the list still contains multiple workflows, it takes the workflow with the highest priority and starts it. If there are several workflows with the highest priority, it takes one by random. If the list is empty and operation type is create, an error is returned to the calling routine. Otherwise it tries to use the workflow for create → start again with step 2 and type create. Workflow Selection Algorithm for SoD The calculation mechanism for workflow selection works as follows: Calculate all workflows the logged in user is allowed to execute. You can define the amount of workflows for a specific user via access policies. (See subsection \"Managing Access Policies\" in section \"Delegated Administration\" in chapter \"Managing Policies\" in the DirX Identity Administration Guide for details.) The next steps depend on the direct workflow assignments at the privilege and the rule definitions in the tab When Applicable of the request workflow definitions: The service sets the operation to SoD and request from the request workflow engine (running in the Java-based Server) to start a request workflow. The request workflow engine checks whether the direct workflow link for SoD is set for this privilege. If yes, it takes this workflow and starts it. If no, it selects all workflows that fit for operation type SoD, the Subject type and the Resource type(s). If an optional Condition is set, it filters the list of workflows accordingly. If the list still contains multiple workflows, it takes the workflow with the highest priority and starts it. If there are several workflows with the highest priority, it takes one by random. If the list is empty, it tries to use the workflow for create → start again with step 2 and type create. Workflow Selection Algorithm for Re-Approval The calculation mechanism for workflow selection works as follows: Calculate all workflows the logged-in user is allowed to run. You can define the number of workflows for a specific user via access policies. (See the subsection \"Managing Access Policies\" in the section \"Delegated Administration\" in the chapter \"Managing Policies\" in the DirX Identity Administration Guide for details.) The next steps depend on the direct workflow assignments at the privilege and the rule definitions in the tab When Applicable of the request workflow definitions: The service sets the operation to re-approve and request from the request workflow engine (running in the Java-based Server) to start a request workflow. The request workflow engine checks whether the direct workflow link for re-approval is set for this privilege. If yes, it takes this workflow and starts it. If no, it selects all workflows that fit for operation type re-approval, the Subject type and the Resource type(s). If an optional Condition is set, it filters the list of workflows accordingly. If the list still contains multiple workflows, it takes the workflow with the highest priority and starts it. If there are several workflows with the highest priority it takes one by random. If the list is empty it tries to use the workflow for create → start again with step 2 and type create. Workflow Selection Algorithm for Approval of Links between Privileges The calculation mechanism for workflow selection works as follows: Calculate all workflows the logged in user is allowed to run. You can define the number of workflows for a specific user via access policies. (See the subsection \"Managing Access Policies\" in the section \"Delegated Administration\" in the chapter \"Managing Policies\" in the DirX Identity Administration Guide for details.) The next steps depend on the direct workflow assignments at the privilege and the rule definitions in the tab When Applicable of the request workflow definitions: If a privilege is flagged with \"Requires Approval\" in the section Privilege Assignment Configuration, the service evaluates the type of operation (assign or remove) and request from the request workflow engine (running in the Java-based server) to start a request workflow. The request workflow engine checks whether a direct link to a workflow is set for this privilege and for this type of operation. If yes, it takes this workflow and starts it. If no, it selects all workflows that fit with the defined Type (the operation), the Subject type and the Resource type(s). If an optional Condition is set, it filters the list of workflows accordingly. If the list still contains multiple workflows, it takes the workflow with the highest priority and starts it. If there are several workflows with the highest priority, it takes one at random. If the list is empty and operation type is create, an error is returned to the calling routine. Otherwise, it tries to use the workflow for create → start again with step 2 and type create. To execute a request workflow, the services calculate the URL to which the HTTP request is to be sent. The steps are: The service performs a search for the related IdS-J server. The filter used is: (&(objectClass=dxmIDMServer)(!(dxmType=workerContainer))(dxmDomain=)) If no server configuration object is found for the domain, the search is repeated with the following filter: (&(objectClass=dxmIDMServer)(!(dxmType=workerContainer))(!(dxmDomain=*))) This filter is applied for compatibility reasons, to find a server if no domain is explicitly configured. The link to the service (dxmService-DN) defines as set of attributes: dxmSpecificAttributes(ssl) - an SSL connection is established if this value is 'true'. dxmDataPort - this port number is used if SSL is not enabled. dxmSecurePort - this port number is used if SSL is enabled. The link to the system object (dxmSystem-DN) defines the host address. If the host address at the system object is empty, the host field of the service object is taken. The resulting URL is as follows: If SSL is not enabled: http://$(dxmAddress):$(dxmDataPort)//RequestWorkflow/reqwfsvc If SSL is enabled: https://$(dxmAddress):$(dxmSecurePort)//RequestWorkflow/reqwfsvc DirX Identity comes with a set of default request workflows that are sufficient for many purposes. Nevertheless, details must be adapted to the customer environment or new workflows should be created. The following sections explain how to customize the default request workflows: Working with Variable substitution Implementing an activity Implementing a Java class for finding participants Implementing participant filters and constraints For a discussion of request workflow management, see the chapter \"Managing Request Workflows\" in the DirX Identity Provisioning Administration Guide. DirX Identity provides an easy-to-use variable substitution mechanism that can be used to: define variable text sections for e-mails to be substituted during runtime. A typical application of this mechanism is e-mail texts. You can use variables in all text fields like From, To, Subject and Body. You can use simple variables to insert small text pieces like an e-mail address, or you can use control-flow statements with included variables to create more complex structures such as several lines of text coming from lists of objects (for example, a list of all workflow participants). calculate participants for approval activities according to a dynamic specification. Here is an example that shows how the mechanism works within e-mails: User '${workflow.initiatorEntry.cn}' launched the workflow '${workflow.name}' for '${workflow.subject.cn}'. This request was rejected. Please contact the persons that rejected the request: - User ${participant.givenName} ${participant.sn} rejected with reason: ${workflow.activity.reason} This is an automatically generated mail. Please do not reply. At runtime, this template is expanded to: User 'Donegan Mark 1234' launched the workflow 'Create User' for 'Sober Marietta 9876'. This request was rejected. Please contact the persons that rejected the request: User Fred Strober rejected with reason: Not the right person. User Donald Duck rejected with reason: Do not like him. This is an automatically generated mail. Please do not reply. Read the next sections for details about e-mail text variables. Here are several examples that apply to participant calculation: ${workflow.subject.manager} - retrieves the manager(s) of the subject (uses the manager link to look up the manager DNs) ${workflow.subject.owner} - retrieves all owner of the subject (uses the owner link to look up the owner DNs) ${workflow.subject.manager.manager} - retrieves the manager of the subject’s manager (useful for escalation) ${workflow.subject.dxrLocationLink.manager} - retrieves the manager of the location the subject is assigned to ${previousParticipants.manager} - retrieves the manager(s) of the previous activity during an escalation Use the static selection of the Participants tab of an approval definition to setup such definitions. For a detailed description see the section Participant Calculation below. A variable definition looks like this: ${root.object.object…​object.attribute} It starts with a root object that can be composed of many sub-objects. The last element must be an attribute. Root element Root elements are: server - provides some general variables of the Java-based Server. workflow - represents the start element of the current workflow instance. From here you can access sub elements and structures. - if nothing is specified, the current activity is assumed. Examples: $(workflow.subject.mail) This statement retrieves the mail attribute of the subject this workflow handles. $(workflow.subject.manager.mail) This statement retrieves the mail attribute of the subject’s manager. This section explains the structures that can occur within request workflows. This has to do with the orders that such a workflow contains. The general structure is: Workflow → One subject order → Zero or more resource orders Note that the resource orders are about assignments and not the objects itself. From here you can access the subject and the real resources: ${workflow.resources[0].dxrassignfrom@…​} - allows accessing the subject (so this is equivalent to the workflow.subject construct).* ${workflow.resources[0].dxrassignto@…​}* - allows accessing the resources. Examples and how to access information: User modification: Workflow → User ${workflow.subject.cn} - name of the user ${workflow.subject.mail} - mail address of the user ${workflow.subject.manager.mail} - mail address of the user’s manager ${workflow.subject.dxrLocationLink.manager.sn} - the surname of the location manager Privilege assignment: Workflow → User → Assignment ${workflow.resources[0].dxrStartDate} - the start date of the assignment ${workflow.resources[0].roleParameter_Project@value} - the value of the role parameter Project. ${workflow.resources[0].roleParameter_Project@oldvalue} - the value of the role parameter Project. ${workflow.resources[0].roleParameter_Project@modified} - indicates the modification of the Project role parameter. The value is either TRUE or FALSE. ${workflow.resources[0].dxrassignfrom@mail} - the mail address of the user (you can use workflow.subject.mail instead). ${workflow.resources[0].dxrassignto@cn} - the name of the privilege. ${workflow.resources[0].dxrassignto@owner.mail} - the mail address of the privilege owner. ${workflow.resources[0].dxrassignto@owner.manager.mail} - the mail address of the privilege owner’s manager. Multiple privilege assignments: Workflow → User → Assignments You can use the same definitions as shown for one assignment if you define the index with control constructs. Access certification: Workflow → Privilege → Users ${workflow.resources[0].dxrStartDate} - the start date of the assignment ${workflow.resources[0].roleParameter_Project@value} - the value of the role parameter Project. ${workflow.resources[0].roleParameter_Project@oldvalue} - the value of the role parameter Project. ${workflow.resources[0].roleParameter_Project@modified} - indicates the modification of the Project role parameter. The value is either TRUE or FALSE. ${workflow.resources[0].dxrassignfrom@description} - the description of the privilege (you can use workflow.subject.description instead). ${workflow.resources[0].dxrassignto@sn} - the surname of the user. ${workflow.resources[0].dxrassignto@mail} - the mail address of the user. ${workflow.resources[0].dxrassignto@manager.mail} - the mail address of the user’s manager. ${workflow.resources[0].dxrassignto@dxrLocationLink.manager.sn} - the surname of the location manager. Note that in the examples we access a specific object if multiple objects are available (resources[0]). Use control structures to evaluate complete lists of objects. The Java-based Server reads some variables at startup. The following attributes are available: Domain - the domain name for which this server works TechnicalDomain - the technical domain name for which this server works The available attributes of a workflow instance are: absoluteDisplayName (string) - the path of the workflow instance. It contains the display name and all preceding folder names separated by \"/\" . See path for the display name of the workflow definition. activities (list of objects) - the list of activities. applicationState (string) - the instance’s (application) logical state. This state is calculated at the end of a workflow run depending on the final or erroneous activity. context (map) - a hash list of customer-defined variables (name / value pairs). Can be empty. contextAttributes (map) - a hash list of customer-defined variables (name / value pairs). Can be empty. Note that this is just an alternative to using “context”. Keep in mind that all (string) context variables are stored as specific attributes in LDAP, too (LDAP attribute: dxmSpecificAttributes). Context variables that are added or modified are in sync with the LDAP attribute. Variables that are deleted from the context are not synchronized to the LDAP attribute. Therefore when deleting a variable from the context you additionally should create an own variable indicating that the original variable is deleted. Then this new variable can easily be processed using \"dxmSpecificAttributes\". displayName (string) - the human-readable name of this workflow instance. endTime (string) - the date and time in ms (calculated from 1.1.1970) at which the workflow run finished. expirationTime (string) - the date and time at which the workflow instance expires. This is the workflows start time plus the configured timeout value. initiator (string) - the user that initiated this workflow. initiatorEntry (object) - the initiator object with all attributes. path (string) - the path of the workflow definition. It contains the display name and all preceding folder names separated by \"/\". See absoluteDisplayName for the display name of the workflow definition. resources (list of objects) - the list of resource objects Examples: roles, permissions, groups, users. You can access specific attributes of user to privilege assignments: Access to a new role parameter value:* ${workflow.resources[0].roleParameter_*name*@value}* For modifications, you can also access the old value: ${workflow.resources[0].roleParameter_*name@oldvalue}* Please keep in mind that this expression only works in emails that are sent before the object has been changed in an “Apply Changes” activity. This flag allows recognition whether the value was changed (you can use it for conditions):* ${workflow.resources[0].roleParameter_*name*@modified}* The delivered value is either TRUE or FALSE. Example for role parameter Project: ${workflow.resources[0].roleParameter_Project@value} You can access specific parameters of accounts (works only if the assignment is of type group): ${workflow.resources[0].dxrassignto@account_*name}* Example for the description attribute: ${workflow.resources[0].dxrassignto@account_description} This definition retrieves the description attribute of the primary account. You can access specific parameters of a target system (works only if the assignment is of type group): ${workflow.resources[0].dxrassignto@targetsystem_*name}* Example for the description attribute: ${workflow.resources[0].dxrassignto@targetsystem_description} This definition retrieves the description attribute of the target system. You can access specific parameters of an assignment: ${workflow.resources[0].controllerLink.attribute} Example: ${workflow.resources[0].controllerLink.mail} This definition retrieves the DN of the person(s) that performed the access certification approval. ${workflow.resources[0].userInfo} This definition retrieves the flag that can be set by the approver during an access certification to indicate that this user shall be informed via e-mail. ${workflow.resources[0].typeOfOrder} This definition retrieves the type of the order. The possible values are ADD, MODIFY or DELETE. subject (object) - the subject object of this workflow Examples: the user to be created, the user to assign a privilege, …​ startTime (string) - the date and time in ms (calculated from 1.1.1970) when the workflow run was started. state - the workflow state (SUCCEEDED, FAILED, …​). UID (string) - the workflow instance’s unique ID. The available attributes of an activity instance are: activityType (string) - the type of activity, for example: applyChange, enterAttributes, approveCreate, e-mail etc. activitySubType (string) - currently equal to the activityType. applicationState (string) - the instance’s (application’s) logical state (for example REJECTED or ACCEPTED). approvalResult (string) - the approval result of the activity (for example REJECTED or ACCEPTED). approvers (list of objects) - the list of participants for this activity that really approved/rejected. This attribute represents a list of users. You can access all existing user attributes. category (string) - one of the categories \"operational\" or \"errorhandler\". context (map) - a hash list of customer-defined variables (name / value pairs). This attribute can be empty. Example: ${workflow.context.myVar} retrieves the value of the context variable myVar for further processing. Keep in mind that all (string) context variables are stored as specific attributes in LDAP, too (LDAP attribute: dxmSpecificAttributes). Context variables that are added or modified are in sync with the LDAP attribute. Variables that are deleted from the context are not synchronized to the LDAP attribute. Therefore when deleting a variable from the context you additionally should create an own variable indicating that the original variable is deleted. Then this new variable can easily be processed using \"dxmSpecificAttributes\". endTime (string) - the date and time in milliseconds (ms) (calculated from 1.1.1970) at which the workflow run finished. escalationLevel (integer) - current escalation level. 0 escalation not yet started > 0 level of escalation expirationTime (string) - the date and time at which the workflow instance expires. This is the workflows start time plus the configured timeout value. immutableJob (object) - the job definition of this activity. It contains these attributes: baseName (string) - the base name at which the job’s classes and lib directory reside. className (string) - the class name of the associated job implementation. extensionsName (string) - the name of the server-extensions where the job resides. name (string) - the job name. params (map) - name/value pairs of job-specific information. interactiveTaskDescription (list of interactiveAttributes) - defines the user task to be performed at the Web interface (for example, to enter attributes). Attributes for interactiveAttributes are: description - the display name of this attribute at the Web interface. mandatory - defines mandatory attributes if set to true. Otherwise the value is false. name - the name of this attribute (typically the LDAP name). master (string) - the master activity. When calculating approvers and n approvers are found, the master activity is expanded to n activities. name (string) - identifies the activity within the workflow. participantEntries (list of objects) - the list of participants for this activity. This attribute represents a list of users. You can access all existing user attributes. reason (string) - the reason why the approver accepted or rejected the approval request. startTime (string) - the date and time in ms (calculated from 1.1.1970) at which the workflow run started. state (string) - the activity state (SUCCEEDED, FAILED, …​). timeout (string) - the timeout of this activity in milliseconds (ms) (calculated from 1.1.1970). Control structures allow you to generate more complex text structures. Controls are surrounded by , where the blank between … … The condition compares two values, the overall syntax is operand1 comparator operand2 The comparator is one of: == | eq | equals - compares whether the two operands are equal. != | ne | notequals - compares whether the two operands are not equal. | gt - checks whether the first operand is greater than the second one. ⇐ | le - checks whether the first operand is smaller than the second one or equal to the second one. >= | ge - checks whether the first operand is greater than the second one or equal to the second one. Examples: Dear Mrs. ${to.sn}, Dear Mr. ${to.sn}, Dear Mrs./Mr. ${to.sn}, The previous statement tests whether the gender attribute of the participant is filled. If yes, it defines the correct salutation for male and female participants. If not, it defines a more general salutation. ... ... + ... ... For Statement The for statement allows you to handle loops. The syntax is: … where variable is the name of a placeholder which can be subsequently used and list a list of “ “ delimited values (either constants or delivered by a placeholder whose type is a list). Examples: - User ${participant.cn} rejected with reason: ${activity.reason} which could result in User Huber Fritz rejected with reason: Do not like this person User Berner Hans rejected with reason: Maybe a security risk? Note that the line \"- User ${participant.cn} rejected with reason: ${activity.reason}\" acts like a template. You can also define several lines as template text. Java Statement The Java statement allows you to define your own text structures. The syntax is: where classX represent Java classes that must implement the interface JavaPlugin. Example: is resolved to Hello here I am! Hello here I am! where placeholder.TestPlugin is defined as package placeholder; import java.io.PrintWriter; import com.siemens.idm.text.parser.JavaPlugin; import com.siemens.idm.text.parser.ParserException; import com.siemens.idm.text.parser.TextParser; public class TestPlugin implements JavaPlugin { public void execute(TextParser parser, PrintWriter out) throws ParserException { out.println(\"Hello here I am!\"); } } Java Function The Java statement allows you to define your own text structures. The syntax is: where class - represents a Java classname that must implement the interface JavaPluginExt. input - is a string / an expression that is passed to the specified Java class (execute method). Example: If input = ${workflow.initiatorEntry.dayOfBirth} and dayOfBirth has the value 19700218230000Z the function retrieves 1970-02-19 as result. The class com.siemens.idm.jini.util.GeneralizedTime2ISO8601 is defined as: package com.siemens.idm.jini.util; import java.io.PrintWriter; import java.text.SimpleDateFormat; import com.siemens.date.GeneralizedTime; import com.siemens.idm.text.parser.JavaPluginExt; import com.siemens.idm.text.parser.ParserException; import com.siemens.idm.text.parser.TextParser; public class GeneralizedTime2ISO8601 implements JavaPluginExt { /** * transforms given string from generalizedTime format to yyyy-MM-dd format. * @param parser the parser * @param toBeProcessed the string to be transformed * @param out write transformed string to the PrintWriter * @return transformed string; NULL if toBeProcessed == null or not a GeneralizedTime if invalid format */ public void execute(TextParser parser, String toBeProcessed, PrintWriter out) throws ParserException { String res = toBePocessed; if (res == null) { out.println(\"NULL\"); } //out.println(\"String: \" + res); GeneralizedTime t; try { t = new GeneralizedTime(s); } catch (Exception e) { // error out.println(\"not a GeneralizedTime\"); return; } SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\"); String result = dateFormat.format(t.getDate()); out.println(result); // result } } For approval activities, DirX Identity can run in two modes that depend on the setting of the Reduce Runtime Activities flag that is visible in the Participants tab of a request workflow definition. The meaning of the values is: false (default) - besides the original master activity one activity for each approver is created. This mode is compatible with versions prior to 8.2A. true - besides the original master activity it keeps only one common activity that handles all approvers together. Use the corresponding variables in your mail text to guarantee correct resolution during runtime. For additional information how to fill the address fields see the section Filling the Address Fields. Reduce Runtime Activities = false Use the following variable references in mails: To - use ${participantEntries[0].mail} to send the mail to the (single) participant. Language - use ${participantEntries[0].preferredLanguage} to select the language for the resulting mail text if you use e-mail nationalization. Body - use for example ${participantEntries[0].sn} to include the surname of the participant into the mail text. You can also use these settings with the same result: To - use ${participantEntries.mail} to send the mail to the (single) participant. Language - use ${to.preferredLanguage} to select the language for the resulting mail text if you use e-mail nationalization. Body - use for example ${to.sn} to include the surname of the participant into the mail text. This allows you to use the same mail text fragments for workflows with Reduce Run-time Activities set or not set. Reduce Runtime Activities = true / Separate mails = false This mode creates only one activity for all approvers. Use the following variable references in mails: To - use ${participantEntries.mail} to add all participants of this activity into this field. Language - use ${participantEntries[0].preferredLanguage} to select the language for the resulting mail text if you use e-mail nationalization. Note: if the definition resolves to several languages, English is taken per default. Body - use for example ${participantEntries.sn} to include all surnames separated with blanks into the mail text. Alternatively you can use the variable ${to.sn} to obtain the same result. If you use ${to[0].sn} you will obtain the sn of the first participant. Use the for statement (for example with the loop variable 'i') and ${to[i].sn} to process all participants as you need it. Reduce Runtime Activities = true / Separate mails = true A more comfortable solution is to send separate mails to each of the participants. In this case set the Separate mails flag and use these settings: To - use ${participantEntries.mail} to add all participants of this activity into this field. Language - use ${to.preferredLanguage} to select the language for the resulting mail text if you use e-mail nationalization. Body - use for example ${to.sn} to include the surname into the mail text. You can address any other attribute of the participant here, for example ${to.givenName}. Using ${to.gender} allows distinguishing text for men and women, for example: Dear Mrs. ${to.sn}, Dear Mr. ${to.sn}, There are various methods to fill the address fields of a mail template (From, To, CC, BCC). This section explains the features and provides some examples. Read also the section Reduced Run-time Activities because this flag influences mail generation. Some general rules apply for the field calculation: You can send a mail to several persons only in one language. Set the Language field accordingly. Users with no mail address do not lead to an error as long as there are other mail addresses available. An error is generated if after calculating the From or To field no mail address is available. There are specific errors (To field only) returned from the mail server that result in a send error (for example \"550 Relaying denied to \"). In this case the mail is also not sent to the other members of the To field. Addressing a Single User In many cases you send the e-mail to exactly one person. In this case you can use the expression: ${participantEntries[0].mail} If the mail attribute contains only one value, it retrieves a single mail address, for example: Nik.Taspatch@My-Company.com If the mail attribute contains multiple mail addresses, the result is for example: Nik.Taspatch@My-Company.com Niki@gmx.com Note that the addresses are separated by blanks. If this expression is set in the To field, the user might get multiple instances of the same mail. If this expression is set in the From field, the first address is taken, the others are ignored (depends also on the mail server type). If you want to enforce only one value, you can use the expression: ${participantEntries[0].mail[0]} There is no way to define which value is taken from the list. Addressing Multiple Users You can use the expression ${participantEntries.mail} to retrieve the mail addresses of all participants. The resulting string could be for example: Nik.Taspatch@My-Company.com Niki@gmx.com; Lavina.Pitton@My-Company.com ; Retha.Wagner@My-Company.com ; The addresses of one user are separated by blanks (here for Nik Taspatch), the users are separated by semicolon. If you use this definition in the To field, you can work with the to variable in conjunction with the Separate mail flag. See the section Reduced Run-time Activities for more information. You can use semicolon to define multiple expressions in one line, for example: ${participantEntries[0].mail};${workflow.subject.mail} Defining Conditional Addresses In some cases you might want to define conditional addresses. This is for example useful in privilege access certification workflows where you want to inform only the users that their privilege assignment is removed. Define a conditional expression: ${res.dxrassignto@mail}; which is a loop that filters all assignments where the userInfo flag is set to true: ${res.dxrassignto@mail}; The mail addresses are separated by a semicolon. Using the “To” Variable If you use expressions in the To address field that include the substrings “.mail” or “@mail” then a to variable (representing user objects) is set internally. This to variable can then be used in other expressions, too. For example, in the message body: Dear Mrs. ${to.sn}, Dear Mr. ${to.sn}, Dear Mrs./Mr. ${to.sn}, Keep in mind that this kind of approach only works if the Separate mails flag is turned on. You can define participants in many ways. The method described here is easy to understand, powerful and well suited to a directory object structure that works with links. Select the static method from the drop-down selection in a Participants tab in approval activities. Here you can define a mix of static participant definitions (for example cn=Berner Hans,ou=Human Resources,o=My-Company,cn=Users,cn=My-Company or dynamic participant definitions (for example ${workflow.subject.manager} which retrieves the manager of the subject this workflow is for). If an attribute (for example ${workflow.subject.owner}) contains several links, all are used as participants. Start Objects There are several start objects for dynamic participant definitions: workflow.subject - the subject of the request workflow (for example a user, a privilege or a business object) workflow.resources.dxrassignto - the resource(s) of the request workflow workflow.initiatorEntry - the initiator of the workflow previousParticipants - the previous participant (can be used during escalations). Note that you cannot use the participantEntries start object because this is the one that is in calculation. Methods to set up dynamic definitions are: One-level Definitions These definitions use a link attribute at the start object. ${workflow.subject.manager} - retrieves the manager(s) of the subject (uses the manager link to look up the manager DNs) ${workflow.subject.owner} - retrieves all owner of the subject (uses the owner link to look up the owner DNs) ${workflow.initiatorEntry.manager} - retrieves the initiator’s manager. ${workflow.resources.dxrassignto@owner} - retrieves the privilege owner(s). ${workflow.resources.dxrassignto@owner.manager} - retrieves the manager(s) of the privilege owner(s). Multi-level Definitions Definitions of this type use a link chain to get the attribute where to retrieve the participants from. ${workflow.subject.manager.manager} - retrieves the manager of the subject’s manager (useful for escalation) ${workflow.subject.dxrLocationLink.manager} - retrieves the manager of the location the subject is assigned to Relative Definitions During escalation you can refer to the previous participant(s) of an approval activity. ${previousParticipants.manager} - retrieves the manager(s) of all participants of the previous activity during an escalation ${previousParticipants[0].manager} - gets the manager of the first participant of the previous activity during an escalation Multiple Definitions To retrieve participants from different links, use multiple lines in the static table of the Participants tab, for example: ${workflow.subject.manager} - retrieves the manager ${workflow.subject.secretary} - additionally retrieves the secretary ${workflow.subject.sponsor} - and finally evaluates the sponsor link This section provides some examples of variable substitution as well as valuable tips and tricks. Representing Fields and Strings The syntax you use in field and string representations depends on the internal representation of a requested field (whether it is a string or an array of strings) and the location where the field is used. Example 1: Dear Mr. ${workflow.subject.sn} might be resolved to Dear Mr. Smith Example 2: is resolved to true if sn = \"Smith\" If you are in doubt try both variants. Evaluating the Resource Order Type Use the attribute typeOfOrder to determine the resource order type for privilege assignments, for example: The possible values are ADD, MODIFY or DELETE. Creating Correct Salutations in Email You can create correct salutation with these statements: Sehr geehrter Herr ${participantEntries[0].sn}, Sehr geehrte Frau ${participantEntries[0].sn}, In an international environment, you may want to include the preferredLanguage attribute for correct salutation. Creating Escalation Specific Bodies in Email You can create escalation specific mail bodies by evaluating the variable ${escalationLevel}, for example: ... body without escalation ... \"1\" ?> ... body for levels > 1 ... ... body for level = 1 The preferred way to create a customized job implementation is to leverage the socketed job framework for automatic activities (see the chapter \"Implementing a Socketed Job Framework-based Activity\" for more details). You only need to define a brand-new activity if the socketed job framework is not sufficient for your needs. This section describes the general steps necessary to define and implement such an activity. To create your own job implementation, you must: Define configuration parameters Supply a component description Implement the job as a Java class Read the job configuration Read the workflow instance data Modify the workflow instance data Read and change orders Deploy your job implementation Obtain a connection to the Identity domain For the API documentation, consult the following folder on your DVD: Documentation\\DirXIdentity\\RequestWorkflows\\index.html. For sample sources, see the following folder on your DVD: Additions\\RequestWorkflows\\samples. The entire workflow configuration is passed to the server as an XML document. The configuration parameters for the job are part of this document. When the server starts the job, it passes am XML configuration object with the element as the parent node. It should conform to the following structure: myjob com.mycompany.myorg.MyJobImpl basename: The basename string value tells the server’s class loader the name of the folder in which to search for your job classes. It must be a folder underneath install_path*/ids-j-domain-S*n/confdb/jobs. In the above sample, the server assumes your classes are in the following folder: install_path*/ids-j-domain-S*n*/confdb/jobs/myjob*. class: The full class name of your job implementation; that is, the class that implements the interface com.siemens.idm.api.Job. params: The element contains a list of sub-elements with your configuration parameters. For each parameter, you specify its name and the value. It’s the responsibility of your job implementation to evaluate them. To allow Identity Manager to configure an activity with your job, you must supply a component description. The component description extends an abstract object description of an activity. The activity creation wizard searches for activity component descriptions and presents them in a list. Adding the Component Description LDAP Entry You must add your component description LDAP entry underneath the workflow configuration folder in the Identity domain: cn=Activity Types,cn=Configuration,cn=wfRoot,cn=. We recommend that you create your own subfolder (for example, \"cn=Customer Extensions\") to clearly separate your configurations from configurations installed with DirX Identity. Please supply values for the following LDAP attributes. They help to present your activity appropriately in the wizard. objectclass - needs the values dxmComponentDescription and top. cn - the naming attribute. dxmComponentType - needs the value activity for the activity creation wizard, which only presents component descriptions with this attribute value. dxmType - categorizes the basic activity type. The following values are supported: automatic: an activity that runs automatically without any human interaction. It is started by the server as soon as the start conditions of the activity evaluate to true. Typically, this is the value you should provide. notify: an activity that can be used for notifications, especially in case of errors or at the end of a workflow. DirX Identity already supplies e-mail notifications. people: an activity that requires human interaction. It is not applicable for your job implementation. dxmActivityType - a string value that helps to further categorize the activity. It is displayed in the selection page of the create activity wizard. description - the description that is displayed in the selection page of the create activity wizard. dxmContent - the XML document that represents the component description. Creating the Component Description XML Document Use the following template for your own component description: automaticActivity activity applyChange **Your Job classes folder** **com.mycompany.myorg.MyJobImpl** false the default value value2 **Param 1** **Param 2** Leave most of the template unchanged. You only need to insert the name of your component, your job class folder, the class name of your job implementation and for each configuration parameter, a description of the property and its presentation. See also \"Defining Configuration Parameters\". Element , attribute name: The name of your component description as it is displayed in the column \"component\" in the selection page of the activity creation wizard. In the element named job: : In sub-element, enter the name of the subfolder in which the class loader of the IdS-J server searches for the classes of your job implementation. In sub-element, enter the full class name of your implementation. In : For each configuration parameter, enter an element with the following attributes: name: the parameter name, for example, param1. xmlNotation: always use the value \"NameValueProperty\". elementname: always use the value \"param\". type: designates the data type of the parameter. Common values are: java.lang.Boolean, java.lang.String. Provide allowed values as a list of sub-elements. Flag the default value by the attribute default set to true. The presentation of your configuration parameters in the Identity Manager is specified in the element. The sub-element defines a property page. Make sure that all your parameters are listed in the layout attribute. They are presented in the same order as the list. Pay special attention to the parameter names: they must be prefixed with the XML parent element names in XPath format. For our scenarios, this is always \"job/params/\". To present your parameters \"param1\" and \"param2\" you must enter: layout=\"properties: job/params/param1, job/params/param2\" The presentation of your parameters is specified in the element. Enter a sub-element for each of your parameters. Attribute name: The name of your property in the same format as used for the . This means: Use \"job/params/param1\" for parameter \"param1\"! Sub-element : The name of your parameter as it is displayed in the property page. If you entered a list of allowed values in the definition, Identity Manager automatically presents them as a combo box. When an activity is to be started, the IdS-J server loads a class with the name configured in the sub-element of the . The server expects that this class has a default constructor and implements the interface com.siemens.idm.api.Job. This interface requires the following methods: setConfiguration(IDMJob cfg): The server calls this method before the run() method to hand over the job configuration. It passes the configuration in a class that wraps the XML fragment containing the job configuration. The root element is the element with the configuration parameters in its params/param element. See \"Reading the Job Configuration\" for details. run(TaskContext ctx, Map modifications): This method starts the job. The server passes two parameters. The task context gives read access to the activity and workflow instance, especially to the workflow and activity states, the workflow initiator, the subject and the optional resources. The job can indirectly modify the workflow by entering the desired modifications into the passed modification map. Use this facility to set the resulting activity state or application state. Handling Retries In error situations, the workflow engine re-starts a job according the retry configuration: retry limit and \"wait before retry\". The engine assumes an error if the job implementation throws an exception. As a result, the job implementation does not need to handle retries. It just throws an exception and relies on the workflow engine to start it again later on. If the job sets an application state (see \"Modifying Instance Data\" for information on how to do this), it is taken as application state for the activity after the last retry failed. Activity Timeout A timeout is indicated to the job via the TaskContext. If the job does not react or does not react in a timely fashion an interrupt for the thread is called. The resulting InterruptedException should not be ignored. For more information, see the Use Case documentation Java Programming in DirX Identity. Importing Required Libraries When compiling your class, make sure you have the following jar file on your classpath: com.siemens.idm.server-api.jar com.siemens.idm.requestworkflow-api.jar dxmAPI.jar dxmUtil.jar dxmOrder.jar For the API documentation, consult the following folder on your DVD: Documentation\\DirXIdentity\\RequestWorkflows\\index.html. For sample sources, see the following folder on your DVD: Additions\\RequestWorkflows\\samples. The IdS-J server provides a convenience class XmlNodeMapImpl that holds the configuration parameters in a Map. Get a parameter string value using the parameter name as a key. Here is a sample snippet for a string and a boolean parameter: Node paramsNode = _cfg.getNode(\"params\"); Map map = new com.siemens.idm.jini.util.xml.XmlNodeMapImpl(paramsNode); _attributeName = String.valueOf(map.get(\"attributeName\")); String s = String.valueOf(map.get(\"modifySubject\")); _modifySubject = Boolean.valueOf(s); See also the readConfiguration() method in the sample. The configuration object passed in the run(…​) method allows us to obtain the activity and the workflow instance object as in the following sample snippet: com.siemens.idm.api.nodes.IDMActivity activity = _cfg.getActivity(); com.siemens.idm.api.nodes.IDMWorkflow wf = activity.getWorkflow(); This gives us the interface of a standard workflow. Since we are working here with a request workflow, we want the specialized interface, which we get by class casting: com.siemens.idm.requestworkflow.api.RequestWorkflowInstance rqwf = (RequestWorkflowInstance)wf; Now we are able to obtain some data from the workflow, such as the initiator, the subject and the resource(s). Here is a snippet that reads the DN of the workflow initiator: String initiator = wf.getInitiator(); In the following sections, we show how to read the subject and the resources. For reading other properties, see the javadoc of the API. Reading the Workflow Subject The workflow subject is the entry that represents the user who is created with this workflow or whose attributes are modified or who is assigned some privilege or the role or other object which is created or modified. The subject is stored in the workflow instance as an XML object, which we call \"Order\". An order is basically an SPML request that is extended with some properties such as the activation date, the creator, and so on. There are several types of orders: Add- or Modify-Orders are used with a creation or an \"approve-modification\" workflow, while an Info-Order represents a subject that is not modified as with a user-assignment approval. Note that you can change an Add- or Modify-Order from within an activity, but not an Info-Order. You obtain a subject via the request workflow instance: com.siemens.dxm.api.order.Order subject = rqwf.getSubject(); There are a number of \"getters\" to read properties such as the DN, the order type (Add, Modify, Info, and so on) or the directory type (user, role, …​) of the order instance. Here are a few samples. For more details, see the API. String subjectDN = subject.getID(); String orderType = subject.getType(); String directoryType = subject.getDirectoryType(); Note: if you want to modify the subject and store it persistently for further use in follow-up activities, don’t use the \"setter\" methods; use the modification object passed in the calling run(…​) method. See the section \"Modifying Workflow Instance Data\" for more details. Reading the Workflow Resource(s) A workflow instance may contain no resources, one resource, or more than one resource. For example, a workflow for creating a (user) object or approving its modification does not need a resource. In a workflow for approving a user-role assignment, the role assignment is the resource. The resources in a workflow instance are very similar to workflow subjects: they are represented as an \"Order\". To work with resources, you have the following alternatives: Handle them as orders. This is the preferred way. Handle them as XML strings. To work with resources as orders, you obtain an array of resources from a workflow instance by issuing: Order[] resourceOrders = null; resourceOrders = rqwf.getResources(); The following code snippet shows how to read attributes from a resource and set some value. For the complete code, see the sample delivered with DirX Identity. for (Order resource: resourcesArray) { log.info(\"Resource: resource type=\" + resource.getResourceType() + \", Order Type=\" + resource.getType() + \", Resource ID=\"+resource.getID()); String[] attrnames = resource.getAttributeNames(); for (String attrname: attrnames) { log.info(\"Value(s) of resource attribute \" + attrname + \": \" + stringArray2String(resource.getValues(attrname))); } if (!modifySubject) { resource.setProperty(_attributeName, _attributeValue); log.info(\"Resource modified: \"+resource.toXMLString()); } } To work with resources as strings: Obtain the resources as a collection from a workflow instance by calling its getResourceAsString method: ArrayList resourceStrings = null; Collection resources = rqwf.getResourceStrings(); resourceStrings = processResourceStrings(resources.iterator()); Transform the resource string to an order with the following code snippet: while (it.hasNext()) { String rs = (String)it.next(); OrderFactory factory = new OrderFactoryImpl(); Order resource = factory.create(rs); // now you can handle the resource order as above } Get back the resource as string with the order method toXMLString(): String resourceString = resource.toXMLString(); Note: if you want to modify the resource and store it persistently for further use in follow-up activities, don’t use the setter methods. Use the modification object passed in the calling run(…​) method. See the section \"Modifying the Workflow Instance Data\" for more details. Use caution when modifying a subject or a resource in a workflow instance. With a normal class, you expect to use the setter methods to store new or modified values. You can do this for orders, too, but the changes are not stored back in the workflow instance; they are lost when your job ends. To store your changes in the workflow instance and make them available to downstream activities, you must return them to the workflow engine as modifications. An empty modifications map is passed to your job as parameter of the \"run\" method call: run(TaskContext ctx, _Map modifications_) Use this map to return your changes and make them persistent. Put the changed objects into the map using some predefined keys. The following snippets are taken from the sample job implementation delivered with DirX Identity and demonstrate how to store the changes for a subject or a resource as an order or an XML string: // subject as an order: + modifications.put(RequestWorkflowInstance.KEY_WF_SUBJECT, subject); // subject as string: + modifications.put(RequestWorkflowInstance.KEY_WF_SUBJECTSTRING, subject.toXMLString()); // resource as an order: + modifications.put(RequestWorkflowInstance.KEY_WF_RESOURCES, resourceOrders); // resource as string: + modifications.put(RequestWorkflowInstance.KEY_WF_RESOURCESTRINGS, resourceStrings); There are other standard keys. You find them as static properties of the RequestWorkflowInstance interface. A very important key is KEY_ACT_APPLICATION_STATE to set the application state of an activity. Use it to set the activity state explicitly. A workflow designer can then easily configure different downstream activities depending on the state of your job implementation. The following sample sets the application state to success: modifications.put(RequestWorkflowInstance.KEY_ACT_APPLICATION_STATE, \"success\"); For more details on changing an order see the section Reading and Changing Orders. You can use the workflow context to store application-specific information in a request flow activity and then read it later on in a downstream activity. The context allows you to store custom properties as you would in a Java map. You obtain the context from the request workflow instance as shown in the following snippet (for details, see \"Reading the Workflow Instance Data\"): IDMActivity activity = _cfg.getActivity(); + IDMWorkflow wf = activity.getWorkflow(); + RequestWorkflowInstance rqwf = (RequestWorkflowInstance)wf; + IDMWorkflowContext *ctx = rqwf.getContext()*; The following snippet shows how to put a property named \"testtest\" with the ID of the Java Virtual Machine into the context: VMID vmid = new VMID(); + String id = vmid.toString();* + ctx.put*(\"testtest\", id);* + rqwf.setContext*(ctx); Don’t forget to set the modified context at the workflow! Obtaining a property from the context is as easy as reading it from a map: String test = (String) *ctx.get*(\"testtest\"); + logger.info(\"retrieve testtest:\" + ((test !=null) ? test: \"nada\")); Subjects and resources in a workflow instance are orders. The section \"Reading the Workflow Instance Data\" shows how to obtain them from the workflow. Orders implement the interface com.siemens.dxm.api.order.Order. An order is either of type InfoOrderRequest, AddOrderRequest, ModifyOrderRequest or DeleteOrderRequest (short: info order, add order, etc). The type depends on the workflow type and on the data with which the workflow was created. In a workflow with resources (that is, assignments for a subject user) the subject is always an info order. An info order contains only a number of attributes for the subject, no modifications. If the workflow is for creating an object (for example, creating a user), for approving subject attributes or for deleting an object, the order is of type add, modify or delete respectively. Use the method getType to determine the type of the order. With getID, you obtain the object’s DN and with getValues(*propertyname)*, you get the values of an property as a string array. For more details, examine the appropriate API. The following methods are provided for changing an order: setSubjectDN(*dn)* / setResourceDN(*dn)*: Sets the identifier (the distinguished name) of the subject with respect to the resource. setProperty(*name,* value*)*: Sets or changes attributes controlled in an order. Note that the behavior depends on the type of the order. For: Info Order: This method simply sets the value for the attribute. Changes are NOT stored in the subject entry in LDAP, they reside only in the workflow. If the value is empty, or an empty String (\"\") or an array of length 0, the old attribute value is removed from the order. Add Order: Attribute changes are stored in the workflow and the apply Change activity stores them in the new subject / resource entry in LDAP. If the value is empty, or an empty String (\"\") or an array of length 0, the old attribute value is removed from the order. Modify Order: Attribute changes are stored in the workflow and the apply Change activity stores them in the updated subject / resource entry in LDAP. Modify orders are different from add orders in that they contain modifications for attributes. An attribute modification contains an operation. This means a setProperty overrides the property modification. Therefore, the name attribute is evaluated differently from the other order types: It is expected in the format \"*operation\",* \"*property-name\"* where operation is add, replace or delete, name is the name of the property as you use it in getProperty or getValues. Samples: setProperty(\"add-description\", \"New Description\") adds the value \"New Description\" to the attribute\"description\". setProperty(\"delete-mail\", \"sample@gmx.de\") deletes the value \"sample@gmx.de\" from the attribute \"mail\". As in the add and info order, an empty value deletes the modification. For example: setProperty(\"delete-mail\", \"\") or setProperty(\"delete-mail\", null) deletes the modification previously produced with setProperty(\"delete-mail\", \"sample@gmx.de\"). A setProperty(\"*name\",* value*)* is not expected here. As empty values delete modifications, only a setProperty(\"*name\",\" \")* can be accepted for the modification. When you have compiled your job classes and have produced a jar file, you must then deploy it to the IdS-J server. The class loader of the server searches the job-specific classes in a separate folder for your job underneath the server’s \"confdb/jobs\" folder. Suppose we have a job named \"sampleJob\". We need to create the folder install_path*/ids-j-domain-S*n*/confdb/jobs/sampleJob/lib* You need to place all the jar files your job needs underneath the lib subfolder. This is the jar file of your job implementation and optionally other third-party jar files that your job requires (and which are not yet available in the confdb/common/lib folder). If the class loader doesn’t find a class here, it searches in the confdb/common/lib folder. Sometimes custom implementations need an LDAP connection to the Identity domain. There are two methods to obtain this information. We recommend using the job interface described in the following sections. The DomainSessionAccessor method is deprecated. A job interface is available that provides access to the Identity domain, the subject and resource orders, and the job configuration parameters. Implementing the Job You need to derive your job class from the class com.siemens.idm.jobs.BasicJob. This class provides an extended run interface that supplies a SvcSession object that is managed in a session pool, subject- and resource orders and a map of configuration parameters. The Interface You need to implement the following interface: /** * A run method providing session access. * Implement this run method in the derived class * @param taskCtx The task context * @param modifications The modifications to be applied to the workflow instance * @param session The service session, providing LDAP Access * @param subject The subject order * @param resources The resource orders * @param parameters The map of configuration parameters * @throws Exception An exception leads to a temporary error (retry). */ protected abstract void run (TaskContext taskCtx, Map modifications, SvcSession session, Order subject, Order[] resources, Map parameters) throws Exception; A Sample Job A sample job is provided on the DVD in the folder Additions → RequestWorkflows → samples (class SampleJobWithSession). It shows how to read job configuration parameters, to search objects in LDAP and to set the application state. Deployment The basic class com.siemens.idm.jobs.BasicJob is deployed in the jar file orderImpl.jar. Consequently, you can deploy your jar file to confdb/jobs/order/lib. You can obtain the connection parameters from the IdS-J server using the static method getSessionClone() of the singleton DomainSessionAccessor. Here is a code snippet that shows how to perform this task: // get a clone of the domain session SvcSession session = DomainSessionAccessor.getClone(50000); netscape.ldap.LDAPConnection ldapcon = session.getLDAPConnection().getLdapConnection.getLDAPConnection(); Because this method clones the session, it can create memory problems and thus this method is deprecated. We recommend using the job interface described above. ApplyChange activities are used in a request workflow to apply the changes stored in the subject and/or resource orders to the data store. The applyChange activities allow you to add a user hook that is called before and after the application of each order. You can use this user hook to modify the data before the change is applied or to change the order after the change is processed. Changed orders are written back to the workflow instance and can be read in successive activities. Configuring the User Hook To configure a user hook, enter its fully-qualified class name in the Class name text entry field of the activity’s Parameters tab. If you want to use the sample user hook, you must enter the class name com.siemens.idm.jobs.sample.SampleApplyChangesUserhook here. The Interface The user hook must be written in Java. It must implement the following interface: package siemens.dxr.service.order.api; public interface ApplyChangesUserHook { /** * Calls a UserHook before applying the orders * - changes to the orders are updated at the worklow instance * - if an ApplyChangesException is thrown, processing is aborted. * - in this case, workflow context and the activity's application state are updated from the exception if non-null values are provided * - settings of workflow context / activity application state to the apply changes context are not considered if an exception is thrown * @param subject The subject order that is applied in the next step. * @param resource The resource order that is applied in the next step. May be null if no resource is assigned. * @param context The context object * @param ld A clone of the session's LDAP connection. Is closed by ApplyChanges. * @throws OrderJobException Aborts processing */ void preProcess(Order subject, Order resource, ApplyChangesContext context, LDAPConnection ld) throws OrderJobException; /** * Calls a UserHook after applying the orders * - changes to the orders are updated at the worklow instance * - if an ApplyChangesException is thrown, processing is aborted. * - in this case, workflow context and the activity's application state are updated from the exception if non-null values are provided * - settings of workflow context / activity application state to the apply changes context are not considered if an exception is thrown * @param subject The subject order that is applied in the next step. * @param resource The resource order that is applied in the next step. May be null if no resource is assigned. * @param context The context object * @param ld A clone of the session's LDAP connection. Is closed by ApplyChanges. * @throws OrderJobException Aborts processing */ void postProcess(Order subject, Order resource, ApplyChangesContext context, LDAPConnection ld) throws OrderJobException; } A context object is passed to the user hook methods. The context object implements the following interface: package siemens.dxr.service.order.api; public interface ApplyChangesContext { /** * Boolean flag indicating that subject orders are applied * @return flag to apply subject orders */ public boolean isApplyAttributeChanges(); /** * Boolean flag indicating that resource orders are applied * @return flag to apply resource orders */ public boolean isEvaluateAssignments(); /** * Boolean flag indicating that an approval workflow is started for a privilege requiring approval * @return flag for starting approval workflow for resource order */ public boolean isStartApprovalWorkflows(); /** * sets the activity's application state. * @param aState The application state to set. If set here, the activity's application state is set to that value after ApplyChanges has completed. */ public void setActivityApplicationState(String aState); /** * gets the activity's application state * @return the activity's application state */ public String getActivityApplicationState(); /** * The audit master uid * @return The audit master uid */ public String getAuditMasterUID(); /** * Reads the workflow context * @return The workflow context. */ public Map getWorkflowContext(); /** * sets the workflow context. If set, the values stored in the context are added to the workflow context after applyChanges has completed. * Use getWorkflowContext to get the current context and modify it. Then use setWorkflowContext to make the changes permanent after ApplyChanges has finished. * @param wfContext */ public void setWorkflowContext(Map wfContext); /** * The workflow instance ID * @return The workflow instance ID */ public String getWfInstId(); } A Sample Job A sample job is provided on the DVD in the folder Additions/RequestWorkflows/samples (class SampleApplyChangesUserhook). It shows how to set a unique ID at the subject order and adds a start date to a resource order before it is applied to the data store. The postProcess call is not used in the sample; it has an empty body. Deployment The interface siemens.dxr.service.order.api.ApplyChangesUserHook is deployed in the jar file dxrServices.jar. You should deploy your jar file to confdb/commons/lib. The socketed job framework allows you to implement your own automatic activity with minimal configuration effort and Java code writing. The idea is simple: you configure a predefined universal activity type Run socketed job which invokes your implementing Java class specified as a common parameter. The framework provides access to the Identity domain, the subject and resource orders and the predefined job configuration parameters, which means that no new component description is necessary. To create your own job implementation, you must: Add a new activity of the type Run socketed job Specify values for predefined configuration parameters Implement the job as a Java class Read the job configuration Read the workflow instance data Modify the workflow instance data Read and change orders Deploy your job implementation The socketed job framework is based on the common request workflow API. Consult the following folder on your DVD: Documentation\\DirXIdentity\\RequestWorkflows\\index.html. For the specific API and sample sources, see the following folders on your DVD: Additions\\SocketedJob\\api Additions\\SocketedJob\\samples When defining a request workflow, select the universal automatic activity template Run socketed job. Connect it with other activities and define the start conditions. Use start conditions based on application state; for details, see the section \"Understanding Request Workflow States\" in the chapter \"Request Workflow Architecture\". The Run socketed job already contains the following predefined configuration parameter names: Class name for socket job - the parameter is accessible as className in the XML configuration of the job. This parameter is mandatory and must contain a fully qualified class name of a Java class implementing one of the following interfaces: com.siemens.idm.jobs.socketed.api.CustomSocketJob com.siemens.idm.jobs.socketed.api.CustomSocketSvcSessionJob The specified class must be stored in the following folder: install_path*/ids-j-domain-S*n*/confdb/jobs/socketed/lib* 1. Parameter to be passed to job - the parameter is accessible as paramOne in the XML configuration of the job. 2. Parameter to be passed to job - the parameter is accessible as paramTwo in the XML configuration of the job. 3. Parameter to be passed to job - the parameter is accessible as paramThree in the XML configuration of the job. 4. Parameter to be passed to job - the parameter is accessible as paramFour in the XML configuration of the job. 5. Parameter to be passed to job - the parameter is accessible as paramFive in the XML configuration of the job. These parameters are optional and can be used to pass any configuration parameter value to the custom socket job. You can pass any value that can be stored as a common string: for example, a path to a file, a number or a boolean value. Note that the name of the parameter cannot be changed and you should document its meaning in the relevant socket job activity implementation. These parameters are also always available only as string constants. You need to convert these strings to the correct types in your socket job class if necessary. The number of parameters cannot be changed without modifying the component description for the Run socketed activity job (Run socketed job.xml). If necessary, define a new component description. Do not rewrite the default one. See the section \"Supplying a Component Description\" in the chapter \"Implementing a New Activity\" for more details. When running the activity, the IdS-J server will search for a class defined in the mandatory configuration parameter class name for socket job. This class must implement one of these very similar interfaces: com.siemens.idm.jobs.socketed.api.CustomSocketJob - use this interface when no access to the Identity domain is required, it requires only one method: executeSocketJob(TaskContext taskCtx, Map modifications, Order subject, Order[] resources, Map parameters, RequestWorkflowInstance wfInstance) This method contains the main logic of the job. The server passes six parameters. The task context gives read access to the activity and workflow instance, especially to the workflow and activity states, the workflow initiator, the subject and the optional resources. The job can indirectly modify the workflow by entering the desired modifications into the passed modification map. Use this facility to set the resulting activity state or application state. The subject contains the subject order of the request workflow as stored within the task context. It is a convenient way to access it directly. The resources contain the resource orders of the request workflow as stored within the task context. It is a convenient way to access it directly. Note that the resource orders may be not available for some request workflow types. The parameters map contains the values for predefined configuration parameters. The values are accessible for key names paramOne, paramTwo, paramThree, paramFour and paramFive as described in the section \"Specifying Predefined Configuration Parameters\". The request workflow instance contains the object as it is stored within the task context. It is a convenient way how to access it directly. com.siemens.idm.jobs.socketed.api.CustomSocketSvcSessionJob – use this interface when you need direct access to the Identity domain; it requires only one method: executeSocketJob(TaskContext taskCtx, Map modifications, SvcSession session, Order subject, Order[] resources, Map parameters, RequestWorkflowInstance wfInstance) This method contains the main logic of the job but this time the server passes seven parameters. The signature of the method and its logic are almost the same as the previous interface. This interface also provides session-representing access to the Identity domain. Handling States We recommend using application state when returning a result of the activity to be used as a start condition for a next activity. Use constants from com.siemens.idm.requestworkflow.api.ApplicationState or a custom value and use them in the start conditions. See the section \"Modifying the Workflow Instance Data\" in the chapter \"Implementing a Generic Activity\" for more details. Do not set state (com.siemens.idm.api.Job.STATE) directly. It will be set automatically to Succeeded if no exception occurs or to Failed.Temporary if an unhandled exception is thrown. See the section \"Understanding Request Workflow Activity States\" in the chapter \"Request Workflow Architecture\" for more details. Importing Required Libraries When compiling your class, make sure you have the following jar files in your classpath: commons-pool.jar com.siemens.idm.requestworkflow.jar com.siemens.idm.requestworkflow-api.jar com.siemens.idm.server-api.jar com.siemens.idm.server-config.jar com.siemens.idm.server-core.jar dxcLogging.jar dxiSocketedJob.jar dxmAPI.jar dxrServices.jar ldapjdk.jar storage.jar Note that the list might not be complete since it depends on the customer extensions. You may also need to add jar files with missing dependencies to the deployment directory; see the section \"Deploying the Job\". The socketed job framework provides methods and keys to access the predefined configuration parameter values: String p1 = SocketedJob.getParameterAsString(ActivityConstants._PARAM_ONE_, parameters); String p2 = SocketedJob.getParameterAsString(ActivityConstants._PARAM_TWO_, parameters); String p3 = SocketedJob.getParameterAsString(ActivityConstants._PARAM_THREE_, parameters); String p4 = SocketedJob.getParameterAsString(ActivityConstants._PARAM_FOUR_, parameters); String p5 = SocketedJob.getParameterAsString(ActivityConstants._PARAM_FIVE_, parameters); See also the ParamListingJob class in the sample directory. The socket job interfaces give you direct access to the request workflow instance, to the subject and to the resources if available. You can also read the participant of the previous people activities or read the initiator of the workflow. See the class ParamListingJob and Utils in the sample directory for these advanced examples. The socketed job framework is based on common request workflow API. Use the methods described in the section \"Modifying the Workflow Instance Data\" in the chapter \"Implementing a New Activity\" for more details. The socketed job framework is based on common request workflow API, use the methods described in the section \"Read and Write Context Properties\" in the section \"Implementing a New Activity\" for more details. The socketed job framework is based on common request workflow API. Use the methods described in the section \"Reading and Changing Orders\" in the section \"Implementing a New Activity\" for more details. The jar file containing compiled custom implementation of the socketed job APIs must be placed within the folder install_path*/ids-j-domain-S*n*/confdb/jobs/socketed/lib*. Do not add other jar files to this directory unless it is necessary due to class loader problems. It is mainly necessary when using other third-party dependencies. Instead of finding the participants of a people activity by approval policies or group lists, you can write your own Java class to do it. To create your own \"find participants\" implementation, you must: Define configuration parameters Implement a Java class Deploy the Java class For the API documentation, consult the following folder on your DVD: Documentation\\DirXIdentity\\RequestWorkflows\\index.html. For sample sources, see the following folder on your DVD: Additions\\RequestWorkflows\\samples. When you create or modify a people activity, select the type class from the drop-down list at the top of the Participants tab. In the \"Class\" field, enter the full class name of your Java class. For the sample class described here, enter: com.siemens.idm.participants.sample.FindParticipantsSample. If your class needs configuration parameters, enter them in the \"Parameters\" table. For each parameter, enter the parameter name into the left column and the value into the right column. Suppose you want to read some data from a file; in this case, you might define a parameter \"filename\" in the left column and then enter the absolute path name of the file \"c:\\myconfigdata\\findparticipant.properties\" in the right column. See the section \"Implementing the Java Class\" for information on how to read them in your Java class. The Java class must provide a default constructor and implement the interface com.siemens.idm.api.custom.Participants. Optionally, it can implement the interface com.siemens.idm.api.custom.ParticipantsExtended: it enables the custom class to obtain a connection to the Identity Store. Implementing the Participants Interface For the Participants interface, the only method you need to realize is findParticipants(…​). The IdS-J server passes the following parameters from the workflow and activity instance: operation - the operation string taken from the workflow definition. subjecttype - the subject type taken from the workflow definition. In most cases, the subject of the workflow is a user. subjectDn - the distinguished name of the workflow’s subject. Note: If there is an escalation, the subjectDN is the DN of the participant of the previous level. For example, in the first escalation level, you get the DN of the original activity participant, in the second level, the DN of the participant of the first level. Nevertheless, you have access to the workflow subject via the activity. For more details, see the section \"Reading the Workflow Instance Data\". Here are the necessary commands: com.siemens.idm.api.nodes.IDMActivity activity = _cfg.getActivity(); com.siemens.idm.requestworkflow.api.RequestWorkflowInstance rqwf = (RequestWorkflowInstance) activity.getWorkflow(); com.siemens.dxm.api.order.Order subject = rqwf.getSubject(); properties - a map of configuration parameters taken from the activity definition. See the section \"Defining Configuration Parameters\" for information on how to specify and set them in the workflow. activity - the interface to access the activity instance and through it the workflow instance. Your class must return a collection of String objects that represent the distinguished names of the participants. Implementing the ParticipantsExtended Interface The ParticipantsExtended interface allows a participant finder to obtain a context, which especially gives access to an LDAP connection to the DirX Identity domain. This interface defines a setter for a ParticipantContext. The com.siewmens.idm.api.custom.ParticipantContext defines the following methods that are to be implemented: LDAPConnection getLdapConnection() - returns a “netscape.ldap.LDAPConnection”. It is connected to the DirX Identity domain and you use it to retrieve any LDAP entries in the domain. You can also change any LDAP entry, so be careful when using it. Reading Configuration Parameters Reading the configuration parameters is very simple: just call the get(…​) method of the properties map and provide the parameter name as the key, as shown in this sample: String filename = (String)properties.get(\"filename\"); Note that the parameter values are treated as strings. Returning Participants The server expects the participants as a collection of strings. The following code snippet simply constructs a list of DN strings and returns them: ArrayList res = new ArrayList(1); res.add(\"cn=Taspatch Nik,ou=Global IT,o=My-Company,cn=Users,cn=My-Company\"); return res; Importing the Required Libraries When compiling your class, make sure you have the following jar files in your classpath: dxmApi.jar com.siemens.idm.server-api.jar com.siemens.idm.requestworkflow-api.jar For the API documentation, consult the following file on your DVD: Documentation\\DirXIdentity\\RequestWorkflows\\index.html. When you have compiled your classes and produced a jar file, you must deploy it to the IdS-J server. Place it into the folder: install_path*/ids-j-domain-S*n*/confdb/common/lib* Each people activity allows for specifying a participant filter and participant constraints which are applied to the result of the \"find participants\" implementation. The filter allows for reducing the list of participants; for example, skipping the workflow initiator. The constraint implementation decides whether the number of participants meets the workflow’s requirements (\"4-eye-principle\"). Implementation of a filter and a constraint are quite similar. Both must be realized as Java classes. The server passes the list of participants and the current activity. Only the result of their operation is different. Participant Filter: A participant filter must implement the interface com.siemens.idm.requestworkflow.api.ParticipantsFilter. In its only method filterParticipants(…​) it receives the list of participants and the current activity. It must return the allowed participants as a list of strings denoting the distinguished names of the participants. For details, see the section \"Implementing a Participant Filter\". Participant Constraints: A participant constraints class implements the interface com.siemens.idm.requestworkflow.api.ParticipantConstraints. In its only method checkParticipantsConstraints(…​) it receives the list of participants and the current activity. If it rejects the participants, it must throw a ConstraintViolationException. For details, see the section \"Implementing Participant Constraints\". Filters and Constraints as Joblets (Deprecated): As an alternative to providing Java classes implementing the interfaces ParticipantsFilter and ParticipantConstraints, filters or constraints can be realized as joblets. Joblets are Java sources implementing the IDMJob interface that are compiled and started at runtime by the IdS-J server. See the sections \"Configuring a Joblet\" and \"Implementing a Joblet\" for instructions on how to realize a joblet. Deploy Filters and Constraints: For details, see the section \"Deploying Filters and Constraints\". For the API documentation, consult the following folder on your DVD: Documentation\\DirXIdentity\\RequestWorkflows\\index.html. For sample sources, see the following folder on your DVD: Additions\\RequestWorkflows\\samples. Your participants filter implementation should have a default constructor and implement the interface com.siemens.idm.requestworkflow.api.ParticipantsFilter. The only method of the interface is filterParticipants(…​). The additional interface com.siemens.idm.requestworkflow.api.ParticipantsFilterExtended allows you to obtain a context with the LDAP connection to the Identity domain. Interface ParticipantsFilter: The only method you must implement is: filterParticipants(…​). The server passes two parameters: participants: the list of participants calculated so far, each as a distinguished name string. activity: the current activity for which the participants are to be calculated. The method returns the list of filtered participants as a collection of strings, each representing a participant’s distinguished name. The following snippet shows you how to read the workflow initiator’s DN, exclude the initiator from the participants and return the new participant list: RequestWorkflowInstance wf = (RequestWorkflowInstance) activity.getWorkflow(); String initiator = wf.getInitiator(); ArrayList allowedParticipants = new ArrayList(); Iterator it = participants.iterator(); while (it.hasNext()) { Object o = it.next(); String participant = (String)o; if (participant.equalsIgnoreCase(initiator)) { log.info(\"ParticipantFilterSample - participant: \" + participant + \" not allowed for approval\"); } else { allowedParticipants.add(participant); } } return allowedParticipants; Interface ParticipantsFilterExtended This interface extends ParticipantsFilter and establishes the ParticipantContext. This allows obtaining an LDAP connection to the DirX Identity domain and thus to execute LDAP operations. You must implement the following methods: public void setParticipantContext(ParticipantContext ctx): the server passes a com.siemens.idm.api.custom.ParticipantContext. See below. Interface ParticipantContext This interface provides the following method: public LDAPConnection getLdapConnection(): it returns an LDAP connection to the DirX Identity domain. Writing Logs You can issue log messages that appear in the server’s log files. The server’s log support com.siemens.idm.jini.util.logging.LogSupport provides the usual log interface, especially the following methods: log.error(…​): error message log.warning(…​): warning message log.info(…​): normal informational message log.finest(…​): debug message Your participant constraints implementation should have a default constructor and implement the interface com.siemens.idm.requestworkflow.api.ParticipantConstraints. Optionally it can also implement com.siemens.idm.requestworkflow.api.ParticipantConstraintsExtended. The only method of the interface is checkParticipantConstraints(…​). Interface ParticipantConstraints You must implement the only method checkParticipantConstraints(…​*)*. The server passes two parameters: participants: the list of participants calculated so far, each as a distinguished name string. activity: the current activity for which the participants are to be calculated. A participant constraints implementation returns a ConstraintViolationException to notify the server that the participant list does not meet the constraint conditions. In the exception constructor, you can supply the desired resulting activity state and application state along with an error message that will be stored with the activity instance. This allows you to configure subsequent activities that are started in this case. The following snippet shows you how to make sure that the list contains at least one participant: if (participants == null || participants.size() section. Then it processes the entries of the search result one by one the same way as it does in the event case. Note that in this case the channel sequence is determined by the sequence numbers of the destination channels, in this case the channels attached to the connected system. The join engine searches the joined entry using the join conditions of the corresponding channel. The join conditions are performed one after the other until a single entry has been found. The join engine evaluates the join conditions in the following way: if the join condition defines a search base, then that object is read; if the join condition defines an SPML filter, then that filter is used and is combined with the search base defined in the section. Depending on the search result, the join engine provides the (default) entry operation for the mapping step: ADD if no entry has been found), MODIFY if an entry has been found. The join engine performs mapping and builds an add, modify or delete request depending on the mapping result. It updates the joined entry or creates a new one by passing this request to the connector. The join engine reads the updated entry again using the returned entry identifier for backward synchronization and to retrieve attributes that were indirectly set by the connected system. The join engine performs mapping for the other backward direction using the configuration of the channel attached to the Identity domain. Depending on the mapping result, the join engine builds an add or modify request and updates the entry in the Identity domain. Note that the Sync2TS controller is also used to synchronize passwords to the connected system (and optionally back to IdentityStore). If the topic of the incoming event starts with either \"dxm.setPasswordRequest.\" or \".dxm.setPasswordRequest.\" then passwords are synchronized to the connected system and optionally password relevant attribute information is synchronized back to IdentityStore. If the password channel on Identity side is missing then synchronisation is done only to the connected system; otherwise synchronisation is done both ways. No other attributes than defined in account or group channels are synchronized. Target System Validation Controller The validation controller performs a target system validation against the content of the target system representation in the Identity Store. The following figure shows the processing: Figure 9. Validation Controller Processing As shown in the figure, the validation controller performs the following actions: Searches the entries in the connected system by constructing a search request for each channel based on the channel’s section. The channel sequence is determined by the sequence numbers of the destination channels, in this case the channels attached to the target system in the DirX Identity domain. Let’s assume the account channel in DirX Identity has sequence number 1, because the membership references are stored in the groups. In this case, the corresponding channel in the connected system - the one for the users - is searched first. When all entries of the result are processed, the controller issues the search for the next channel (here, the groups) and processes them. Evaluates the join conditions of the DirX Identity channel and searches the joined entry. (For details on evaluation of the join condition see step 3 of \"Sync2TS\" controller above.) Performs the mapping configured in the DirX Identity channel, constructs the appropriate request (add, modify or delete) and passes it to the LDAP connector for updating the joined entry in the DirX Identity domain. The validation controller deletes entries in the Identity domain that have no corresponding entry in the connected system. In order to identify these entries, the validation controller uses two different algorithms that depend on the definition of the sort attribute in the section: If a sort attribute is configured at both sides, the controller searches both the source and the destination. It processes the source search result entries one by one, and: If the source entry matches the next destination entry according to the join conditions, it considers this entry the joined entry and updates it. Then it continues with next source entry and next destination entry. If the source entry’s sort attribute is lexicographically smaller than the destination entry’s sort attribute, it assumes that the destination entry needs to be created. Then it continues with the next source entry. If the source entry is lexicographically greater than the destination entry, the controller assumes that the destination entry needs to be deleted. It either issues a delete request for the destination entry or delegates the task to the user hook according the user hook’s response to the \"getCallDelete()\" method. The controller then continues by comparing current the source entry with the next destination entry. When there are still source entries available and all destination entries have been processed, then all these remaining source entries will be created (after having performed the appropriate mappings). When there are still destination entries available and all source entries have been processed, then all these remaining destination entries need to be deleted. (For details on deletion algorithm look at the previous steps.) In all other cases, the controller first searches for all identifiers of the destination and stores them in a map. Then, it exports the source entries and joins one after the other in the destination: If no matching entry is found, the entry will be created in the destination. If a matching entry is found, the entry is eventually modified and the joined entry is deleted from the map. In the end, only the entries that have no corresponding source entries remain in the map. The validation controller either deletes them itself or delegates this task to the user hook. Note: As a consequence of the algorithms described above, you should configure a Sort Attribute if you configure Paged Read in a channel’s section. This configuration enables the validation controller to process the entries page by page rather than having to read all pages first into memory before starting the comparison algorithm. As a result, Paged Read, which especially makes sense for large search results, performs in an optimal way if a Sort Attribute is configured, too. Also keep in mind to configure an appropriate size limit at the LDAP Server for the complete search result even if you choose Paged Read. a. Full Import Controllers The \"full import\" controller performs a full import from a connected system into DirX Identity. Its operation is identical to the validation controller with one exception: the validation controller updates the \"last validation date\" at the target system when the job is finished. In other words, full import is the same as initial load with respect to a connected system. Full import can be used not only for connected systems with accounts and groups, but also for all types of systems and objects, especially for importing users. b. Restore Target System Controller The \"restore target system\" controller restores a connected system with the entries stored in the Identity Store after a crash of the connected system. The controller works like the \"full import\" controller, but from the Identity Store to the connected system. It should be started by a schedule or (preferably) by hand using Identity Manager. It exports all entries of the \"IdentityDomain\" port and imports them into the connected system. It deletes entries in the connected system that have no representative in the Identity Store. Note: if you don’t want objects that do not have a representative in the Identity Store to be deleted in the connected system, you should use the Sync-One-Way-2-TS Controller, which only adds or modifies objects. We recommend using this controller first when going productive to test if your environment and your mapping are correct before using the Restore Target System Controller. c. Sync-One-Way Controller / Sync-One-Way-2-TS Controller The \"sync-one-way\" controller synchronizes entries from the Identity Store to the connected system. Its operation differs from the \"Restore\" controller in that it does not delete entries that were deleted in the Identity Store. Its operation differs from the \"Sync2TS\" controller in that it does not synchronize the changes back from the connected system to Identity Store: it works only \"one-way\". d. Sync-One-Way-2-Identity Controller The \"sync-one-way-2-identity\" controller synchronizes entries from the connected system to the connected system. Its operation differs from the \"FullImport\" controller in that it does not delete entries that were deleted in the connected system, and it does not update the “last validation date”. Its operation differs from the \"Sync2TS\" controller in that it does not synchronize the changes back from the Identity Store to the connected system: it works only \"one-way\". e. Cluster Synchronization Controller The \"cluster synchronization\" controller is like the \"Sync2TS\" controller except that it serves not only one target system, but a cluster of them. The appropriate workflows accept change events for a target system, but can also be started by a schedule or manually by Identity Manager. When started by a schedule or by hand, the workflow expects the DN of the target system, its type, cluster and domain attributes as start parameters. The controller reads the connector configuration and the environment properties from the target system entry, opens the target system connector with the new configuration data and provisions the entries of the Identity Store to the connected system exactly the same way as the \"Sync2TS\" controller. When started by a change event, the controller finds the target system by evaluating the event topic: The topic contains the type, domain and cluster attributes of the target system. f. Cluster Validation Controller The \"cluster validation\" controller is like the normal \"validation\" controller except that it serves not only one target system, but a cluster of them. For more details on cluster handling, see the Cluster Synchronization Controller. g. Cluster Restore TS Controller The \"cluster restore\" controller is like the normal \"restore target system\" controller except that it serves not only one target system, but a cluster of them. For more details on cluster handling, see the Cluster Synchronization Controller. h. Password Reset TS Controller The \"password reset TS\" controller resets the passwords of the accounts of a DirX Identity target system. If the workflow is configured for personal accounts, it reads the password from the user and sets it at the account. If it is configured for privileged accounts, it generates a new password and sets it at the account. For each change, it sends a change event that triggers the password synchronization workflow to update the password at the connected system. The controller does not handle change events. i. Password Expiration Controller The \"password expiration\" controller checks for expired passwords of privileged accounts in DirX Identity. The controller searches for passwords that are going to expire according to the configured filter. The number of days before expiration is configurable. The controller generates a new password, sets it at the account and sends the change event to trigger the password synchronization workflow. The controller does not handle change events. The channel configuration specifies how to find entries in the attached system and how to map them to corresponding system. A channel is always attached to a connected directory, which represents either a connected system or a target system sub-tree in an Identity domain. We differentiate between a number of channel types, as shown in the following figure. Figure 10. Channel Types As shown in the figure: Main or primary channels represent the entries of a certain type, typically accounts or groups. They have a reference to the corresponding channel, which represents the entries at the other system. Typically, an accounts channel for the Identity domain has a corresponding channel for the users in the connected system. The same holds for groups. Member channels represent the account-group memberships. In order to support \"cross-membership\" scenarios (for more details, see the section \"Cross Memberships\"), the attributes that hold the membership information (for example, for LDAP: attribute \"members\") are separated and managed in the member channel. The member channel is referenced from one of the primary channels, which indicates that the membership attributes are stored in the primary entry. The member channel also has a corresponding channel that may be attached to another primary channel that is not the corresponding channel of the source. This relationship defines a \"cross-memberships\" scenario, where members are stored in groups at one side and in users at the other. Password channels represent the password-related attributes of an entry type; that is, of users and accounts. These attributes include the attribute that stores the password (for example, \"userPassword\" for LDAP systems), and can include additional ones, especially for password reset information. The password channel references the primary channel for the entry that holds its attributes. Separating the password attributes from the normal ones allows the join engine to identify the attributes to be updated upon password change events. The password channel on Identity side is an optional one and will be used when synchronizing password relevant attribute information from Connected System back to IdentityStore. Secondary channels are mainly intended for relational database systems, which store entry attributes in several joined tables. Each secondary channel has a reference to its primary channel. When reading an entry from the attached system, the join engine also reads the attributes from the secondary channel(s). As a result, it needs some information from the schema of the database: The storage location of the reference between primary and secondary channel The attributes that hold the reference in the source and which are referenced in the destination The type of relationship: 1-to-1, 1-to-many. The channel configuration is separated into the following sections: Export: Defines the elements to search the entries in the attached system, usually search base, search filter and scope (for hierarchical systems). Furthermore, the controller can be advised to perform a paged search (with page size, time limit, etc.). You should only activate this option if the appropriate connectors support this functionality. Delta: The settings here are only evaluated by delta controllers. You have two options here: Extend the search filters in order to obtain only the changed entries since the last change. This option can be applied to any connector and any connected system that supports attributes representing the creation and or modification time. Typical samples are LDAP servers with the attributes “createTimestamp” and “modifyTimestamp”. You just need to supply the list of attributes containing the creation or modification time. This option, called the “Expert Operational Attributes”, is only for special connectors that explicitly support delta handling. The most important sample is the Active Directory connector. It is able to not only obtain the changed entries, but also those, which were deleted since the last export. In this case you just need to select the “Expert Operational Attributes” option and enter a fixed XML String containing the value “${LastDeltaValue}” for the operational attribute “dxm.delta”. For more information about the specific aspects when selecting this option for the Active Directory Delta Workflow see \"Using the Target System (Provisioning) Workflows → Understanding Java-based target System Workflows - > Active Directory (ADS) Workflows → Customizing the ADS Workflows → Delta Workflows\" in this guide Join: Specifies a number of join conditions that the join engine is to evaluate when it tries to find the joined entry in the destination, given an entry from the source system. The conditions are applied one after the other. If any one condition leads to exactly one resulting entry in the search, the join engine considers this to be the joined entry. Otherwise, it evaluates the next one in the list. You have two options for formulating a join condition: Specify a search base: ${source.dxrPrimaryKey} The join engine in the search request replaces the search base defined in the export section with this one. This option is appropriate if you know the identifier from the source entry. You can use placeholders for referencing attributes of the source, the target entry or the environment. In case of a target entry, the mapping for this attribute is performed. Specify a filter extension: ... In the search request, the join engine extends the filter given in the export section with this term by \"and-ing\" the given conditions. For the values, you can use the same placeholders as mentioned above and in attribute mapping in general. Import: The import section specifies some options that are evaluated when the join engine creates, updates or deletes an entry in the attached system. In particular, you can define, if a notification is to be sent, when an entry is created or deleted. Mapping: The mapping section contains the mapping for all attributes of the destination system when a source entry is to be updated / imported at the attached system. You have several options for specifying the mapping, ranging from direct mapping to simple expressions with placeholders to Java mapping classes. You can even specify a post mapping that is called after all the attribute mappings. For details, see the help page on the channel and the customization chapter for Java attribute mapping. Operational Attributes: A list of so-called \"operational attributes\" can be passed to the connector with each request. This list depends on the connector. In most cases, you can ignore them. In most applications and systems, user-group memberships are stored at the group. This is typical for LDAP and Active Directory systems: users are members in groups. Scenarios with large groups may face performance problems: the long member lists often must be read and updated. Storing the memberships at the user would normally be much faster. You cannot change how memberships are stored at existing connected systems. But you can change it for the accounts and groups in a DirX Identity target system. If the flag \"Reference group from account\" is checked, group memberships are stored in the attributes of an account. You can easily change this setting, but you must make sure that the Provisioning workflow is configured consistently. Memberships are Stored in Groups at Both Sides At the DirX Identity target system entry, the flag \"Reference group from account\" is not checked. In the workflow configuration, the channel \"members\" is set as the member channel of the groups channel for both connected directories. Make sure that the groups are synchronized after the accounts / users by setting the \"Export Sequence Number\" to \"2\" in the groups channels and to \"1\" in the accounts channels. Memberships are Stored in the Account or User at Both Sides At the DirX Identity target system entry, the flag \"Reference group from account\" is checked. In the workflow configuration, the channel \"members\" is set as the member channel of the accounts channel for both connected directories. Make sure that the accounts are synchronized after the groups by setting the \"Export Sequence Number\" to \"2\" in the accounts channels and to \"1\" in the groups channels. Cross-Membership Scenario When the memberships are stored at the accounts in DirX Identity and at the groups in the connected system we call this a \"cross-membership\" scenario. At the DirX Identity target system entry the flag \"Reference group from account\" is checked. If in the connected system the identifier of the user is not used as reference in the group, we need to set the attribute \"Source for referenced property\" at the target system: Set the attribute name of the user, which is used in the member attribute of the group in the connected system. For a Lotus Notes system this would be the \"fullname\". For LDAP and Active Directory systems it is the DN, which is also used as identifier in mapping: Hence you can leave this attribute empty. In the workflow configuration, the channels must be handled differently: For the connected directory representing the DirX Identity target system, the channel members must be assigned as the member channel in the General tab of the accounts channel and must be de-assigned at the group channel. The accounts must be imported after the groups. Therefore, the \"Export Sequence Number\" in the accounts channel must be set to \"2\" and that of the groups channel must be set to \"1\". For the connected directory representing the connected system, it is the other way around: The groups must be imported after the users / accounts. Therefore, the \"Export Sequence Number\" in the accounts channel must be set to \"1\" and that of the groups channel must be set to \"2\". Also regarding the members channel assignment the default setting - members channel is assigned at the groups channel - can be left. Java-based workflows are started: as the result of an event sent because of an object change regularly by a schedule manually in Identity Manager The next sections provide more information about these start-up methods. Conceptually, we distinguish between the following types of event-based workflows: Provisioning workflows, which provision accounts and groups to a connected system. Password change workflows, which receive password changes of a user or a privileged account and update them in the Identity domain and in the user’s associated accounts in connected systems as necessary. Event-based maintenance workflows, which are started when an entry (such as a user, a role, or an organizational unit) within the Identity domain is changed. They determine the changes that must be made to the entry itself or to associated entries within the domain. Typical reasons for such changes are provisioning or consistency rules that must be applied. Provisioning Workflows Typically account or group changes trigger a real-time workflow, as illustrated in the following figure. Figure 11. Event-Triggered Provisioning Workflow Suppose a manager at Web Center or Identity Manager assigns a role to a user. DirX Identity resolves the resulting access rights, creates an account in the Identity Store, puts it into the member list of a group and sends two change events: one for the account, and one for the group. A workflow associated with the target system receives the events and synchronizes the changes in Identity Store with the connected system. The same process occurs as result of a request workflow. Usually, the last activity in an approval or object creation workflow is the \"apply change\" activity. It stores the changes requested in the workflow and sends the same change events for accounts and groups as in the previous scenario. Note that DirX Identity sends the changes only if the flag \"Enable Real-time Provisioning\" is set to active. Password Workflows Real-time provisioning workflows are also involved in password changes. A typical scenario is illustrated in the following figure. Figure 12. Password Change Workflow Assume that a user changes her password in the Windows domain. the DirX Identity Windows Password Listener captures the new password at the domain controller and sends an appropriate change event. The \"User Password Event Manager\" receives the event, searches the Windows account and then the user entry and updates the password in the Identity Store. Then it finds all accounts of the user for which password synchronization is enabled (see the flag at the target system entry) and sends messages that request the password change at the connected systems. These requests are handled by a \"set password\" workflow. It takes the new password and if required, the current password out of the message and updates them at the connected system. Nearly the same process occurs if the user changes her password with Web Center. The \"User Password Event Manager\" workflow finds the user directly with the DN given in the event, updates the password and sends the change requests for the accounts. A user can also use Web Center to change the password of a privileged account. Web Center sends a password change event for the account, which is processed by the \"Account Password Manager\" workflow. It updates the password at the account in the Identity Store and sends the same password change request as in the previous scenarios to update the password at the connected system. Event-based Maintenance Workflows The maintenance workflows work only with the DirX Identity domain. They are invoked when a domain entry is created or changed, not only accounts or groups but also users, roles, permissions and business objects. Their processing depends upon the entry type, but typically they apply provisioning and consistency rules and check for broken links. The following figure illustrates maintenance workflow operation. Figure 13. Event-based Maintenance Workflow The workflows are triggered by a change event that is published by a number of sources: Web Center, Identity Manager Provisioning Web Service clients Import workflows, both Tcl-based and Java-based workflows The client publishes a change event for an entry if the corresponding entry type is activated in the domain’s event policy. The message topic includes the entry type, which allows the IdS-J server to invoke the appropriate maintenance workflow. The workflow analyzes the changed attributes and performs several maintenance tasks depending on the entry type. For example, the user maintenance workflow: Applies consistency rules. Checks for broken links. Applies provisioning rules, if their filters match the user attributes. Resolves the user and updates the accounts, if a permission parameter has been changed. Updates account attributes, if an attribute has been changed that matches a list of configured names or wildcards. Ignores the event, if none of the above conditions applies. If in the course of a user resolution an account or a group is modified, the workflow publishes a provision request that triggers a provisioning workflow. You can also define schedules for Java-based workflows. The IdS-J workflow scheduler starts the workflow at the scheduled times. A scheduled workflow operates a little bit differently from the way it operates when triggered by an event. It synchronizes all entries from the source to the destination system. For a synchronization workflow, this means that the workflow reads all accounts and groups from Identity Store and updates them one after the other at the connected system. If you want to define a schedule for cluster workflows (which can provision a set or cluster of homogeneous connected systems), you must specify a search filter for all target systems to be provisioned according this schedule. For each target system, the scheduler starts a workflow instance that provisions only the accounts and groups of this system. Note that starting a real-time workflow manually or on a schedule may not make sense for all types of workflows. This is especially true for Maintenance workflows: they only process events. Password workflows: they require the new password in the event message. You can also start a workflow manually in Identity Manager in one of two ways: In the Connectivity configuration, select a Java-based workflow and start it from the context menu. The workflow works as if started by a schedule and provisions the entire target system. In the Identity domain, choose a target system and from the context menu, select Connectivity, then the workflow, and then start the workflow. This method is especially appropriate for cluster workflows: they process only the entries of this target system. Note that starting a real-time workflow manually or on a schedule may not make sense for all types of workflows. This is especially true for Maintenance workflows: they only process events. Password workflows: they require the new password in the event message. This section describes how to customize the default set of Java-based workflows provided with DirX Identity. It explains how to: Configure and implement user hooks Create complex mapping functions with Java classes Test real-time workflow mapping Create connector filters that intercept calls to connectors User hooks are extensions made by customers to DirX Identity common code that are independent of this code and which therefore do not change with product updates. The DirX Identity default application code is divided into common code (control and central scripts that can change with product updates) and user hooks (customer routines that are protected from product updates). User hooks in a Provisioning workflow are called at various phases while synchronizing a source entry into a destination system. They can Read the source entry, the joined entry and the mapped entry Change the mapped entry Have access to the source and destination systems via the connectors. There are two types of user hook: A global user hook, which applies to the whole activity A channel user hook, which applies to the entries associated with a channel The following figure illustrates user hooks. Figure 14. User Hooks As illustrated in the figure, you can have different user hooks when importing an account into Identity domain a user into a connected system a group into a connected system a group into Identity domain. This section describes how to: Configure a user hook Implement a global user hook Implement a channel user hook Implement a user hook for e-mail notifications. Deploy a user hook. Run executables from a user hook. This section explains how to configure a global and a channel-specific user hook. The global user hook is configured in the XML configuration of a job, which itself is part of an activity configuration. A channel user hook is configured for each channel. Their configuration parameters are the same. A job is configured as part of an activity within a element. The global user hook is part of the controller configuration. The XPath expression of the corresponding XML element reads: workflow/activities/activity[@name='…​']/job/controller/operation/user hook. A job configuration collects a number of elements, which itself collect a number of elements. A channel user hook is a sub-element of the element. Here the XPath notation: workflow/activities/activity[@name='…​']/job/port/channel/user hook. The XML attributes of the element include: classname: The full class name of your user hook Java class. It must implement the IGlobalUserHook or the IUserHook interface. implementationLanguage: Currently only the value \"java\" is supported. It’s also the default, if omitted. data: The source of your user hook Java class. code: The octets of the compiled unit. This property is loaded by the controller instead of searching a class from the class path. This property will be filled by the Identity Manager in the course of configuration. Sub-properties of : Some properties are denoted as property sub-elements as follows: . The following properties are evaluated by the controller: sourcepath: The full path name of the Java file that contains the source of your user hook implementation. This property is supported for local testing. A global user hook is called at the beginning and at the end of a job. It must implement the interface com.siemens.dxm.join.api.IGlobalUserHook with the following methods: setGlobalContext With this method, the controller passes a reference to the global context. It gives access to the connectors, the configurations of the job, the controller and the user hook and to the current working directory. prolog: The method prolog() is called at the beginning of a job, before any entry or channel is handled. It allows you to prepare a job and set any global properties into the job context. Among other tasks, the global user hook can add its proprietary properties in the global context. The join engine passes the updated global context to each channel user hook. In order to avoid overlap of other property names, use custom prefixes such as org.myorg.mydep.MyProperty. epilog: The epilog() method is called at the end of the job. It allows you to close any open resources, such as file or network handles. The join engine calls the channel user hook in various phases while it processes an entry. A user hook implements the interface com.siemens.dxm.join.api.IUserHook and optionally com.siemens.dxm.join.api.IUserHookExt. The following figure provides an overview of the API operations and when they are called from the join engine: Figure 15. Join Engine-User Hook Operation Calling Sequence As shown in the figure, there are the following user hook operations: prolog: Before the first entry is processed, the join engine passes the environment properties of the source and the target channel to the user hook. These properties comprise the context properties set by the global user hook and a set of \"specific attributes\" taken from the following entries of the Connectivity configuration database: channel, connected directory, workflow, global configuration. This action allows the user hook to open a file or a connection to another system or do some other preparation task. It may add its own properties to the target environment. The join engine reads them from the user hook at several times via the method getTgtEnvironment (see below). processSourceEntry After the join engine has read a source entry, it asks the user hook whether to process it. The processSourceEntry method receives the identifier and the list of attributes of the source entry and returns a boolean. In case it is false, the join engine skips processing this entry. preUpdate The join engine reads the joined entry from the target system. Then it calls the preUpdate method of the user hook (note: the method of the IUserhook API). As parameters it passes: identifier and attribute list of source and joined entry, references to connectors to source and target system. This action allows the user hook to read additional information from the source or the target, do some processing at the target or some other task before the entry is updated at the target system. This method returns a boolean. If it is set to false, the join engine skips further processing this entry and continues with the next one. For a method that is called after the mapping and before the update, see the preUpdate method of the IUserHookExt interface. getSrcEnvironment The join engine calls this method several times: before the prolog, before the mapping and before the epilog. It allows the user hook to extend the environment properties related to the source channel by its own proprietary ones. getTgtEnvironment The join engine calls this method several times: before the prolog, before the mapping and before the epilog. It allows the user hook to extend the environment properties related to the target channel by its own proprietary ones. preUpdate (API IUserhookExt) After the join engine has mapped the source entry to the target entry and before it updates the target entry, it calls the preUpdate method of the user hook, if it implements the interface IUserHookExt. As parameters, it passes the identifier and attribute list of the source and joined entry, the mapped entry, and references to connectors to source and target system. This action allows the user hook to change the mapped entry, do some processing at the target or some other task before the entry is updated at the target system. This method returns a boolean. If it is set to false, the join engine discontinues processing this entry and continues with the next one. getCallDelete When the join engine encounters a mapped entry with request type DELETE, it first asks the user hook whether a custom delete method must be called. When this method returns true, the join engine calls the user hook method delete(). Otherwise it performs the delete request at the connector using the identifier of the mapped entry. delete The join engine calls this method when an entry is to be deleted by the user hook instead of performing the delete request itself; that is, if the getCallDelete method returns true. It passes a reference to the connector for the affected system and the mapped entry. As a result, the user hook can issue its own request at the connector (for example, a modify or extended request) or perform other tasks without the connector. postUpdate After the entry has been updated, the join engine calls this method. It passes the identifier and the attributes of the source and the joined entry, the performed update request, the response with its result code and the source and target connector. The update request and the response can be null if no update was performed because the entry was already up-to-date. These two parameters can also be null if the user-defined delete operation is used; in this case, no information about user-defined update requests and update responses is available; it is even unknown whether an update operation has been executed at all. This action allows the user hook to perform additional requests for the updated entry both at the source and the target system. This method returns a boolean. If it is set to false, the join engine discontinues processing this entry and continues with the next one. epilog This method is called after all the entries of a channel have been processed. This action allows the user hook to close all pending handles (for example, sockets or files). For a detailed description of the parameters, see the Java interface documentation in the folder Documentation/DirXIdentity/RealtimeWorkflows. Review the contents of the Additions\\RealtimeWorkflows\\samples folder in the product DVD for a sample implementation that demonstrates basic handling. For details on how to read and set the identifier and attributes of source or target entries, see the section \"Evaluating a Mapping Entry\". Deployment Make sure the jar file containing your user hook implementation is deployed in the correct folder of your IdS-J server, which is: install_path*/ids-j-domain-S*n*/confdb/common/lib* It is possible to send an e-mail notification in a user hook. You can find the sample Java-based workflow using the mail notification for account creation in the sample workflows for Extranet Portal, which is the part of the sample My-Company connectivity scenario. See the chapter \"Loading the Connectivity Scenario\" in the DirX Identity Tutorial for more information about the My-Company scenario. The provided user hook can be found on the DVD as Java class NotifyMailAccountCreationUserHook.java. It implements in particular the method postUpdate, which takes the mail attribute of the account and creates a specially-handled SPMLv1 request; this request is then sent to connector identified by the name \"notify\". If the provided mail is valid and the notify activity is correctly configured, it sends the notification to that mail address about account creation. Tailor this class to your needs if you intend to use special mail notifications in a Java-based workflow. Make sure the jar file that contains your user hook class is deployed in the correct folder of your IdS-J Server, which is: install_path*/ids-j-domain-S*n*/confdb/common/lib* DirX Identity provides a general user hook class UserHookRunExecutable, which allows running any executable configured in a realtime workflow channel object. It can be used immediately without any extra programming. Specify the class name com.siemens.dxm.join.userhook.common.UserHookRunExecutable in the General tab of the channel and specify the executable name and command line in the channel-specific attributes. For the preUpdate and the postUpdate user hook methods, you can configure an executable with a command line in the channel-specific attributes post_executable, post_cmdline, pre_executable, pre_cmdline. In the postUpdate case, the executable is only called if the update (add or modify) of the object was successful. Architecture The following figure illustrates the architecture of running an executable from a user hook: Figure 16. Running Executables from a User Hook Concept The following features are available: Running executables as part of a user hook. Using the standard user hook with a few configuration steps in any user hook. Using the source code starting point for more complex solutions. Working in a high availability scenario. Running in a multi-threaded environment. Redirecting of logging to the Java-based Server logs by default. The following samples are provided: A PowerShell script for personal folder creation. Several PowerShell scripts for managing Exchange mailboxes. Command Line Parameters of the Executable The command line parameters specified in the channel specific attributes post_cmdline and/or pre_cmdline can contain fixed parts and variable parts. The variable parts can reuse all mapping variables by specifying the source, target, env and joinedEntry constructs, like ${source.dxrName}, ${target.homeDirRoot}, ${env.domain}, ${joinedEntry.cn}. Central (Shared) Script Folder Beneath each Java-based Server’s repository folder, which can be specified at the Java-based Server object in the Connectivity Expert View, there is a subfolder scripts where the executables can be located. In a distributed Java-based Server environment, this high availability location can be shared by all running instances. The absolute path of the scripts folder is put into the Java-based Server context and can be accessed from user hooks by the environment variable ${env.scripts}. It can also be specified in the channel-specific attributes; for example, in the post_executable or post_cmdline attribute. Output File and Error Handling By default, the executable’s standard output and standard error messages and the exit code are written to the Java-based Server log file. If the executable fails, the user hook preUpdate and/or postUpdate methods return “false” to the join engine according to the user hook API, which causes the join engine to pass an error record to the Audit Connector and to the Monitor View and to stop processing this entry. You can also define executable return codes that you classify as successful by specifying the specific attributes post_ok_codes and/or pre_ok_codes for executables started in the related user hook methods. The return codes are specified as integer values and must be separated by blanks. If nothing is specified, the return code “0” is regarded as successful by default. If the executable’s output is to be written to separate files, specify the output file names in the command line as parameters. The executable must interpret these output file names. If you specify your own output files, we recommend including the Workflow Instance ID in the names of the output files to prevent running workflow instances started through further events from overwriting output files that have already been recorded. The Workflow Instance ID is also contained in the Java-based Server context and can be used by specifying the environment variable ${env.dxm.uh.wfInstID}. The workflow name is accessible in the environment and must be specified by ${env.dxm.uh.wfName}. Interrupting Executables If the activity that starts the executable times out or the Java-based Server shuts down, the Java-based Server sets a cancellation flag. During a \"graceful\" shutdown period, the running activities (this is a standard task of the controller implementations) check this flag at certain times and finish the process. A good time to perform this task, for example, is after one event has completed in a scheduled synchronization. After the configurable graceful shutdown period has elapsed, the Java-based Server interrupts all running activities. If an executable has not yet finished, the UserHookRunExecutable class catches this interruption and kills the executable, which was started as an asynchronous process. Killing Executables after a Configurable Time Period Independently of this interruption scenario, the UserHookRunExecutable class starts the process running the executable asynchronously and asks for the process return value in a loop for a certain time (by default, 90 seconds) and then kills the process if it has not finished in this time frame. You can configure this time in milliseconds in the channel-specific attribute post_timeout for executables started in the postUpdate user hook method or in the pre_timeout specific attribute for executables started in the preUpdate user hook method. Connection Parameters If the activity’s connection parameters like server, user or password should be passed as parameters to the executable, you can extend the UserHookRunExecutable class by adding the desired parameters to the command line. For example, the connection parameters of the target connector can be accessed in a user hook the following way: DxmConnectionConfig connectionConfig = null; DxmConnectorConfig connectorConfig = (DxmConnectorConfig) (_tgtEnv.get(\"dxm.uh.connectorConfByName.ts\")); if(connectorConfig != null) { DxmConnectionConfig connectionConfig = (DxmConnectionConfig) connectorConfig.getConnections().firstElement(); String server = connectionConfig.getServer(); int port = new Integer(connectionConfig.getPort()); String user = connectionConfig.getUser(); String pwd = connectionConfig.getPassword(); } This coding example is already contained as a comment in the standard UserHookRunExecutable class provided as source code. The bind parameters in the sample PowerShell scripts delivered with DirX Identity are kept in the scripts. The scripts read the password from a file that contains the password that you have saved encrypted with PowerShell. You can provide Java sources or pre-compiled Java classes to realize complex mapping functions. They can be configured for Calculating the identifier of the target entry; for details, see the section \"Identifier Mapping\". Mapping of attributes; for details see the section \"Attribute Mapping\". Post mapping; that is, after all attributes have been mapped and before the update of the entry is performed. For details, see the section \"Post Mapping\". This section also provides information how to deploy a mapping class. evaluate a mapping entry. handle environment properties. handle the mapped entry. set the map result. write log messages. You can find a sample source that implements all interfaces in the following folder of your installation DVD: Additions\\RealtimeWorkflows\\samples A class that realizes the mapping of an identifier must implement the interface com.siemens.dxm.join.api.IMapIdentifier. It consists of one method: Identifier mapId(MappingEntry source, MappingEntry joined, HashMap environment) The join engine passes the following parameters: source: the source entry, or null if no source entry exists, which occurs when validation workflows find entries at the target that have no corresponding source entry. joined: the joined entry, or null if no joined entry has been found. environment: a map of environment properties collected by the specific attributes taken from the affected channel, connected directory, activity and workflow entries. User hook implementations can append additional properties. The identifier mapper must return the new identifier of the mapped entry. For an example see the file Idmapping.java on the DVD in the folder Additions/RealtimeWorkflows/samples/mappings For details on how to handle these parameters, see the following sections: Evaluating a Mapping Entry Setting the Map Result Handling Environment Properties A class that realizes the mapping of an attribute must implement the interface com.siemens.dxm.join.api.IMapAttribute. It consists of one method: MapResult mapAttr(String tgtAttrname, Request.Type reqType, MappingEntry source, MappingEntry joined, HashMap environment) The join engine passes the following parameters: tgtAttrname: the name of the target attribute. reqType: the proposed request type. The attribute mapper can change it in the returned map result. Allowed types are: Request.Type.ADD, Request.Type.MODIFY, Request.Type.DELETE. source: the source entry, or null if no source entry exists, which occurs when validation workflows find entries at the target that have no corresponding source entry. joined: the joined entry, or null if no joined entry has been found. environment: a map of environment properties collected by the specific attributes taken from the affected channel, connected directory, activity and workflow entries. User hook implementations may append additional properties. The attribute mapper must return the map result. In the simplest case, it contains only one value for the attribute. But you can also set a series of attribute modifications, a set of operational attributes and also return a changed request type. The request type determines the request to be issued to the target system connector: add a new entry, modify the existing joined entry or delete the existing entry. A note concerning deleted source entries: normally, the join engine deletes an attribute value in the target entry, if the mapped value is empty or null. If the source entry no longer exists, the mapping routines typically produce empty values for the mapped attributes. However, if you want the target entry just to be modified (for example, set the state to DELETED) or moved (tombstone!), you typically do not want the target attribute values to be deleted. To support this operation, the join engine deletes the attribute values only if the modification operation is set to \"delete\". By default, it is set to \"replace\". As a result, if you want a target attribute to be deleted if the source entry no longer exists, it is not sufficient to return an empty value. You must explicitly set the operation in the modification to \"delete\". The following code snippet provides an example: DsmlModification targetMod = new DsmlModification(); targetMod.setName(tgtAttrname); targetMod.setOperation(DsmlModificationOperationType.DELETE); For details on how to handle the input parameters, see the following sections: Evaluating a Mapping Entry Setting the Map Result Handling Environment Properties A class that realizes the post mapping of an entry must implement the interface com.siemens.dxm.join.api.IPostMapping. It consists of one method: MappedEntry doPostMapping(MappedEntry mappedEntry, Request.Type reqType, MappingEntry source, MappingEntry joined, HashMap environment) The join engine passes the following parameters: mappedEntry: the result of the previous attribute and identifier mappings. reqType: the proposed request type. The attribute mapper can change it in the returned map result. Allowed types are: Request.Type.ADD, Request.Type.MODIFY, Request.Type.DELETE. source: the source entry, or null if no source entry exists, which occurs with validation workflows when entries at the target are found that have no corresponding source entry. joined: the joined entry, or null if no joined entry has been found. environment: a map of environment properties collected by the specific attributes taken from the affected channel, connected directory, activity and workflow entries. User hook implementations may append additional properties. The post mapping returns the new mapped entry. Post mapping is called after all attribute mappings and the identifier mapping have been performed. The post mapping can modify all attribute modifications, the identifier, operational attributes and the request type. The request type determines the request to be issued to the target system connector: add a new entry, modify the existing joined entry or delete the existing entry. For details on how to handle these parameters, see the following sections: Evaluating a Mapping Entry Handling Environment Properties Handling the Mapped Entry Make sure the jar file that contains your mapping class is deployed in the correct folder of your IdS-J server, which is: install_path*/ids-j-domain-S*n*/confdb/common/lib* A source or joined entry is represented as Java class com.siemens.dxm.join.map.MappingEntry. The mapping entry holds the entry’s identifier, list of attributes and operational attributes. Read Identifier Each entry has an identifier. It is modelled according the OASIS SPML standard. The identifier has a type (most often DN or generic string), an id value and optionally a list of identifier attributes. The following code snippet shows how to read the identifier value from the joined entry: Identifier id = null; String idvalue = null; if (joined!=null) id = joined.getId(); if (id!=null) { IdentifierType type = id.getType(); idvalue = id.getIdentifierChoice().getId(); } Read Attributes from the Source or Joined Entry Each source and joined entry contains a list of attributes, where each attribute may have a list of values. The values are typically of type string, but may sometimes also be binary. The following code snippet shows how to read the string attribute 'sn' from a source entry. Reading from the joined entry is identical. String srcSn; if (source != null && source.getAttrs() != null) { DsmlAttr srcSnAttr = (DsmlAttr) source.getAttrs().get(\"sn\"); if (srcSnAttr != null) { srcSn = srcSnAttr.getValue(0); } } Reading a multi-value string attribute is almost the same. You get an array of strings: String[] srcDescriptions; if (source != null && source.getAttrs() != null) { DsmlAttr srcAttrDescription = (DsmlAttr) source.getAttrs().get(\"description\"); if (srcAttrDescription != null) { srcDescriptions = srcAttrDescription.getValue(); } } The following snippet shows how to get a binary value and assure the attribute’s member type base64: // get - fictive - single-value attribute \"binaryValue\" from source entry byte[] binValue = null; if (source != null && source.getAttrs() != null) { DsmlAttr srcBinAttr = (DsmlAttr) source.getAttrs().get(\"binaryValue\".toLowerCase()); if (srcBinAttr != null) { String memberType = srcBinAttr.getMemberType(); if (DsmlValue.BASE64BINARY_TYPE.equalsIgnoreCase(memberType)) { binValue = srcBinAttr.getBinValue(0); } } } Note: Use lower-case notation for attribute names. When storing attributes internally in the hash map, the join engine uses the lower-case notation of the attribute name as a key. For more details on how to handle attribute,s take a look at the Java integration framework. Read an Operational Attribute Reading an operational attribute from a source entry is nearly identical to reading a 'normal' attribute. Here a sample snippet for the (fictitious) attribute 'dxrPrimaryKeyOld': // read operational attribute \"dxrPrimaryKeyOld\" String opKey = null; if (source != null && source.getOpAttrs() != null) { DsmlAttr srcOpAttr = (DsmlAttr) source.getOpAttrs().get(\"dxrPrimaryKeyOld\".toLowerCase()); if (srcOpAttr != null) { opKey = srcOpAttr.getValue(0); } } Operational attributes, like the normal ones, can be multi-valued or binary. Note: Use lowercase notation for attribute names. When storing attributes internally in the hash map, the join engine uses the lowercase notation of the attribute name as a key. All mapping functions have access to environment properties, which are collected from the respective configuration entries (channel, connected directory, activity, workflow) or set by a global or channel user hook. The environment properties are simply a hash map of objects identified by their name of type String. The following snippet read the standard property \"user_base\": // read environment property \"user_base\" String userBase = (String)environment.get(\"user_base\"); Setting an environment property is also as simple: // set a custom environment property environment.put(\"com.siemens.map.ldap.myEnvProperty\", \"someValue\"); In order to avoid naming collisions, we recommend that you use an adequate prefix for your property names that is analogous to the one shown in the example: com.siemens.map.ldap. The mapped entry is first built up by the identifier mapping and the list of attribute mappings. After that, the join engine passes the result to the post mapping (if configured). The post mapping also has access to the source and the joined entry. It can change the complete mapping entry: the identifier, the attribute modifications, the operational attributes and the request type. The sections Identifier Mapping and Evaluating a Mapping Entry show how to read the identifier and the source and joined entry. This section shows how to read the mapping entry and modify it. Identifier Reading and setting the identifier is simply realized by a getter and a setter method as the following code snippet shows: Identifier id = mappedEntry.getIdentifier(); // change the identifier ... mappedEntry.setIdentifier(id); See the section on Identifier Mapping for information on how to work with the Identifier. Attribute Modifications You can read the modifications for a single attribute or get a map with the modifications of all attributes. Updating the modifications is done on a per-attribute basis as the following snippet shows: DsmlModification[] snMods = mappedEntry.getModification(\"sn\"); HashMap modMap = mappedEntry.getModifications(); snMods = modMap.get(\"sn\"); // change the modifications for attribute \"sn\" mappedEntry.updateModification(snMods); For more details on working with modifications, see \"Evaluating a Mapping Entry\" and \"Setting the Map Result\". Operational Attributes Reading and modifying the operational attributes is very similar to the attribute modifications. You can either get them all as a map or read them one-by-one. Updating is done on a per-attribute basis: HashMap opAttrMap = mappedEntry.getOpAttrs(); DsmlAttr myOpAttr = mappedEntry.getOpAttr(\"myOperationalAttribute\"); myOpAttr = opAttrMap.get(\"myOperationalAttribute\"); // change the operational attribute mappedEntry.setOpAttr(myOpAttr); For more details on working with operational attributes, see \"Evaluating a Mapping Entry\" and \"Setting the Map Result\". Request Type The post mapping can get the request type from the parameter list or read it from the mapped entry via the getter method. Updating it is done via the corresponding setter method: mappedEntry.setRequestType(reqType); The mapping result for an attribute consists of the following items: A list of modifications A list of operational attributes The request type Request Type The request type determines the kind of operation to be issued at the target system connector: ADD, MODIFY or DELETE. For the list of allowed values see the static enumeration in the class com.siemens.dxm.join.util.Request. Initially, the join engine proposes a value: MODIFY, if it has found a joined entry. ADD if no joined entry is found. In the mapping function, you can change the value according your needs. The following code snippet shows how to set the type to DELETED, which results in a delete request: // delete target entry, if mapped state DELETED if (IState.DELETED.equalsIgnoreCase(tgtState)) { targetMapResult.setRequestType(Request.Type.DELETE); } Attribute Modifications The mapping result contains a list of attribute modifications. Each attribute modification needs the attribute name, the modification operation (replace, delete, add) and the attribute value(s). The modifications are applied as they are, if the request is a MODIFY. In case of an ADD, the join engine transforms them to a list of attribute values; that is, it skips the operation. The mapping function does not usually need to be aware of this. The following code snippet shows how to create a MapResult object, create one attribute modification with the attribute name and the default operation REPLACE, add an attribute value and set the new modification and a request type in the mapping result: MapResult targetMapResult = new MapResult(); targetMapResult.setRequestType(reqType); DsmlModification targetMod = new DsmlModification(); targetMod.setName(tgtAttrname); targetMod.setOperation(DsmlModificationOperationType.REPLACE); // calculate the attribute value ... String value = \"...\"; targetMod.addValue(value); targetMapResult.addModification(targetMod); As you can see from the sample, it’s even possible to add a number of modifications for the same attribute or for a list of attributes. Operational Attributes The mapping function may append operational attributes to the mapping result. Note that they are specific for a connector or a SPML target service. Here is a short code snippet that shows how to create an operational attribute and add it to the mapping result: // add an operational attribute to the map result DsmlAttr dstOpAttr = new DsmlAttr(); dstOpAttr.addValue(userBase); dstOpAttr.setName(\"myOperationalAttribute\"); targetMapResult.addOperationalAttr(dstOpAttr); If you want to implement logging, you can use a log support that provides some simple log methods. The following code snippet shows how to obtain the log support and issue a debug log message: // Obtain the Log support for your class; here \"SampleMapper\" + private static final LogSupport logger = LogSupport.forName(SampleMapper.class); // Write a debug log + logger.debug(\"SampleMapper - Source Entry SN = \" + srcSn); For logging messages with other levels, use the appropriate methods: error warn info The messages are written to the same files as that of the other DirX Identity components. The following sections provide information on how to develop and test your own Java mapping classes for a specific real-time workflow. The Java Eclipse Project dxmTestMapping can help you develop and test your Java mapping classes needed for a specific real-time workflow. The project is delivered on the DirX Identity DVD as a zip file and can be unpacked to any location in the file system. It has all the necessary libraries in its own subfolder and is independent of any installed DirX Identity files. The mapping can be tested either by running the batch file runTestMapping.bat or by running the Junit-Test TestSample.java. The Junit Test is configured in build.xml, so it is run automatically by starting the build process with mkTestMapping.bat. It can also be started inside the project by configuring a Junit Test with the TestSample class. In both cases (batch file or Junit Test), the agent framework main class AgtSessionExe is called with the configuration file src.test/confs/sample/conf.xml. The resulting trace and response files can be inspected in the src.test/confs/sample subtree. The Java Eclipse Project dxmTestMapping consists of the following subtrees and files: src.test/confs/sample/conf.xml This is a standalone agent framework job configuration file containing the mapping of several attributes for one entry including the mapping of the Java source code EmployeeTypeSource.java. This mapping is configured in the first (and only) channel of the TS-port, hence in job/port[@name='TS']/channel/mappingDefinition [XPath notation]. As a controller the class EntryMappingController, which is part of the join package, is specified in conf.xml. It expects a SPML search request in the request.xml file. The search request is passed to the Identity Domain connector, which gives the search result back in domain-response.xml. The controller takes the first (and only) search result entry as the source entry, configures the mapping in the (one and only) channel of the TS-port, creates an add or mod request from the mapped entry and passes it to the TS-connector configured in the TS-port. The response of the TS-connector is passed to the configured response writer, which writes it into the response.xml file. The configured connectors are only test connectors that write their requests into files and read responses from files. The TS-connector can also be replaced by a real target system connector if that part of the process should be tested besides the mapping. src.test/confs/sample/request.xml Holds the SPML search request passed to the Identity Domain connector by the EntryMappingController. src.test/confs/sample/domain-response.xml Holds a search result entry taken by the EntryMappingController as the source entry when performing the mapping as configured in the channel. src.test/TestSample.java The Junit test class to run the agent framework job configured in src.test/confs/sample/conf.xml src/map/samplets/accounts/to/EmployeeTypeSource.java The sample Java source code, for which an attribute mapping with type javasource is configured in conf.xml. src/map/samplets/accounts/to Folder containing further Java source code mapping files performing an account attribute mapping from TS to Identity. src/map/samplets/accounts/from Folder for Java source code mapping files performing an account attribute mapping from TS to Identity. src/map/samplets/groups/to Folder for Java source code mapping files performing a group attribute mapping from Identity to TS. src/map/samplets/groups/from Folder for Java source code mapping files performing a group attribute mapping from TS to Identity. After the single mappings have been tested as described, each channel as it is configured in LDAP can be tested as a whole the following way: Go to the corresponding LDAP channel, open the Mapping page and insert a new Java source code mapping if it does not yet exist. Go to the Java source mapping LDAP object and import your tested Java source code mapping file (like the EmployeeTypeSource.java mentioned above). Repeat this for all Java source code attribute mapping files belonging to this channel and then export the resolved channel configuration into a file and copy it into the channel part of your standalone conf.xml file. Now the standalone batch script can be run again to check whether the LDAP configuration is also correct. The environment property source path which you can see in the conf.xml sample no longer exists in the resolved channel, because at this time the compiled code exists in the channel section. As a result, the source path where the files to be compiled can be found if no byte code exists is no longer needed. Connector filters intercept calls from the Provisioning controller (that is, the \"join engine\") to connectors. They see all requests to and all responses from the connector. The following figure illustrates connector filters. Figure 17. Connector Filters A filter can change requests to the connector or responses from the connector, issue new requests to the connector, prohibit sending requests to the connector or even perform other tasks without the connector on the connected system. As an example, it could create or update a share on a Windows file system. By default, DirX Identity uses a connector filter for decrypting and encrypting data, especially passwords. Other custom filters can be inserted before or after the default filter. The connector filters are part of a chain of filters. In its doFilter() method, each filter receives the request. Usually, it checks the type of request (is it an Add, a modify, delete or search), optionally modifies it and passes it to the successor in the chain by calling its doFilter() method. This method returns the response from the successor. The filter can inspect it, modify it or do anything else. But it must return a response to its predecessor in the chain. The framework passes the configuration options of a connector filter in its open() method. Essentially, they are a list of simple properties. The section \"Configuring a Connector Filter\" provides more detail. Some filters might need to access the connected system directly and bypass the connector. In order to reduce configuration, they have access to the connector configuration, especially to address parameters and binding credentials. For this they must implement the interface ConnectorFilterConfig, through which the connector framework passes the connector configuration. The connector filter is configured as part of the job configuration, which itself is part of an activity configuration. This section describes the XML format of the configuration that is passed to the framework. For the presentation in Identity Manager, see a filter entry beneath a port. A job configuration contains a number of elements. A contains a and a list of and elements. A element represents the configuration of a connector filter. XML attributes of : classname: The full class name of the connector filter Java class; mandatory. name: An optional name of the filter. Sub-Elements of : A allows only a number of sub-elements. Each supports the following XML attributes: name: The name of the configuration property; mandatory. value: The value of the configuration property. Make sure the jar file that contains your connector filter implementation is deployed in the correct folder of your IdS-J server, which is: install_path*/ids-j-domain-S*n*/confdb/common/lib* Notes: All dependent jar files for your connector filter must also be deployed in the above folder. For a SAP ECC UM connector filter, you then need to move the files sapjco3.jar, the associated shared library (sapjco3.dll/.so) and SapUM4Role.jar from confdb/jobs/framework/lib to the above mentioned folder. Alternatively, you can just put your SAP ECC UM connector filter jar file into the folder confdb/jobs/framework/lib. For more details on the interfaces, see the chapter on \"Java Connector Integration Framework\" in the DirX Identity Integration Framework Guide. You can also find information about reading the configuration and working with requests and responses in this guide. A sample is provided on the product DVD in the folder: Additions\\SampleConnectorFilter. This section describes how to customize the default set of Java-based workflows provided with DirX Identity for password management with user hooks. User hooks for password synchronization controllers are based on an extended global user hook interface used in common Java-based Provisioning workflows. Currently only User Password Event Manager workflow can use a user hook. The user hook can: Read the source password event, user entry and related account entries. Skip the processing of a source password event for a user entry or for an account. Gain access to the Identity store and other components via the connectors. This section describes how to: Configure a password user hook. Implement a password user hook. Deploy a password user hook. The password user hook is configured in the XML configuration of the job for the User Password Event Manager controller, which itself is part of an activity configuration. A job is configured as part of an activity within a element. The password user hook is part of the controller configuration. The XPath expression of the corresponding XML element reads: workflow/activities/activity[@name='…​']/job/controller/operation/user hook. The XML attributes of the element include: classname: The full class name of your user hook Java class. It must implement the IPasswordUserHook. implementationLanguage: Currently only the value \"java\" is supported. It’s also the default, if omitted. data: The source of your user hook Java class. code: The octets of the compiled unit. This property is loaded by the controller instead of searching a class from the class path. This property will be filled by the Identity Manager in the course of configuration. Sub-properties of : Some properties are denoted as property sub-elements as follows: . The following properties are evaluated by the controller: sourcepath: The full path name of the Java file that contains the source of your user hook implementation. This property is supported for local testing. A password user hook is called several times during execution of the workflow job. It must implement the interface com.siemens.dxm.join.api.IPasswordUserHook with the following methods: setGlobalContext With this method, the controller passes a reference to the global context. It gives access to the connectors, the configurations of the job, the controller and the user hook and to the current working directory. prolog: The prolog() method is called at the beginning of a job, before any entry is handled. It allows you to prepare a job and set any global properties into the job context. epilog: The epilog() method is called at the end of the job. It allows you to close any open resources, such as file or network handles. processPasswordEvent: The processPasswordEvent() method is called at the start of processing of an incoming JMS message that contains a password change event. It allows you to omit a password change for certain users on specific conditions. preUserPasswordUpdate: The preUserPasswordUpdate() method is called just before a real password change in the Identity store. You can stop the processing or define additional actions. postUserPasswordUpdate: The postUserPasswordUpdate() method is called after successful change of a user password in the Identity store. You can define additional actions like notifications. You can also stop further processing of the accounts. processAccountPassword: The processAccountPassword() method is called just before a JMS notification for a setPassword workflow is sent. The method is called for all related accounts. You can prevent the workflow from sending the event and stop the processing of the account or define additional actions. Make sure the jar file that contains your password user hook class is deployed in the correct folder of your IdS-J Server, which is: install_path*/ids-j-domain-S*n*/confdb/common/lib* All event-based maintenance workflows call a user hook during processing of the event. This action is usually performed after normal operation just before the entry is to be stored to LDAP, but might be different for certain entry types. Consult the respective description of the workflow’s operation. A user hook is a Java class that implements the API com.siemens.idm.jobs.ebr.api.IEventProcessor. The user hook has access to the event and the changed entry. It can change the entry and perform other operations in the Identity domain using the available LDAP connection. The following sections describe how to: Implement the user hook Configure the user hook Use event contexts Deploy the user hook For a sample, see the folder Additions/EventMaintenanceWorkflows on the installation DVD. This section explains how to configure a user hook for an event-based maintenance workflow. You configure a user hook in the \"join\" activity of the workflow. You must supply the class name and optionally also configuration options. Enter these values in the activity’s Userhook tab. The following figure shows this tab: Figure 18. Userhook Tab Enter the full class name of your implementation into Userhook Classname. This value indicates to the workflow that a user hook is to be called. If the user hook expects configuration options, enter them in the Options table: The Property Name column contains the name of the option as the user hook expects it. The Value column contains the string value of the option. The workflow passes the configuration with the open method. See the implementation section for a snippet how to read the options in your user hook. The event maintenance workflow calls the user hook typically after it has performed the standard operations just before it stores the entry changes. The user hook implements the interface com.siemens.idm.jobs.ebr.api.IEventProcessor with the following operations: setEventContext: This is the first method the workflow calls after instantiating the user hook. In addition to the LDAP connection to the domain, the event context provides some useful methods for reading and searching one or more entries. See \"Using Event Contexts\" for more details. open(DxmUserhookConfig conf) With this method the workflow passes the configuration options for the user hook before any of the events is processed. The only parameter is the user hook configuration implementing the interface siemens.dxm.configuration.DxmUserhookConfig. In addition to some meta information important for the workflow it allows to read configuration properties with its getProperty method. The following snippet shows how to read an option \"objectclass\": Map options = new HashMap(); options.put(\"objectclass\", (String)conf.getProperty(\"objectclass\")); processAddEvent(AddEvent event, Entry changedEntry) The workflow calls this method, when the entry was created in the Identity domain. It passes the created entry and the add event. Each entry implements the interface com.siemens.dxm.api.entry.Entry. This interface allows getting and set attribute values and especially the DN of the LDAP entry. The siemens.dxm.connector.event.AddEvent class is generated according an XML schema, which extends a SPMLv1 request with some information about the event topic and the event source. The following snippet shows how to read the values of the attribute \"owner\" and to set one, if it was empty before: String[] values = changedEntry.getValues(\"owner\"); if ((values == null) || (values.length == 0)) { changedEntry.setProperty(\"owner\", \"cn=DefaultOwner,cn=Users,\" + eventCtx.getDomainRoot()); } Note that you shouldn’t store the entry changes yourself. This is done by the workflow at the end of the event processing, if the entry was changed. But if you change other entries, you need to store them yourself. See \"Using Event Contexts\" how to do this. processModifyEvent(ModifyEvent event, Entry changedEntry) The workflow calls this method when the entry was changed in the Identity domain. It passes the changed entry and the modify event. Each entry implements the interface com.siemens.dxm.api.entry.Entry. This interface allows getting and set attribute values and especially the DN of the LDAP entry. The siemens.dxm.connector.event.ModifyEvent class is generated according an XML schema, which extends a SPMLv1 request with some information about the event topic and the event source. The following snippet shows how to check, if the attribute \"dxrState\" was modified to the value \"TBDEL\", i.e. if the entry is to be deleted in the connected system: for (DsmlModification mod : event.getModifications().getModification()) { if (\"dxrState\".equalsIgnoreCase(mod.getName()) && (\"TBDEL\".equalsIgnoreCase(mod.getValue(0)) { entryDeleted = true; break; } } Note that you shouldn’t store the entry changes yourself. This is done by the workflow at the end of the event processing, if the entry was changed. But if you change other entries, you need to store them yourself. See \"Using Event Contexts\" how to do this. processDeleteEvent(DeleteEvent event) The workflow calls this method, when the entry was deleted in the Identity domain. It passes only the delete event as the entry itself is not available any more. The siemens.dxm.connector.event.DeleteEvent class is generated according an XML schema. In addition to the event topic and the event source the embedded SPMLv1 delete request contains the DN of the deleted entry. See the following snippet how to read the DN: String dn = SpmlUtils.getIdString(event); This allows you to search for other entries referencing the deleted one and perform some cleanup. close(): The workflow calls this method after all entries of the batch are processed. It allows the user hook to perform some housekeeping. A user hook for an event-based maintenance workflow may use an event context object. An event context implements the interface com.siemens.idm.jobs.ebr.api.EventContext*. It is passed in the method *setEventContext of the IEventProcessor interface. The event context provides some useful helper methods: getDomainRoot() Returns the DN of the Identity domain root node. getLDAPConnection() Returns an established LDAP connection to the Identity domain. getEntry(String dn) Reads the entry with the given DN from the Identity domain. It returns an object, which implements the com.siemens.dxm.api.entry.Entry API. This API allows reading and setting attributes. searchEntries(String base, String filter) Performs an LDAP search in the Identity domain with the given search base and filter. The method returns the found entries as an enumeration. Each entry implements the com.siemens.dxm.api.entry.Entry API. saveEntry(Entry entry) Stores the entry in the Identity domain. Note that the user hook should not store the entry referenced in the change event, but needs to store all others it has changed. To deploy your user hook, build a jar file with your class and copy this file and any other jar files you need to the following folder of your Java-based Server installation: install_path*/ids-j-domain-S*n*/confdb/common/lib* Make sure the user hook is configured and then re-start the IdS-J server. You can combine a set of Java-based workflows into a \"combined workflow\" and define the sequence in which these workflows should be run. Note that you cannot combine entry change workflows, cluster workflows and combined workflows. For a combined workflow, you select a sequence of workflows. All activities of the selected workflows are copied into the combined workflow (the referenced workflow is only referenced, not changed). Start conditions are adapted so that the activities are started in the defined sequence. The activities are named worklow_name*-join-*sequence-nr.Activity n+1 is started after activity n has finished. For every workflow that is included in the combined workflow, you can also define whether or not it should stop if the preceding workflow or activity finishes with the state WARNING. To create a combined workflow, use the New menu and select Combined Realtime Workflow.In the Workflow Sequence tab, insert the workflows in the order you want to run them. You can start a combined workflow with the DirX Identity Manager by using Run workflow from the context menu at the combined workflow object or you can define a schedule for the combined workflow. Using a combined workflow (instead of scheduling each workflow separately with a given start time) guarantees that the workflows are started in sequence one after the other and ensures that there are no overlays or gaps between the workflows.For example, you can define a combined workflow that first performs a source import from a database, next performs a source import from SAP and then performs user resolution for these imported users. The sections in this chapter include information about Tcl-based workflows: Tcl-based Connectivity architecture - defines the concepts of the DirX Identity Tcl-based workflows Understanding server delta handling Customizing Tcl-based workflows - describes customization procedures and hints. The Tcl-based connectivity architecture is based on a standard script that is designed to handle all transfers between two connected directories in one step.For two-step workflows (which require an additional agent to access the target connected directory’s API), the standard script handles the meta controller (metacp) step. The connectivity standard script can be controlled by about 60 parameters and also by optional user hook routines. It is structured into the following logical sections: A control script, which defines all parameters, including the default values and references to the relevant attributes at the user interface (DirX Identity Manager) level. A profile script, which contains the central algorithm for the connectivity script. The profile script is divided into the following logical sections: The prolog section, which performs preparatory tasks before the loop section is executed, such as opening input and output connections, reading attribute configuration files, and so on. The loop section, which performs, for each entry in the source, all of the necessary actions: mapping, joining, operation on the target system side, and so on. This section is the most complex, because it can handle file and LDAP connections and contains most of the script’s functionality and features. The epilog section, which performs all completion tasks, such as releasing handles and closing connections. All of the parameters that control the script are accessible from Identity Manager. They are distributed into the relevant tabs of the job, channel and connected directory configuration objects, which can be referenced from the relevant wizards. The script’s design is based on the following requirements: One script for all applications Controllable by switches and user hooks Clear separation between central, local and user parts Clear separation between entry masters and attribute masters. An entry master can add and delete entries, while an attribute master can only perform attribute modifications. Handling of multi-entry and attribute masters Support of manual masters (such as Web interfaces) Support of purification workflows (for example, the deletion of entries marked for deletion). Note: This version does not implement this feature. Support of operational attributes (mastership, status, entry and expiration dates) Enhanced tracing (an additional command trace) Delta handling based on date type Tuning parameters (Read DN Only, paged mode) Support of merge and replace modes Standard handling of notifications The script can handle the following types of synchronizations: File to file LDAP to file File to LDAP LDAP to LDAP With extra profile scripts, it can handle DirX change log information and HDMS connections. All LDAP connections can work optionally in paged mode. The next sections provide information about: The script structure The script behavior The switches and parameters that control the script References used in default applications Object class handling The GUID generator Multi-mastered attributes Naming and scopes User hook routines Important Tcl interfaces Global Tcl variables Meta handles The Connectivity standard script consists of logical pieces that are stored in specific physical locations in the installation area or the configuration database. The following sections describe the script’s logical structure and use an example to illustrate its physical structure. The following figure illustrates the logical structure of the DirX Identity Connectivity standard script. Figure 19. DirX Identity Connectivity Script Logical Structure The control script is the script that starts the whole procedure. It contains all of the variables that control the rest of the procedure. The values of these variables are linked by DirX Identity references to the attributes of objects in the configuration directory. It also loads the central routines from the installation area and the profile, mapping and miscellaneous scripts from the job object. The control script calls the profile script, which performs the central algorithm. Different profile scripts are delivered to provide different basic algorithms. Most workflows use the standard script Profile Script, while others use the HDMS Export Profile Script or the LDIF Change Profile Script. One of the most important parts of this algorithm - the mapping script - must be highly configurable, since it is individual to each workflow. The script is divided into a mapping that occurs before the join operation and a post join mapping that occurs after the join operation. All scripts can call common routines provided by the central script (routines that are common to any workflow) and the common script (routines that are used by this type of workflow). The profile script calls local routines (hooks). Default routines for these hooks are loaded with the user hooks default script. You can establish your own extensions by providing routines in the user hooks script (they will overload the default routines). We’ll use an example to explain the physical structure of the Connectivity standard script and its relationship to other objects in the configuration database and the installation area. The following figure illustrates this example. Figure 20. DirX Identity Connectivity Script Physical Structure The job MyMetaCPjob references the MetaCP agent that is of type Meta Controller, which is described by the \"Meta Controller-Job.xml\" definition. The job also relates to channels (here Channel 1) that access the LDAP directory (for example, MetaStore), which is of type LDAP and is described by the \"LDAP-ConnDir.xml\" definition. The mapping script and the user hooks script are local objects of the workflow. They are downloaded to the work area before each workflow run. Only some of the default application workflows initially contain a user hooks script (for example the RACF workflows). The central script, the common script, the post join default script and the user hooks default script (a template) are located in the installation area of DirX Identity (path: install_path*\\lib\\centralTcl*). They are part of the installation and will not be downloaded before each workflow run. Because the common script’s size is more than 130 KB, this saves time. For information purposes, a copy of these scripts is shown at the user interface level in the configuration database. Please note that changing these script copies has no effect! You should instead copy the user hooks default script as an individual user hooks script or post join script under your job object (don’t forget to link it to the job) and modify the routines as required. This user hooks script and all of the other miscellaneous scripts will be downloaded before each workflow run. The control, profile, common, post join default script and user hooks default scripts (together with the messages script that contains all messages) are located in the central configuration area in the section Tcl → Default. Only the control, profile and messages scripts will also be downloaded before each workflow run. Warning: You are not allowed to change the central or common scripts (because any changes will be overwritten during update and upgrade installations!). Instead, you can copy a routine you’d like to change to your local user hooks script. This routine overloads the routine from the central script. The advantage of this method is that you can view all of your changes in one place and that an exchange or update of central script will not affect your workflow at all. The DirX Identity Provisioning workflows use the default DirX Identity Connectivity standard script structure. The following figure illustrates how the DirX Identity Provisioning script structure is embedded in the DirX Identity Connectivity script structure. Figure 21. DirX Identity Provisioning and Connectivity Script Structure The left two columns of the figure represent the default DirX Identity Connectivity script structure. The DirX Identity metacp scripts (mapping, post-join mapping, and user hooks) call functions in the DirX Identity provisioning common script and the provisioning TS common script. The following figure illustrates these interactions in more detail. Figure 22. DirX Identity Connectivity and Provisioning Script Function Calls The provisioning TS common script functions include: accountEnabled() Checks whether the account is enabled or disabled in the target system depending on the passed target system attribute(s), and sets the passed variable AccEnabled to TRUE or FALSE. setPasswordFlags() Sets the password-specific flags of an account in a role depending on the passed target system attribute(s). splitLocalRemoteMembers() Divides the list of the target system group members into local members, which are all members that belong to the target systems users or group root, and remote members, which are outside these roots. setGroupType() Sets the group type attribute in a role depending on the passed target system attribute. The Provisioning common script functions include: addAccountInRole() Sets the dxrTSState attribute of the account in a role to DISABLED or ENABLED depending on the passed AccEnabled parameter. Sets the dxrState attribute to IMPORTED and the dxrToDo attribute to CREATED_IN_TS for a validation workflow. modAccountInRole() Sets the dxrTSState attribute of the account in a role to DISABLED or ENABLED depending on the passed AccEnabled parameter. The function leaves the dxrState attribute as it is and sets the dxrToDo attribute to RECREATED_IN_TS for a validation workflow if dxrState was in the state DELETED. addGroupInRole() Sets the dxrTSState and the dxrState attribute of the group in a role to ENABLED. Sets the dxrTSLocal attribute to TRUE and the dxrToDo attribute to CREATED_IN_TS in case of a validation workflow. Sets dxrGroupMemberImported to the local members of the target system, which were calculated by the splitLocalRemoteMembers function. modGroupInRole() Sets the dxrTSState attribute of the group in a role to ENABLED. The function leaves the dxrState, dxrTSLocal and dxrToDo attributes as they are and sets the group member attributes according to the passed list of local target system group members and of the actual group member states in role. postJoinAddAccInTS() Depending on the account attributes in a role, calls the following functions of the postJoinMapping script of the sync account job, which perform the target system specific attribute settings: setAccEnabled() if the accounts dxrState in role is ENABLED setAccDisabled() if the accounts dxrState in role is DISABLED setPassword() resetPwdNotRequired() setChgPwdAtLogin() resetPwdCantChange() setPwdNeverExpires() if dxrPwdNeverExpires in role is TRUE resetPwdNeverExpires() if dxrPwdNeverExpires in role is FALSE postJoinModAccInTS() Depending on the account attributes in a role, calls the following functions of the postJoinMapping script of the sync account job, which perform the target system-specific attribute settings: setAccEnabled() if the accounts dxrState in role is ENABLED setAccDisabled() if the accounts dxrState in role is DISABLED deletePassword() setPwdNotRequired() if dxrPwdNotRequired in role is TRUE resetPwdNotRequired() if dxrPwdNotRequired in role is FALSE setPwdCantChange() if dxrPwdCantChange in role is TRUE resetPwdCantChange() if dxrPwdCantChange in role is FALSE setPwdNeverExpires() if dxrPwdNeverExpires in role is TRUE resetPwdNeverExpires() if dxrPwdNeverExpires in role is FALSE postJoinDelAccInTS() This function currently does nothing. In the future, it may contain common coding for all target system workflows. postJoinAddGrpInTS() This function currently does nothing. In the future, it may contain common coding for all target system workflows. postJoinModGrpInTS() This function currently does nothing. In the future, it may contain common coding for all target system workflows. postJoinDelGrpInTS() This function currently does nothing. In the future, it may contain common coding for all target system workflows. setTSAttributesInRole() For a validation workflow, sets the dxrLastValidation attribute of the target system object in a role to the current time and the accountRootInTS and groupRootInTS attributes of the target system object in a role to the values passed to the function. del_TS2Role() Called only in the validation workflow for all objects in a metacp search result that cannot be matched to any source entry in order to either delete or modify the object. The function deletes the object in a role if the dxrState attribute of the object is set to DELETED; otherwise, it sets the dxrTSState attribute to DELETED and writes a dxrToDo message. The meta controller is called with the control script as a parameter (see the command line attribute of the job). The next sections describe how the control and profile scripts operate. The Connectivity standard script’s control script contains all of the variable settings; that is, constants or references to attributes of other objects in the configuration database. These variable settings are grouped into the following sections: Common parameters - basic parameters needed for the other sections (for example, the role names of the input and output channels). GUID generator parameters - parameters that control the generation of global unique identifiers. Common job-specific parameters - parameters that belong to the job: tracing, operation control, notification and data control. Source parameters - parameters that control the source connected directory and its channel. Target parameters - parameters that control the target connected directory and its channel. The control script loads the standard scripts in the following sequence: Loads the central.tcl script with the source command. This script contains important routines like dxm_source that are necessary to load scripts with another code set. Reads user_hooks_default.tcl, which contains all relevant empty user hook routines. This action pre-defines these routines. Reads the mapping script. Uses a loop to load all miscellaneous scripts, including the user_hooks.tcl script if it is defined by the user and any other routines needed for the job. Note: Scripts that cannot be edited are not loaded (the common script is an example). Reads the profile script. The control script’s loading logic relies on Tcl’s routine overloading mechanism, in which the last loaded routine is used. The control flow for the standard script consists of several steps. The prolog step prepares all of the necessary prerequisites. The process entry loop reads entries from the source, maps the entries, then joins the mapped entries and writes them to the target. The epilog step closes all channels and handles and performs notifications if necessary. The profile script contains only the main logic. All detailed routines are contained in the common script or the central script. The following figure illustrates the profile script algorithm. Figure 23. Profile Script Algorithm Profile Script - Prolog The prolog step performs the following tasks: Initializes the meta controller. Sets all necessary default values. Calls the uh::Preprocessing user hook, which prepares everything before the rest of the script logic is executed. Note: no handles are available at this point. Opens connections to the source and target connected directories and creates handles for them. This task consists of the following sub-tasks: Reading the attribute configurations (variables: File Name and Encoding). Performing a bind if Directory Type = LDAP (variables: Server Address, Protocol, User, Password, SSL Connection, Authentication, Protocol). Opening a file if Directory Type = File (variables: File Name, File Format, File Mode, Encoding). Creating the necessary handles for the source and target connection. Creating a second handle for the input channel, if Read DN Only is set. Defining Page Size to allow page mode operation if Paged Read is set. Reads the source (variables: Base Object and Subset both from the input channel as well as a Search and OR Filter) and eventually sort it (if Sorted List = true together with Sort Key and Sort Order). This is only necessary when the search result is not sorted and a sorted result is necessary. If Paged Read is set Page Size must be defined to allow page mode operation. If the workflow shall replace all entries in the target; that is, if a deletion of entries that are no longer available compared to the source is necessary, a full target search (variables: Base Object, Subset both from the output channel as well as the Replace Filter) with a subsequent sort is required (variables: Sorted List = true together with Sort Key and Sort Order). The result must be sorted because the Sort Key is used for the find operation later on in the join operation. Calls the uh::Prolog user hook. Now the source and target are prepared. Next, the loop on all entries must be performed. Profile Script - Process Entry Loop The profile script’s standard entry processing loop (used by the profile.tcl script) performs the following tasks: Reads an entry from the source. Initializes the target entry (sets all fields to initial values). Optionally applies an extra filter during the user hook uh::LoopExtraFilter. This filter allows the individual exclusion of entries from further actions. Performs the mapping (subroutine perform_mapping). This routine delivers the return code 0 for OK and 1 for errors that occurred. The sequence of steps is different depending on the Directory Type. If Directory Type = LDAP, the following steps are performed: If Import Mode = Merge, a search based on the Join Expression or Expert Filter is performed in the target directory. In this case a list of searches can be performed. If Import Mode = Replace, the object is retrieved from the existing (and sorted) search result. Depending on the result, an action is calculated (see the subroutine Calculate Action). After calculating the action, a postJoin routine (uh::LoopPostJoin) performs an additional mapping step that merges information from the joined entry with the mapped information. Depending on the calculated action and the join result, the Entry Handling subroutine is called. The possible actions are: action = add A new entry will be created. action = mod The located entry is to be modified. action = modDN The distinguished name (DN) of the located entry will be modified. action = del A delete operation will be performed for this entry depending on the selected deletion mode (see the deletion algorithm ). The user hook uh::Delete is eventually called. action = done The action to be taken has already been carried out. No action is necessary. action = error An error must be reported because something was incorrect. This action will result in a warning at the workflow level. An extra function can be optionally executed (uh::LoopExtraFunction) If Directory Type = FILE, similar procedures are called: A user-specific join routine can be performed (uh::LoopPerformJoin). Depending on the result, an action is calculated (see the Calculate Action subroutine). After calculating the action, a postJoin routine (uh::LoopPostJoin) performs an additional mapping step that merges information from the joined entry with the mapped information. Writes the record to the file. Profile Script - Calculate Action The profile script’s \"calculate action\" subroutine calculates the action to be taken based on any change type, source entry status, and target entry conditions, as illustrated in the following figure. Figure 24. Profile Script - Calculate Action Logic As shown in the figure: A ChangeType condition allows the action in the target directory to be controlled by information coming from the source directory (for example, change types defined in LDIF change syntax). When the source directory keeps status information about new or deleted entries (Source Add Marking Attribute and Value and Source Del Marking Attribute and Value), this information allows the action to be controlled at the target directory side. For example, a customerStatus attribute with the value New in the source directory could force an add operation in the target directory. In some cases, the existence of an attribute in the source directory that comes from the target directory can indicate the existence of a target system entry (Target Entry Exists). This indicator only works when a workflow operates in the opposite direction that handles this attribute. If none of these conditions is met, the action is set to mod. Profile Script - Entry Handling Based on the calculated action and the result of the join operation, the entry is handled as shown in the following figure. Figure 25. Profile Script - Entry Handling Logic As shown in the figure: If no entry is found and action = del, an error is reported or no further action is performed, depending on the exact action switch. If action = mod, an error is reported or an add operation is performed, depending on the exact action switch If exactly one entry is found and action = del, the entry is deleted. Action = modDN results in a modifyDN operation. If action = mod, the entry is modified. Otherwise, the entry is either modified or an error is reported, depending on the exact action switch If more than one entry is found, an error is reported. After the entry processing, a user hook (uh:LoopExtraFunction) allows you to define user-specific additional processing. Note: In the loop, an error means that the workflow’s result will be Warning. Otherwise one single erroneous entry would abort the workflow. Profile Script - Epilog The profile script’s epilog step performs the following tasks: When the script works in replace mode (switch Import Mode), it deletes all entries that were not contained in the source but are contained in the target (in a separate loop after the main loop). When the script works in delta mode (switch Delta Synchronization), it processes the delta information and delivers it to the C++-based identity server. When notifications are required (switch Notify Not OK is set or one of the Entry Handling switches Add Entries, Modify Entries or Delete Entries is set to one of the NTF options), it sends notifications. Closes all connections have (unbind for directories, close for files) Writes statistics (switch Statistics). Terminates the meta controller and automatically closes all handles. Profile Script - Delete Entries The delete routine is either called from the central processing loop for each entry or from the separate loop at the end for all unmarked entries. The following figure illustrates its logic: Figure 26. Profile Script - Entry Deletion Logic As shown in the figure, the delete routine: Does nothing if Delete Entries is not activated. Checks whether the entry is in the Keep Objects list. If yes, it preserves the entry. If Operational Attributes are activated, sets the dxrState to TBDEL and sets the dxrEndDate to the current date. Otherwise, evaluates the Deletion Mode: MARK - Sets the value of the defined marking attribute. MOVE - Moves the entry to the tombstone area (by eventually calling uh::GenerateTombstoneDN). PHYSICAL - Physically deletes the entry. USER - Calls the user hook uh::Delete. You use switches and parameters to control the behavior of the Connectivity standard script. The following sections give information about switches and parameters for: Operational control Notification control Global unique identifier (GUID) generation Trace control Source connected directory specification Input channel specification Target connected directory specification Output channel specification Pre-configured operational attribute handling The following set of switches control the script’s operation: The Delta Synchronization switch allows you to run the meta controller (metacp) job in delta mode based on date information (by default based on creation and modification time stamps or optionally on any other time attribute). For details, see \"Understanding Delta Handling\" in section \"Managing the C++-based Server\" in chapter \"Managing Identity Servers\" in the DirX Identity Connectivity Administration Guide. The Minimum Source Entries switch helps to avoid situations in which the number of source entries differs a lot (due to an error in the generation of the entries) during subsequent runs of a full update or an export. The switch allows you to specify a minimum number of entries that must be available; otherwise, the workflow terminates with error and returns exit code 12. For import workflows running in MERGE mode, this parameter is not evaluated. However it is evaluated for import workflows running in REPLACE mode. In REPLACE mode, this parameter helps to avoid deletion of objects if only a small number of source entries is provided (by mistake). The Exact Action switch allows you to control the algorithm’s automatic correction features. The Init Mode switch allows you to run the meta controller either in real mode, where LDAP operations are performed, or trial mode, where trace information is written but LDAP update operations are not performed (searches are performed to simulate the real behavior). The Test Mapping Only switch allows you to select whether just a test mapping is performed or if all operations (LDAP and file operations) are executed. You can use the Test Max Entries switch to define the number of entries to be mapped. The Operational Attributes switch controls whether operational attributes are to be used, which controls the marking of entries with the master name or the handling of status attributes and entry and expiration dates. See the \"Pre-Configured Operational Attribute Handling\" section for details. The Connectivity standard script currently implements two basic notification mechanisms: The Notify Not OK switch, which allows a notification to be created when the meta controller job runs into an error and/or warning situation. The Entry Handling switches Add Entries, Modify Entries and Delete Entries, which allow data notification to be executed if the switches are set to one of the NTF options. If set to NTF, notification is performed instead of the operation (add, delete or modify), if set to operationNTF (ADDNTF, MODNTF or DELNTF), the operation is performed but the same information is sent via notification. The Connectivity standard script allows global unique identifiers (GUIDs) to be generated for each entry that is to be imported into the Identity Store. See the \"GUID Generation\" section for more information. The parameters for this generation are stored in the field variable GUIDparam. The meta controller can generate a lot of trace information, and you can use the switches Trace Level and Debug Trace to control the granularity of this output. The parameter Max Trace Entries controls the number of hits that are output during a join operation. Trace information can be written into Trace Files or Report Files. The Statistics switch allows you to control whether or not the meta controller writes standard statistics. If you disable the standard statistics, your script must provide its own statistics. This set of parameters is necessary to connect correctly to the specific type of the source connected directory. The most important parameters are the Directory Type and the Directory Subtype, which determine the behavior of the connected directory. The script generally needs the file name of the attribute configuration file, which is controlled via the parameters File Name and Encoding. If Directory Type = LDAP, the additional parameters are required to perform an LDAP bind. These parameters are: Server Address, Protocol, User, Password, Authentication, Protocol and SSL Connection (see the Service and Bind Profile configuration objects for details). If Directory Type = FILE, the following parameters are necessary to handle the file correctly: File Name, File Format, File Mode and Encoding (see the section File Item configuration object for details). The input channel definition allows access to the related connected directory. The parameter Selected Attributes defines he list of attributes that must be handled. If Directory Type = LDAP, a Base Object, the Subset definition, a Search Filter optionally together with an OR Filter and whether the result is to be sorted (Sorted List together with the Sort Key and the Sort Order) must be defined (see Export Properties for details). You can use the switch Read DN Only or Paged Read together with Page Size to optimize memory consumption. If Directory Type = File, no additional parameters need to be specified in the input channel definition. This set of parameters is necessary to connect correctly to the specific type of the target connected directory. The most important parameters are the Directory Type and the Directory Subtype, which determine the behavior of the connected directory. The script needs generally needs the file name of the attribute configuration file, which is controlled via the parameters File Name and Encoding. If Directory Type = LDAP, the following additional parameters are required to perform an LDAP bind: Server Address, Protocol, User, Password, Authentication, Protocol and SSL Connection (see the Service and Bind Profile objects for details). If Directory Type = FILE, the following parameters are necessary to handle the file correctly: File Name, File Format, File Mode and Encoding (see the section File Item configuration object for details). The output channel definition allows access to the related connected directory. The Selected Attributes parameter defines the list of attributes to be handled. If Directory Type = LDAP, a Base Object, the Subset definition, a Join Expression (or alternatively Expert Filters) and whether the result should be sorted (Sorted List together with the Sort Key and the Sort Order) must be defined (see Import Properties for details). You can use the switch Read DN Only or Paged Read together with Page Size to optimize memory consumption. If Directory Type = File, no additional parameters need to be specified in the output channel definition. Entry handling parameters are also required to define the behavior at the target connected directory side. This is the Import Mode that controls whether the script works in merge or replace mode. The Add Entries, Superior Info, and the source and target Add Marking Attribute and Add Marking Value parameters can control the addition of entries. The Modify Entries, Modify Marking Attribute, Modify Marking Value and Rename Entries switches control entry modification. The switches Delete Entries, Deletion Mode, the source and target Del Marking Attribute and Del Marking Value and Keep Objects control entry deletion. DirX Identity provides a pre-configured handling of the operational attributes. By default, dxmOprMaster, dxrStartDate, dxrEndDate and dxrState are used as attribute types if the switch Operational Attributes is on. You can select your preferred set of operational attributes in the user hooks script. The following description works with the standard set of operational attributes. These attributes are only handled for entry masters depending on the calculated action. DxmOprMaster Handling Add: this attribute will be set to the dxmOprMasterName value of the relevant source connected directory. Modify, ModifyDN and Delete: DirX Identity checks the mastership of the relevant entry. Only entries that belong to this entry master may be touched. Entry and Expiration Date Handling Both date values are always set (empty fields cannot occur): Add: the dxrStartDate or dxrEndDate is either set to the mapped value or if not present to the actual date or to 31.12.2037. Modify: if new mapped values are available, dxrStartDate or dxrEndDate are updated. Delete: dxrStartDate is not touched, dxrEndDate is set to the actual date. Status Handling Add: dxrState will be set to ENABLED if dxrStartDate ⇐ actual date NEW if dxrStartDate > actual date Note: The entry will be refused if dxrEndDate ⇐ dxmEntryDate. Modify: dxrState will be set to (tests in this sequence!)* ENABLED* if dxrStartDate ⇐ actual date NEW if dxrStartDate > actual date TBDEL if dxrEndDate ⇐ actual date Note: An error will be reported if dxrEndDate ⇐ dxmEntryDate. Delete: dxrState will be set to TBDEL. References are widely used in DirX Identity’s default applications, allowing a high degree flexibility (especially through copy operations) to be combined with the central configuration of important and widely-used parameters. This section describes some general reference concepts that are used in the default applications: base object references and references in filter expressions. Most references are defined in configuration files (Tcl files, INI files, XML files). For a detailed description of how to create and interpret references, see the chapter \"Customizing Object References\" in the DirX Identity Customization Guide. You can also find some references in attributes at the user interface level. DirX Identity uses a two-step approach to make the configuration of the base object fields in channels easy and consistent. The following figure illustrates this approach. Figure 27. Base Object Reference Concept The Base Object field in an input or output channel can contain values like: or These values are reference variables, which almost completely hide the complexity of references. The DirX Identity default applications contain the following reference variables: - occurs in input channels. Points to the source connected directory to the specific attribute base_obj (named Creation / Search Base at the user interface). - occurs in output channels. Points to the target connected directory to the specific attribute base_obj (named Creation / Search Base at the user interface). - occurs in input channels. Points to the source connected directory to the attribute dxmMasterName (named Master Name at the user interface in the Operational Attributes tab). - occurs in output channels. Points to the target connected directory to the attribute dxmMasterName (named Master Name at the user interface in the Operational Attributes tab). - occurs in output channels. Points to the service object of the target connected directory to the attribute dxmAddress (named IP Address at the user interface). - occurs in output channels. Points to the service object of the target connected directory to the attribute dxmAddress and dxmDataPort (named IP Address and Data Port at the user interface). Note: This reference does not work for SSL connections. You can find the definition of these reference variables in the control Tcl script or at the start of the INI files. The definitions are contained in comments because they only set the variable content that is used later on in other places. They are not visible to the Tcl or INI script. Note: another way to hide this information is to use set_nv instead of set for the variable definition, but this technique makes debugging more difficult because you cannot see the evaluated values. The and reference variables point to the base_obj fields in the connected directories. To make the values here as independent as possible of a specific directory implementation, the values in the base_obj fields can also contain references, for example: ou=mthb, The reference to the specific attribute Base Node allows you to set a central definition of the start node in the directory. For example, DirX Directory delivers samples that start with o=My-Company. In the example (which is valid for most workflows in DirX Identity’s default applications), the workflows use ou=mthb,o=My-Company as the base point. Other variables, such as the Tombstone Base in a connected directory’s Operational Attributes tab, can also use this base value, for example, ou=tombstone,. This method creates very consistent scenarios that can easily be adapted to new situations. Another example is the setting in the Search Base field of the Import Properties tab of the Ident2ADS workflow: LDAP:///. In this case, the search base is built from a constant \"LDAP://\", then the target machine name, another constant \"/\" and then the target base_obj. Fields like Search Filter, OR Filter, Expert Filter or Replace Filter in input or output channels can contain simple or complex LDAP filter expressions, and they can also contain references. For example: \\{dxmOprMaster=} This filter searches for all entries that contain the value of the src_master_name reference in the dxmOprMaster attribute. Simply change the Master Name field of your source connected directory to handle another master source. The advantage of these fields is that both the import and export workflows use them. As a result, you don’t need to set two different values in each workflow - one central change is sufficient. The Connectivity standard script supports easy object class handling. Use these two variables to perform object class handling tasks: dxm_add_objclass - These object classes will be added to the set of object classes. dxm_rem_objclass - These object classes will be removed from the set of object classes. These two variables permit the object classes to be completely handled during add and modify operations. The object classes are calculated in the following steps: Use the mapped target’s objectClass attribute value (for example, rh_ldap(objectClass)) as the starting point. This is supported for compatibility reasons. For a modify operation only, merge the object classes from the target entry. Merge the object classes from the Object Classes field in the target connected directory’s Operational Attributes if available. Merge the list of object classes from dxm_add_objClass. Remove the list of object classes from dxm_rem_objclass Examples: Set dxm_rem_objclass to the object classes of the joined entry. This action removes all object classes from the entry. If you set new object classes with dxm_add_objclass, you can completely replace the object classes. Joined entry object classes = \"person inetOrgPerson\", dxm_add_objclass = \"dxmADsUser\", connected directory object classes = \"person inetOrgPerson organizationalPerson\". These values are merged to \"person inetOrgPerson organizationalPerson dxmADsUser\". Global unique identifiers (GUIDs) significantly ease synchronization work. All processes such as join operations are well-defined and robust. The basic GUID concept is that each entry in the Identity Store contains a unique identifier that is used as much as possible for all synchronizations to target systems (ideally, this identifier is stored in the target systems). A re-synchronization from the target system to the Identity Store can use this identifier to join to the correct entry exactly without any ambiguity. The Connectivity standard script generates a GUID only during add operations. If a GUID is defined in the mapping, this value is taken. Otherwise, DirX Identity Connectivity supports three mechanisms to create a unique GUID: local GUID generation, central GUID generation, and user-defined GUID generation. You can switch between these modes in the job object’s GUID Generation Type. In local GUID generation, a GUID can be generated from a local unique identifier and a unique prefix from the source system. The employeeNumber is a good example of a unique source system identifier. You define this attribute type in the source connected directory’s Local GUID Attribute field. A unique prefix is necessary for creating a unique identifier for the entire scenario. This prefix must be defined manually. It can be stored in the dxmGuidID attribute value of the source connected directory (GUID Prefix). In the target connected directory, you must define the GUID Attribute, which stores the GUID values. DirX Identity Connectivity provides an algorithm that allows for the creation of unique integer numbers. In this case, the highest already used value is stored in a special attribute dxmActualGUIDvalue in the target connected directory object. To generate a new GUID value, this value is retrieved, increased by one and stored again in the actual GUID value attribute. The algorithm guarantees that double generation of a number is impossible. Because each add entry operation would require an additional read and a write operation to this actual GUID attribute, it is possible to reserve n GUID values with one read/write operation. If all of these numbers are not used, this method may lead to unused numbers. The highest possible number (2.147.483.647 for Windows) limits this method. You can specify the block size with the GUID Generation Block Size parameter in the job object. DirX Identity Connectivity provides the following user hooks for implementing user-defined GUID generation: uh:InitCreateGUID - use this routine to initialize your procedure before processing all entries. uh::CreateGuid - use this routine to process a single GUID. uh::CleanupCreateGuid - use this routine to clean up after processing all entries. DirX Identity provides the dxmOprOriginator attribute to handle multiple masters for the different values of multi-valued attributes This attribute keeps the organizational information to handle the different values of multi-valued attributes and is part of the dxrUser object class of a user entry. The dxmOprOriginator attribute is a structured attribute of the form: master_namemaster_rec_IDattribute_name#attribute_value where master_name is the name of the master directory (and should be the dxmMasterName property of the source directory) master_rec_ID is the unique record ID that identifies the record in the source (master) system. attribute_name is the name of the multi-valued attribute. attribute_value is the value of the multi-valued attribute that is mastered. For example: HDMS1#12345#telephoneNumber#+49 89 636 45667 HDMS1#34526#telephoneNumber#+49 89 722 82736 PHONEDIR#43257#telephoneNumber#+49 89 722 34526 HDMS1#12345#faxNumber#+49 89 636 45668 In this example, the phone number +49 89 636 45667 is mastered from the record 12345 in the HDMS1 system together with the FAX number +49 89 636 45668. The record 34526 from same system HDMS1 masters the phone number +49 89 722 82736. Another record (43257) from the system PHONEDIR masters a telephone number of the same user: +49 89 722 34526. This example shows that several systems can handle the same attribute and on the other hand that several attributes can be handled from the same master but from different records. Thus the concept covers all possible cases. Note: This mechanism is currently only used by the HDMS workflows. If you want to use your own functions and variables, you should use name spaces. This approach guarantees that there are no collisions in variable names and procedure names. The default applications use the following name spaces, which you therefore must not use: uh - used for user hooks dxm - reserved for future use (for default applications) hdms - used by the HDMS workflow You are also not allowed to re-define the global variables used in control.tcl (for details, see the \"User Hooks\" section). You can control the standard Connectivity script with the switches and parameters described in the \"Switches and Parameters\" section, and you can also control it by customizing the user hook routines. The following figure shows these routines and their relationship to the standard script structure. Figure 28. User Hook Routines DirX Identity provides the following user hook routines: uh::Initialize Initializes the script. Currently only the array opr is set (defines the names of the operational attributes). uh::Preprocessing Prepares everything that’s needed before the rest of the profile code is executed. No files or handles are open at this time. An example is to set additional control variables with references. uh::Prolog Handles everything that is needed before the loop is entered (for example, opening additional files). Here all handles are already available. When the \"lStringEncrypt\" mapping function is called the very first time, it reads the userCertificate using the latest bind connection. Therefore this user hook provides also the bind information that needs to be used for retrieving the userCertificate. For import workflows, it uses the target connection parameters \"tgt_conn_param\". For export workflows, it uses the source connection parameters \"src_conn_param\". If the user data that needs to be encrypted is not stored in the directory server where the ConfDB tree (which includes the userCertificate) is located, then the user hook needs to be changed. uh::RefineSearch If a search returns with a predefined amount of entries (for example, 4096 for RACF), the default applications try to read pieces of the search result. A default mechanism is provided that can be customized (see an application of this user hook in the RACF workflows). uh::GenerateTombstoneDN Used for move mode in the delete procedure. Generates the Tombstone-DN by concatenating the original DN with the tombstone base by default. Another function can be defined here. uh::LoopExtraFilter Filters entries that are not to be processed in the loop (for example, RACF does not permit entries to be read with a filter condition; filtering must be performed in the central script logic on a per-entry basis). (Mapping) You can freely define the mapping between the source and target entries in the mapping script. uh::LoopPerformJoin Performs a user-specific join routine when type is set to FILE. The routine can be used to compare the actual set of entries with a previous set to calculate delta information. uh::LoopPostJoin Runs after the join operation but before the write/update operation to the target system. The mapping can be adapted according to the results from the read entry of the target system. uh::Delete Defines a user-specific entry deletion method. This routine is only used when the switch Deletion Mode is set to ‘User’. It is used during the main loop processing and during the processing of unmarked entries after the main loop. uh::LoopExtraFunction Performs additional actions for an entry (for example, writing additional log file information into a special file). uh::Epilog Closes and finalizes everything that is needed after the loop has been processed (for example, the closing of additional files). uh::ErrorHandler Error codes that are returned as errorCode value by the general function exec_cmd can be changed here. Codes can be ignored, modified or additional actions can be issued. uh::InitCreateGuid Initializes the GUID generator before processing all entries. uh::CreateGuid Creates a user-specific GUID value. Define your own algorithms here and set the GUID Generation Type to \"User\". uh::CleanupCreateGuid Defines the cleanup code for the GUID generator after processing all entries. See the section \"Important Routines\" for information about the interfaces to some of these routines. To use the user hook routines: Select the job object in the DirX Identity Manager’s expert view. Right-click the job, then select New → Tcl Script. Set the name to \"User Hooks Script\". Open Configuration → Tcl → Default → User Hooks Default Script. Select the Content tab. Click in the edit window. Select the entire code (for example, with Ctrl-A) and copy it (for example, with Ctrl-C). Click the Content tab of your newly created Tcl script. Click Edit. Paste the content of the default script into your script object. Click Save to store it. Note that you can’t copy the User Hooks Default Script object as a whole because it is set to read-only. Consequently, you must copy the content. Link the job to your Tcl script: Click the tab Tcl Scripts, click Edit, create a new line in the Miscellaneous table and link it to the User Hooks Tcl script. Click Save. Note: We recommend that you delete all of the routines in your user hook scripts that you do not use. This action makes your changes more obvious. The user hook routines are defined in the name space uh::. All user hook routines must be called with the prefix uh ==== Important Tcl Interfaces This section describes some important Tcl interfaces in the central.tcl, user_hooks_default.tcl and post_join_mapping.tcl files. The following Tcl interfaces are provided in central.tcl: exec_cmd Executes a metacp command and terminates on error. exec_cmd executes a given command and returns the result of the executed command. The global variable debug_trace should be set to one of the values 8, 9, 12, 13 to make command trace information available in the trace file. The command meta initialize should be the very first command that is executed by exec_cmd; otherwise tracing can’t be successfully performed. When serious errors occur, exec_cmd terminates with exit code 10. exec_cmd does not handle some error situations; for example, the error \"METACP 4852\" (“object doesn’t exist” in case of a search operation) or the error \"METACP 4515\" (“no more results in a paged result request”). In these cases, these error codes are returned. Synopsis: exec_cmd command directory_subtype Parameters: command - the command to be executed dir_subtype - the directory subtype, for example, RACF Global variables used: errorCode - Tcl error code variable debug_trace - level of debug tracing 0 – no trace 4 – Tcl variable trace to stdout 5 – Tcl variable trace to file 8 – command trace to stdout 9 – command trace to file 12 – Tcl variable trace and command trace to stdout 13 – Tcl variable trace and command trace to file trace_file - the name of the trace file notify_not_ok - a flag that indicates whether a notification should be sent in case of errors/warnings notify_notok_file - a notification file DEBUG_COMMAND indicates that Tcl commands should be traced Return values: result - on success, the result string of the executed command. errorCode - on error, the error code of the executed command (for errors that are not serious) Exit codes: 10 on serious errors Example: set result [exec_cmd “meta modifyentry –oldentry old –newentry new”] getCurrentTimeGMT Returns the current time as a GENERALIZED_TIME string. Synopsis: getCurrentTimeGMT Parameters: None. Global variables used: None. Return values: time_value - the current system time as a GENERALIZED_TIME string Example: set current_time [getCurrentTimeGMT] int2zulu Converts a time in seconds into a GENERALIZED_TIME value Synopsis: Int2zulu [time_val] Parameters: time_val - a time value in seconds (optional); if omitted, the current system time is used. Global variables used: None. Return values: value - time value as GENERALIZED_TIME string Example: int2zulu 1000000 - returns the value “19700112134640Z” int2zulu - returns the current time as GENERALIZED_TIME string trace_out Writes trace information to the trace file. trace_out writes the strings given in the parameters string1, string2, … to the trace file, if the global variable debug_trace permits the operation. The parameter mode defines the kind of information that string1, string2, … represent. If the value of mode matches the value of debug_trace, then the trace information will be written. mode is a bit combination of the global variables DEBUG_VARIABLE, DEBUG_COMMAND, DEBUG_LEVEL1, …, DEBUG_LEVEL4. Synopsis: trace_out mode string1 [string2 ..] Parameters: mode - the type of information to be written string1, string2 … - a list of strings to be written Global variables used: debug_trace - for details, see the description in exec_cmd DEBUG_IN_FILE - defines that trace information should be written into the trace file; if not set, tracing is sent to stdout DEBUG_VARIABLE - defines that variable tracing is switched on DEBUG_COMMAND - defines that command tracing is switched on DEBUG_LEVEL1 - defines that trace information of level 1 will be written DEBUG_LEVEL2 - defines that trace information of level 2 will be written DEBUG_LEVEL3 - defines that trace information of level 3 will be written DEBUG_LEVEL4 - defines that trace information of level 4 will be written Return values: None. Example: proc f { global DEBUG_VARIABLE trace_out $DEBUG_VARIABLE “rh_ldap(sn)=$rh_ldap(sn)” } zulu2int Converts a GENERALIZED_TIME value to its representation in seconds Synopsis: zulu2int time_val Parameters: time_val - a GENERALIZED_TIME value Global variables used: None. Return values: seconds - the time value in seconds Example: zulu2int 20031231120000Z - returns the value “1072872000” The following Tcl interfaces are provided in user_hooks_default.tcl: uh::Delete Defines a user-specific entry deletion method. uh::Delete implements a user-defined method of deleting an entry. You define the action to be executed when an entry should be deleted. The routine is used when the deletion_mode switch is set to \"User\". This routine is used in the default applications during the main loop processing and during the processing of unmarked entries after the main loop. Synopsis: uh::Delete tgt_data Parameters: tgt_data - an array of attribute values that represent the object to be deleted Global variables used: tgt_conn_param - the connection parameters to be used when performing a directory update operation Return values: 0 in case of success 1 in case of errors Example: set update_result [uh::Delete tgt] uh::Epilog Closes and finalizes everything that is needed after the loop has been processed (for example, the closing of additional files) Synopsis: uh::Epilog Parameters: None. Global variables used: None. Return values: 0 - on success return_code - on error Example: set return_code [uh::Epilog] uh::ErrorHandler Handles specific errors that were originally returned in \"errorCode\" (in exec_cmd). uh::ErrorHandler is called by the exec_cmd procedure when errors occur. Because error operation is different for various directory systems (for example, RACF is very restrictive and very often returns the LDAP error “LDAP_OTHER”), exec_cmd must handle these situations. You should implement uh::ErrorHandler to return “0” for errors that are not serious and that do not prevent the Connectivity standard script from continuing its entry-processing functions, and return “1” for serious errors. Synopsis: uh::ErrorHandler command result dir_subtype Parameters: command - a command string that has been executed by exec_cmd result - a result returned by exec_cmd dir_subtype - a directory subtype, e.g., RACF Global variables used: errorCode - Tcl error code variable Return values: 0 if a specific error has been handled by that procedure 1 if the error has not been handled by that procedure Example: set return_code [uh::ErrorHandler $command $result RACF] uh::GenerateTombstoneDN Generates a DN when an object that should normally be deleted is moved to a different tombstone branch of the DIT. uh::GenerateTombstoneDN generates the tombstone DN by exchanging the target search base object with the tombstone base object. Synopsis: uh::GenerateTombstoneDN current_dn Parameters: current_dn - the DN of the object to be moved to the tombstone branch Global variables used: tombstone_base - the base DN of the tombstone branch tgt_search_param - the target search parameters Return values: new_dn - tombstone DN Example: set new_dn [uh::GenerateTombstoneDN $current_dn] uh::Initialize Initializes the default applications. uh::Initialize is used to initialize the environment of the default applications. Because it’s the very first statement of the Connectivity standard script, the meta controller’s meta initialize operation has not yet been called, so no tracing can be done in that routine. The routine currently initializes the names of the operational attributes. Synopsis: uh::Initialize Parameters: None. Global variables used: opr - an array of operational attribute names Return values: 0 - on success 1 - on error Example: set rc [uh::Initialize] uh::LoopExtraFilter Filters entries that are not to be processed in the loop (for example, RACF does not permit entries to be read with a filter condition; filtering must be performed in the central script logic on a per-entry basis). For entries that should be ignored, the return code of the function should be set to 1; otherwise, 0 should be returned. Synopsis: uh::LoopExtraFilter data Parameters: data - the name of the Tcl array that holds the source data Global variables used: None. Return values: 0 if the source entry will not be ignored 1 if the source entry will be ignored Example: set rc [uh::LoopExtraFilter rh_ldap] uh::LoopExtraFunction Performs additional actions for an entry. uh::LoopExtraFunction allows to perform additional actions for an entry (for example, to write additional log file information into a special file). Both the names of the source data array and the target data array are passed to the routine so that the user can operate on both arrays. In addition, the executed operation is passed in the operation parameter, the result of that operation in the rc parameter. Synopsis: uh::LoopExtraFunction source target operation rc Parameters: source - the name of the Tcl array that holds the source data target - the name of the Tcl array that holds the mapped target data operation - the operation that has been performed for the entry: “add”: if the entry has been created “del”: if the entry has been deleted “mod”: if the entry has been modified “modifyDN”: if the entry’s name has been changed “error”: if the entry caused multiple matches “done”: if the entry doesn’t exist in the DIT rc - the return code of the directory operation Global variables used: None. Return values: 0 if the source entry will not be ignored 1 if the source entry will be ignored Example: set rc [uh::LoopExtraFunction rh_file rh_ldap $action $update_res] uh::LoopPerformJoin Performs a user-specific join routine when an entry is exported to FILE. You can use this routine to calculate delta information by comparing the current set of entries with a previous set. Synopsis: uh::LoopPerformJoin source target joined_entry num Parameters: source name - the Tcl array that holds the source data target name - the Tcl array that holds the mapped target data joined_entry - OUT: the array of data fields of the joined entry num - OUT: the number of matching entries Global variables used: None. Return values: 0 on success 1 on error Example: set rc [uh::LoopPerformJoin rh_file rh_ldap entry count] Note: When using name spaces, there might be problems using the variable source and target. As an alternative the following expression can be used: \"rh_\" for source \"rh_\" for target uh::Preprocessing Prepares everything that’s needed before the profile code is executed. No files or handles are open at this time. Synopsis: uh::Preprocessing Parameters: None. Global variables used: None. Return values: 0 on success 1 on error Example: set rc [uh::Preprocessing] uh::Prolog Handles everything that’s needed before the loop is entered (for example, opening additional files or setting additional control variables with references). Synopsis: uh::Prolog Parameters: None. Global variables used: None. Return values: 0 on success 1 on error Example: set rc [uh::Prolog] The following Tcl interfaces are provided in post_join_mapping.tcl: uh::LoopPostJoin Performs additional mapping before calling the ADD, DELETE or MODIFY operation. Mappings that are commonly used for ADD, DELETE, and MODIFY operations should be listed in the body of this procedure. Internally, uh::LoopPostJoin calls one of the following subroutines: uh::postMappingAdd uh::postMappingDel uh::postMappingMod The operation-specific mappings should be listed in one of these procedures. The action parameter is used as an input and an output parameter. When used as an input parameter, it indicates the directory operation that should normally be performed. This operation can change if the situation requires an operation other than the initially calculated one. Synopsis: uh::LoopPostJoin source target joined_entry action Parameters: source - the name of the Tcl array that holds the source data target - OUT: the name of the Tcl array that holds the mapped target data joined_entry - the name of the Tcl array that holds the joined entry action - IN/OUT: the calculated action, which is one of the following values: “add” for object creation “mod” for object modification “del” for object deletion Global variables used: None. Return values: 0 - indicates successful post mapping 1 - indicates an error in post mapping Example: set rc [uh::LoopPostJoin rh_file rh_ldap entry mod] uh::postMappingAdd uh::postMappingAdd allows you to perform additional mapping procedures before the final directory update operation (which normally is an ADD operation) is called. The action parameter is used as an input and an output parameter. When used as an input parameter, it indicates the directory operation that should normally be performed. This operation can change if the situation requires an operation other than the initially calculated one. Synopsis: uh::postMappingAdd source target action Parameters: source - the name of the Tcl array that holds the source data target - OUT: the name of the Tcl array that holds the mapped target data action - IN/OUT: the calculated action, which is one of the following values: “add” for object creation “mod” for object modification “del” for object deletion Global variables used: None. Return values: 0 - indicates successful post mapping 1 - indicates an error in post mapping Example: set rc [uh::postMappingAdd rh_file rh_ldap add] uh::postMappingDel uh::postMappingDel allows you to perform additional mapping procedures before the final directory update operation (which normally is a DELETE operation) is called. The action parameter is used as an input and an output parameter. When used as an input parameter, it indicates the directory operation that should normally be performed. This operation can change if the situation requires an operation other than the initially calculated one. Synopsis: uh::postMappingDel source target joined_entry action Parameters: source - the name of the Tcl array that holds the source data target - OUT: the name of the Tcl array that holds the mapped target data joined_entry - the name of the Tcl array that holds the joined entry action - IN/OUT: the calculated action, which is one of the following values: “add” for object creation “mod” for object modification “del” for object deletion Global variables used: None. Return values: 0 - indicates successful post mapping 1 - indicates an error in post mapping Example: set rc [uh::postMappingDel rh_file rh_ldap entry del] uh::postMappingMod uh::postMappingMod allows you to perform additional mapping procedures before the final directory update operation (which normally is a MODIFY operation) is called. The action parameter is used as an input and an output parameter. When used as an input parameter, it indicates the directory operation that should normally be performed. This operation can change if the situation requires an operation other than the initially calculated one. Synopsis: uh::postMappingMod source target joined_entry action Parameters: source - name of the Tcl array that holds the source data target - OUT: name of the Tcl array that holds the mapped target data joined_entry - name of the Tcl array that holds the joined entry action - IN/OUT: the calculated action, which is one of the following values: “add” for object creation “mod” for object modification “del” for object deletion Global variables used: None. Return values: 0 - indicates successful post mapping 1 - indicates an error in post mapping Example: set rc [uh::postMappingMod rh_file rh_ldap entry del] This section describes all of the variables that can be used when working with the Connectivity standard script. The default applications use a set of global variables that are defined in control.tcl. Many of these variables can be used in the user hook routines, if not already passed as argument. The description of the user hook interfaces lists only the global Tcl variables that are currently used by the given routine. Because you can set up very complex user hooks, the description of an interface doesn’t list all of the global variables that are available. It’s up to you to select the relevant variables, if required. The most important global variables are (in alphabetical order): add_entries - NONE = no addition, ADD = addition only, NTF = notification only, ADDNTF = addition and notification. debug_trace - 0 – no trace, 1 – variable trace to screen (compatibility mode), 2 – variable trace to file (compatibility mode), 4 – variable trace to screen, 5 – variable trace to file, 8 – command trace to screen, 9 – command trace to file, 12 – command and variable trace to screen, 13 – command and variable trace to file. delete_entries - NONE = no deletion, DEL = deletion only, NTF = notification only, DELNTF = deletion and notification. deletion_mode - PHYSICAL = physical removal of entry, MARK = entry is only marked, MOVE = entry is moved to tombstone area, USER = user hook defines the mechanism. delta_check - defines whether the script runs in delta mode. FALSE = Delta Mode is off, TRUE = Delta Mode is on. delta_date - the deltaInputData delivered from the Identity server. exact_action - (static) Tcl variable: TRUE = prohibits soft change of action from add to modify or no action when entry is already deleted (if set to TRUE). Reports error instead. FALSE = allows soft change of action. filter_type - defines whether the filter or join_expression field shall be taken for the join operation. Either table or expert. GUIDparam - (static) Tcl array with information for generation of GUIDs; its subcomponents are type - GUID generation type (none, local, global). targetIDattr - attribute where to store the generated GUID in the target directory. blockSize - number of central GUIDs to be generated to minimize read accesses. user - user name to access the configuration tree of Connectivity. pass - password to access the configuration tree of Connectivity. address - server address to access the configuration tree of Connectivity. base - search base. nr_free_guids - internal counter for number of free GUIDs in the block. next_free_guid - next free GUID in the block. sourceGuidID - fixed value to be used as prefix for the generation of a local GUID. sourceIDattr - attribute from which to obtain the variable (unique) part of local GUID to be generated. init_mode - type of script operation: real = real operation. trial = simulation (no real operation, only traces). If trial mode is selected, the meta controller must exit with error (because no valid data has been generated for subsequent steps). join_expression - join expression filter. master_name - master name to be filled into the target entry. max_trace_entries - maximum number of hits displayed in trace file. min_source_entries - minimum number of source entries that must be present (valid for import and export). modify_entries - NONE = No modification, MOD = Modification only, NTF = Notification only, MODNTF = Modification and Notification. notif_notok - 0 = no notification, 1 = notification when workflow ended with warning, 2 = notification when workflow ended with error, 3 = notification when not OK (error or warning). notify_notok_file - the INI file for the \"notify if not ok\" operation. notify_data_file - the INI file for notification to write entries for manual handling. object_class_collection - the object to which the object_classes belong (for example, user or group). object_classes - the object classes that must be handled during an add or modify operation. operational_attributes - whether or not operational attributes like dxrState shall be handled. opr - the operational attributes to be used (by default, dxmOprMaster, dxrState, dxrStartDate, dxrEndDate). rename_entries - FALSE = move DN not allowed, TRUE = move DN allowed. src_conn_param - (static) a Tcl array with information about source connection; its subcomponents are attr_file - name of attribute configuration file. attr_file_localcode - code set of the attribute configuration file. attr_list - list of attributes to be handled at the source side. dir_type - type of source connection. dir_subtype - subtype of LDAP directory (RACF, NDS) to react on specific behavior. superior_info - information to create higher level entries. data_file - name of data file (if dir_type=File). file_format - file format (if dir_type=File). file_mode - read or write mode (if dir_type=File). file_localcode - code set of file (if dir_type=File). authentication - type of authentication. user_name - user name of bind profile. user_pwd - user password of bind profile. ssl - FALSE = no SSL connection, TRUE = SSL connection. server_address - server TCP/IP address and port number. protocol - LDAP protocol (V2 or V3). bind_id - internal name of bind connection. LDIFchangeOutput - write all operations into an LDIF change file instead of direct LDAP operations. LDIFagreementFolder - the folder where DirX changelogs reside. src_data - the name of the Tcl array that holds the source entry. The source entry’s data is available after the source entry has been read from the source directory and therefore can be used in the following user hooks: uh::LoopExtraFilter uh::LoopExtraFunction uh::LoopPerformJoin uh::LoopPostJoin Note: When using name spaces, there might be problems using the variable “src_data”. The following expression can be used as an alternative: \"rh_\" src_add_marking_attr - the attribute type that is used as status attribute to indicate add operations at the source side. src_add_marking_value - the value that indicates an add operation at the source side. src_del_marking_attr - the attribute type that is used as status attribute to indicate delete operations at the source side. src_del_marking_value - the value that indicates a delete operation at the source side. src_search_param - (static) a Tcl array with information about source search parameters; its subcomponents are base_obj - the base object at which to start the search. subset - the search scope, either -baseobject, -onelevel, -subtree. filter - the filter definition for the search. or_filter - the OR filter (optional). read_DN_only - read DNs only. Perform for each entry a separate search afterwards. Either true or false. paged_read - read in paged read mode, either true or false. page_size - the page size for paged read. src_sort_param - (static) a Tcl array with information about source sorting parameters; its subcomponents are sorted_list - FALSE = result not sorted, TRUE = result sorted. key - the attribute to sort when the result shall be sorted. DDN cannot be used! order - ASCENDING = ascending sort order, DESCENDING = descending sort order. start_time - a Tcl variable that holds the start time. statistics - a switch that suppresses standard metacp statistics. target_entry_exists - the name of an attribute that is used to indicate whether an entry exists in the target system. test_mapping_only - FALSE = full operation, TRUE = only mapping is performed. test_max_entries - the number of entries that are mapped when test_mapping_only is TRUE. tgt_add_marking_attr - the attribute type that is used as a status attribute to mark add operations. tgt_add_marking_value - the value that is used as a status attribute to mark add operations. tgt_conn_param - (static) a Tcl array with information about target connection; its subcomponents are the same as in the src_conn_param variable. tgt_data - the name of the Tcl array that holds the target entry. The target entry’s data is available after the target entry has been mapped and therefore can be used in the following user hooks: uh::LoopExtraFilter uh::LoopExtraFunction uh::LoopPerformJoin uh::LoopPostJoin Note: When using name spaces, there might be problems using the variable “tgt_data”. The following expression can be used as an alternative: \"rh_\" tgt_del_marking_attr - the attribute type that is used as a status attribute to mark delete operations. tgt_del_marking_value - the value that is used as a status attribute to mark delete operations. tgt_import_mode - REPLACE = Complete subtree in the target area is replaced by subtree from source, MERGE = Subtree from source is merged into subtree in target. tgt_keep_objects - the objects that are not to be deleted. tgt_mod_marking_attr - the attribute type that is used as a status attribute to mark modify operations. tgt_mod_marking_value - the value that is used as a status attribute to mark modify operations. tgt_search_param - (static) a Tcl array with information about target search parameters; its subcomponents are base_obj - the base object from which to start the search. subset - BASE_OBJECT, ONE_LEVEL, SUBTREE. filter - the filter to perform a join operation. delete_filter - the search filter that searches the set of entries for REPLACE mode. read_DN_only - read DNs only. Perform for each entry a separate search afterwards. Either true or false. paged_read - read in paged read mode, either true or false. page_size - the page size for paged read. tgt_sort_param - (static) a Tcl array with information about target sorting parameters; its subcomponents are the same as the src_sort_param variable. tombstone_base - the base node at which to place the deleted entries (if deletion_mode = MOVE). trace_file - the name of the trace file. trace_level - 1 = Error trace, 2 = Full trace, 3 = Short trace. The profile script profile.tcl also defines some global variables. These variables are created in the procedures listed in common.tcl while executing the synchronization logic. counter - a Tcl array of counters used for additional statistic information; its components are mappingProblem - the number of ignored records/entries due to mapping problems userFilter - the number of ignored records/entries due to user defined filtering wrongDates - the number of ignored records/entries due to expirationDate . You can use this reference in the command line or in any configuration file. The new delta information, which should be stored into the Connectivity configuration, must be written into the first line of the file deltaoutputdata.txt (location must be the work path). Each Tcl-based workflow has a number of parameters that you can change. These parameters are common to most Tcl-based workflows and can all be accessed from the corresponding workflow wizard. The topics in this section describe these parameters for workflows that export data from the Identity Store and workflows that import data from the Identity Store. The most important parameters for workflows that export data from the Identity Store are attribute mapping, base object, filter and tracing. Clicking Help in the relevant wizard step gives you more information about these parameters. You need source and target attributes for attribute mapping. Use the source selected attributes to define the attributes to be exported from the Identity Store. Use the target selected attributes to define the attributes to be imported into the target system. Use the mapping editor to define the mapping from source to target. You can use the pre-defined mapping functions or create additional ones. If the left-hand list in the selected attributes editor does not contain the necessary attributes, you need to add the attributes to your source or target connected directory. Double-click the connected directory icon in the Global View and select the Attribute Configuration step. Add the necessary attributes to the list and set the correct parameters. If the connected directory is of type LDAP or ADS, you can update the list by synchronizing the schema. This parameter defines the base point at which the search is to be performed. For the creation workflows, this variable is set to o=My-Company, which is a combination of a constant (o=My-Company) and a reference. The reference fetches the specific attribute role_user_base from the connected directory. It starts at the job object, selects the connected directory via the input channel, and from the connected directory it uses the specific attribute role_user_base. For the Provisioning synchronization workflows, this variable is set to: The reference starts at the workflow object, goes down to the start activity and then to the job object. At the job level, it selects the connected directory via the input channel, and from the connected directory it takes the specific attribute role_ts_account_base. You could set these parameters directly to the correct values, but then you would lose the advantage of being able to change parameters for an entire set of workflows at the same time because each workflow uses an individual value. In this case, the validation and synchronization workflows use such central parameters. This parameter allows you to define a filter condition in LDAP notation. In the default Connectivity scenario, this field is set in several ways. For the creation workflows, the filter is usually set to a constant value, for example: ( not ( c=\"DE\" ) and not ( c=\"IT\" ) and not ( c=\"US\" ) ) For Provisioning synchronization workflows, the filter is set, for example, to: (objectClass=\"dxrTargetSystemAccount\" and not ( dxrTSState=\"DELETED\" ) ) In this case, the workflow exports target system accounts whose dxrTSState values are not in the DELETED state. Set the trace parameters adequately to debug your workflow during configuration. The most important parameters for workflows that import data to the Identity Store are mapping and selected attributes, base object, import mode, filters for merge/replace, entry handling, tracing, and page mode. Clicking Help in the relevant wizard step gives you more information about these parameters. You need source and target selected attributes for the mapping. Use the source selected attributes to define the attributes to be exported from the source system. Use the target selected attributes to define the attributes to be imported into the Identity Store. It is important to set the correct flags that influence whether attributes may be added, deleted or modified. A combination of these flags for a specific attribute defines the mastership for that attribute. Use the mapping editor to define the mapping from source to target. You can use the pre-defined mapping functions or create additional ones. If the left-hand list in the selected attributes editor does not contain the necessary attributes, you need to add them to your source or target connected directory. Double-click the connected directory icon in the global view and select the Attribute Configuration step. Add the necessary attributes to the list and set the correct parameters. If the connected directory is of type LDAP or ADS, you can update the list by synchronizing the schema. This parameter defines the base point for the join operation. For creation workflows, this value is set to a reference: The reference retrieves the specific attribute role_user_base from the Identity Store object. For Provisioning synchronization workflows, the base point is set to a reference: See the export section for an explanation of this reference. For import operations, you can choose between two modes: Replace and Merge. Replace mode assumes the existence of a full set of entries and therefore cannot handle delta information. In this mode, the source and the target are identical after the operation. This mode can be used for up to 250,000 entries without any problems (typical execution times are 2.5 hours or less). This mode is particularly useful for initial loads. In this case, it is about four times faster than merge mode. Merge mode can handle all kinds of input. Content information can be handled as a full import or as a delta set if only addition and modification are enabled (see the Entry Handling tab for these settings). If the source delivers an operation code (especially for deleted entries), then deletions can be handled in this mode, too. Large numbers of entries (500,000 entries and more) should be handled with this mode in conjunction with a delete operations code. Creation and provisioning workflows use merge mode in the default scenario. Depending on the value of the import mode parameter (Merge or Replace), you need to set either the Filters for Merge or the Filters for Replace parameter. If the import mode is Merge, you use the Join table either in table or expert mode (for details, see the description of this element). Each row in this table defines a separate filter condition that is evaluated one after the other until exactly one match is found. For example, you can first search for the employeeNumber, then for a combination of sn, givenName and telephoneNumber and so on. If the import mode is Replace, you define a Replace Filter, which is a condition that retrieves all entries in the target into the meta controller’s memory. The meta controller compares all source entries with this memory list. Entries that it finds are marked and modified if the content has changed. Entries that it does not find must be added to the target. At the end, all entries that are not marked in the list are subject to be deleted from the target. This algorithm guarantees a consistent set of entries after the operation. In this mode, it is important that the retrieved memory list is sorted with the field that is used for comparison. This field is to be defined as Sort Key. This tab contains a set of properties that allow you to define together with the Import Mode parameter the specific behavior of the entry handling at the target side. You can define parameters for Add, Modify and Delete operations. The Add Entries/Modify Entries/Delete Entries switches each allow four options. You can either forbid the operation (None), allow it (Add, Modify or Delete) or choose instead only notification (NTF), where a file is generated for this type of operation and is sent via e-mail to an administrator, who must then perform the requested task manually. The fourth option permits the performance of both the operation and the notification. This option is useful if the administrator wants to check the operations regularly and is especially useful for additions and deletions. For Add, you should set the Superior Info information. This is not necessary if you are absolutely sure that creation of upper-level nodes is never required. For Modify, you can choose whether you want to allow a DN rename operation (Rename Entries) For Delete, you can choose the Deletion Mode. The selection must be consistent with your delivered data. You can use the Keep Objects field to define DNs that your workflow should not delete. See the script structure sections in the chapter \"Understanding the Default Application Workflow Technology\" for information about the other entry handling properties. Set the adequate trace parameters to debug your workflow during configuration. DirX Identity’s default workflows are configured to run without paging by default. However, if you intend to work with large amounts of data, use paging wherever possible. Otherwise you could reach the limits of the directory server or the operating system. In the latter case, the result is not predictable. Note that for comparison of two result lists, sorting is absolutely necessary if you work in paged mode.","title":"Understanding the Default Application Workflow Technology","component":"dirx-identity-docs","version":"9.0.0","name":"ch1_applsref","url":"/dirx-identity-docs/latest/appl-dev-guide/ch1_applsref.html","titles":[{"text":"Understanding Request Workflows","hash":"_understanding_request_workflows","id":1},{"text":"Request Workflow Architecture","hash":"_request_workflow_architecture","id":2},{"text":"Understanding Activity Types","hash":"_understanding_activity_types","id":3},{"text":"About the Activity Sub-Structure","hash":"_about_the_activity_sub_structure","id":4},{"text":"Understanding Notifications","hash":"_understanding_notifications","id":5},{"text":"HTML Notifications","hash":"_html_notifications","id":6},{"text":"Understanding Request Workflow States","hash":"_understanding_request_workflow_states","id":7},{"text":"Types of Request Workflow States","hash":"_types_of_request_workflow_states","id":8},{"text":"Understanding Request Workflow Activity States","hash":"_understanding_request_workflow_activity_states","id":9},{"text":"Understanding the Full Checker","hash":"_understanding_the_full_checker","id":10},{"text":"Full Check for Expired Workflows and Activities","hash":"_full_check_for_expired_workflows_and_activities","id":11},{"text":"Full Check for All Running Workflows","hash":"_full_check_for_all_running_workflows","id":12},{"text":"Full Checker Configuration","hash":"_full_checker_configuration","id":13},{"text":"Request Workflow Error Handling","hash":"_request_workflow_error_handling","id":14},{"text":"Nationalizing Request Workflows","hash":"_nationalizing_request_workflows","id":15},{"text":"Understanding Request Workflow Nationalization","hash":"_understanding_request_workflow_nationalization","id":16},{"text":"Using the Nationalization Wizard","hash":"_using_the_nationalization_wizard","id":17},{"text":"Organizing Message Topics","hash":"_organizing_message_topics","id":18},{"text":"Customizing Request Workflow Nationalization","hash":"_customizing_request_workflow_nationalization","id":19},{"text":"Using an External Nationalization Editor","hash":"_using_an_external_nationalization_editor","id":20},{"text":"Determining the Language","hash":"_determining_the_language","id":21},{"text":"Handling Message Items during Runtime","hash":"_handling_message_items_during_runtime","id":22},{"text":"Selecting Request Workflows","hash":"_selecting_request_workflows","id":23},{"text":"Creation Workflow Selection","hash":"_creation_workflow_selection","id":24},{"text":"Modification Workflow Selection","hash":"_modification_workflow_selection","id":25},{"text":"Assignment Workflow Selection","hash":"_assignment_workflow_selection","id":26},{"text":"Executing Request Workflows","hash":"_executing_request_workflows","id":27},{"text":"Customizing Request Workflows","hash":"_customizing_request_workflows","id":28},{"text":"Using Variable Substitution","hash":"_using_variable_substitution","id":29},{"text":"Elements","hash":"_elements","id":30},{"text":"Structures","hash":"_structures","id":31},{"text":"Server Variables","hash":"_server_variables","id":32},{"text":"Workflow Instance","hash":"_workflow_instance","id":33},{"text":"Activity Instance","hash":"_activity_instance","id":34},{"text":"Control Structures","hash":"_control_structures","id":35},{"text":"Reduced Run-time Activities","hash":"_reduced_run_time_activities","id":36},{"text":"Filling the Address Fields","hash":"_filling_the_address_fields","id":37},{"text":"Participant Calculation","hash":"_participant_calculation","id":38},{"text":"Tips and Tricks","hash":"_tips_and_tricks","id":39},{"text":"Implementing a New Activity","hash":"_implementing_a_new_activity","id":40},{"text":"Defining Configuration Parameters","hash":"_defining_configuration_parameters","id":41},{"text":"Supplying a Component Description","hash":"_supplying_a_component_description","id":42},{"text":"Implementing the Job","hash":"_implementing_the_job","id":43},{"text":"Reading the Job Configuration","hash":"_reading_the_job_configuration","id":44},{"text":"Reading the Workflow Instance Data","hash":"_reading_the_workflow_instance_data","id":45},{"text":"Modifying the Workflow Instance Data","hash":"_modifying_the_workflow_instance_data","id":46},{"text":"Read and Write Context Properties","hash":"_read_and_write_context_properties","id":47},{"text":"Reading and Changing Orders","hash":"_reading_and_changing_orders","id":48},{"text":"Deploying the Job","hash":"_deploying_the_job","id":49},{"text":"Obtaining a Connection to the Identity Domain","hash":"_obtaining_a_connection_to_the_identity_domain","id":50},{"text":"Implementing a Job with access to the Identity Domain","hash":"_implementing_a_job_with_access_to_the_identity_domain","id":51},{"text":"Using the DomainSessionAccessor Method","hash":"_using_the_domainsessionaccessor_method","id":52},{"text":"Implementing a User Hook for an applyChange Activity","hash":"_implementing_a_user_hook_for_an_applychange_activity","id":53},{"text":"Implementing a Socketed Job Framework-based Activity","hash":"_implementing_a_socketed_job_framework_based_activity","id":54},{"text":"Adding the New Socketed Job Framework Activity","hash":"_adding_the_new_socketed_job_framework_activity","id":55},{"text":"Specifying Predefined Configuration Parameters","hash":"_specifying_predefined_configuration_parameters","id":56},{"text":"Implementing the Job","hash":"_implementing_the_job_2","id":57},{"text":"Reading the Job Configuration","hash":"_reading_the_job_configuration_2","id":58},{"text":"Reading the Workflow Instance Data","hash":"_reading_the_workflow_instance_data_2","id":59},{"text":"Modifying the Workflow Instance Data","hash":"_modifying_the_workflow_instance_data_2","id":60},{"text":"Read and Write Context Properties","hash":"_read_and_write_context_properties_2","id":61},{"text":"Reading and Changing Orders","hash":"_reading_and_changing_orders_2","id":62},{"text":"Deploying the Job","hash":"_deploying_the_job_2","id":63},{"text":"Implementing a Java Class for Finding Participants","hash":"_implementing_a_java_class_for_finding_participants","id":64},{"text":"Defining Configuration Parameters","hash":"_defining_configuration_parameters_2","id":65},{"text":"Implementing the Java Class","hash":"_implementing_the_java_class","id":66},{"text":"Deploying the Java Class","hash":"_deploying_the_java_class","id":67},{"text":"Implementing Participant Filters and Constraints","hash":"_implementing_participant_filters_and_constraints","id":68},{"text":"Implementing a Participants Filter","hash":"_implementing_a_participants_filter","id":69},{"text":"Implementing Participant Constraints","hash":"_implementing_participant_constraints","id":70},{"text":"Configuring a Joblet","hash":"_configuring_a_joblet","id":71},{"text":"Implementing a Joblet","hash":"_implementing_a_joblet","id":72},{"text":"Deploying Filters and Constraints","hash":"_deploying_filters_and_constraints","id":73},{"text":"Testing Request Workflows","hash":"_testing_request_workflows","id":74},{"text":"Understanding Java-based Workflows","hash":"_understanding_java_based_workflows","id":75},{"text":"Java-based Workflow Architecture","hash":"_java_based_workflow_architecture","id":76},{"text":"Full, Delta and Event-based Workflows","hash":"_full_delta_and_event_based_workflows","id":77},{"text":"Location of Delta State","hash":"_location_of_delta_state","id":78},{"text":"Java-based Workflow Structure","hash":"_java_based_workflow_structure","id":79},{"text":"Controller Types","hash":"_controller_types","id":80},{"text":"Channels and Mapping","hash":"_channels_and_mapping","id":81},{"text":"Cross-Memberships","hash":"_cross_memberships","id":82},{"text":"Starting Java-based Workflows","hash":"_starting_java_based_workflows","id":83},{"text":"Event-Based Workflows","hash":"_event_based_workflows","id":84},{"text":"Scheduled Workflows","hash":"_scheduled_workflows","id":85},{"text":"Starting a Workflow Manually","hash":"_starting_a_workflow_manually","id":86},{"text":"Customizing Java-based Workflows","hash":"_customizing_java_based_workflows","id":87},{"text":"Using User Hooks","hash":"_using_user_hooks","id":88},{"text":"Configuring a User Hook","hash":"_configuring_a_user_hook","id":89},{"text":"Implementing a Global User Hook","hash":"_implementing_a_global_user_hook","id":90},{"text":"Implementing a Channel User Hook","hash":"_implementing_a_channel_user_hook","id":91},{"text":"Implementing a User Hook for Email Notifications","hash":"_implementing_a_user_hook_for_email_notifications","id":92},{"text":"Deploying a User Hook","hash":"_deploying_a_user_hook","id":93},{"text":"Running Executables from a User Hook","hash":"_running_executables_from_a_user_hook","id":94},{"text":"Mapping with Java Classes","hash":"_mapping_with_java_classes","id":95},{"text":"Identifier Mapping","hash":"_identifier_mapping","id":96},{"text":"Attribute Mapping","hash":"_attribute_mapping","id":97},{"text":"Post Mapping","hash":"_post_mapping","id":98},{"text":"Deploying the Mapping Class","hash":"_deploying_the_mapping_class","id":99},{"text":"Evaluating a Mapping Entry","hash":"_evaluating_a_mapping_entry","id":100},{"text":"Handling Environment Properties","hash":"_handling_environment_properties","id":101},{"text":"Handling the Mapped Entry","hash":"_handling_the_mapped_entry","id":102},{"text":"Setting the Map Result","hash":"_setting_the_map_result","id":103},{"text":"Logging","hash":"_logging","id":104},{"text":"Testing the Real-Time Workflow Mapping Classes","hash":"_testing_the_real_time_workflow_mapping_classes","id":105},{"text":"About the Mapping Test","hash":"_about_the_mapping_test","id":106},{"text":"About the Mapping Test Structure","hash":"_about_the_mapping_test_structure","id":107},{"text":"Testing the LDAP Channel Configuration","hash":"_testing_the_ldap_channel_configuration","id":108},{"text":"Using Connector Filters","hash":"_using_connector_filters","id":109},{"text":"Configuring a Connector Filter","hash":"_configuring_a_connector_filter","id":110},{"text":"Deploying a Connector Filter","hash":"_deploying_a_connector_filter","id":111},{"text":"Customizing Password Synchronization Workflows","hash":"_customizing_password_synchronization_workflows","id":112},{"text":"Configuring a Password User Hook","hash":"_configuring_a_password_user_hook","id":113},{"text":"Implementing a Password User Hook","hash":"_implementing_a_password_user_hook","id":114},{"text":"Deploying a Password User Hook","hash":"_deploying_a_password_user_hook","id":115},{"text":"Customizing Event-based Maintenance Workflows","hash":"_customizing_event_based_maintenance_workflows","id":116},{"text":"Configuring a User Hook for an Event-based Maintenance Workflow","hash":"_configuring_a_user_hook_for_an_event_based_maintenance_workflow","id":117},{"text":"Implementing a User Hook for an Event-based Maintenance Workflow","hash":"_implementing_a_user_hook_for_an_event_based_maintenance_workflow","id":118},{"text":"Using Event Contexts","hash":"_using_event_contexts","id":119},{"text":"Deploying a User Hook for an Event-based Maintenance Workflow","hash":"_deploying_a_user_hook_for_an_event_based_maintenance_workflow","id":120},{"text":"Using Combined Workflows","hash":"_using_combined_workflows","id":121},{"text":"Understanding Tcl-based Workflows","hash":"_understanding_tcl_based_workflows","id":122},{"text":"Tcl-based Connectivity Architecture","hash":"_tcl_based_connectivity_architecture","id":123},{"text":"Connectivity Standard Script Structure","hash":"_connectivity_standard_script_structure","id":124},{"text":"Connectivity Standard Script Logical Structure","hash":"_connectivity_standard_script_logical_structure","id":125},{"text":"Connectivity Standard Script Physical Structure","hash":"_connectivity_standard_script_physical_structure","id":126},{"text":"Provisioning Workflow Script Structure","hash":"_provisioning_workflow_script_structure","id":127},{"text":"Connectivity Standard Script Operation","hash":"_connectivity_standard_script_operation","id":128},{"text":"Control Script Operation","hash":"_control_script_operation","id":129},{"text":"Profile Script Operation","hash":"_profile_script_operation","id":130},{"text":"Connectivity Standard Script Switches and Parameters","hash":"_connectivity_standard_script_switches_and_parameters","id":131},{"text":"Switches for Operational Control","hash":"_switches_for_operational_control","id":132},{"text":"Switches for Notification Control","hash":"_switches_for_notification_control","id":133},{"text":"Switches for GUID Generation","hash":"_switches_for_guid_generation","id":134},{"text":"Switches for Trace Control","hash":"_switches_for_trace_control","id":135},{"text":"Source Directory Parameters","hash":"_source_directory_parameters","id":136},{"text":"Input Channel Parameters","hash":"_input_channel_parameters","id":137},{"text":"Target Directory Parameters","hash":"_target_directory_parameters","id":138},{"text":"Output Channel Parameters","hash":"_output_channel_parameters","id":139},{"text":"Switches for Pre-Configured Operational Attribute Handling","hash":"_switches_for_pre_configured_operational_attribute_handling","id":140},{"text":"References in the Default Connectivity Applications","hash":"_references_in_the_default_connectivity_applications","id":141},{"text":"Base Object References","hash":"_base_object_references","id":142},{"text":"References in Filter Expressions","hash":"_references_in_filter_expressions","id":143},{"text":"Object Class Handling","hash":"_object_class_handling","id":144},{"text":"Global Unique Identifier (GUID) Generation","hash":"_global_unique_identifier_guid_generation","id":145},{"text":"Local GUID Generation","hash":"_local_guid_generation","id":146},{"text":"Central GUID Generation","hash":"_central_guid_generation","id":147},{"text":"User-Defined GUID Generation","hash":"_user_defined_guid_generation","id":148},{"text":"Multi-Mastered Attributes","hash":"_multi_mastered_attributes","id":149},{"text":"Naming and Scopes","hash":"_naming_and_scopes","id":150},{"text":"User Hooks","hash":"_user_hooks","id":151},{"text":"Central Tcl Interfaces","hash":"_central_tcl_interfaces","id":152},{"text":"Default User Hook Tcl Interfaces","hash":"_default_user_hook_tcl_interfaces","id":153},{"text":"Post-Join Mapping Tcl Interfaces","hash":"_post_join_mapping_tcl_interfaces","id":154},{"text":"Global Tcl Variables","hash":"_global_tcl_variables","id":155},{"text":"Control Script Variables","hash":"_control_script_variables","id":156},{"text":"Profile Script Variables","hash":"_profile_script_variables","id":157},{"text":"Meta Handles","hash":"_meta_handles","id":158},{"text":"Understanding Delta Handling","hash":"_understanding_delta_handling","id":159},{"text":"Types of Delta handling","hash":"_types_of_delta_handling","id":160},{"text":"Date-Oriented Delta Handling","hash":"_date_oriented_delta_handling","id":161},{"text":"Client-Side Handling","hash":"_client_side_handling","id":162},{"text":"Workflow-Side Handling","hash":"_workflow_side_handling","id":163},{"text":"Client-Side Delta Handling","hash":"_client_side_delta_handling","id":164},{"text":"Workflow-Side Delta Handling","hash":"_workflow_side_delta_handling","id":165},{"text":"USN-Oriented Delta Handling","hash":"_usn_oriented_delta_handling","id":166},{"text":"File-Oriented Delta Handling","hash":"_file_oriented_delta_handling","id":167},{"text":"Delta Handling Control","hash":"_delta_handling_control","id":168},{"text":"How to Control Delta Runs","hash":"_how_to_control_delta_runs","id":169},{"text":"Configuring Delta Handling","hash":"_configuring_delta_handling","id":170},{"text":"Customizing Tcl-based Workflows","hash":"_customizing_tcl_based_workflows","id":171},{"text":"Customizing Identity Store Export Workflows","hash":"_customizing_identity_store_export_workflows","id":172},{"text":"Attribute Mapping","hash":"_attribute_mapping_2","id":173},{"text":"Base Object (Export Properties Tab)","hash":"_base_object_export_properties_tab","id":174},{"text":"Filter (Export Properties Tab)","hash":"_filter_export_properties_tab","id":175},{"text":"Tracing","hash":"_tracing","id":176},{"text":"Customizing Identity Store Import Workflows","hash":"_customizing_identity_store_import_workflows","id":177},{"text":"Mapping and Selected Attributes","hash":"_mapping_and_selected_attributes","id":178},{"text":"Base Object (Import Properties tab)","hash":"_base_object_import_properties_tab","id":179},{"text":"Import Mode (Import Properties Tab)","hash":"_import_mode_import_properties_tab","id":180},{"text":"Filters for Merge / Replace (Import Properties Tab)","hash":"_filters_for_merge_replace_import_properties_tab","id":181},{"text":"Entry Handling Properties Tab","hash":"_entry_handling_properties_tab","id":182},{"text":"Tracing","hash":"_tracing_2","id":183},{"text":"Page Mode","hash":"_page_mode","id":184}]},"7":{"id":7,"text":"You can use request workflows for a variety of tasks, including: Creating objects (user self registration, users, roles, and so on with or without approval) Modifying objects (users, roles, and so on) and approving object attribute changes Approving privilege assignment changes Deleting objects (users, roles, and so on) Performing certifications Performing service management tasks Creation workflows allow you to place controls on the object creation process.Let’s look at several typical examples: User Self Registration Workflows - the Customer Self Registration workflow allows for self registration of a customer Create User Workflows - the Create User With Approval workflow shows how an administrator enters a new user with approval. Create Persona Workflows - the Create Persona from User shows a typical workflow for administrative persona creation. Create User Facet Workflows - the Create User Facet from User shows a typical workflow for creating a user facet. Create Functional User Workflows - the Create Functional User from User shows a typical workflow for administrative functional user creation. Create Privilege Workflows - the Create Role workflow defines a process for role creation. These examples of creation workflows show that you can build various types of creation workflows that satisfy your organizational and process requirements. We recommend that you streamline your processes when defining request workflows so that they are fast and flexible but still maintain regulatory compliance. Self registration workflows have a special function: they are triggered by a user that is not yet registered within DirX Identity. To handle this case, DirX Identity uses the special and reserved user ANYONE, which has the limited access rights defined by access policies that are sufficient to perform the self registration process. See the access policies for ANYONE under Policies → Access Policies → Default → Request Workflow Definitions for more information. You need to supply a password for ANYONE in the file install_path*\\web\\webCenter\\WEB-INF* to enable the self registration process. A typical self registration workflow is the Customer Self Registration workflow: Figure 1. Customer Self Registration Workflow The Customer Self Registration workflow contains the following activities Enter Attributes (people) - displays a set of attributes (mandatory or optional) that the requesting user must supply. Enter Password (people) - requests a password that complies with the defined password policies from the user. Request Services (people) - allows the user to select some of the offered services. The policy execution service can assign additional privileges automatically later on. Confirm Data (people) - presents all entered data to the user, who can change the data if it is not correct and then either confirm or abort the entire self registration process. Notification if Aborted (automatic) - sends a final notification to the requesting user that he aborted the self registration process. Set Constants (automatic) - sets some constant values, for example, the user type to \"Customer\" and the master attribute to \"Self Registration\". Approve Self Registration (people) - requires a set of persons (the participants) to approve this user self registration request. In this case, a fixed group of people defines the list of approvers. Apply Change (automatic) - creates the LDAP entry for the user if the participants in Approve Creation accept the creation request. Up to this point, the user entry does not exist. It exists only as an order object within the workflow instance. Creating the user LDAP entry includes a privilege resolution and generation of events for real-time workflows. Notification if Rejected (automatic) - typically sends an e-mail notification to the initiator of this workflow if the participants reject the user creation request. Notification if EXPIRED (automatic) - sends an e-mail to an administrator that the workflow has expired. Obviously the participants did not react in time. You can create users in various ways. The following figure shows a typical workflow for administrative user creation: Figure 2. Example of a Create User Workflow The workflow shown in the figure contains the following activities: Enter Attributes (people) - displays a set of attributes (mandatory or optional) that the administrator must supply. Request Privileges (people) - allows the administrator to assign some privileges by hand. The policy execution service can assign additional privileges automatically later on. Approve Creation (people) - requires a set of persons (the participants) to approve this administrative request for user creation. There are many ways to define the participants; for example, fixed lists, the members of groups, an LDAP filter definition and so on. For this workflow, a fixed list of approvers that are part of the human resources department is configured. Calculate GUID (automatic) - calculates a standard global unique identifier. Example: uid-c0a8e480—​4b5b380c-121222f6f42—​7fb8. You can create your own UID generator as a custom activity. Apply Change (automatic) - creates the LDAP entry for the user if the participants in Approve Creation accept the creation request. Up to this point, the user entry does not exist. It exists only as an order object within the workflow instance. Creating the user LDAP entry includes a privilege resolution and generation of events for real-time workflows. Notification if Rejected (automatic) - typically sends an e-mail notification to the initiator of this workflow if the participants reject the user creation request. Notification if EXPIRED (automatic) - sends an e-mail to an administrator that the workflow has expired (the participants did not respond in time). You can create personas in various ways. The following figure shows a typical workflow for administrative persona creation: Figure 3. Example of a Create Persona Workflow The workflow shown in the figure is derived from the corresponding create user workflow, which has been extended to include a new first activity: Persona from User (automatic) - creates the default values for the persona to be created from its owner using a special object description. This workflow causes the \"enter attributes\" dialog for personas to be populated with useful default values. All of the other activities for the create persona workflow are the same as the create user workflow described in the previous section. See the section \"Customizing Persona Create Workflows\" in the chapter \"Customizing Program Logic\" in the DirX Identity Customization Guide for information on how to configure the Persona from User activity. You can create user facets in the same ways as for personas. The workflow for creating a user facet is basically the same as the workflow for creating a persona described in the section \"Create Persona Workflows\". The only difference is the first automatic activity User Facet from User, which sets default values for the new user facet taken from the associated user and configured in the object description UserFacetFromUser.xml. See the section \"Customizing User Facet Create Workflows\" in the chapter \"Customizing Program Logic\" in the DirX Identity Customization Guide for information on how to configure the User Facet from User activity. You can create functional users in various ways. The following figure shows a typical workflow for administrative functional user creation: Figure 4. Example of a Create Functional User Workflow The workflow shown in the figure is derived from the corresponding create user workflow, which is extended to include a new first activity: Functional User from User (automatic) - creates the default values for the functional user to be created from its sponsor using a special object description. This workflow causes the \"enter attributes\" dialog for functional users to be populated with useful default values. All of the other activities for the create functional user workflow are the same as the create user workflow described in the previous section. See the section \"Customizing Functional User Create Workflows\" in the chapter \"Customizing Program Logic\" in the DirX Identity Customization Guide for information on how to configure the Functional User from User activity. There are also many ways to define a workflow for a role - or more generally, a privilege - request. The following figure shows a typical workflow definition: Figure 5. Example of a Create Role Workflow Because role creation is a complex task, the workflow takes a two-step approach. First, a person supplies a set of descriptive attributes to request the new role. When this \"basis\" request is approved, the workflow creates the role object and notifies a role administrator to complete the role definition. This workflow contains the following activities: Enter General Attributes (people) - displays a set of descriptive attributes (mandatory or optional ones) the role requester must supply. Approve Role Creation (people) - requires a set of persons (the participants) to approve the role creation request, possibly including a check for an existing role definition that can be used instead of the requested one. Apply Change (automatic) - creates the preliminary LDAP role entry if the participants of Approve Role Creation accept the creation request. Notification if Rejected (automatic) - typically sends an e-mail notification to the initiator of this workflow if the participants of Approve Role Creation reject the role creation request. Perform Administrative Tasks (people) - notifies the role administrator that a preliminary role object has been created and requests that he completes the role definition.This action may include tasks like setting the role ID, assigning permissions, role parameters and senior roles (and perhaps these additional objects must be created first), assigning users as owners and role administrators and defining approval and re-approval parameters. Notification if Role Request Completed (automatic) - typically sends an e-mail notification to the initiator of this workflow when the role administrator can complete the role definition successfully. Notification if Not Completed (automatic) - typically sends an e-mail notification to the initiator of this workflow when the role administrator finds that the role creation is not possible; for example, because there is a conflict with other role definitions. Notification if EXPIRED (automatic) - sends an e-mail to an administrator that the workflow has expired (the participants did not respond in time). This type of workflow allows approval of object modifications if critical attributes are changed.You use attribute policies to define the list of critical attributes for an object type.Managing attribute modification approval comprises these steps: Enabling attribute modification approval via the Attribute Modification Approval flag of the domain object. Configuring the corresponding attribute policies for each object type (critical attributes). Note: either create your own attribute policies or copy the default policies to prevent your policies from being overwritten during upgrade installation. Each matching policy results in the start of one workflow. The next section provides an example for a user attribute modification workflow.You can set up similar modification workflows for other object types. The following figure shows a typical attribute modification workflow that is triggered by a change of the dxroulink or dxrlocationlink attributes. Figure 6. Modify Location and Organization The workflow shown in the figure contains the following activities: Approval of Attribute Modifications (people) - requests that a set of participants approve the modification of critical attributes. In this special case, we use all persons of the HR department as approvers. These persons are also allowed to change some of the attributes to their correct values before they accept the changes. Apply Change (automatic) - changes the LDAP entry if the participants of the previous step accepted the modification. Up to now, the modifications do not exist. They exist only as an order object within the workflow instance. Notification if Rejected (automatic) - typically sends an e-mail notification to the initiator of this workflow if the participants reject the modification request. Notification if EXPIRED (automatic) - sends an e-mail to an administrator that the workflow has expired. Obviously the participants did not react in time. The attribute modification workflow functions as follows: The modification workflow does not allow a participant to accept a part of the attributes and reject the rest. If several participants must approve, and all approve but some make changes to the data before they approve, DirX Identity takes the changes made by the last approver, and ignores the rest. If several workflows are started for the same attribute, DirX Identity takes the changes from the last approved change. This feature is not applicable for: Properties that depend on a master object.In this case, the change of the master attribute must be approved rather than the change of the dependent attribute.For more information, see the section \"Using the Master Attribute\" in the section \"Customizing Objects\" in the DirX Identity Customization Guide. Properties that are used as system properties for privilege assignment.The privilege assignments are handled by extra assignment approval workflows. Properties that are calculated automatically by the system to set some states or other system relevant values. Properties that are specific properties holding a set of individual properties.For example, dxrRPValues cannot be chosen, select dxrRPValues(c) or dxrRPValues(l) instead. The workflow checks these rules and if it detects a violation, it reports it as an error message when the policy is saved. Warning: You can bypass these checks by editing the attributes for approval in the attribute policy with a native LDAP editor (for example, DirX Identity’s Data View).However, this action may result in unexpected problems that are not covered by product support. This type of workflow only handles the approval of privilege assignments.In this section, we: Describe how approval works. Examine the 4-eye approval, automatic (notification-only) approval and risk approval workflows. Explain how to set up approval workflows for different assignment operation types. Give some guidelines for determining when to implement privilege assignment approval and re-approval. The following figure illustrates the approval process in DirX Identity Provisioning. Figure 7. The DirX Identity Provisioning Approval Process The approval process works as follows: A privilege that is flagged for approval is assigned to a user. This action initiates a request workflow configured for assignment approval (the creation request is sent via HTTP/SOAP from the client to the Java-based Server). The request workflow service checks all active workflow templates to determine whether they fit (When Applicable section). The first workflow template that fits is converted to a workflow instance. The state is set to Running. The request workflow service starts all activities whose start conditions are satisfied and performs the assigned actions (for example, sending an e-mail to the relevant approver(s)). The request workflow service waits for responses from the approvers or for new approval workflow requests. Note: from time to time, it performs a full check of the instances to solve the problem of lost SOAP requests. The full check interval is configurable (the default is 5 minutes). When a user performs an approval (he accepts or rejects), a SOAP message informs the request workflow service again. It performs the necessary actions and calculates the next steps. When a workflow instance finishes, either successfully (state Succeeded) or with error (state Failed), the workflow is completed. If the approval was successful, the user-to-privilege assignment is enabled and a privilege resolution is performed automatically. Now the assignment is active. The workflow instance remains in the Identity Store based on the configured Expiration Time. Use the Cleanup Objects workflow with its corresponding cleanup rules to remove the expired instances from the Identity Store regularly. Note that all history information is removed from the expired instances before they can be deleted. Thus it is good practice to run the Extract Audit Trail workflow in advance (or to set up the corresponding collector of DirX Audit). Changing an existing assignment or deleting an assignment also triggers an approval workflow if the privilege is flagged for approval. Let’s look at three examples of approval workflows: 4-eye approval, automatic (notification only) approval and risk approval. You can approve privilege assignments in various ways. A typical approval type is 4-eye approval if you assign a privilege to a user. Both the manager of the user and the manager of the privilege must approve. The following figure shows an example of this workflow: Figure 8. 4-Eye Approval Workflow This workflow contains the following activities: Approval by User Managers (people) - requires the user’s manager(s) to approve the privilege assignment, which means he accepts that the user receives these additional access rights to perform new tasks. Approval by Privilege Managers (people) - requires the privilege’s manager(s) to approve that this user gets this privilege, which means that this user has access to the resources this privilege protects. + Merge (AND) - calculates the result of previous activities, which means that it calculates all applications states via AND. o Merge (OR) - calculates the result of previous activities, which means that it calculates all applications states via OR. Apply Approved Privilege Change (automatic) - assigns the privilege to the user if all participants approve the assignment. This activity includes a privilege resolution and generation of messages for real-time workflows. Notification if Rejected (automatic) - typically sends an e-mail notification to the related user that the privilege is not assigned, if the participants reject the assignment request. Notification if EXPIRED (automatic) - sends an e-mail to an administrator that the workflow has expired (the participants did not respond in time). Note: For details about configuration with access policies, see the subsection \"Policies for Approvals\" in the section \"Delegated Administration\" in the chapter \"Managing Policies\" in the DirX Identity Provisioning Administration Guide. Another example is a workflow that simply sends a notification when a privilege is assigned to a user. In this example, the workflow informs a user that he has received the \"Signature Level 1\" privilege with some valuable hints about using it: Figure 9. Signature Information Workflow This workflow consists of these activities: Apply Privilege and Notify User (automatic) - assigns the privilege to the user automatically, including a privilege resolution and generation of messages for real-time workflows. The activity also sends a notification to the user about this assignment. Notification if EXPIRED (automatic) - sends an e-mail to an administrator that the workflow has expired. Obviously the participants did not react in time. In a risk approval workflow, the first activity calculates the new risk level that would become effective if the assignment was approved. If the risk level is computed to high (is equal to 3), an additional approval step Approval by Company Head must be executed if Approve by Privilege Manager has been accepted. The following figure shows an example of this workflow: Figure 10. Risk Approval Workflow This workflow contains the following activities: Calculate Risk (automatic) - simulates a risk level resolution for the requested privilege assignment. For the new/deleted group assignments, it calculates the risk and then merges these new risks with the risk values already computed to calculate the new potential risk level. The activity then stores this new risk level in the application state and the workflow context (values of 0, 1, 2 and 3 are possible, with 3 corresponding to a high risk assignment). Approval by Privilege Manager (people) - requires the privilege’s manager(s) to approve that this user gets this privilege, which means that this user has access to the resources this privilege protects. + Merge (AND) - calculates the result of previous activities, where Approve by Privilege Manager was accepted and Calculate Risk computed a high risk (a value of 3). Approval by Company Head (people) - requires the company head to approve that this user receive this privilege, which means that this user has access to the resources this privilege protects. This activity is only entered if a high risk for the assignment was calculated and the first approval was accepted. + Merge (AND) - calculates the result of previous activities, which means that it calculates all applications states via AND. Approve by Privilege Manager was accepted and Calculate Risk computed a lower risk (not equal to 3) so that no additional approval is necessary. o Merge (OR) - calculates the result of previous activities, which means that it calculates all applications states via OR. Either Approval by Company Head was accepted or Approve by Privilege Manager was accepted and the risk was not calculated to be high. Apply Approved Privilege Change (automatic) - assigns the privilege to the user if all participants approve the assignment. This activity includes a privilege resolution and generation of messages for real-time workflows. Notification if Rejected (automatic) - typically sends an e-mail notification to the related user that the privilege is not assigned, if the participants reject the assignment request. This activity is called if the privilege manager has rejected the assignment. Notification if High Risk Rejected (automatic) - typically sends an e-mail notification to the related user that the privilege is not assigned, if the participants reject the assignment request. This activity is called if Approval by Company Head was rejected. Notification if EXPIRED (automatic) - sends an e-mail to an administrator that the workflow has expired (the participants did not respond in time). Note: For details about configuration with access policies, see the subsection \"Policies for Approvals\" in the section \"Delegated Administration\" in the chapter \"Managing Policies\" in the DirX Identity Provisioning Administration Guide. DirX Identity can distinguish between several operation types for assignments. These operation types are available: Create - a privilege is assigned either to another privilege or a user. Modify - a privilege assignment to a user is to be modified (for example the end time or a role parameter value changes). Delete - a privilege is removed either from another privilege or a user. SoD - an SoD rule requires approval of a user-to-privilege assignment. Re-Approval - an existing user-to-privilege assignment is to be re-approved at the defined time. You can set up workflows for specific operation types either from a privilege via the corresponding direct workflow link or via the When Applicable section in a request workflow definition. Note that links between privileges allow only the operations assign and remove. When talking about approval of assignments, you should be aware that many privilege assignments in a company do not require approval. For example, consider the following policies: All of your employees - internal and external ones - are to have a Windows account and an e-mail box. This policy is best implemented with a provisioning rule that provides a basic role. Approval does not make sense in this case. All of your internal employees are to have access to public pages in your intranet.This policy is best handled with a provisioning rule that acts on the attribute value employeeType=Internal.Approval does not make sense in this case. There are a lot of other cases where approval does not make sense.A good rule of thumb is to determine whether or not you required approval for a privilege when your process was paper-based.Another important issue is to check whether a privilege is compliance-relevant and should therefore be approved. You should thoroughly define which privileges need approval and only define approval workflows for these items.Otherwise you end up with a lot of unnecessary overhead, which results in additional costs and time-consuming processes because approval costs time. The re-approval feature is even more critical than the approval feature because it generates approval requests fairly frequently.Thus we recommend that you make sure that it’s really necessary to set up re-approval for a specific privilege.Re-approval makes sense for highly critical access to business-critical applications as well as for compliance-relevant access rights. This type of workflow allows approval of object deletions.You use delete policies to define approval for deletion of a specific object type. Managing object deletion approval comprises these steps: Configuring a Delete Policy that contains all object types whose deletion is to be approved. Note: either create your own attribute policies or copy the default policies to prevent overwritten policies during upgrade installation. Defining one or more deletion request workflows for each of these object types.In the When Applicable section of the workflow, set the operation to delete and the subject field to the corresponding object type. Note that you can only define a deletion policy for an object type (for example, roles).It is not possible to define a policy for a portion of the objects. Hint: You can specify different object descriptions as a workaround, but this task requires that you set up a mapping section. For example, you could add a custom flag to the object \"Request workflow for deletion\" and then include this flag into the mapping section of your object descriptions. The next sections provide an overview of the deletion procedure. a list of object types that support deletion workflows. an example of a role deletion workflow. You can set up similar modification workflows for other object types. The deletion procedure depends on the object type and whether auditing is enabled. The basic procedure is shown in the next figure. Figure 11. Deletion Procedure The procedure comprises these steps: Receiving a deletion request, the service layer checks for an active Delete Policy for this object type. If no policy is active, it proceeds with step 5. If a policy is active, a deletion approval workflow is started. If none is found, an error is reported. If the object deletion is rejected, the object is not deleted. If the object deletion is accepted, the deletion procedure is performed. If auditing is disabled, the object-specific procedure is performed immediately. In most cases, this is a direct deletion of the object. If auditing is enabled, history / audit information is written to the objects into the attribute dxrHistory. This means that objects cannot be deleted immediately; they are set to the DELETED state. You must set up workflows for history extraction and object deletion, which guarantees that no audit information is lost. Deletion workflows are not yet supported for all object types. The following types are currently supported (the deletion procedure is briefly described): Groups - are always set to DELETED status. See the chapter \"Managing States\" in the DirX Identity Provisioning Administration Guide for more information. JavaScripts - direct deletion Nationalization - direct deletion Object Descriptions - direct deletion Proposal Lists - direct deletion Role Parameters - direct deletion Roles - direct deletion Permissions - direct deletion Users - are always set to TBDEL status. See the chapter \"Managing States\" in the DirX Identity Provisioning Administration Guide for more information. Policies Access Policies - direct deletion Attribute Policies - direct deletion Audit Policies - direct deletion Delete Policies - direct deletion Event Policies - direct deletion Password Policies - direct deletion SoD Policies - direct deletion Business Objects Context - direct deletion Cost Units - direct deletion Countries - direct deletion Locations - direct deletion Organizations - direct deletion Organizational Units - direct deletion Projects - direct deletion The following figure shows a typical delete workflow that is triggered by a deletion of a role. This workflow is started when the delete policy for roles is active. Figure 12. Delete Role Workflow The workflow shown in the figure contains the following activities: Approval of Object Deletion (people) - requests that the role administrators must approve the deletion of a role. Apply Change (automatic) - changes the LDAP role entry if the participants of the previous step accepted the deletion.Up to this point, the deletion request existed only as an order object within the workflow instance. Notification if Rejected (automatic) - typically sends an e-mail notification to the initiator of this workflow if the participants reject the modification request. Notification if EXPIRED (automatic) - sends an e-mail to an administrator that the workflow has expired (the participants did not respond in time). The object deletion workflow functions as follows: The deletion procedure used depends on the type of object and the audit settings.Users and Privileges are not directly deleted.Instead the status is set to DELETED and the end date is set.The CleanupObjects rule (typically part of a Tcl-based workflow) needs to be run to delete the object completely.This deletion may be delayed until the history (audit) information is removed from the object entry. Other objects are immediately deleted. Certification workflows allow you to certify various object types.DirX Identity currently supports workflows for certification campaigns, which means that you can verify and clean up the manual assignments of a privilege to users. To use this type of certification, perform these steps: Configure the certification campaign feature, including a corresponding schedule. Create a certification campaign for privileges or users. Configure a certification campaign with the Review the revocation of all manually assigned privileges that are rejected or left uncertified option for the Apply Changes configuration field. For details about certification campaigns, read the DirX Identity Use Case Document Certification Campaigns. The certification campaign workflows are normal assignment workflows.For more information about this type of workflow, see the section \"Guidelines for Approving Privilege Assignments\". Service management workflows help to perform tasks in a service management environment (ticket-based workflows). DirX Identity currently supports two use cases: Manual provisioning of offline target systems Workflows for ticket processing from a source ticket system For more information about service management use cases, read the DirX Identity Use Case Document Service Management. DirX Identity currently supports only workflows for manual provisioning, which means that you can handle manual provisioning for systems that are not (yet) connected to the Identity Store. To use this type of workflow, perform these steps: Set up a target system of type Service Management. Part of this setup is the configuration of a Java-based synchronization workflow that uses a request workflow connector to start a corresponding request workflow for each action. Set up the necessary manual provisioning request workflow. The following figure shows a typical manual provisioning workflow that can be used in service management environments. Figure 13. Manual Provisioning The workflow shown in the figure contains the following activities: Split Orders (automatic) - checks the order type (Add, Modify, Delete) and sets the Application State accordingly. The following activities are started according to this value. Addition by Administrator (people) - requests that an administrator adds the object (account or group) with all defined properties into the offline target system. After completion of this task, the approver confirms the activity (accepts it). This step is configured to take the owners of the privilege as approvers. Modification by Administrator (people) - requests that an administrator modifies an object (account or group) with all defined properties in the offline target system. After completion of this task, the approver confirms the activity (accepts it). This step is configured to take the owners of the privilege as approvers. Deletion by Administrator (people) - requests that an administrator deletes the object (account or group) in the offline target system. After completion of this task, the approver confirms the activity (accepts it). This step is configured to take the owners of the privilege as approvers. Set States (automatic) - sets the target system state (dxrTSState) of the object according to the operation; for example, a new account is set from NONE to ENABLED. Notification if Rejected - sends an e-mail to the corresponding user if the manual provisioning request was refused by the administrator. Notification if EXPIRED (automatic) - sends an e-mail to an administrator that the workflow has expired (the participants did not respond in time). The manual provisioning workflow works as follows: In Web Center, the approvers receive a form with the specific request and its details. They perform the corresponding task in the target system. After performing the task, they accept the form. DirX Identity sets the target system state (dxrTSState) attribute for accounts and groups accordingly or moves the user to the correct member attribute (for example, from dxrGroupMemberAdd to dxrGroupMemberOK). For more information about manual provisioning, refer to the DirX Identity Use Case Document Service Management. DirX Identity supports workflows to process incoming tickets from source ticket systems. These tickets are converted into DirX Identity orders that are processed by a corresponding request workflow. To use this type of workflow, perform these steps: Set up a ticket web service interface that consumes the tickets sent from a service management workflow. Use the sample ticket web service interface as starting point. Use the provided \"Process Ticket\" workflow sample and adapt it to your requirements. The following figure shows a typical ticket-processing workflow that can be used in service management environments. Figure 14. Process Ticket The workflow shown in the figure contains the following activities: Add attributes (automatic) - adds some fixed attributes to the subject order. In the pre-configured example, the employeeType is set to Contractor and the dxmOprMaster is set to Service Management. Apply order (automatic) - this step executes the order(s). For example, if you send a create user request with two role assignments, the user is created and the assignments are resolved. If an assignment requires approval, a child workflow is started automatically. Wait for child workflows (conditional) - this activity waits for all started child workflows to complete. Wait for completed provisioning (automatic) - this activity waits for all provisioning actions to target systems to be completed. The Process Ticket workflow as defined in this default workflow works completely automatically without any user interaction. It instantiates or changes the object, assigns privileges and eventually starts a child workflow. Then it waits until the child workflows and the generated provisioning actions are complete. For more information about ticket processing, read the DirX Identity Use Case Document Service Management.","title":"Using Request Workflows","component":"dirx-identity-docs","version":"9.0.0","name":"ch2_reqWFs","url":"/dirx-identity-docs/latest/appl-dev-guide/ch2_reqWFs.html","titles":[{"text":"Understanding Creation Workflows","hash":"_understanding_creation_workflows","id":1},{"text":"User Self Registration Workflows","hash":"_user_self_registration_workflows","id":2},{"text":"Create User Workflows","hash":"_create_user_workflows","id":3},{"text":"Create Persona Workflows","hash":"_create_persona_workflows","id":4},{"text":"Create User Facet Workflows","hash":"_create_user_facet_workflows","id":5},{"text":"Create Functional User Workflows","hash":"_create_functional_user_workflows","id":6},{"text":"Create Privilege Workflows","hash":"_create_privilege_workflows","id":7},{"text":"Understanding Modification Workflows","hash":"_understanding_modification_workflows","id":8},{"text":"User Modification Workflows","hash":"_user_modification_workflows","id":9},{"text":"Understanding Assignment Workflows","hash":"_understanding_assignment_workflows","id":10},{"text":"How Approval Works","hash":"_how_approval_works","id":11},{"text":"4-Eye Approval","hash":"_4_eye_approval","id":12},{"text":"Automatic (Notification Only) Approval","hash":"_automatic_notification_only_approval","id":13},{"text":"Risk Approval","hash":"_risk_approval","id":14},{"text":"Understanding Assignment Operation Types","hash":"_understanding_assignment_operation_types","id":15},{"text":"Guidelines for Approving Privilege Assignments","hash":"_guidelines_for_approving_privilege_assignments","id":16},{"text":"Guidelines for Re-Approving Privilege Assignments","hash":"_guidelines_for_re_approving_privilege_assignments","id":17},{"text":"Understanding Deletion Workflows","hash":"_understanding_deletion_workflows","id":18},{"text":"Deletion Procedure","hash":"_deletion_procedure","id":19},{"text":"Supported Object Types","hash":"_supported_object_types","id":20},{"text":"Role Deletion Workflow","hash":"_role_deletion_workflow","id":21},{"text":"Understanding Certification Workflows","hash":"_understanding_certification_workflows","id":22},{"text":"Certification Campaign Workflows","hash":"_certification_campaign_workflows","id":23},{"text":"Understanding Service Management Workflows","hash":"_understanding_service_management_workflows","id":24},{"text":"Manual Provisioning Workflows","hash":"_manual_provisioning_workflows","id":25},{"text":"Process Ticket Workflows","hash":"_process_ticket_workflows","id":26}]},"8":{"id":8,"text":"Creating a customized DirX Identity scenario both in the Provisioning and Connectivity configuration and maintaining its objects can be a complex task.DirX Identity provides easy-to-use, comprehensive tools to simplify this task.You can use the Identity Manager Provisioning and Connectivity views to create identity creation, maintenance, and provisioning workflows that are consistent with the target system structure in your Provisioning domain. To create and configure a custom DirX Identity scenario for a DirX Identity domain, perform the following steps with Identity Manager: Use the target system creation wizard in Provisioning → Target Systems to create a new target system in your new Provisioning domain.The wizard automatically creates a new scenario in the Connectivity domain provided no other scenarios yet exist and places the necessary configuration objects (connected directories and workflows) into this scenario. Use the Provisioning view to refine the configuration of the newly created target system and its objects. Use the Connectivity view to refine the configuration of the newly created maintenance and target system workflows. Create and maintain additionally the necessary identity creation workflows (source workflows). For additional target systems, perform these steps: Use the target system wizard to create additional target systems. The necessary configuration objects (connected directories and workflows) are added to your existing scenario in the Connectivity view automatically. Use the Provisioning view to refine the configuration of the newly created target system and its objects. Use the Connectivity view to refine the configuration of the newly created maintenance and target system workflows. To create clustered target systems, see the section \"Creating Cluster Target Systems\". You can use the target system creation wizard to create a new target system and a new custom Connectivity scenario for your Provisioning domain. To run the target system creation wizard in this way, you need to have: A fully configured Provisioning customer domain that contains only the default target system DirXmetaRole. An installed Connectivity configuration. To create the first target system and set up the new Connectivity scenario automatically: Log in to DirX Identity Manager and select Provisioning. Click the Domain Configuration view. Click the top-level object (it has the name of your Provisioning domain). Check the Connectivity configuration parameter in the General tab. If it is not correct, change it to the server where your Connectivity configuration domain is installed. Click the Target Systems view. Optionally you can create a folder or several folders that reflect your target system environment. Click either on the top level object Target Systems or on one of the created folders, and then select New → Target System. The Target System Wizard opens. Click Next. Select one of the available target system templates. Click Next. Set the name of the new target system. Click Next. Set the target system advanced parameters. Click Next. Set the target system options. These might differ according to the target system template. Click Next. At this point, we have defined the parameters for the target system object in the Provisioning domain. Now the target system creation wizard detects that a scenario does not yet exist and prompts for the parameters that describe how to create the scenario: The wizard will automatically create a new scenario with the same name as your Provisioning domain and will create a new identity store representation in your new scenario. Next, the wizard prompts for the Maintenance Workflows to copy to the new scenario. Click Next. The wizard copies the workflows (this action takes some time to complete). Now the wizard prompts for the Connected Directory template to be used for the new target system. Use either the proposed templates (Show preferred) or choose any of the other available templates (Show all). The latter choice makes sense, for example, if you intend to create an eDirectory target system. In this case, the Provisioning view assumes an LDAP type, whereas the Connectivity connected directory should be of type NDS (so choose the NDS template). Click Next. You can synchronize the schema and change the attribute configuration of the new connected directory (only for target systems where this makes sense) in the next two steps. Click Next. The wizard’s Configuration step (and depending on the target system, an additional next step) lets you define the most important parameters: Account Base and Group Base of the target system have already been defined and cannot be changed. Set the Service and the Bind Profile parameters to the values of your target system connected directory. Set the Connected Directory parameters. These parameters may differ depending on the connected directory type. Click Next. Now the target system wizard asks for the Provisioning Workflows to create. Select from Synchronization, Validation and Password Synchronization. If you select Password Synchronization, you need to fill in the next four steps. For the other selections, the target system wizard copies and configures the workflows. When the wizard finishes, you should have a completely configured Connectivity scenario with all of the necessary elements. The configured workflows should run. Of course, you might need to change some details, like the mapping of additional account and group attributes. The next section describes how to make these changes. You can use the Provisioning → Target Systems view to maintain your newly created scenario. Click any of the target systems in the Target Systems view and select Connectivity. The subsequent menu selections allow you to: Change the configuration of the connected directory (Configure Connected Directory). View the connected directory (if the Viewer command is entered correctly) (Open Connected Directory). Copy new workflows to the workflow line between Identity Store and the connected directory (New Workflow). Assign an existing workflow to the workflow line between Identity Store and the connected directory (Assign Workflow). Configure, run, report or remove the validation workflow (Validation). Configure, run, report or remove the synchronization workflow (Synchronization). Configure, run, report or remove any of the other assigned workflows (Workflows). You can also manage the Identity Store connected directory from here. Right-click the Target Systems root node and select Connectivity. The subsequent menu selections allow you to: Change the configuration of Identity Store (Configure Connected Directory). View the connected directory (if the Viewer command is entered correctly) (Open Connected Directory). Copy new workflows to the workflow line between Identity Store and the connected directory (New Workflow). Assign an existing workflow to the workflow line between Identity Store and the connected directory (Assign Workflow). Configure, run, report or remove one of the assigned workflows (Workflows). As you can see, the most important features of the Connectivity view are also available in the Provisioning view. Scheduling and Combining Workflows You should set up schedules that define when your created workflows shall run. The methods you use to set up schedules for DirX Identity Connectivity scenarios are highly dependent on your environment. We recommend that you: Run synchronization workflows periodically, for example, every half hour. Optionally you can use a nested workflow that performs account-to-user joining after each run. Run policy execution workflows and privilege execution after each creation workflow or after a sequence of creation workflows (use nested workflows and run them once a day or more often). Run validation workflows each night or during each weekend (depending on the number of accounts and groups in your target systems). We recommend that you use a nested workflow that performs account-to-user joining after each run. Run check consistency workflows every night or during each weekend. The target system creation wizard helps you to create the initial Connectivity scenario and copies and configures everything that is necessary to handle the provisioning of the target systems. However, the wizard does not handle identity creation workflows. You must use the Connectivity view to create and maintain these workflows. For information about these tasks, see the Importing Identities section in the \"Getting Started\" chapter of the DirX Identity Tutorial. Creating clustered target systems is a bit different from creating a single target system. Read the section \"Cluster Workflows\" in the DirX Identity Connectivity Administration Guide to understand the concept of cluster workflows. The chapter \"Java-based Workflow Architecture\" in this guide provides additional information. Before we start with the creation procedure, be aware that the structure for cluster target systems is fixed: Target Systems → cluster_container → cluster → target_system Here is an example that shows how you can use this structure: Target Systems UNIX-Clusters Linux-Cluster Linux1 Linux2 ... Linux Windows-Clusters Europe-Cluster ADS-EU1 ADS-EU2 ... US-Cluster ADS-US1 ADS-US2 ... Other-Clusters + ... The UNIX-Clusters folder comprises a Linux-Cluster with the target systems Linux1 to Linuxn. The configuration of each cluster is identical except for some specific parameters like server addresses and bind profiles. The Windows clusters in this example are structured according to areas. To set up clustered target systems, perform these steps: Select the Target Systems view and then click the top node. Select New Cluster Container from the context menu and create a cluster container. In our example above, these are the UNIX-Clusters and Windows-Clusters objects. Click the created object and then select New Cluster from the context menu. Define a name for your cluster. In our example, this would be for the UNIX-Clusters cluster container the object Linux-Cluster. You can create as many new target systems for your cluster below these clusters as you need. DirX Identity provides Web services for target system creation that are designed to set up cluster target systems efficiently, because this task requires setting many parameters for each system. Alternatively, you can create these target systems by hand, as follows: Use the target system wizard to create a first target system below the cluster folder. Select the workflows that are necessary for provisioning. Select the cluster workflows - if present - for your target system template, or select non-cluster workflows. You can easily adjust them to work with cluster target systems. After creating the first target system, move the Configuration folder one level up just below the cluster folder to allow its use by every subsequently created target system. Remember that all target systems in a cluster use the same set of object descriptions and other configuration definitions. Note that the Configuration folder will not be found if it is located anywhere else; that is, anywhere other than below the target system or - for a cluster - in the cluster folder that corresponds to the target systems that belong to the cluster. If you were not able to select cluster workflows in the step above, change the copied workflows in the Expert view of the Connectivity view group: Change the controller to the corresponding cluster controller type. Adjust any other parameters that need to be adapted. Now you can create additional cluster target systems: Use the target system wizard again, but do not select additional workflows. Remember that you can use one provisioning workflow for all target systems in a cluster. Delete the Configuration folder beneath the target system created again by the target system wizard, because you’ll use the one you moved up one level after you created the first target system. For every created target system, set these parameters: Set the Connected Directory link on the General tab to the same connected directory as the first target system. Create an account object, for example, named bindaccount, for the purpose of binding to the connected system beneath the Accounts or Accounts and Groups container. Account objects are not allowed to be created under a different container. Then move it up one level in the Data View to exclude it from synchronization to the connected system. The link to this bind account is set in the Bind Parameters section in the Server Connection tab of the target system. Set the password of this account in the Data View userPassword attribute. This action sets the dxmPassword accordingly. Using an existing account that is linked to a user can cause problems because the workflow may no longer be able to log in to the connected system if the password is changed. Therefore we recommend using a separate bind account where you manage the password manually. As this account may be used as access for password modifications, it must have sufficient access rights (preferably an administrator account) in the connected system. The dxrName attribute of the bind account must contain the bind user name in the form domain*\\*user name. Set all other necessary parameters on the Workflow Configuration (for some target system types this tab is called Server Connection), Connector Configuration and Environment Properties tabs. These parameters are specific to the target system. Keep in mind that all target systems in the cluster use the same cluster workflows configured in the Connectivity view group. If, for example, you want to specify some connection-specific properties like the following ones for the SapECCUMConnector: you must specify those properties as tag*=value pairs (client=800, accessToCUA=FALSE) in the Connector Configuration tab - or directly dxmSpecificAttributes in the Data View - of the Provisioning Target System object. The tag=value pairs specified in the Connector Configuration or Server Connection tabs are stored in the LDAP attribute dxmSpecificAttributes and added to the section of the specific target system connector on workflow execution. The tag=*value pairs specified in the Environment Properties tab are stored in the LDAP attribute dxrEnvironmentProperties. The environment properties must contain at least those attributes that are needed in a non-clustered workflow and specified in the Provisioning tab of the Connected Directory, like role_ts_account_base, role_ts_group_base or user_base. You can specify any property here and refer to it on the Connectivity workflow side - for example, in channel search base definitions like $\\{env.user_base} - to restrict the search to a target system-specific user base, or you can refer to the environment properties in the mapping. Note that some attributes like the base nodes for accounts and groups exist both in the Provisioning-side target system and the Connectivity-side connected directory. The Connectivity-side attributes, if specified, are overwritten by the target system attributes when the workflow runs for that specific target system. If the target system type of the cluster is OpenICF, every target system contains an additional tab where bind parameters and server address/port and the bundle-specific parameters are stored for the OpenICF server. Like the target system itself, the OpenICF server bind profile requires an additional account object which is referenced here; to exclude it from any synchronization, we recommend placing this account object alongside the target systems in the cluster. If several OpenICF servers belong to the cluster, but the bind password is the same for all of them, one such account object is sufficient; otherwise several must be created. One additional restriction applies to target systems in an OpenICF cluster: while DirX Identity can process the address localhost, the OpenICF server does not recognize a \"root\", so using localhost” results in an error. All the specific attributes in the Workflow Configuration, Connector Configuration, Environment Properties and OpenICF Server Configuration (for OpenICF) tabs are read from the default configuration on the Connectivity side and need only be present on the Provisioning side if the value differs for the target system. If no value is present in the target system, the default is evaluated. For OpenICF, where the server configuration is comprised of several bundle-specific attributes and the necessary bind profile attributes, this means: 1) If only one bundle is used (which we expect to be the main case), the bundle-specific attributes can be used from the workflow and need not be entered in every target system. 2) If the same password is used in all OpenICF servers in the cluster, the bind profile can be used from the connected directory and need not be entered in every target system, thus also making the additional bind account redundant. 3) If only one OpenICF server is used, the bind profile and the server address/port can be used from the connected directory/service and need not be entered in every target system, thus again making the additional bind account redundant. 4) For all other cases, remember that the values entered on the Connectivity side are used. They must only be entered in the actual target system if they differ.","title":"Configuring Custom Scenarios","component":"dirx-identity-docs","version":"9.0.0","name":"ch3_configScen","url":"/dirx-identity-docs/latest/appl-dev-guide/ch3_configScen.html","titles":[{"text":"Creating the New Scenario","hash":"_creating_the_new_scenario","id":1},{"text":"Refining the Scenario","hash":"_refining_the_scenario","id":2},{"text":"Creating the Identity Creation Workflows","hash":"_creating_the_identity_creation_workflows","id":3},{"text":"Creating Cluster Target Systems","hash":"_creating_cluster_target_systems","id":4}]},"9":{"id":9,"text":"png This chapter describes the default Connectivity applications available in the Connectivity view group and how to configure and customize them.For information about the default request workflows, see the DirX Identity Provisioning Administration Guide.The sections in this chapter Describe how to work with the default Connectivity applications as a whole Provide an understanding of the default Connectivity applications Describe how to configure a custom Connectivity scenario The chapters that follow describe the default Connectivity applications and are subdivided into the following: Source workflows Maintenance workflows Target system workflows All default Connectivity application objects are located in Default folders. We strongly recommend that you do not work directly in the default Connectivity scenario or any of its folders. Instead, you should create your own scenarios and create your own connected directories and workflows within your own scenarios. The \"Getting Started\" chapter in the DirX Identity Tutorial provides detailed instructions on how to perform these tasks. When you follow this recommended procedure, all of your objects are created in folders within your own scenario; for example, workflows are created in the Workflows folder, connected directories are created in the Connected Directory folder and so on. DirX Identity automatically uses folders that have the name of your scenario. Important note: The objects you create from default application objects will not be affected by DirX Identity upgrades for two reasons: each object has a unique identifier (and your created objects have these identifiers, too) and DirX Identity preserves all central objects from the previous release by copying them to a version-specific folder (but only if there were changes in these objects). You should also be aware that some default Connectivity applications use central objects like Tcl scripts in the folder Configuration → Tcl. If you change these central objects, all of your copied default applications will be affected by your change. DirX Identity surrounds all property sheets that belong to this central area with a red border that contains the text This object might be shared because it belongs to the Configuration folder. If you do not want this behavior, you should make your copies independent from the central objects by creating local ones. See the section \"Linking Objects\" in the \"Managing Provisioning Workflows\" chapter in the DirX Identity Connectivity Administration Guide to learn more about thi concept.s The default Connectivity applications consist of: Source Workflows - comprise the Source Real-time and Source Scheduled scenarios. These scenarios consist of Java-based / Tcl-based Identity creation workflows, which assist with importing and joining organizational and user information from various sources to create identities within the Identity Store. Update workflows can import attributes back to these source systems. Maintenance Workflows - comprise the Identity Store scenario. This scenario contains Identity maintenance workflows, which help to manage the created identities. Consistency checks, policy execution, privilege resolution and password expiration are examples of this workflow group. Target System Workflows - comprise the Target Real-time and Target Scheduled scenarios. These scenarios contain all Java-based / Tcl-based Identity Provisioning workflows, which offer initial load and validation from connected systems as well as regular synchronization. These scenarios also offer password synchronization and other useful capabilities. These workflows are part of the default Connectivity scenario, which you can view with Identity Manager’s Connectivity → Global view. The following figure illustrates the default Connectivity scenarios and its workflows. Figure 1. DirX Identity Default Connectivity Scenario","title":"Using the Default Connectivity Applications","component":"dirx-identity-docs","version":"9.0.0","name":"ch4_defappls","url":"/dirx-identity-docs/latest/appl-dev-guide/ch4_defappls.html","titles":[{"text":"Working with Default Connectivity Application Objects","hash":"_working_with_default_connectivity_application_objects","id":1},{"text":"Working with the Default Connectivity Scenario","hash":"_working_with_default_connectivity_scenario","id":2}]},"10":{"id":10,"text":"Identity source workflows synchronize information from existing sources to the Identity Store.This chapter provides detailed information about source workflow features, configuration, and user hooks.The sections in this chapter describe: Java-based source workflows Tcl-based source workflows DirX Identity’s Java-based source real-time workflows provided with the default Connectivity scenario include: Creation workflows - workflows that extract user information from existing identity sources (for example, an HR or a CRM database, an Active Directory system or a file system) and populate the Identity Store with user information. The workflows either use the Full-Import controller, which works in \"Replace\" mode and deletes those users in DirX Identity that do not exist in the source system, or the SyncOneWay2Identity controller, which works in \"Merge\" mode and does not delete DirX Identity user entries that do not exist in the source. Update workflows - workflows that transfer specific information from the Identity Store to the identity sources (for example, e-mail addresses or telephone numbers) to enable them to use the joined, high-quality information in the Identity Store. These workflows use the SyncOneWay2TS controller. DirX Identity provides the following pre-configured creation and update workflows: Import Users from Active Directory - imports Active Directory users to the Identity Store. Import Users from Database - imports users from a relational database to the Identity Store. Import Roles From Database - imports role data from a database to the role catalog of the Identity Store. Import Users from LDIF - imports users from an LDIF content file to the Identity Store. Export Users to LDIF - exports users from the Identity Store to an LDIF content file. Import Users from CSV - imports users from a CSV file to the Identity Store. Export Users from CSV - exports users from the Identity Store to a CSV file. Import of External LDAP Users - imports users from an external LDAP to the Identity Store. DirX Identity also provides the Remote AD workflow, which is intended for deployment with Atos Cloud Service Identity Management as a Service (IDMaaS). The Active Directory (ADS) user import workflow operates between the users folder in the Identity Store and an Active Directory connected system. It uses the same APIs and component deployment as the Java-based Active Directory (ADS) Provisioning workflows. See the section \"Active Directory (ADS) Workflows\" in the chapter \"Using the Target System (Provisioning) Workflows\" in this guide for more details. The workflow is based on Java real-time technology, with the ADS connector accessing an Active Directory via native LDAP protocol and the LDAP connector accessing a DirX Identity domain. The Full-Import controller is configured as the join engine. The controller exports all AD users from the source system and then imports them into the Identity domain user tree. This workflow can also be used as a template for other Java-based source workflows for user objects. Other user data sources instead of ADS can be connected. The connected directory UserADS represents the Active Directory containing the users and the connected directory Identity Store represents the Identity domain. The next sections describe Workflow prerequisites How to configure the workflow The workflow and its activities Ports Channels The workflow allows you to import Identity users from source ADS user entries. The workflow needs only one channel for users and a set of attributes to be imported. The workflow handles these common objects: Users - the user represents in this workflow a common account in an ADS connected system. It typically holds the demographic data and ADS account control attributes. The delivered workflow is: Import Users from ADS - the source Java-based workflow exports all specified ADS users and then imports them into Identity Store. The workflow can be used only with supported versions of Active Directory server. The ADS User Import workflow configuration on the Connectivity side is described in detail in \"Active Directory (ADS) Workflows\" in the section \"Using the Target System (Provisioning) Workflows\". The workflow Import Users from ADS is a Java-based source workflow with two activities: Join activity - implements the user import Error activity - receives update requests that failed despite retries and issues notifications The join activity is controlled by the Full-Import controller. It exports ADS user entries via the connector configured in the TS port and performs updates via the connector configured in the IdentityDomain port, as illustrated in the following figure: Figure 1. ADS User Import Workflow Ports and Channels You can start the workflow either manually or via a schedule. There are no global user hooks and no filters necessary. The workflow supports the following ports: TS port - represents the ADS that contains the users (accounts). The ADS connector is used to access the Active Directory. IdentityDomain port - represents the DirX Identity domain and is accessed via the LDAP connector. Event - used for sending change events. Notify - used for sending e-mails. The workflow needs only one channel per port. It represents the user objects. This port represents the connection to ADS. It is only used for exporting users and attributes from the ADS. The users are expected to be stored in the organizational unit OU=Users,OU=BRQH,OU=CZ. Export: Filter is set to &(objectClass=user)(objectCategory=person). This port represents the connection to the Identity Store. It is used for importing users into an Identity domain. Export: For exporting, the search base is taken from the environment property role_ts_account_base (in the connected directory Provisioning tab). The filter is needed to only export users from an Identity domain. Mapping: The SPML identifier must be set when a user is created. The id is composed by exchanging the base of source ADS identifier (full DN containing DCs and OUs) through the role_ts_account_base. The base of the ADS user is set as the concatenation of the Relative User Base (user_base_rel) settings and Domain. The associated user for a source entry is first searched using the mapped dxmADsGuid attribute value and then via the dxmADsSamAccountName attribute value. The attribute dxrState is mapped specially by a Java class. The resulting values are ENABLED, DISABLED or TBDEL. The states ENABLED and DISABLED are set according to the attribute flag userAccountControl, which controls the account state in ADS. The TBDEL state is set when the source entry in ADS no longer exists. When a change of the dxrState attribute is detected, an appropriate date attribute of the user entry is set with the current date and time. The dxrStartDate attribute is set for newly imported user objects (ENABLED). Deleted entries (TBDEL) have the attribute dxrEndDate set. The change of state ENABLED to DISABLED (DISABLED to ENABLED resp.) is tracked in the attribute dxrDisableStartDate (dxrDisableEndDate resp.). The Import Users from Database workflow imports users and their role assignments from a relational database into a DirX identity domain. It uses the Identity domain connector to access the DirX Identity domain and the JDBC connector to access the relational database. The connected directory UserDB represents the relational database containing the users and their role assignments and the connected directory Identity Store represents the Identity domain. The Full-Import controller is configured as the join engine. The controller exports all users from the database table, adds the assignments from the role assignment table and then imports them into the DirX Identity domain user tree. The Identity domain connector resolves and stores the users along with changed accounts and groups. If a privilege requires approval, the connector starts a request workflow. The sample workflow configuration expects a Microsoft Access database new-hr. It uses the open source JDBC Java driver UCanAccess; the jar file ucanaccess.jar with this driver is deployed with the IdS-J Server in its subfolder confdb/jobs/framework/lib/. The relational database must contain two tables: the EMPL table with a list of users and the EmplRoles table with a list of user-role assignments. They reference the user with their PersonalNr and the role with their roleID. The Import Users from Database workflow configuration conforms to the standard real-time workflow structure: it is composed of a join activity and an error activity. The following figure illustrates this configuration: Figure 2. Relational Database User Import Workflow As shown in the figure, the JDBC connector accesses the relational database, while the Identity domain connector accesses the Identity domain. The JDBC connector configuration obtains its properties from the referenced bind profile (user, password) and the JDBC connected directory’s driverDBType, type and url attributes. In the sample, driverDBtype is the JDBC-ODBC driver (class name: siemens.dxm.connector.jdbc.AccessOverJdbcOdbcDriver) and type is the class name of the driver (net.ucanaccess.jdbc.UcanaccessDriver). The TS port represents the relational database accessed by the JDBC connector. You need to configure a real-time filter for the TS port that adds the user-role assignments from the EmplRoles table as an attribute to the user. The sample configuration uses the filter class net.atos.dirx.dxi.connector.svclayer.workflow.JdbcRoleAsgFilter, which evaluates the following configuration options: assignmentTable - the filter needs to know the name of the table that contains the user-role assignments. As it sees all requests and responses between the join engine and the JDBC connector, it also receives the requests to the users table and must leave them untouched. roleAsgAttribute - the attribute under which the role assignments should be returned to the join engine. If the option is empty, the filter uses the rolesassigned attribute. userIdColumn - the column name of the user-role table that holds the ID of the user. The filter expects the search result to be ordered by this column. All consecutive records with the same user ID are considered to belong to the same user and added as multiple values (one record = one assignment = one value) to the role assignment attribute of the user. roleIdColumn - the column name of the user-role table that holds the identifier of the role. paramIDColumn - the column name of the user-role table that holds the identifier of the role parameter. paramValueColumn - the column name of the user-role table that holds the value of the role parameter. The filter only intersects search requests for the assignment table. It collects all search result entries for the same user and adds them as a multi-value attribute to the first entry for this user. The join engine then adds this attribute to the user attributes list it has obtained by reading from the user’s table. Note that the column names that contain the end date of an assignment, the role parameter UID and the role parameter value are hard-coded in the filter. For a custom workflow, the filter needs to be changed and adapted. The sample filter implementation can be used as a template for custom filters. See the source code in the folder Additions/ServiceLayerConnector and the Javadoc in the folder Documentation/DirX identity/ServiceLayerConnector of the product media. The following figure illustrates the workflow’s ports and their channels: Figure 3. Relational Database User Import Workflow Ports and Channels As shown in the figure, the TS port represents the access to the relational database, while the Identity Store port represents the access to the DirX Identity domain. You need to configure two channels for the relational database: User - the primary channel for reading the user attributes. user-roles - the secondary channel that represents the table holding the user-role assignments. Here is a snippet of the EMPL table with the user attributes, including the PersonalNr column, which uniquely identifies the user in this table: Figure 4. Relational Database User Import Workflow EMPL Table Here is a snippet of the EmplRoles table showing its columns: Figure 5. Relational Database User Import Workflow EmplRoles Table Especially the PersonalNr column, which contains the ID of the user and acts as a type of foreign key into the EMPL table in the database. You need to configure three channels for the Identity domain: User - the primary channel that represents the users in the domain. user-roles - the secondary channel that represents the user-role assignments. setPassword - the password channel that defines the password-related attributes. This port is only used for searching, so there is nothing to be configured for the import. The Export tab needs to contain the table name in DN format; in the sample, it is Table=EMPL. The mapping lists all the columns of the table that are to be synchronized to the Identity domain. Note that the identifier is in DN format and should be populated with the EmployeeID, which is considered to be unique. This secondary channel needs to refer to the primary channel User in its Primary Channel tab. For joining an assignment record to the user record, you need to select the user ID column in the assignment table (in the sample, EmplRoles.PersonalNr) and in the users table (in the sample, PersonalNr). The Export tab needs to contain the table name in DN format; in the sample, it’s Table=EMPL. The mapping lists the columns to be exported. As the workflow only reads from the database, you don’t need to configure a mapping. In the Export tab, make sure to sort the entries according to the same attribute as in the database; in the sample, it is the employeeNr, because the personalNr in the database is mapped to it. In the Export tab, configure the parent folder of the users to be exported and imported as the search base. It is taken from the environment variable role_ts_account_base. This variable is set in the connected TS directory (that is, the user database). For simplicity, the folder cn=system under the users folder is selected for the sample because it exists by default and it is empty. The joining of a database user to the user in LDAP is also performed using the unique employeeNr (Join tab). The user-privilege assignments are configured in the separate channel user-roles. As a result, you need to add a reference to this channel to the Member Channel field in the General tab. The user-roles channel represents the privilege assignments of the user. As the sample covers only role assignments, you only need to configure the rolesassigned attribute in the mapping section. You need to configure the attributes permissionsassigned and groupsassigned for permissions and groups. You also need to implement and configure a mapping function for these attributes; in the sample, it is net.atos.dirx.dxi.connector.svclayer.workflow.MapRolesAssigned. This function expects the assignments in the attribute rolesassigned of the source entry in structured JSON format; for details, see the chapter on the Identity Domain Connector in the DirX Identity Connectivity Reference. The mapping replaces the ID of the role that is known in the database with the DN of the role in LDAP. For this purpose, it retrieves a reference to the connector from the environment and requests it to search the role by its role ID. You can use the sample mapping function implementation as a template for custom mappings. See the source code in the folder Additions/ServiceLayerConnector and the Javadoc in the folder Documentation/DirX identity/ServiceLayerConnector of the product media. The setPassword channel represents the password-related attributes of the user. This is expressed by setting a reference to the Password Primary Channel field (in the sample, User) in the General tab. By default, the connector does not store the password itself. Instead, it sends it encrypted within a password change event to the workflow UserPasswordEventManager. This workflow changes the password at the user and initiates an update in corresponding accounts. You don’t need to configure other password-related attributes such as dxrPwdReset explicitly. They are handled automatically by the password change workflows. If you want the connector to store the password as is directly in LDAP and not send a password change event, you must set the configuration attribute suppressPwdEvent to true. You can do this in the port IdentityDomain under the join activity of the workflow and select the tab Target System. The sample workflow imports users and their role assignments. If you want to import users but not their assignments, you can re-use the workflow configuration by making the following changes to it: Delete the channels for the assignments: navigate to the user-roles channel of the connected TS directory (in the sample, this is UserDB), select Go to DataView and then delete the LDAP channel entry in the Data View. Now perform the same actions on the corresponding user-roles channel under the Identity Store connected directory. To find its parent channel, select the IdentityDomain port under the workflow join activity and then navigate to the channel parent. Delete the references from the User channels: under both connected directories, select the User channel. In the General tab, clear the Member Channel field. Delete the role-assignment filter in the TS port: navigate to the join activity in the workflow and then to its TS port. Select the child role-assignment filter. From the context menu, select Go to DataView and then delete the LDAP filter entry in the Data View. Select the workflow wizard wf-UserImportFromDB: In the Wizard field of the workflow entry, select the other wizard from the folder Configuration → Connector Types → SvcLayerConnector → Wizards. The workflow Import Roles from database imports roles from a JDBC database using DirX Identity Provisioning Web Services. The following figure illustrates this workflow. Figure 6. Role Import Workflow The role import workflow is based on Java real-time technology, with the JDBC connector accessing the database and the SPMLV1ToV2 connector accessing DirX Identity domain. The Full-Import controller is configured as the join engine. Full-Import is a one-way controller that exports all roles from the source system and then imports them into the target system; in this case, the Identity domain. This workflow can also be used as a template for normal provisioning workflows to SPMLv2 target systems by setting the SPMLV1ToV2 connector for the target system port, the LDAP connector for the Identity port and the synchronization or validation controller as the join engine. The connected directory RoleDB represents the database containing the roles and the connected directory SPMLv2WebServices represents the Identity domain accessed via the Provisioning Services. The workflow needs only one channel for roles and a minimal set of attributes to be synchronized. The next sections describe Workflow prerequisites How to configure the workflow The workflow and its activities Ports Channels The workflow configuration expects a Microsoft Access database registered as new-hr using the URL \"jdbc:odbc:new-hr\" (see connected directory, tab Configuration). At the Identity side, the Identity Web Services must be deployed. Configure its port at the service associated with the connected directory and then configure the server name at the server object associated with the service. The URL path ProvisioningService/services/Spmlv2RequestService reflects the default path of the Web Services' Provisioning Services deployed with the IdS-J server. The default Connectivity scenario’s Import Role From Database workflow synchronizes role entries from a relational database table to the role catalog in the Identity Store. To run the Import Role From Database workflow successfully, you must perform these steps: Configure the JDBC source. Configure the Role Import workflow. Deploy the Identity Web Services. The example database used for this scenario is delivered with DirX Identity and has the pathname install_path*/data/extension/new-hr.mdb*. It is protected with the password dirx to show the JDBC connector’s password feature. Copy this database to C:/MetahubData (or another location, if you prefer). It is a good idea to make a copy of the new-hr.mdb database, so that you can restore the original later on if the working copy becomes corrupted. Define this HR database to be an ODBC database: On Windows 32bit: Go to Start → Settings → Control Panel and then double-click Administrative Tools Click on Data Sources (ODBC). On Windows 64bit: Run C:/windows/sysWOW64/odbcad32.exe. If you installed DirX Identity with the system account, select the System DSN tab and then click Add…​ or use the User DSN tab. Select Driver to Microsoft Access (*.mdb) and then click Finish. Enter new-hr into the field Data Source Name. Click Select…​. Navigate to the location where you have copied new-hr.mdb, select it and then click OK. A new ODBC source is created. Click OK again. In the activity, select the Full-Import controller, which imports all source entries into the Identity Store and also discovers deleted source entries. In the Identity domain port, specify the following options: URL path: the path of the URL that denotes the Provisioning Web Service. Normally this is: ProvisioningService/services/Spmlv2RequestService. Specify roles as the SPMLv2 PSO Target ID. The reference attributes are dxrPermissionLink and dxrRoleLink. For the reference handler class, specify the default com.siemens.dxm.connector.spmlv1tov2.handler.SimpleReferenceHandler or leave it empty. Only one channel is used per connected directory. The default mapping considers only very few attributes for importing a role into the Identity domain: The identifier is concatenated from the role root entry, configured as role_ts_account_base in the connected directory and the attribute \"name\" of the source entry. The primary key of the source (\"pk\") is mapped to \"dxrRoleId\" and is therefore also used as one of the join conditions. See the chapter \"Web Services → Runtime Operation\" in the DirX Identity Integration Framework Guide for information on how to deploy the Identity Web Services. You can deploy them to the built-in Tomcat in the IdS-J server or set up an additional Tomcat instance for the deployment. The workflow Import Roles from database is a real-time workflow with two activities: Join activity - implements the role import Error activity - receives update requests that failed despite retries and issues notifications The join activity is controlled by the Full-Import controller. It exports entries via the connector configured in the TS port and performs updates via the connector configured in the IdentityDomain port, as illustrated in the following figure: Figure 7. Role Import Workflow Ports and Channels The workflow is not intended to be started on events, since we do not expect change events from the database. There are no global user hooks and no filters necessary. The role import workflow supports the following ports: TS port - represents the database that contains the roles. The JDBC connector is used to access the database. IdentityDomain port - represents the DirX Identity domain and is accessed via the SPMLV1ToV2 connector. The SPMLv2 target identifier roles tell the SPMLv2 Web service to manage role objects. For roles, the references dxrRoleLink and dxrPermissionLink are supported. These items are simple references without attributes, so the simple reference handler is sufficient for the corresponding protocol elements. This workflow does not support any other SPMLv2 capabilities and it does not support passwords. The workflow needs only one channel per port. It represents the roles. Direction: Identity Store → Database This channel is only used for exporting roles from the database. The roles are expected to be stored in the table roles. No filter is required. The column pk contains the primary key of a role and is expected to be created by the database on creation. Therefore this attribute must not be updated and the SPML identifier need not be set when a role is created. In addition, the table contains the columns name and description. Although mapping is not needed, it is configured. It is very simple with only one-to-one mappings. Especially the SPML identifier (table name + primary key) is expected in the attribute dxrRoleID in the corresponding Identity channel. There are two join conditions: The first join condition expects an existing primary key and uses the SPML identifier as its search base. The second join condition tries to join using the mapped value of the name column, assuming that the name is unique in the table. Direction: Database → Identity Store This channel is used for importing roles into an Identity domain. Since only simple references are used, no user hook is necessary. Export: For exporting, the search base is taken from the environment property role_ts_account_base (in the connected directory Provisioning tab). The filter is needed to only export roles and no containers. Since the Web Services by default work with paged read, the appropriate flag is set to active (but can be omitted, since this is not configurable in the connector). Mapping: The SPML identifier must be set when a role is created. It is calculated using the name attribute of the source entry and the role_ts_account_base as the parent folder. This name attribute is also stored in the attribute dxrReference, the primary key is stored in dxrRoleId. The following figure illustrates the channel mapping. Figure 8. Role Import Workflow Channel Mapping Join: The associated role for a source entry is first searched using the mapped SPML identifier and then via the primary key stored in dxrRoleID. The LDIF user import workflow operates between the Users folder in the Identity Store and an LDIF content file as a connected system that contains user entries. The workflow is based on Java real-time technology, with the LDIF connector accessing an LDIF file and the LDAP connector accessing a DirX Identity domain. The SyncOneWay2Identity controller is configured as the join engine. The controller exports all users from the source file system and then imports them into the Identity domain user tree. It works in \"merge\" mode, which means that it doesn’t delete users in the Identity Store that do not exist in the source file. If \"Replace\" mode is desired, you can easily switch to the Full-Import controller in the Controller tab of the workflow’s Join activity. This workflow can also be used as a template for other Java-based source workflows for user objects. Other user data sources instead of LDIF content file may be connected. The connected directory LDIFfile represents the connected file system containing the users and the connected directory Identity Store represents the Identity domain. The next sections describe Workflow prerequisites How to configure the workflow The workflow and its activities Ports Channels The workflow needs only one channel for users and a set of attributes to be imported. The delivered workflow is: Import Users from LDIF - exports all users from the LDIF file found under the specified search base and filter and then imports them into the Identity Store. After performing the following steps, you can run the workflow without changing any configuration parameters: Copy it with the Global View from the default scenario to your domain. Copy the sample source data file install_path/*data/data.ldif* to C:/MetahubData. Start the LDIF User Import workflow configuration wizard from the Global View domain-specific Source Realtime Scenario by right-clicking on the workflow line between the LDIFfile and the Identity Store or from the Expert View by right-clicking on the workflow under your domain and then selecting the configuration wizard. By stepping through the wizard, you can activate or deactivate auditing, choose another controller for the join engine, change the export search conditions, adapt the mapping or change the target join criteria. The workflow Import Users from LDIF is a Java-based source workflow with two activities: Join activity - implements the user import. Error activity - receives update requests that failed despite retries and issues notifications. The join activity is controlled by default by the SyncOneWay2Identity controller. It exports LDIF file user entries via the LDIF connector configured in the TS port and then performs updates via the LDAP connector configured in the IdentityDomain port, as illustrated in the following figure: Figure 9. LDIF User Import Workflow Ports and Channels You can start the workflow either manually or via a schedule. There are no global user hooks and no filters necessary. The workflow supports the following ports: TS port - represents the LDIF file that contains the users (accounts). The LDIF connector is used to access the LDIF file. IdentityDomain port - represents the DirX Identity domain and is accessed via the LDAP connector. Event - used for sending change events. Notify - used for sending e-mails. The workflow needs only one channel per port. It represents the user objects. This port represents the connection to LDIF. This workflow uses it for exporting users and attributes from the LDIF file. Export: Searchbase: CN=Users,CN=My-Company. Filter: &(objectClass=inetOrgPerson)(employeeNumber=*)(ou=Procurement). Searching only users from the organizational unit Procurement is just a sample configuration and can be changed to search and import all users from the delivered sample source file data.ldif. Mapping: Mainly used by the LDIF User Export workflow, which performs the configured mapping from Identity to the configured LDIF data export file. This workflow only reads the selected attributes from the import data file as the source for the mapping to Identity. Join: Only used by the LDIF User Export workflow. Specific Attributes: export_file = C:/MetahubData/data_out.ldif Only used by the LDIF User Export workflow as the data output file. Import_file = C:/MetahubData/data.ldif Used by this workflow as the data input file. Used by an LDIF Change (not Content) User Export workflow as the source connected system user data base for search operations of the join engine to calculate add, modify and delete requests as usual depending on those search results representing the existing user data. This port represents the connection to the Identity Store. This workflow uses it for importing users into an Identity domain. Export: This workflow uses the export settings for joining entries. The search base is composed of the environment property role_user_base (in the connected directory Provisioning tab) and the preceding subfolder “OU=Procurement,O=My-Company” resulting in the complete search base “OU=Procurement,O=My-Company,CN=Users,CN=My-Company”. As mentioned above, reducing the search on the organizational unit Procurement is just a sample and can be changed to search all users in the domain. It should correspond to the search base defined in the Export tab of the Users Channel at TS port. The filter is needed to only export users from an Identity domain. Mapping: The SPML identifier must be set when a user is created. The id is mapped in a java source mapping, which just takes the id of the source entry and assigns it to the target id. The attribute dxrState is set to “NEW” in case an entry is created, otherwise it is not changed (flag onAddOnly=true). Join: The associated user for a source entry is searched using the mapped employeeNumber attribute. The LDIF user export workflow operates between the Users folder in the Identity Store and an LDIF content file as the connected system that contains user entries. The workflow is based on Java real-time technology, with the LDIF connector accessing an LDIF file and the LDAP connector accessing a DirX Identity domain. The SyncOneWay2TS controller is configured as the join engine. The controller exports all users from the Identity domain user tree and then imports them into the connected file system. The connected directory LDIFfile represents the connected file system containing the users and the connected directory Identity Store represents the Identity domain. The next sections describe Workflow prerequisites How to configure the workflow The workflow and its activities Ports Channels The workflow needs only one channel for users and a set of attributes to be exported. The delivered workflow is: Export Users to LDIF - exports all users from the Identity Store found under the specified search base and filter and then writes them into the LDIF content file. After performing the following steps, you can run the workflow without changing any configuration parameters: Copy it with the Global View from the default scenario to your domain. Start the LDIF User Export workflow configuration wizard from the Global View domain-specific Source Realtime Scenario by right-clicking on the workflow line between the LDIFfile and the Identity Store or from the Expert View by right-clicking on the workflow under your domain and then selecting the configuration wizard. By stepping through the wizard, you can activate or deactivate auditing, change the export search conditions, adapt the mapping or change the target join criteria. The workflow Export Users to LDIF is a Java-based workflow with two activities: Join activity - implements the user export. Error activity - receives update requests that failed despite retries and issues notifications. The join activity is controlled by the SyncOneWay2TS controller. It exports Identity Store user entries via the LDAP connector configured in the IdentityDomain port and then performs updates via the LDIF connector configured in the TS port, as illustrated in the following figure: Figure 10. LDIF User Export Workflows Ports and Channels You can start the workflow either manually or via a schedule. There are no global user hooks and no filters necessary. The workflow supports the following ports: IdentityDomain port - represents the DirX Identity domain and is accessed via the LDAP connector. TS port - represents the LDIF file that contains the users (accounts). The LDIF connector is used to access the LDIF file. Event - used for sending change events. Notify - used for sending e-mails. The workflow needs only one channel per port. It represents the user objects. This port represents the connection to the Identity Store. This workflow uses it for exporting users from the Identity domain. Export: This workflow uses the export settings for searching the entries to be exported. The search base is composed of the environment property role_user_base (in the connected directory Provisioning tab) and the preceding subfolder “OU=Procurement,O=My-Company” resulting in the complete search base “OU=Procurement,O=My-Company,CN=Users,CN=My-Company”. Reducing the search on the organizational unit Procurement is just a sample and can of course be extended to search all users in the domain. It should correspond to the search base defined in the Export tab of the Users Channel at TS port. The filter is needed to only export users from an Identity domain. Mapping: Mainly used by the LDIF User Import workflow, which performs the configured mapping from the LDIF data import file to Identity. This workflow only reads the selected attributes from Identity as the source for the mapping to the LDIF content data export file. Join: Only used by the LDIF User Import workflow. This port represents the connection to LDIF. This workflow uses it for exporting users and attributes from the LDIF file. Export: Searchbase: CN=Users,CN=My-Company. Filter: &(objectClass=inetOrgPerson)(employeeNumber=*)(ou=Procurement). Searching only users from the organizational unit Procurement is just a sample configuration and can be changed to search and import all users from the delivered sample source file data.ldif. Mapping: The SPML identifier must be set when a user is created. The id is mapped in a simple expression mapping from the source id, $\\{source.id}, to the target id. Join: The associated user for a source entry is searched using the mapped target id as first join criteria and then the source employeeNumber attribute as second join criteria. Specific Attributes: export_file = C:/MetahubData/data_out.ldif Used by this workflow as the data output file. Import_file = C:/MetahubData/data.ldif Only used by the LDIF User Import workflow as the data input file. DirX Identity delivers Export and Import CSV workflows. This section describes the workflows features that are common to both types of workflow. Rows of a CSV file do not usually have an identifier. The Specific Attribute namingAttr describes which column is used as the identifier. This column should contain a distinguished name. For searches, this column is evaluated for the base object and scope part of the search. The columns and their order are defined by the mapping.Technical attribute. The columns are defined by the dxmselectedAttributes LDAP attribute. You can also define which separator should be used in the CSV file and whether or not the CSV file should include a header line. The CSV user import workflow operates between the Users folder in the Identity Store and a CSV file as the connected system that contains user entries. The workflow is based on Java real-time technology, with the CSV connector accessing a CSV file and the LDAP connector accessing a DirX Identity domain. The SyncOneWay2Identity controller is configured as the join engine. The controller exports all users from the source file system and then imports them into the Identity domain user tree. It works in \"Merge\" mode, which means that it doesn’t delete users in the Identity Store that do not exist in the source file. If you want to run in \"Replace\" mode, you can switch to the Full-Import controller in the Controller tab of the workflow’s Join activity. The connected directory CSV file represents the connected file system containing the users and the connected directory Identity Store represents the Identity domain. The next sections describe Workflow prerequisites How to configure the workflow The workflow and its activities Ports Channels The workflow needs only one channel for users and a set of attributes to be imported. The delivered workflow is: Import Users from CSV - exports all users from the CSV file found under the specified search base and filter and then imports them into the Identity Store. After performing the following steps, you can run the workflow without changing any configuration parameters: Copy it with the Global View from the default scenario to your domain. Copy the sample source data file install_path/*data/datatest.csv* to C:/MetahubData. Start the CSV User Import workflow configuration wizard from the Global View domain-specific Source Realtime Scenario by right-clicking on the workflow line between the CSVFile and the Identity Store or from the Expert View by right-clicking on the workflow under your domain and then selecting the configuration wizard. By stepping through the wizard, you can activate or deactivate auditing, choose another controller for the join engine, change the export search conditions, adapt the mapping or change the target join criteria. The workflow Import Users from CSV is a Java-based source workflow with two activities: Join activity - implements the user import. Error activity - receives update requests that failed despite retries and issues notifications. The join activity is controlled by default by the SyncOneWay2Identity controller. It exports CSV file user entries via the CSV connector configured in the TS port and then performs updates via the LDAP connector configured in the IdentityDomain port, as illustrated in the following figure: Figure 11. CSV User Import Workflow Ports and Channels You can start the workflow either manually or via a schedule. There are no global user hooks and no filters necessary. The workflow supports the following ports: TS port - represents the CSV file that contains the users (accounts). The CSV connector is used to access the CSV file. IdentityDomain port - represents the DirX Identity domain and is accessed via the LDAP connector. Event - used for sending change events. Notify - used for sending e-mails. The workflow needs only one channel per port. It represents the user objects. 1. Users Channel at TS Port This port represents the connection to CSV. This workflow uses it for exporting users and attributes from the CSV file. Export: Searchbase: CN=Users,CN=My-Company. Filter: &(employeeNumber=*)(ou=Procurement). Searching only users from the organizational unit Procurement is just a sample configuration and can of course be changed to search and import all users from the delivered sample source file datatest.csv. Mapping: Mainly used by the CSV User Export workflow, which performs the configured mapping from Identity to the configured CSV data export file. This workflow only reads the selected attributes from the import data file as the source for the mapping to Identity. Mapping includes all columns of the CSV file. The order in the mapping (technical the dxmSelectedAttributes) represents the order in the CSV file. The column specified by namingAttribute defines the identifier. Here a column dn is specified which contains a distinguished name. The value of this column is returned as SPML Id for the row. Join: Only used by the CSV User Export workflow. Specific Attributes: export_file = C:/MetahubData/datatest_out.csv Only used by the CSV User Export workflow as the data output file. Import_file = C/MetahubData/datatest.csv Used by this workflow as the data input file. Naming_attr = dn The column containing the identifier. The has_header attribute is not specified; that is, there is no header line in the CSV file. Define true if the CSV file contains a header line The separator attribute is not specified; that is, the comma is the separator. Define | if the CSV file uses the pipe symbol as a separator Comment: Not specified. When reading, no comment lines are skipped. If specified (for example, #”) every line containing this value is treated as a comment and is skipped during read. Sometines comments are used even though the CSV specification does not support comment lines. 2. Users Channel at Identity Port This port represents the connection to the Identity Store. This workflow uses it for importing users into an Identity domain. Export: This workflow uses the export settings for joining entries. The search base is composed of the environment property role_user_base (in the connected directory Provisioning tab) and the preceding subfolder \"OU=Procurement,O=My-Company\" resulting in the complete search base \"OU=Procurement,O=My-Company,CN=Users,CN=My-Company\". As mentioned above reducing the search on the organizational unit Procurement is just a sample and can of course be extended to search all users in the domain. It should correspond to the search base defined in the Export tab of the Users Channel at TS port. The filter is needed to only export users from an Identity domain. Mapping: The SPML identifier must be set when a user is created. The id is mapped in a Java source mapping, which just takes the id of the source entry and assigns it to the target id. The attribute dxrState is set to \"NEW\" when an entry is created; otherwise, it is not changed (flag onAddOnly=true). Join: The associated user for a source entry is searched using the mapped employeeNumber attribute. This section provides an example of how to customize the CSV User Import workflow to import users from CSV files that do not provide a DN column. In our example, we have a CSV file named Users.csv with user entries. We want to import these entries using the Java-based source workflows. In Users.csv: The first line is the header with the name of the fields. The separator is the semicolon (;). The second line is a user entry Here is an example: sn;givenName;cn;employeeNumber;employeeType;c;l;o;street;telephoneNumber;mail;ou;description;preferredLanguage;dxmOprMaster;dxrSalutation;postalCode;facsimileTelephoneNumber;dxrState Muster;Henry;Muster Henry;5208;Internal;DE;My-Company Munich;My-Company;Teller Str. 1113;+49 89 323-42111;;Sales;Manager of Sales department;de;HR;Hr.;80157;+49 89 323-58564;NEW To customize the workflow to import users from our example CSV file: Copy Users.csv to C:/MetahubData. In DirX Identity Manager, go to Connectivity → Global View → Scenarios → My-Company → Main. Right click and then select New Connected Directory. Right click the new directory and then select Configure. Select CSVfile and click Next. In Name, enter UserCSV and then click Next. Step through the next configuration dialogs without changing anything until you arrive at the Supply Operational Attributes dialog. Define the unique identifier field in your CSV file. In our example, it is employeeNumber. Click Next and then Finish. Right click and select New Workflow Line. Draw a line between UserCSV and IdentityStore. Select the line, right click and select New. Select Import Users from CSV and click Next. In Name, enter Import Users from UserCSV. Click Next to step through the remaining dialogs. Click Finish. In the Expert View, navigate to the Identity Store users channel as shown in the following figure: Select the Export tab. Delete the contents of Search Base and set Filter to none: Select the Mapping tab and then click Edit. Deselect ID mapping and delete the line with Mapping Source dummy. In the Specific Attributes tab, add the following values to the following fields: import_file - C:/MetahubData/Users.csv naming_attr - employeeNumber has_header - true separator - ; Click Save. Select the corresponding UsrCSV user channel as shown in the next figure: Select the Export tab and change Search Base to \"o=My-Company,\" + $\\{env.role_user_base}. In the Mapping tab, change the value in the first line of the Mapping Source column that corresponds to Identifier:DN to the following: \"cn=\" + ${source.givenName} + \" \" + ${source.sn} + \",\" + \"ou=\" + ${source.ou} + \",\" + ${env.user_base}\" In the Specific Attributes tab, add the following parameter and save: user_base : o=My-Company,cn=Users,cn=My-Company Go to the Import Users from UserCSV workflow as shown in the next figure. Click Edit and check Is Active. Right-click on Import Users from UserCSV and then select Load IDS-J Configuration from the context menu. Select Import Users from UserCSV and run the workflow. Check to see if the user was created. The CSV user export workflow operates between the Users folder in the Identity Store and a CSV file as the connected system that contains user entries. The workflow is based on Java real-time technology, with the CSV connector accessing a CSV file and the LDAP connector accessing a DirX Identity domain. The SyncOneWay2TS controller is configured as the join engine. The controller exports all users from the Identity domain user tree and then imports them into the connected file system. The connected directory CSVfile represents the connected file system containing the users and the connected directory Identity Store represents the Identity domain. The next sections describe Workflow prerequisites How to configure the workflow The workflow and its activities Ports Channels The workflow needs only one channel for users and a set of attributes to be exported. The delivered workflow is: Export Users to CSV - exports all users from the Identity Store found under the specified search base and filter and then writes them into the CSV file. After performing the following steps, you can run the workflow without changing any configuration parameters: Copy it with the Global View from the default scenario to your domain. Start the CSV User Export workflow configuration wizard from the Global View domain-specific Source Realtime Scenario by right-clicking on the workflow line between the CSVfile and the Identity Store or from the Expert View by right-clicking on the workflow under your domain and then selecting the configuration wizard. By stepping through the wizard, you can activate or deactivate auditing, change the export search conditions, adapt the mapping or change the target join criteria. The workflow Export Users to CSV is a Java-based workflow with two activities: Join activity - implements the user export. Error activity - receives update requests that failed despite retries and issues notifications. The join activity is controlled by the SyncOneWay2TS controller. It exports Identity Store user entries via the LDAP connector configured in the IdentityDomain port and performs updates via the CSV connector configured in the TS port as illustrated in the following figure: Figure 12. CSV User Export Workflows Ports and Channels You can start the workflow either manually or via a schedule. There are no global user hooks and no filters necessary. The workflow supports the following ports: IdentityDomain port - represents the DirX Identity domain and is accessed via the LDAP connector. TS port - represents the CSV file that contains the users (accounts). The CSV connector is used to access the CSV file. Event - used for sending change events. Notify - used for sending e-mails. The workflow needs only one channel per port. It represents the user objects. 1. Users Channel at Identity Port This port represents the connection to the Identity Store. This workflow uses it for exporting users from the Identity domain. Export: This workflow uses the export settings for searching the entries to be exported. The search base is composed of the environment property role_user_base (in the connected directory Provisioning tab) and the preceding subfolder \"OU=Procurement,O=My-Company\" resulting in the complete search base \"OU=Procurement,O=My-Company,CN=Users,CN=My-Company\". Reducing the search on the organizational unit Procurement is just a sample and can be changed to search all users in the domain. It should correspond to the search base defined in the Export tab of the Users Channel at TS port. The filter is needed only to export users from an Identity domain. Mapping: Mainly used by the CSV User Import workflow, which performs the configured mapping from the CSV data import file to Identity. This workflow only reads the selected attributes from Identity as the source for the mapping to the CSV data export file. Join: Only used by the CSV User Import workflow. 2. Users Channel at TS Port This port represents the connection to CSV. This workflow uses it for exporting users and attributes from the CSV file. Export: Searchbase: CN=Users,CN=My-Company. Filter: &(employeeNumber=*)(ou=Procurement). Searching only users from the organizational unit Procurement is just a sample configuration and can be changed to search and import all users from the delivered sample source file datatest.csv. Mapping: The SPML identifier must be set when a user is created. The id is mapped in a simple expression mapping from the source id, $\\{source.id}, to the target id. Join: The associated user for a source entry is searched using the mapped target id as first join criteria and then the source employeeNumber attribute as second join criteria. Specific Attributes: export_file = C:/MetahubData/datatest_out.csv Used as data output file by this workflow. Naming_attr = dn The column that contains the identifier. The generated identifier is written to this column The has_header attribute is not specified; that is, there is no header line in the CSV file. Define true if the CSV file contains a header line The separator attribute is not specified; that is, the comma is the separator. Define | if the CSV file uses the pipe symbol as the separator Import_file = C:/MetahubData/datatest.csv Only used by the CSV User Import workflow as the data input file. The Remote AD workflow is not a typical source workflow: it is a combination of workflows (AD export and LDIF import) with special data transfer (Web service). DirX Identity can be deployed as part of the Atos Cloud Service Identity Management as a Service (IDMaaS). Provisioning targets can be in the provider’s (Atos) cloud infrastructure, in a public cloud or on customer premises outside of any cloud. The Remote AD workflow is intended for use at customer sites outside of a cloud. The Remote AD connector must be able to work without online (LDAP) connection to the DirX Identity configuration database. On the customer side, a standard framework-based job implements the export to file function. The job obtains its configuration from XML files: one for the job and one for the search request with the filter conditions. An LDIF import workflow imports the file to DirX Directory. The following figure illustrates the Remote AD connector operation: Figure 13. Remote AD Connector Operation See the Remote AD Connector description in the DirX Identity Connectivity Reference for more details. DirX Identity delivers two workflows for importing users from an external LDAP to the Identity Store. They are: Full Import of external LDAP Users - the workflow is started from DirX Identity Manager (either manually or by a schedule) and performs either the initial load of users from an external LDAP directory or the complete re-synchronization of the external LDAP directory. In complete re-synchronization, users may be deleted or marked as to-be-deleted in the Identity Store. Import Users from external LDAP - The workflow is normally started by an event and imports a user (or updates a user or deletes a user or marks a user as to-be-deleted) depending on the incoming event and the existence of that user in the Identity Store. If the workflow is started by DirX Identity Manager manually or triggered by the scheduler, it performs a re-synchronization of the external LDAP users (without deleting users or marking users as deleted). The next sections describe the configuration of the two workflows and how to send events using metacp to trigger the synchronization of an external user. The Full Import of external LDAP Users workflow operates between the Users folder in the Identity Store and an external LDAP directory accessing organizational persons in that directory. The workflow is based on Java real-time technology, with two LDAP connectors accessing the external LDAP directory and the Identity Store. The FullImport controller is configured as the join engine. The controller exports all users from the external LDAP directory and then imports them into the user tree of the Identity Store. It performs the following operations: Adds a user if the entry does not exist in the Identity Store. Modifies a user if the user exists in the Identity Store but has different attribute values. Marks a user as to-be-deleted (dxrState=“TBDEL”) if the user is no longer available in the external LDAP directory (this is the default behavior of the workflow) Deletes a user if it is no longer available in the external LDAP directory. (This mode for external users that have been deleted requires changes to the workflow configuration; specifically, mapping of the dxrState attribute and post mapping) This workflow can also be used as a template for other Java-based source workflows for synchronization of objects other than users. The next sections describe Workflow prerequisites How to configure the workflow The workflow and its activities Ports Channels The workflow needs only one channel for users and a set of attributes to be imported. If you did not create a new Connected Directory when you configured the workflow, you need to create one as follows: Go to the Global View and configure a new Connected Directory by choosing the template UserLDAP from the default folder. In General Parameters, configure LDAP External Service by entering values for IP Address and Data Port. You can also set the SSL, Secure Port and Client Authentication fields if necessary. In Provisioning, define the search bases for searching the users: In Identity → Account Base, define the search bases for searching the users in the Identity Store. In Target System → UserBase, define the search bases for searching the users in the external LDAP directory. In Bind Profile, define the credentials of LDAPAdmin (the administrator of the external LDAP directory). Set at least User, Password, Authentication and Protocol. In Set Directory Name, set the name of the Connected Directory (if you have not yet already done so). Create a new workflow line between the Connected Directory and the Identity Store. Start the Full Import of external LDAP Users workflow configuration wizard: right-click on the workflow line (select New) and then select the Full Import of external LDAP Users template of the default folder. Alternatively you can select the workflow in the Expert View by right-clicking on the workflow under your domain and then selecting the configuration wizard. By stepping through the wizard, you can activate or deactivate auditing, choose another controller for the join engine (not recommended), change the export search conditions, adapt the mapping or change the target join criteria. Keep in mind that you don’t need to set Cluster and Domain in Is Applicable for when defining the General Info parameters. The Full Import of external LDAP Users workflow is a Java-based source workflow with two activities: Join activity - implements the user import. Error activity - receives update requests that failed despite retries and issues notifications. The join activity is controlled by default by the FullImport controller. It exports user entries of the external LDAP directory via the LDAP connector configured in the TS port and then performs updates via the LDAP connector configured in the IdentityDomain port, as illustrated in the following figure: Figure 14. External LDAP Users Full Import Workflow Ports and Channels You can start the workflow either manually or via a schedule. The workflow supports the following ports: TS port - represents the external LDAP directory that contains the users. The LDAP connector is used to access that LDAP directory. IdentityDomain port - represents the DirX Identity domain and is accessed via the LDAP connector. Event - used for sending change events. Notify - used for sending e-mails. The workflow needs only one channel per port. It represents the user objects. 1. Users Channel at TS Port This port represents the connection to the external LDAP directory. This workflow uses it for exporting users and attributes. Export: Searchbase: $\\{env.user_base} matches the definition in the new Connected Directory. Filter: (objectClass=organizationalPerson) Searching all organizational persons below the search base. Mapping: Mainly used by the workflow to perform the mapping to an entry in the Identity Store. The following attributes are defined here (with the ReadOnly flag): cn, description, employeeNumber, facsimileTelephoneNumber, gn, postalCode, postalAddress, sn, st, street, telephoneNumber, title and userCertificate;binary. Join: Not used by the workflow. 2. Users Channel at Identity Port This port represents the connection to the Identity Store. This workflow uses it for importing users into an Identity domain. Channel Userhook: The following user hook (as part of dxmJoin.jar) is used: net.atos.dxm.join.userhook.ldap.UserHookLdapUsers. The user hook has implemented two interfaces: preUpdate: If entries should be marked as deleted (state TBDEL) then additionally the attribute dxrDeleteDate is set. Therefore the domain value of Maximum time in days to delete an object needs to be evaluated first. postUpdate: After successful execution of the update operation in the Identity Store, the attribute businessCategory is set at the user object of the external LDAP directory. The value is updated at time stamp. That interface should be adapted according to your requirements. If you don’t need any information in the external LDAP directory about successful execution of the operation in Identity Store, then simply drop postUpdate. Export: Searchbase: ${env.role_ts_account_base} matches the definition in the new Connected Directory. Filter: ((objectClass=derUser)(!(objectClass=dxrPersona)) (!(objectClass=dxrPersona)) (!(objectClass=dxrFunctionalUser))(!(objectClass=dxrUserFacet)) The workflow searches all organizational persons below the search base. Consequently, you should carefully adapt your workflow to your requirements. If you import the users to an existing subtree, you should mark these users with an additional attribute and use that attribute in the filter. Otherwise the FullImport controller will delete users (or mark the users as deleted) that already exist in that subtree and which have not been imported from the external LDAP directory. Mapping: The SPML identifier is mapped by a simple expression as follows: ${joinedEntry.id} \"cn=\" + ${source.cn} + \",o=LDAP-External,cn=Users,cn=My-Company\" If the entry is already available, then the DN of the existing entry is used. If it is a new entry, then the second expression applies. The workflow uses several 1:1 mappings for the attributes cn, description, employeeNumber, facsimileTelephoneNumber, gn, postalCode, postalAddress, sn, st, street, telephoneNumber, title and userCertificate;binary. The dxrPrimaryKey attribute is set be the expression “$\\{source.id}. Note that dxrPrimaryKey is also used in the join conditions. The dxrState attribute is either set to NEW for new entries or TBDEL if the entry no longer exists in the external LDAP directory. For state TBDEL, the attribute dxrEndDate is set to now and the dxrDeleteDate is set according to the domain value of Maximum time in days to delete an object. If you want to delete the object directly, then you should adapt the mapping for “dxrState” and/or the post mapping (by changing the operation from MODIFY to DELETE). Join: The associated user for a source entry is searched, first with dxrPrimaryKey matching the dn of the external LDAP user and then if not found with the mapped cn attribute. The Import Users from external LDAP workflow operates between the Users folder in the Identity Store and an external LDAP directory accessing organizational persons in that directory. The workflow is based on Java real-time technology, with two LDAP connectors accessing the external LDAP directory and the Identity Store. The SyncOneWay2Identity controller is configured as the join engine. The controller exports all users from the external LDAP directory and then imports them into the user tree of the Identity Store if it is started manually in DirX Identity Manager or triggered by the scheduler. It processes just one user if the workflow is triggered by an event. The workflow performs the following operations: Adds a user if the entry does not exist in the Identity Store. Modifies a user if the user exists in the Identity Store but has different attribute values. Marks a user as to-be-deleted (dxrState=”TBDEL”) if the user is no longer available in the external LDAP directory (this is the default behavior of the workflow). Deletes a user if it is no longer available in the external LDAP directory. (This mode for external users that been deleted requires changes to the workflow configuration; specifically, mapping of the attribute dxrState and post mapping.) This workflow can also be used as a template for other Java-based source workflows for synchronization of objects other than users. The next sections describe Workflow prerequisites How to configure the workflow The workflow and its activities Ports Channels The workflow needs only one channel for users and a set of attributes to be imported. If you did not create a new Connected Directory when you configured the External LDAP User Full Import Workflow, you need to create one as follows: Go to the Global View and configure a new Connected Directory by choosing the template UserLDAP from the default folder. In General Parameters, configure LDAP External Service by entering values in IP Address and Data Port. You can also set SSL, Secure Port and Client Authentication if necessary. In Provisioning, define the search bases for searching the users: In Identity → Account Base, define the search bases for searching the users in the Identity Store. In Target System → UserBase, define the search bases for searching the users in the external LDAP directory. In Bind Profile, define the credentials of LDAPAdmin (the administrator of the external LDAP directory). Set at least User, Password, Authentication and Protocol. In Set Directory Name, set the name of the Connected Directory (if you have not yet already done so). Create a new workflow line between the Connected Directory and the Identity Store. Start the Import Users from external LDAP workflow configuration wizard: right-click on the workflow line (select New) and then select the Import Users from external LDAP template of the default folder. Alternatively you can select the workflow in the Expert View by right-clicking on the workflow under your domain and then selecting the configuration wizard. By stepping through the wizard, you can activate or deactivate auditing, choose another controller for the join engine (not recommended), change the export search conditions, adapt the mapping or change the target join criteria. Keep in mind that you need to set Cluster and Domain in Is Applicable for when defining the General Info parameters. The workflow Import Users from external LDAP is a Java-based source workflow with two activities: Join activity - implements the user import. Error activity - receives update requests that failed despite retries and issues notifications. The join activity is controlled by default by the SyncOneWay2Identity controller. It exports user entries of the external LDAP directory via the LDAP connector configured in the TS port and then performs updates via the LDAP connector configured in the IdentityDomain port, as illustrated in the following figure: Figure 15. External LDAP User Import Workflow Ports and Channels You can start the workflow either manually or via a schedule or set it up to be triggered by an incoming event. The workflow supports the following ports: TS port - represents the external LDAP directory that contains the users. The LDAP connector is used to access that LDAP directory. IdentityDomain port - represents the DirX Identity domain and is accessed via the LDAP connector. Event - used for sending change events. Notify - used for sending e-mails. The workflow needs only one channel per port. It represents the user objects. 1. Users Channel at TS Port This port represents the connection to the external LDAP directory. This workflow uses it for exporting users and attributes. Export: Searchbase: ${env.user_base} matches the definition in the new Connected Directory. Filter: (objectClass=organizationalPerson) Searching all organizational persons below the search base. Mapping: Mainly used by the workflow to perform the mapping to an entry in the Identity Store. Consequently, the following attributes are defined here (with the ReadOnly flag): cn, description, employeeNumber, facsimileTelephoneNumber, gn, postalCode, postalAddress, sn, st, street, telephoneNumber, title and userCertificate;binary. Join: Not used by the workflow. 2. Users Channel at Identity Port This port represents the connection to the Identity Store. This workflow uses it for importing users into an Identity domain. Channel Userhook: The following user hook (as part of dxmJoin.jar is used: net.atos.dxm.join.userhook.ldap.UserHookLdapUsers. The user hook has implemented two interfaces: preUpdate If entries should be marked as deleted (state TBDEL) then additionally the attribute dxrDeleteDate is set. Therefore the domain value of Maximum time in days to delete an object needs to be evaluated first. postUpdate After successful execution of the update operation in the Identity Store, the attribute businessCategory is set at the user object of the external LDAP directory. The value is updated at time stamp. Adapt this interface according to your requirements or simply drop it if you don’t need any information in the external LDAP directory about successful execution of the operation in Identity Store. Export: Searchbase: ${env.role_ts_account_base} matches the definition in the new Connected Directory. Filter: objectClass=derUser)(!(objectClass=dxrPersona (!(objectClass=dxrPersona)) (!(objectClass=dxrFunctionalUser))(!(objectClass=dxrUserFacet)) The workflow searches all organizational persons below the search base. Therefore you should carefully adapt your workflow to your requirements. Mapping: The SPML identifier is mapped by a simple expression as follows: ${joinedEntry.id} \"cn=\" + $\\{source.cn} + \",o=LDAP-External,cn=Users,cn=My-Company\" If the entry is already available, the DN of the existing entry is used. If it is a new entry, the second expression applies. The workflow uses several 1:1 mappings for the attributes cn, description, employeeNumber, facsimileTelephoneNumber, gn, postalCode, postalAddress, sn, st, street, telephoneNumber, title and userCertificate;binary. The attribute dxrPrimaryKey is set be the expression “$\\{source.id}. Note that dxrPrimaryKey is also used in the join conditions. The attribute dxrState is either set to ENABLED for new entries or TBDEL if the entry no longer exists in the external LDAP directory. For state TBDEL, the attribute dxrEndDate is set to now and the dxrDeleteDate is set according to the domain value of Maximum time in days to delete an object. If you want to delete the object directly, then you should adapt the mapping for dxrState and/or the post mapping (by changing the operation from MODIFY to DELETE). Join: The associated user for a source entry is searched first with dxrPrimaryKey matching the DN of the external LDAP user and then if not found with the mapped cn attribute. This section describes how to use metacp to send events that trigger the synchronization of an external user. An event is an XML document compliant with the XML namespace \"urn:siemens:dxm:EVENT:1:0\". This namespace is proprietary and extends the standard namespace SPML v1 \"urn:oasis:names:tc:SPML:1:0\". There are three types of events according the change it wants to notify: entry was created (), changed () or deleted (). Each event extends the corresponding SPML request: , or . For details about SPML v1, see the standard specification; for example, https://www.oasis-open.org/committees/download.php/4137/os-pstc-spml-core-1.0.pdf. Each event document should contain the necessary XML namespaces at the beginning of the document in its first element. These are: xmlns:dsml=\"urn:oasis:names:tc:DSML:2:0:core\" xmlns:spml=\"urn:oasis:names:tc:SPML:1:0\" xmlns:event=\"urn:siemens:dxm:EVENT:1:0\" The remainder of this section assumes the namespace prefixes event, spml and dsml. Each SPML request and the corresponding events contain an element that represents the identifier of the changed entry in the source system. For an LDAP or Active Directory source - as expected in these workflows - it is of type DN. Here is a sample: cn=Abele,ou=Sales,o=My-Company Normal SPML add and modify requests need to contain the list of attributes or modifications. They are not needed here; the identifier is sufficient. The import workflow uses it to read the entry and all configured attributes from the source system. SPML requests and the events can contain a requestID parameter. It is not necessary and might occur in some debug logs. In addition to SPML requests, events contain a mandatory name attribute and an optional element. Both are used for identifying the appropriate workflow that is started to handle the event. The name attribute has the following structure: .dxm.request.importToIdentity..cluster=''.resource=''. Here is an example: my-company.dxm.request.importToIdentity.LDAP.cluster='External'.resource='External'. The part that follows the domain is the queue name to which to send the event and also characterizes the workflow type. Type, cluster and domain normally identify the target system and here identify the workflow. Think about importing users from different sources or importing users and roles. Make sure that these values match the corresponding ones in the Is applicable for section of the workflow definition. The element gives some information about the source of the event. It contains the application as a separate XML attribute as well as type, cluster and resource, which contain the same values as described for the name attribute. The application contains the name of the sending application. When sending the event with metacp, please use the name metacp. The following example shows an add event: cn=Abele,ou=Sales,o=My-Company For sending an event with metacp, you should prepare a template with the event analogous to the example shown in the previous section. Use placeholders for the event type and \"DN of changed entry\" variables. For a specific entry, replace the placeholders and send them with a Tcl script such as the following: set topic \"my-company.dxm.request.importToIdentity.LDAP.cluster='External'.resource='External'\" set event … ats init ats send -topic $topic -message \"$event\" ats term DirX Identity’s Tcl-based source scheduled workflows provided with the default Connectivity scenario include: Creation workflows - workflows that extract user information from existing identity sources (for example, an HR or CRM database) and populate the Identity Store with user information. Update workflows - workflows that transfer specific information from the Identity Store to the identity sources (for example, e-mail addresses or telephone numbers) to enable them to use the joined, high-quality information in the Identity Store. The creation workflows described here all work the same way. They: Extract identity information from the identity source. Merge the extracted information into the Identity Store (the merge mode of the meta controller is used). Use the employeeNumber as join criteria. Create a local GUID for each identity (into the attribute dxmGuid) that is composed of a fixed string and the employeeNumber. Mark all created and modified user entries in the Identity Store for privilege resolution (dxrTBA=TRUE). Set the start and end dates of the identities (setting the end date prepares an identity to be deleted). Set the dxmOprMaster attribute that indicates which identity source controls this identity. This avoids additionally that the same identity is controlled by several masters which would lead to oscillating identity information and to confusion. DirX Identity provides the following pre-configured creation and update workflows: LDIFfile2Ident - imports data from an LDIF content file to the Identity Store and creates or updates the corresponding identities (this file acts as identity master for all German persons from Munich). Ident2LDIFfile - exports all German persons from Munich from the Identity Store to an LDIF content file. Use this information to update the identity source (for example the e-mail addresses or telephone numbers). CSVfile2Ident - imports data from a CSV file to the Identity Store and creates or updates the corresponding identities (this file acts as identity master for all German persons from Berlin). dent2CSVfile - exports all German persons from Berlin from the Identity Store to a CSV file. Use this information to update the identity source (for example the e-mail addresses or telephone numbers). XMLfile2Ident - imports data from an XML file to the Identity Store and creates or updates the corresponding identities (this file acts as identity master for all German persons from Frankfurt). Please note that the DDN must be the first attribute in the Selected Attributes list for this workflow to function properly. Ident2XMLfile - exports all German persons from Frankfurt from the Identity Store to an XML file. Use this information to update the identity source (for example the e-mail addresses or telephone numbers). Please note that the DDN must be the first attribute in the Selected Attributes list for this workflow to function properly. Ident2XSLT - exports all German persons from Frankfurt from the Identity Store to an XML file. Use this information to update the identity source (for example the e-mail addresses or telephone numbers). In contrast to the Ident2XMLfile workflow, an additional XSLT conversion is possible. Please note that the DDN must be the first attribute in the Selected Attributes list for this workflow to function properly. DSMLfile2Ident - imports data from a DSML V1 file to the Identity Store and creates or updates the corresponding identities (this file acts as identity master for all German persons from Frankfurt). Please note that the DDN must be the first attribute in the Selected Attributes list for this workflow to function properly. Ident2DSMLfile - exports all German persons from Frankfurt from the Identity Store to a DSML file. Use this information to update the identity source (for example the e-mail addresses or telephone numbers). Please note too that the DDN must be the first attribute in the Selected Attributes list for this workflow to function properly. CorpDir2Ident - copies all entries that were imported by the LDIFfile2Ident workflow to the tree ou=newTree in the Identity Store. Note that this workflow can only run after a successful run of the LDIFfile2Ident workflow. DirXLDIF2Ident - imports entries in an LDIF content or change file generated by the DirX directory service into the Identity Store. SAP-R3-HR2Ident - imports data from an LDIF file that was generated by DirX Identity’s SAP HR agent to the Identity Store and creates or updates the corresponding identities (this file acts as identity master for all persons from Rome). SAP-R3-OM2Ident - imports organizational data from an LDIF file that was generated by DirX Identity’s SAP HR agent from the SAP OM subsystem to the identity store. It creates a structure of organizational units. LDIFfile2CSVfile - transfers information from an LDIF file to a CSV file. This is an example of a workflow that works without any intermediate Identity Store. The default Connectivity scenario’s CorpDir2Ident workflow synchronizes user entries from an LDAP-enabled corporate directory into the Identity Store. By default, the workflow processes only new and modified users. Users that have been physically deleted from the corporate directory are not recognized, but you can extend the workflow if the deleted users in the source directory are marked with a special attribute. The workflow consists of a metacp activity that exports users from the corporate directory and creates or modifies users in the Identity Store. The workflow performs delta synchronization based on modification time stamps. To run the CorpDir2Ident workflow successfully, you must perform these steps: Go to the connected directory icon CorpDir. In the wizard window, open the Service object and set the correct address and port information. Click the Bind Profiles step. Open the bind profile and set the correct user and password information. Click OK, and then click Finish. Now you must define an LDIF agreement before this workflow can run. See the section \"Configuring the DirXdelta Provisioning Workflow\" for details. The default Connectivity scenario’s DirXLDIF2Ident workflow synchronizes LDIF content and change files supplied by the DirX directory service into the Identity Store. The workflow processes new, deleted and modified users. The workflow consists of one metacp activity that processes all LDIF files supplied in a specific location and creates or modifies users in the Identity Store. All created and modified user entries in the Identity Store are marked for role resolution (dxrTBA=TRUE). The workflow performs delta synchronization based on LDIF change files. To run the DirXLDIF2Ident workflow successfully, you must perform these steps: Go to the connected directory icon DirXLDIF. In the wizard window, click LDIF Agreement Parameters. Change the LDIF Agreement Folder path to suit your DirX installation and the related LDIF agreement (normally the LDIF Agreement Folder should be dirx_install_path*/server/ldif*). Click OK, and then click Finish. Now you must define an LDIF agreement before this workflow can run. For details, see the section \"Configuring the DirXdelta Workflow\". The DirX Identity DirXdelta synchronization workflow DirXdelta2Ident handles synchronization between a DirX LDAP directory that creates LDIF change files based on an LDIF agreement and imports this information into an LDAP directory. Before you can run this workflow, you must set up a DirX LDIF agreement. The following sections describe the rules you need to follow for DirXdelta LDIF agreements and describes how to set up an agreement. The workflow checks the defined directory to which the LDIF change files are written and processes all files with the correct LDIF agreement identifier (by default, 88). In general, you must observe the following rules when creating an LDIF agreement suitable for the pre-configured DirXdelta workflow: The replication area (context prefix + subtree base) must match the workflow’s input base object. Job → Input Channel → Import/Export contains by default a setting \"base_obj ou=Sales, o=PQR\" which is suitable for the samples described in the previous section. Note: It is essential to decide whether or not to place a blank space after the comma in the setting. Place a blank if the LDIF content/change files are generated by the DirX Server (via LDIF agreements). Don’t place a blank if the LDIF change files are written by metacp. For example, you must change this setting to \"base_obj ou=Controlling, o=PQR\" if the related LDIF agreement is designed to process changes of subordinates of \"ou=Controlling, o=PQR\" If your LDIF agreement is configured for both full and incremental refresh, the LDIF policy of this agreement must be \"Save user attributes plus Creation-Time and Modification-Time only\". The LDIF agreement must be specified so that the LDIF files are generated in Latin-1 (ISO 8859-1) format. The workflow is designed to synchronize persons only. Where necessary, intermediate nodes like organizational units are created with dummy attribute values according to the workflow’s superior_info setting. As a result, the LDIF agreement should be defined with a refinement filter to an object class representing a person (as in the sample script create-iper.adm - see the next section \"Setting Up the LDIF Agreement\"). This action prevents confusing “naming violation” error messages during the creation of intermediate nodes. If you intend to synchronize objects other than persons, you must change the mapping so that it is consistent for all objects (for example, one-to-one mapping using lStringEscapeLDIF for all attributes to be synchronized). You can create LDIF agreements with dirxadm scripts or with DirXmanage. For details, see the DirX documentation. The default DirXdelta2Ident workflow requires an LDIF agreement that matches the workflow’s default settings. Our sample agreement writes an LDIF file every hour and has the agreement ID 88. See the section \"DirXdelta LDIF Agreement Rules\" for information about how to set up LDIF agreements correctly. Note: Be sure that the directory to which the DirX server writes the LDIF change files grants read and write access to the DirXdelta workflow (metacp). To create the sample agreement with DirXmanage: Start DirXmanage Open Policies → Shadow Operational Bindings Perform Local Operations → Add → Primary → LDIF agreement Input Data: General: Shadowing Status=Activated, Identifier=88 Shadowing Agreement: Context prefix=/o=pqr Update mode: Window time …​ = 10 sec Update interval …​ = 3600 sec Replication Area: Subtree base=/ou=mthb/ou=Sales Refinement=Internet-Organizational-Person LDIF policy: Click Save user attributes plus Creation-Time and Modification-Time only. Click OK The LDIF agreement is now active and running. You can start the workflow to process the initial LDIF content file. To edit the agreement again: Start DirXmanage Click Policies → Shadow Operational Bindings Click the line with the agreement number 88 Click Local Operations → Terminate Now you can edit the agreement. The following sample scripts illustrate how to create, activate, deactivate and delete the sample agreement: agrenv.tcl - contains the central definition of the agreement identifier (in DirX terminology, this is an operational binding identifier) create.adm - creates the agreement. create-iper.adm - similar to create.adm with the scope of the agreement limited to objects of class inetOrgPerson establish.adm - activates the agreement show.adm - displays the agreement terminate.adm - script for deactivating the agreement delete.adm - script for deleting the agreement Assumptions: Administrator cn=admin,o=pqr with Password dirx Instructions for use: Copy the scripts from the folder install_path*/data/ldifagr/dirx* or install_path*/data/ldifagr/dirx-ee* into a folder of your choice. Open an MS/DOS Command Prompt window or a UNIX shell and navigate to the script folder. Change agreement identifier in agrenv.tcl if necessary. If you change the identifier, don’t forget to update the agreement number in the workflow definition. Create the agreement: dirxadm create-iper.adm (or dirxadm create.adm) -→ An agreement will be created that writes an LDIF change file every hour Activate the agreement: dirxadm establish.adm Display the agreement: dirxadm show.adm Deactivate the agreement: dirxadm terminate.adm Delete the agreement: dirxadm delete.adm The default Connectivity scenario provides a set of creation and update workflows that allow for connectivity to various systems that support data exchange via LDIF, CSV or XML/DSML V1 file formats. Other structured file formats are possible but are not pre-configured. Before you can run these workflows successfully, you need to copy some sample data files to a default location: Open the file directory data in the DirX Identity installation path. Copy the files data.ldif, sapr3_full.ldif, sapr3_om.ldif, data.csv, dsml_data.xml, xml_data.xml to the location C:/ MetahubData. The following file-based source workflows are available and can run without any further configuration steps: LDIFfile2Ident Ident2LDIFfile CSVfile2Ident Ident2CSVfile XMLfile2Ident Ident2XMLfile Ident2XSLT DSMLfile2Ident Ident2DSMLfile SAP-R3-HR2Ident SAP-R3-OM2Ident LDIFfile2CSVfile The relational database workflows provided with the default Connectivity scenario can synchronize user entries from a relational database that is either accessible via ODBC or JDBC into the Identity Store. By default, the workflows process only new and modified users. Users that have been physically deleted from the relational database are not recognized, but you can extend the workflows if the deleted users in the source directory are marked with a special attribute. The import workflows consist of a JDBC or ODBC agent activity that exports the information from the source and a metacp activity that creates or modifies users in the Identity Store. The default Connectivity scenario ODBC/JDBC workflows are: ODBC2Ident Ident2ODBC ODBC_Ident (a sequential combination of the two previous workflows) JDBC2Ident Ident2JDBC To complete and use these workflows, Microsoft Access 20xx must be installed on your computer. The example HR database used in the default scenario is delivered with DirX Identity and has the pathname install_path*/data/personal.mdb*. It is protected with the password dirx to show the ODBC agent’s password feature. Copy this database to C:/MetahubData (or another location, if you prefer). It is a good idea to make a copy of the personal.mdb database, so that you can restore the original later on if the working copy becomes corrupted. Define this HR database to be an ODBC database: Go to Start → Settings → Control Panel and double-click Administrative Tools Click on Data Sources (ODBC). If you installed DirX Identity with the system account, select the System-DSN tab and click Add…​ otherwise use the User DSN tab. Select Driver to Microsoft Access (*.mdb) and then click Finish. Enter personal into the field Data Source Name. Click Select…​. Navigate to the location where you have copied personal.mdb, select it and click OK. A new ODBC source is created. Click OK again. Your ODBC workflows should now run. Note: The password of the Access 20xx database provided with DirX Identity is dirx. To change it, perform these steps: Start Microsoft Access. Click File → Open. Select the database. Click Open Exclusive. Click Tools → Security → Set Database Password. Don’t forget to change the relevant bind profile to the same value.","title":"Using the Source Workflows","component":"dirx-identity-docs","version":"9.0.0","name":"ch5_sourceWFs","url":"/dirx-identity-docs/latest/appl-dev-guide/ch5_sourceWFs.html","titles":[{"text":"Understanding the Java-based Source Workflows","hash":"_understanding_the_java_based_source_workflows","id":1},{"text":"Active Directory (ADS) User Import Workflow","hash":"_active_directory_ads_user_import_workflow","id":2},{"text":"ADS User Import Workflow Prerequisites","hash":"_ads_user_import_workflow_prerequisites","id":3},{"text":"ADS User Import Workflow Configuration","hash":"_ads_user_import_workflow_configuration","id":4},{"text":"ADS User Import Workflow and Activities","hash":"_ads_user_import_workflow_and_activities","id":5},{"text":"ADS User Import Workflow Ports","hash":"_ads_user_import_workflow_ports","id":6},{"text":"ADS User Import Workflow Channels","hash":"_ads_user_import_workflow_channels","id":7},{"text":"TS Port","hash":"_ts_port","id":8},{"text":"Identity Port","hash":"_identity_port","id":9},{"text":"Relational Database User Import Workflow","hash":"_relational_database_user_import_workflow","id":10},{"text":"Relational Database User Import Workflow Prerequisites","hash":"_relational_database_user_import_workflow_prerequisites","id":11},{"text":"Relational Database User Import Workflow Configuration","hash":"_relational_database_user_import_workflow_configuration","id":12},{"text":"JDBC Connector and Connected Directory Configuration","hash":"_jdbc_connector_and_connected_directory_configuration","id":13},{"text":"TS Port Filter Configuration","hash":"_ts_port_filter_configuration","id":14},{"text":"Relational Database User Import Workflow Channel Configuration","hash":"_relational_database_user_import_workflow_channel_configuration","id":15},{"text":"User Channel at the TS Port","hash":"_user_channel_at_the_ts_port","id":16},{"text":"User-roles Channel at the TS Port","hash":"_user_roles_channel_at_the_ts_port","id":17},{"text":"User Channel at the Identity Store Port","hash":"_user_channel_at_the_identity_store_port","id":18},{"text":"User-roles Channel at the Identity Store Port","hash":"_user_roles_channel_at_the_identity_store_port","id":19},{"text":"setPassword Channel at the Identity Store Port","hash":"_setpassword_channel_at_the_identity_store_port","id":20},{"text":"Importing Database Users without their Role Assignments","hash":"_importing_database_users_without_their_role_assignments","id":21},{"text":"Role Import Workflow","hash":"_role_import_workflow","id":22},{"text":"Role Import Workflow Prerequisites","hash":"_role_import_workflow_prerequisites","id":23},{"text":"Role Import Workflow Configuration","hash":"_role_import_workflow_configuration","id":24},{"text":"Configuring the JDBC Source","hash":"_configuring_the_jdbc_source","id":25},{"text":"Configuring the Role Import Workflow","hash":"_configuring_the_role_import_workflow","id":26},{"text":"Deploying the Identity Web Services","hash":"_deploying_the_identity_web_services","id":27},{"text":"Role Import Workflow and Activities","hash":"_role_import_workflow_and_activities","id":28},{"text":"Role Import Workflow Ports","hash":"_role_import_workflow_ports","id":29},{"text":"Role Import Workflow Channels","hash":"_role_import_workflow_channels","id":30},{"text":"TS Port","hash":"_ts_port_2","id":31},{"text":"Identity Port","hash":"_identity_port_2","id":32},{"text":"LDIF User Import Workflow","hash":"_ldif_user_import_workflow","id":33},{"text":"LDIF User Import Workflow Prerequisites","hash":"_ldif_user_import_workflow_prerequisites","id":34},{"text":"LDIF User Import Workflow Configuration","hash":"_ldif_user_import_workflow_configuration","id":35},{"text":"LDIF User Import Workflow and Activities","hash":"_ldif_user_import_workflow_and_activities","id":36},{"text":"LDIF User Import Workflow Ports","hash":"_ldif_user_import_workflow_ports","id":37},{"text":"LDIF User Import Workflow Channels","hash":"_ldif_user_import_workflow_channels","id":38},{"text":"Users Channel at TS Port","hash":"_users_channel_at_ts_port","id":39},{"text":"Users Channel at Identity Port","hash":"_users_channel_at_identity_port","id":40},{"text":"LDIF User Export Workflow","hash":"_ldif_user_export_workflow","id":41},{"text":"LDIF User Export Workflow Prerequisites","hash":"_ldif_user_export_workflow_prerequisites","id":42},{"text":"LDIF User Export Workflow Configuration","hash":"_ldif_user_export_workflow_configuration","id":43},{"text":"LDIF User Export Workflow and Activities","hash":"_ldif_user_export_workflow_and_activities","id":44},{"text":"LDIF User Export Workflow Ports","hash":"_ldif_user_export_workflow_ports","id":45},{"text":"LDIF User Export Workflow Channels","hash":"_ldif_user_export_workflow_channels","id":46},{"text":"Users Channel at Identity Port","hash":"_users_channel_at_identity_port_2","id":47},{"text":"Users Channel at TS Port","hash":"_users_channel_at_ts_port_2","id":48},{"text":"CSV Workflows","hash":"_csv_workflows","id":49},{"text":"CSV User Import Workflow","hash":"_csv_user_import_workflow","id":50},{"text":"CSV User Import Workflow Prerequisites","hash":"_csv_user_import_workflow_prerequisites","id":51},{"text":"CSV User Import Workflow Configuration","hash":"_csv_user_import_workflow_configuration","id":52},{"text":"CSV User Import Workflow and Activities","hash":"_csv_user_import_workflow_and_activities","id":53},{"text":"CSV User Import Workflow Ports","hash":"_csv_user_import_workflow_ports","id":54},{"text":"CSV User Import Workflow Channels","hash":"_csv_user_import_workflow_channels","id":55},{"text":"Customizing the Workflow to Handle Files without a DN Column","hash":"_customizing_the_workflow_to_handle_files_without_a_dn_column","id":56},{"text":"CSV User Export Workflow","hash":"_csv_user_export_workflow","id":57},{"text":"CSV User Export Workflow Prerequisites","hash":"_csv_user_export_workflow_prerequisites","id":58},{"text":"CSV User Export Workflow Configuration","hash":"_csv_user_export_workflow_configuration","id":59},{"text":"CSV User Export Workflow and Activities","hash":"_csv_user_export_workflow_and_activities","id":60},{"text":"CSV User Export Workflow Ports","hash":"_csv_user_export_workflow_ports","id":61},{"text":"CSV User Export Workflow Channels","hash":"_csv_user_export_workflow_channels","id":62},{"text":"Remote AD Workflow","hash":"_remote_ad_workflow","id":63},{"text":"External LDAP User Import Workflows","hash":"_external_ldap_user_import_workflows","id":64},{"text":"External LDAP User Full Import Workflow","hash":"_external_ldap_user_full_import_workflow","id":65},{"text":"External LDAP User Full Import Workflow Prerequisites","hash":"_external_ldap_user_full_import_workflow_prerequisites","id":66},{"text":"External LDAP User Full Import Workflow Configuration","hash":"_external_ldap_user_full_import_workflow_configuration","id":67},{"text":"External LDAP User Full Import Workflow and Activities","hash":"_external_ldap_user_full_import_workflow_and_activities","id":68},{"text":"External LDAP User Full Import Workflow Ports","hash":"_external_ldap_user_full_import_workflow_ports","id":69},{"text":"External LDAP User Full Import Workflow Channels","hash":"_external_ldap_user_full_import_workflow_channels","id":70},{"text":"External LDAP User Import Workflow","hash":"_external_ldap_user_import_workflow","id":71},{"text":"External LDAP User Import Workflow Prerequisites","hash":"_external_ldap_user_import_workflow_prerequisites","id":72},{"text":"External LDAP User Import Workflow Configuration","hash":"_external_ldap_user_import_workflow_configuration","id":73},{"text":"External LDAP User Import Workflow and Activities","hash":"_external_ldap_user_import_workflow_and_activities","id":74},{"text":"External LDAP User Import Workflow Ports","hash":"_external_ldap_user_import_workflow_ports","id":75},{"text":"External LDAP User Import Workflow Channels","hash":"_external_ldap_user_import_workflow_channels","id":76},{"text":"Sending Events to Synchronize External Users","hash":"_sending_events_to_synchronize_external_users","id":77},{"text":"Event Types","hash":"_event_types","id":78},{"text":"Identifier and requestID","hash":"_identifier_and_requestid","id":79},{"text":"Name and Source","hash":"_name_and_source","id":80},{"text":"A Complete Sample Event","hash":"_a_complete_sample_event","id":81},{"text":"Sent Event with metacp","hash":"_sent_event_with_metacp","id":82},{"text":"Understanding the Tcl-based Source Workflows","hash":"_understanding-the-tcl-based-source-workflows","id":83},{"text":"Configuring the Corporate Directory Workflow","hash":"_configuring_the_corporate_directory_workflow","id":84},{"text":"Configuring the DirX LDIF Directory Workflow","hash":"_configuring_the_dirx_ldif_directory_workflow","id":85},{"text":"Configuring the DirXdelta Workflow","hash":"_configuring_the_dirxdelta_workflow","id":86},{"text":"DirXdelta LDIF Agreement Rules","hash":"_dirxdelta_ldif_agreement_rules","id":87},{"text":"Setting Up the LDIF Agreement","hash":"_setting_up_the_ldif_agreement","id":88},{"text":"Sample Scripts to Handle the Sample Agreement","hash":"_sample_scripts_to_handle_the_sample_agreement","id":89},{"text":"Configuring the File-Based Source Workflows","hash":"_configuring_the_file_based_source_workflows","id":90},{"text":"Configuring the Relational Database Workflows","hash":"_configuring_the_relational_database_workflows","id":91}]},"11":{"id":11,"text":"DirX Identity maintenance workflows help to maintain your identity system to ensure consistent and current data of high quality.This chapter provides detailed information about maintenance workflow configuration, special features and user hooks.The sections in this chapter include: Understanding the Java-based Maintenance Workflows - describes configuration, features, and user hooks for Java-based maintenance workflows. Understanding the Tcl-based Maintenance Workflows - describes configuration, features, and user hooks for Tcl-based maintenance workflows. For information about these workflows' theory of operation, see the DirX Identity Connectivity Administration Guide and the DirX Identity Provisioning Administration Guide. Maintenance workflows provided with the Identity Store default Connectivity scenario include workflows that run as threads in the Java-based server (IdS-J). They can run as the result of events and in many cases can be scheduled. The Java-based maintenance workflows include: Entry change workflows - special workflows for each type of entry (user, organization, and so on) that apply provisioning and / or consistency rules, check for broken links or update associated entries (for example, the user, if an organizational unit changed the privilege). Deploying these workflows allows you to minimize how often the Privilege Resolution or the Consistency Rule workflow runs (see the section \"Privilege Resolution Workflow\" for details). Process Tickets Internal - a workflow that processes DirX Identity’s internal tickets. Account Password Manager - a workflow that changes account passwords generated by user requests (event-based mode). Alternatively, it can run scheduled on a specific number of account objects and creates new passwords for accounts whose passwords have expired. Reset Account Passwords - a workflow that resets passwords of either functional or personal accounts. It runs scheduled on a specific number of account objects. Reset Password If Displayed - a workflow that resets passwords of privileged accounts (for example, within 24 hours) after the password has been read by Web Center. It runs scheduled on a specific set of privileged account objects (defined by an LDAP filter). User Password Event Manager - a workflow that changes user passwords and all related account passwords based on user requests (event-based mode). User Password Expiration Notification - a workflow that finds users whose passwords are about to expire and informs the users about it by sending a notification mail. Transport Workflows - a workflow that transfers data between Identity Store instances. Joint Backup - a workflow that performs a synchronized backup of the Java-based Server’s repository and the LDAP Connectivity and Provisioning data store. Workflows for normal entry changes (not password changes) exist for various types of entries: users, organizations, organizational units and contexts. They are invoked by the same mechanism and their processing is very similar. The following figure illustrates how these workflows are invoked: Figure 1. Invoking an Entry Maintenance Workflow Various clients that create, update or delete entries in the Identity domain publish events after their changes. This action is controlled by the Event Policy in the domain. The event is only sent if the corresponding object type is activated in the event policy. Clients that send these types of events are: Web Center and Identity Manager. Provisioning Web Services. Import workflows, both Tcl-based and Java-based workflows. Note that For Tcl-based workflows, metacp must be configured accordingly. For Java-based workflows, the audit object type in the channel that configures the mapping for import into DirX Identity domain must be set. It does not make sense to start these workflows by hand or on a schedule because they only evaluate events. As with other real-time workflows, they are deployed to the IdS-J server if their Is Active flags are set in the configuration. The clients send an event after an entry has been updated successfully. The topic of the event contains: The object description name of the changed object: for example, dxrUser, ctxOrganizationalUnit. The host name of the LDAP server. The clients use the host name as it is configured in their binding configuration. The root DN of the DirX Identity domain (for example \"cn=My-Company\"). There is one deviation from these rules: the Java-based workflows that import accounts and groups use the cluster and domain attribute of the target system rather than the host name and the domain root of the LDAP server. Make sure that the When Applicable section of the workflows contains the proper information. The actions of the workflows depend on the entry type, the event type (add, modify or delete) and on the changed attributes. But typically they: Apply provisioning and / or consistency rules whose filters match the entry attributes. Check for broken links from the entries and especially for links to such an entry, if it has been deleted. Update associated users, if a critical attribute has changed. This is particularly important if a privilege link of a business object has been added or deleted. Call a user hook, if one has been configured. Store the changes for the entry made during this workflow’s operation. Deploying these workflows allows you to avoid having to start a privilege resolution or consistency check workflow on a regular basis (see the section \"Privilege Resolution Workflow\"). The resulting privilege changes and account updates are performed in real time. For more details on the configuration and processing of these workflows, see the following sections. The following sections describe how to configure the event-based maintenance workflow for accounts and the tasks this workflow performs. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then adjust the settings in the following tabs: General tab: Enter an appropriate resource family into Resource Family. It is a good idea to have a separate resource family for this type of workflow to ensure that the corresponding threads do not compete with threads performing other workflows. In the Error Handling section, specify the timeout for the activity, the retry limit and the waiting time between retries. Controller tab: The join engine type AccountEventController should be selected. It automatically determines the proper class name. If you want a user hook to be called during event processing, enter its full class name into Userhook Class Name. Make sure the library (jar file) containing your classes and all others on which they depend are deployed in the following folder beneath the installation: install_path/ids-j-domain-Sn/confdb/jobs/eventBasedRules/lib For information on how to write a user hook, see the DirX Identity Customization Guide. Event Attributes tab: Attributes for finding Users determines a sequence of attribute names that are used for finding the associated user of given account. Each line contains a comma-separated list of attribute names. The event controller searches for users where the values of these attributes match those of the account. If it finds exactly one, it associates the account with the user; that is, it sets the account’s user link. If it finds none or more than one user, it continues with the next list of attributes. Sort Key defines the sort attribute for sorting rules. The default value is “cn” Sort Ascending defines the sort order ascending. The default value is “true” so sorting is ascending. In the General tab of the workflow: Adjust the Is applicable for parameters. In particular, make sure type is set to the object description name SvcTSAccount and the resource and cluster are set to the server and domain name respectively. Set the Active flag of the workflow. Right-click the workflow object and select Load IdS-J Configuration to load the workflow into the Java-based Server. The following figure illustrates how the event-based maintenance workflow operates for accounts: Figure 2. Event-based Maintenance Workflow Operation: Accounts The workflow performs the following operations: It checks the links from this entry to other entries. If a referenced entry cannot be found, the workflow removes the reference. It applies the consistency rules whose filters match the entry’s attributes. It applies the accept and cleanup rules. If one of the account’s group memberships is in the IMPORTED state and the account and the group match an accept or cleanup rule, the workflow changes the state to IGNORE or DELETED respectively. Note that this action occurs only if the memberships are stored at the account. It applies the validation rules. If the account matches a validation rule’s account filter, it becomes an imported member of the respective group(s). If the account does not match the filter, but is an imported member of a matching group for no other reason, it is deleted: the membership state is changed to DELETED. This action triggers a real-time provisioning workflow and updates the state at the connected system. It calls the user hook, if one is configured. The user hook has access to the affected entry and can change it. The user hook does not need to store its changes to the LDAP server because the workflow performs this task in the next step. If the entry was modified, the workflow saves it to the LDAP server. This section describes how to configure the event-based maintenance workflow for organizations and the tasks this workflow performs. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then adjust the settings in the following tabs: General tab: Enter a proper resource family into Resource Family. It is a good idea to have a separate resource family for this type of workflow to ensure that the corresponding threads do not compete with threads performing other workflows. In the Error Handling section, specify the timeout for the activity, the retry limit and the waiting time between retries. Controller tab: Select the join engine type OrganizationEventController. It automatically determines the proper class name. If you want a user hook to be called during event processing, enter its full class name into Userhook Class Name. Make sure the library (jar file) containing your classes and all others on which they depend are deployed in the following folder beneath the installation: install_path/ids-j-domain-Sn/confdb/jobs/eventBasedRules/lib For details on how to write a user hook, see the DirX Identity Customization Guide. Event Attributes tab: Attributes to update Users determines the list of attributes that result in the update of all associated users when one of them has been changed. Sort Key defines the sort attribute for sorting rules. The default value is “cn” Sort Ascending defines the sort order ascending. The default value is “true” so sorting is ascending. In the General tab of the workflow: Adjust the Is applicable for parameters. Make sure type is set to the object description name ctxOrganization and the resource and cluster are set to the server and domain name respectively. Set the Active flag of the workflow. Right-click the workflow object and select Load IdS-J Configuration to load the workflow into the Java-based Server. The following figure illustrates how the event-based maintenance workflow operates for organizations: Figure 3. Event-based Maintenance Workflow Operation: Organizations The workflow performs the following operations: It checks the links from this entry to other entries. If a referenced entry cannot be found, the workflow removes the reference. It applies the consistency rules whose filters match the entry’s attributes. If the privilege link or one of the configured attributes has been changed, it updates all associated users. (Users are associated if they have a reference (dxrOrganizationLink or dxrSecOrganizationLink) to this entry.) The update contains the resolution of the user privileges and includes those privileges referenced from the organization. It calls the user hook, if one is configured. The user hook has access to the affected entry and can change it. The user hook does not need to store its changes to the LDAP server because the workflow performs this task in the next step. If the entry was modified, the workflow saves it to the LDAP server. The following sections describe how to configure the event-based maintenance workflow for organizational units and describe the tasks this workflow performs. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then adjust the settings in the following tabs: General tab: Enter a proper resource family into Resource Family. It is a good idea to have a separate resource family for this type of workflow to ensure that the corresponding threads do not compete with threads performing other workflows. In the Error Handling section, specify the timeout for the activity, the retry limit and the waiting time between retries. Controller tab: Select the join engine type OUEventController. It automatically determines the proper class name. If you want a user hook to be called during event processing, enter its full class name into Userhook Class Name. Make sure the library (jar file) containing your classes and all others on which they depend are deployed in the following folder beneath the installation: install_path/ids-j-domain-Sn/confdb/jobs/eventBasedRules/lib For information on how to write a user hook, see the DirX Identity Customization Guide. Event Attributes tab: Attributes to update Users determines the list of attributes that result in the update of all associated users when one of them has been changed. Sort Key defines the sort attribute for sorting rules. The default value is “cn” Sort Ascending defines the sort order ascending. The default value is “true” so sorting is ascending. In the General tab of the workflow: Adjust the Is applicable for parameters. In particular, make sure type is set to the object description name ctxOrganizationalUnit and the resource and cluster are set to the server and domain name respectively. Set the Active flag of the workflow. Right-click the workflow object and select Load IdS-J Configuration to load the workflow into the Java-based Server. The following figure illustrates how the event-based maintenance workflow operates for organizational units: Figure 4. Event-based Maintenance Workflow Operation: Organizational Units The workflow performs the following operations: It checks the links from this entry to other entries. If a referenced entry cannot be found, the workflow removes the reference. It applies the consistency rules whose filters match the entry’s attributes. If the privilege link or one of the configured attributes has changed, the workflow updates all associated users. Users are associated with an entry if they have a reference (dxrOrganizationalUnitLink or dxrSecOrganizationalUnitLink) to it. The update contains the resolution of the user privileges and includes those privileges referenced from the organizational unit. It calls the user hook, if one is configured. The user hook has access to the affected entry and can change it. The user hook does not need to store its changes to the LDAP server because the workflow performs this task in the next step. If the entry was modified, the workflow saves it to the LDAP server. The following sections describe how to configure the event-based maintenance workflow for context objects and describe the tasks this workflow performs. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then adjust the settings in the following tabs: General tab: Enter a proper resource family into Resource Family. It is a good idea to have a separate resource family for this type of workflow to ensure that the corresponding threads do not compete with threads performing other workflows. In the Error Handling section, specify the timeout for the activity, the retry limit and the waiting time between retries. Controller tab: The join engine type ContextEventController should be selected. It automatically determines the proper class name. If you want a user hook to be called during event processing, enter its full class name into Userhook Class Name. Make sure the library (jar file) containing your classes and all others on which they depend are deployed in the following folder beneath the installation: install_path/ids-j-domain-Sn/confdb/jobs/eventBasedRules/lib For information on how to write a user hook, see the DirX Identity Customization Guide. Event Attributes tab: Attributes to update Users determines the list of attributes that result in the update of all associated users when one of them has been changed. Sort Key defines the sort attribute for sorting rules. The default value is “cn” Sort Ascending defines the sort order ascending. The default value is “true” so sorting is ascending. In the General tab of the workflow: Adjust the Is applicable for parameters. In particular, make sure type is set to the object description name dxrContext and the resource and cluster are set to the server and domain name respectively. Set the Active flag of the workflow. Right-click the workflow object and select Load IdS-J Configuration to load the workflow into the Java-based Server. The following figure illustrates how the event-based maintenance workflow operates for context objects: Figure 5. Event-based Maintenance Workflow Operation: Context Objects The workflow performs the following operations: It checks the links from this entry to other entries. If a referenced entry cannot be found, the workflow removes the reference. It applies the consistency rules whose filters match the entry’s attributes. If the privilege link or one of the configured attributes has changed, it updates all associated users. Users are associated if they have a reference (dxrContextLink) to this entry: the reference can be contained in the attributes dxrContextLink (standard) and in dxrExtensionLink1, …​, dxrExtensionLink10. The update contains resolution of the user privileges and includes those privileges referenced from the context. The dxrExtensionLink attributes are not indexed per default. If you intend to use these links, set the corresponding directory indexes. It calls the user hook, if one is configured. The user hook has access to the affected entry and can change it. The user hook does not need to store its changes to the LDAP server because the workflow performs this task in the next step. If the entry was modified, the workflow saves it to the directory server. The following sections describe how to configure the event-based maintenance workflow for location objects and describe the tasks this workflow performs. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then adjust the settings in the following tabs: General tab: Enter a proper resource family into Resource Family. It is a good idea to have a separate resource family for this type of workflow to ensure that the corresponding threads do not compete with threads performing other workflows. In the Error Handling section, specify the timeout for the activity, the retry limit and the waiting time between retries. Controller tab: Select the join engine type LocationEventController. It automatically determines the proper class name. If you want a user hook to be called during event processing, enter its full class name into Userhook Class Name. Make sure the library (jar file) containing your classes and all others on which they depend are deployed in the following folder beneath the installation: install_path/ids-j-domain-Sn/confdb/jobs/eventBasedRules/lib For information on how to write a user hook, see the DirX Identity Customization Guide. Event Attributes tab: Attributes to update Users determines the list of attributes that result in the update of all associated users when one of them has been changed. Sort Key defines the sort attribute for sorting rules. The default value is “cn” Sort Ascending defines the sort order ascending. The default value is “true” so sorting is ascending. In the General tab of the workflow: Adjust the Is applicable for parameters. In particular, make sure type is set to the object description name ctxLocation and the resource and cluster are set to the server and domain name respectively. Set the Active flag of the workflow. Right-click the workflow object and select Load IdS-J Configuration to load the workflow into the Java-based Server. The following figure illustrates how the event-based maintenance workflow operates for location objects: Figure 6. Event-based Maintenance Workflow Operation: Locations The workflow performs the following operations: It checks the links from this entry to other entries. If a referenced entry cannot be found, the workflow removes the reference. It applies the consistency rules whose filters match the entry’s attributes. If the privilege link or one of the configured attributes has changed, it updates all associated users. Users are associated if they have a reference (dxrLocationLink or dxrSecLocationLink) to this entry. The update contains the resolution of the user privileges and includes those privileges referenced from the location. It calls the user hook, if one is configured. The user hook has access to the affected entry and can change it. The user hook does not need to store its changes to the LDAP server because the workflow performs this task in the next step. If the entry was modified, the workflow saves it to the LDAP server. The following sections describe how to configure the event-based maintenance workflow for cost unit objects and describe the tasks this workflow performs. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then adjust the settings in the following tabs: General tab: Enter a proper resource family into Resource Family. It is a good idea to have a separate resource family for this type of workflow to ensure that the corresponding threads do not compete with threads performing other workflows. In the Error Handling section, specify the timeout for the activity, the retry limit and the waiting time between retries. Controller tab: Select the join engine type CostUnitEventController. It automatically determines the proper class name. If you want a user hook to be called during event processing, enter its full class name into Userhook Class Name. Make sure the library (jar file) containing your classes and all others on which they depend are deployed in the following folder beneath the installation: install_path/ids-j-domain-Sn/confdb/jobs/eventBasedRules/lib For information on how to write a user hook, see the DirX Identity Customization Guide. Event Attributes tab: Attributes to update Users determines the list of attributes that result in the update of all associated users when one of them has been changed. Sort Key defines the sort attribute for sorting rules. The default value is “cn” Sort Ascending defines the sort order ascending. The default value is “true” so sorting is ascending. In the General tab of the workflow: Adjust the Is applicable for parameters. In particular, make sure type is set to the object description name dxrCostUnit and the resource and cluster are set to the server and domain name respectively. Set the Active flag of the workflow. Right-click the workflow object and select Load IdS-J Configuration to load the workflow into the Java-based Server. The following figure illustrates how the event-based maintenance workflow operates for location objects: Figure 7. Event-based Maintenance Workflow Operation: Cost Units The workflow performs the following operations: It checks the links from this entry to other entries. If a referenced entry cannot be found, the workflow removes the reference. It applies the consistency rules whose filters match the entry’s attributes. If the privilege link or one of the configured attributes has changed, it updates all associated users. Users are associated if they have a reference (dxrCostUnitLink or dxrSecCostUnitLink) to this entry. The update contains the resolution of the user privileges and includes those privileges referenced from the location. It calls the user hook, if one is configured. The user hook has access to the affected entry and can change it. The user hook does not need to store its changes to the LDAP server because the workflow performs this task in the next step. If the entry was modified, the workflow saves it to the LDAP server. The following sections describe how to configure the event-based maintenance workflow for project objects and describe the tasks this workflow performs. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then adjust the settings in the following tabs: General tab: Enter a proper resource family into Resource Family. It is a good idea to have a separate resource family for this type of workflow to ensure that the corresponding threads do not compete with threads performing other workflows. In the Error Handling section, specify the timeout for the activity, the retry limit and the waiting time between retries. Controller tab: Select the join engine type ProjectEventController. It automatically determines the proper class name. If you want a user hook to be called during event processing, enter its full class name into Userhook Class Name. Make sure the library (jar file) containing your classes and all others on which they depend are deployed in the following folder beneath the installation: install_path/ids-j-domain-Sn/confdb/jobs/eventBasedRules/lib For information on how to write a user hook, see the DirX Identity Customization Guide. Event Attributes tab: Attributes to update Users determines the list of attributes that result in the update of all associated users when one of them has been changed. Sort Key: defines the sort attribute for sorting rules. The default value is “cn” Sort Ascending: defines the sort order ascending. The default value is “true” so sorting is ascending. In the General tab of the workflow: Adjust the Is applicable for parameters. In particular, make sure type is set to the object description name dxrProject and the resource and cluster are set to the server and domain name respectively. Set the Active flag of the workflow. Right-click the workflow object and select Load IdS-J Configuration to load the workflow into the Java-based Server. The following figure illustrates how the event-based maintenance workflow operates for project objects: Figure 8. Event-based Maintenance Workflow Operation: Projects The workflow performs the following operations: It checks the links from this entry to other entries. If a referenced entry cannot be found, the workflow removes the reference. It applies the consistency rules whose filters match the entry’s attributes. If the privilege link or one of the configured attributes has changed, it updates all associated users. Users are associated if they have a reference (dxrProjectLink) to this entry. The update contains the resolution of the user privileges and includes those privileges referenced from the project. It calls the user hook, if one is configured. The user hook has access to the affected entry and can change it. The user hook does not need to store its changes to the LDAP server because the workflow performs this task in the next step. If the entry was modified, the workflow saves it to the LDAP server. The event-based maintenance workflow for users accepts user change events, applies provisioning and consistency rules, resolves the users as far as necessary and updates the account attributes. Deploying this workflow allows you to avoid having to start a privilege resolution workflow on a regular basis (see the section \"Privilege Resolution Workflow\"). The resulting privilege changes and account updates are performed in real time. If no relevant attributes are changed, users are not resolved and accounts are not updated; this procedure may save a lot of time. You only need privilege resolution if you change the role hierarchy or group attributes and defer the resolution of affected users. The resolution or propagation process in the previous step can start additional provisioning processes to connected systems. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then select the Event Attributes tab. Adjust the following configuration items, which determine when accounts are to be updated: Attributes to include: defines all attributes that should be processed. Attributes to ignore: defines all attributes that should be ignored, if they are not in the previous set Attribute prefixes to include: defines the prefixes to use to update attributes; all attributes starting with these prefixes result in account update if they are not in the \"ignore\" list. Attribute prefixes to ignore: defines the prefixes to use to ignore attributes; if the attributes are not in any of the previous lists, but match one of these prefixes, they are ignored. Searchbase for Consistency Rules: defines the top level folder of the consistency rules that the workflow performs. Searchbase for Provisioning Rules: defines the top level folder of the provisioning rules that the workflow performs. Note that the rules must contain all grant- and deny rules for a given privilege, because they are executed in one common algorithm. Sort Key defines the sort attribute for sorting rules. The default value is “cn” Sort Ascending defines the sort order ascending. The default value is “true” so sorting is ascending. In the General tab of the workflow, set the Active flag. Right-click the workflow object and then select Load IdS-J Configuration to load the workflow into the Java-based Server. The following figure illustrates how the event-based user resolution workflow operates: Figure 9. Event-based User Resolution Workflow Operation The workflow performs the following operations for an add or modify event: It checks the links from this entry to other entries. If a referenced entry cannot be found, the workflow removes the reference. It applies the consistency rules whose filters match the entry’s attributes. It calls the user hook, if one is configured. The user hook has access to the affected entry and can change it. The user hook should not store its changes to the LDAP server because the workflow performs this task in the next step. The workflow applies the matching provisioning rules, assigns new privileges or removes existing privilege assignments based on the new attribute values and at the end resolves the user, if either in the received event or after applying rules and user hook at least one of the changed attributes is among the domain’s permission parameters, is a state attribute, a date, a privilege link or the attribute dxrTBA is enabled. If the user was modified, the workflow stores it to the LDAP server. If one of the attributes has changed that are configured as to be included in the Event Attributes tab of the activity, the attributes of the user’s accounts are updated. This step applies particularly to attributes that are mastered by the user. The user is not resolved. The rules on when to update accounts are as follows: accounts are updated if at least one of the changed attributes is among the configured \"include\" parameters; matches an \"include prefix\", but is not among the \"ignore\" parameters; doesn’t match any of the \"ignore\" and \"ignore prefix\" parameters. If a delete event is received, the workflow: Removes links from associated entries to the deleted entry Calls the user hook. The event-based maintenance workflow for personas accepts persona change events, applies provisioning and consistency rules, resolves the personas as far as necessary and updates the account attributes. Since personas are just another representation of users, the PersonaResolverController uses the same implementation as the UserResolverController. The PersonaResolverController uses an additional configuration field Link Attribute for Owner in the join activity’s Event Attributes tab. It uses this attribute (owner) to check if attributes that are mastered from the owner are part of the event’s modifications. In this case, the persona is saved to update this set of attributes. The use of different workflows for users, personas and functional users enables the use of different folders for consistency rules and provisioning rules for the three user representations. All other aspects of event-based maintenance workflow for personas are common to the event-based maintenance workflow for users, as described in the section \"Users\". The event-based maintenance workflow for functional users accepts functional user change events, applies provisioning and consistency rules, resolves the functional users as far as necessary and updates the account attributes. Since functional users are just another representation of users, the FunctionalUserResolverController uses the same implementation as the UserResolverController. The FunctionalUserResolverController uses an additional configuration field Link Attribute for Sponsor in the join activity’s Event Attributes tab. It uses this attribute (dxrSponsor) to check if attributes that are mastered from the sponsor are part of the event’s modifications. In this case, the functional user is saved to update this set of attributes. The use of different workflows for users, personas and functional users enables the use of different folders for consistency rules and provisioning rules for the three user representations. All other aspects of event-based maintenance workflow for functional users are common to the event-based maintenance workflow for users as described in the section \"Users\". The following sections describe how to configure a generic event-based maintenance workflow for any object type and describe the tasks this workflow performs. Typical use of this workflow is to run consistency rules after an object is created or modified. Configuration is possible for any type of object. Use the object description name to define the applicability of the workflow. You want to run consistency rules whenever a role is created or modified. Then you must perform the following steps: Login into the Provisioning view group of the DirX Identity Manager. Configure or extend the event policy: add dxrRole to the Selected area in the Configuration tab. Note that dxrRole is the standard name of the role object description. If you use several different types of object descriptions, use the appropriate object description name here. Create a folder for the consistency rules to be run with this workflow. Create the consistency rules in this folder. Create a new event-based processing workflow: Log in into the Connectivity view group of the DirX Identity Manager. Click Global View and then select the scenario where you want to create the workflow. Click the line between the two Identity Stores and select New from the context menu. Select the GenericEventBasedProcessing template and click Next. In the General Workflow Info tab define a name and a description, set the active flag. In the Is applicable section configure dxrRole as Type. As above, use here the object description name that defines your object. Set the Cluster field to '*'. In the Event parameters tab set the path to the folder with your previously created consistency rules (Searchbase for Consistency Rules). Click Next and then Finish. Perform Load IdS-J Configuration to load the newly created workflow into the Java-based Server. Now your workflow is ready to be tested. The following figure illustrates how the generic event-based processing workflow operates: Figure 10. Generic Event-based Processing Workflow Operation The workflow performs the following operations for an add or modify event: It applies the consistency rules whose filters match the entry’s attributes. It calls the user hook, if one is configured. The user hook has access to the affected entry and can change it. The user hook does not need to store its changes to the LDAP server because the workflow performs this task in the next step. If a delete event is received, the workflow: Calls the user hook. The Process Tickets Internal workflow runs regularly and processes all tickets where the condition for processing is fulfilled. The figure shows the architecture. Figure 11. Process Tickets Internal Workflow The Process Tickets Internal workflow runs typically scheduled and performs these steps: It reads all tickets that are to process. It processes the tickets. Processing of a ticket might trigger other processes, for example a privilege resolution on a user object. In this case other objects might be created and messages for further processing might be initiated (for example provisioning requests). For a detailed definition of the procedure see the \"Process Tickets Internal Workflow Operation\" chapter. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select your scenario (if not yet present, use the target system wizard from the Provisioning view group to create the scenario). Click the workflow line between the Identity Stores and select New from the context menu. Select the ProcessTicketsInternal workflow template and then click Next. Define the Name and Description fields and set the Is Active flag. Click Next and then Finish to complete the copy operation. Perform Load IdS-J Configuration to load the workflow into the Java-based Server. Now you can run the workflow either by hand or regularly triggered by a schedule. The Process Tickets Internal workflow works in two steps: Procedure on Request Workflows That are Related to Tickets During each run, it checks the status (state and application state) of all request workflows that are associated to tickets. It sets the state of the ticket accordingly. This means that: Workflow State=RUNNING: ticket state is not changed Workflow State=SUCCEEDED and Application State=ACCEPTED: ticket State=Approval.Completed Workflow State=SUCCEEDED and Application State=REJECTED: ticket State=Approval.Rejected Workflow State=FAILED.*: ticket State=Approval.Error Procedure on Tickets It reads all tickets where the due date is reached. It processes the ticket: For ticket State=Approval.Completed it actualizes the order data from the workflow instance and then it processes the ticket. For ticket State=Input.Completed it processes the ticket. Processing the ticket means that the ticket data is applied to the subject; for example, the service changes some attributes at a user entry or some privilege assignments are assigned to a user. If necessary, the subject is further processed; for example, a privilege resolution is performed for a user entry to calculate any changes coming from changed attributes or privilege assignments. Other processes might be triggered via JMS messages; for example, real-time provisioning to connected systems. After successful processing, it sets the ticket State=ApplyChange.Completed. and the DeleteDate=today+TicketLifeTime where Ticket Life Time is the defined value at the domain object. If an error occurs during processing, it does not change the status. The Account Password Manager workflow creates new passwords for DirX Identity accounts after the old password has expired. The following figure illustrates this workflow. Figure 12. Account Password Management: Account Password Manager Workflow If run scheduled, the Account Password Manager workflow searches for accounts with expired passwords according to the configured search settings, it generates a new password, stores it at the account if it is privileged and triggers the target system-specific password change workflows (setPassword workflow). If run event-based, it handles \"password expired\" events (topic dxm.event.SvcTSAccount.pwd.expired) and \"password changed\" events (topic dxm.event.SvcTSAccount.pwd.changed). For a password expired event, it generates a new password, stores it at the account if it is privileged and sets the password reset flag to false. For a password changed event, it takes the password from the event, changes it at the account if it is privileged and sets the password reset flag as desired in the event. In both cases, it then triggers the target system-specific password change (setPassword) workflow. Note that the message topics can contain a domain extension. For more information, see the section \"Message Topics\" in the DirX Identity Connectivity Administration Guide. To run the Account Password Manager workflow successfully, you must perform these steps: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then select the Controller tab. Adjust the settings in this tab as follows: Set the search base to the desired value. Do not change the scope and filter. Set the correct Domain (default: My-Company). Set the parameter Days before Expiration (default: 1 day). Set the parameter Keep Password History at the Account to true if you want to keep a password history at the account. The history is then used to check if the new password has not been used in the past x times where x is defined by the policy. This history keeping is performed by default for privileged accounts but not otherwise. Do not change the topic prefix for the \"to be built\" request that triggers the setPassword workflows. If you want to use own attributes sent to the setPassword workflow, which uses them for resolving placeholders in it’s Notify activity, right click the join activity and choose Edit Content. Go to the controller section of the PwdAccountExpireController and add the multi-value property accountAttrs with the desired attribute list outside the operation section. Set the Active flag of the workflow. Right-click the workflow object and select Load IdS-J Configuration to load the workflow into the Java-based Server. Password expiration for privileged or personal accounts (see the DirX Identity Provisioning Administration Guide for more information on these accounts) depends on the assigned account password policies and on a set of attributes at the policy and the account. If run scheduled, the workflow searches for accounts with expired passwords according to the configured search settings. It generates a new password, stores it at the account if it is privileged and triggers the target system-specific setPassword workflow. If run event-based, it handles \"password expired\" and \"password changed\" requests for a specific account and then proceeds as in the scheduled case. The password policy is assigned via the password policy link (attribute dxrPwdPolicyLink). If no password policy is assigned, the default password policy is used. The expiration calculation depends on the following attributes: dxrPwdMaxAge at the password policy, which defines the maximum allowed age of the password. Days before expire at the join activity, which specifies the time when to reset the account passwords before they expire. If the specified number of days before expiration is reached or passed for an account password, the workflow resets that password. dxrPwdChangedTime at the account, which specifies the last time the password was changed. If the current date is greater than the value (dxrPwdChangedTime+pwdMaxAge-Days before expire), the workflow sets the password to a randomly-generated new value. The password reset flag is not set and the dxrPwdChangedTime is set to the current date and time. The workflow generates a password change event that is to be processed by the corresponding setPassword workflow. The identifier attributes of the password change event are set either with the attributes configured in the multi-value property accountAttrs described above or if not specified (default) with the default list of attributes described in the setPassword Notify activity (see \"Context-senitive Help → Java-based Workflows → Real-time Port → Notification (optional)\" (for Java-based Set Password Workflows) in the DirX Identity Connectivity Administration Guide for details). These attributes - for example mail, cn, sn or givenName - can be used as placeholders (for example, $\\{IDATTR(mail)} ) in the to, from or body fields of the Notify activity. If accountAttrs are specified, they are extended by the list of the above-mentioned default attributes if not already contained. The attributes \"dxrPwdChangedTime\",\"dxrPwdPolicyLink\",\"dxrTSState\",\"dxrName\" and \"dxrPrimaryKey\" are also appended by the Account Password Manager and the Reset Account Passwords workflows and can therefore also be used as placeholder attributes for notification messages. Note that the accountAttrs must be specified in the controller section outside the operation section. For example, set: description givenName ... if you want to add the attributes description and givenName to the default list of identifier attributes. The Reset Account Passwords workflow resets passwords of DirX Identity accounts. This workflow can be used if a restore of a connected system has occurred, for example, due to a system failure that required restoration of the previous backup. The following figure illustrates this workflow. Figure 13. Account Password Management: Reset Account Passwords Workflow The Reset Account Passwords workflow runs only scheduled and searches for accounts according to the configured search settings. When the account is privileged, the workflow generates a new password and stores it at the account. Otherwise it takes the password from the referenced user. Then it triggers the target system-specific password change (setPassword) workflow. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then select the Controller tab. Adjust the following settings in this tab: Set the search base to the desired value. Set the filter accordingly. By default, the workflow selects all objects of type dxrTargetSystemAccount with dxrType=Privileged. Set dxrType=Personal if you intend to handle personal accounts. Set the correct Domain (default: My-Company). If you want to use own attributes sent to the setPassword workflow, which uses them for resolving placeholders in its Notify activity, right click the join activity and choose Edit Content. Go to the controller section of the PwdAccountResetController and add the multi value property accountAttrs with the desired attribute list outside the operation section. Set the Active flag of the workflow. Right-click the workflow object and then select Load IdS-J Configuration to load the workflow into the Java-based Server. The Reset Account Passwords workflow searches for accounts according to the configured search settings. Depending on the account type, the workflow performs these actions: For a personal account, it reads the password from the user. The password reset flag is set accordingly to the user’s password reset flag. For a privileged account, it generates a new password and sets it at the account. The password reset flag is set to true. The workflow generates a password change event that is to be processed by the corresponding setPassword workflow. . For the list of identifier attributes contained in the password change event and used by the setPassword workflow to resolve placeholders for the notification messages see the description in the \"Account Password Manager Workflow\" section above. For more information on personal and privileged accounts, see the DirX Identity Provisioning Administration Guide. The Reset Password If Displayed workflow resets passwords of privileged DirX Identity accounts. This workflow can be used if the password of a privileged account has been read and must be changed within a given time frame (for example, within 24 hours). Figure 14. Account Password Management: Reset Password If Displayed Workflow The Reset Password If Displayed workflow only runs scheduled. Alternatively, it can be started directly using the Run Workflow menu operation in the DirX Identity Manager. It searches for (privileged) accounts according to the configured search settings where the password has been displayed before the last n hours (see the option Hours before Reset). For each such account, it generates a new password. If the account is privileged, it stores the password at the account. It then triggers the password change (setPassword) workflow that is responsible for this target system. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). The workflow wizard guides you through all the required configuration steps. It displays the following steps: Template Select the Reset Password If Displayed workflow General Info Set the workflow name (Name field). Set the Is Active flag. Adapt the workflow timeout (Timeout field). Join Activity General Info Assign the resource family, if necessary (Resource family field). Adapt the Error Handling parameters, if necessary (Timeout, Retry Limit, Wait before Retry fields). Join Activity Search Parameters / Days before Reset Adapt the parameters for retrieving the privileged accounts (Search Base, Scope, Filter). Adapt the Hours before Reset parameter. This parameter defines the minimum time in hours that must have passed before the password is reset. The time at which the password was read is stored in the attribute dxrPwdDisplayTime. A parameter value 0 implies that all accounts are searched where the attribute dxrPwdDisplayTime is set. A value > 0 defines the number of hours that must have passed from now so that the account will be part of the search result. Set Workflow Name Set the workflow name, if not yet done in the General Info step (Name field). Once the workflow has been created successfully, select Connectivity → Expert View and then select the copied workflow object. Right-click the workflow object and then select Load IdS-J Configuration to load the workflow into the Java-based Server. The Reset Password If Displayed workflow searches for (privileged) accounts according to the configured search settings whose password was displayed before the last n hours. For each account in the search result, it obtains the appropriate password policy and then generates a new password that complies with the password policy. The password policy is retrieved as follows: If the account has set the attribute dxrPwdPolicyLink, then that policy is used. Otherwise it looks for the target system’s password policy; that is, the password policy assigned in the target system’s attribute dxrPwdPolicyLink. If the target system has no password policy assigned and the account has an associated user, it takes the password policy referenced from the user. If it does not find any password policy, it takes the default password policy of the domain. If there is no default policy, it generates an error. If the account is privileged, the workflow stores the new password at the account. The workflow generates a password change event that is to be processed by the corresponding setPassword workflow. Note that the setPassword workflow is started so that it does not send e-mails after successful reset of the password in the connected system. For more information on personal and privileged accounts, see the DirX Identity Provisioning Administration Guide. The User Password Event Manager workflow is part of the password provisioning scenario. For more information about the complete scenario, see the chapter \"Managing Passwords\" in the DirX Identity Connectivity Administration Guide. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then adjust the settings in the following tabs: General tab: Enter a proper resource family into Resource Family. It is a good idea to have a separate resource family for this type of workflow to ensure that the corresponding threads do not compete with threads performing other workflows. In the Error Handling section, specify the timeout for the activity, the retry limit and the waiting time between retries. Controller tab: Select the join engine type UserPasswordEventManagerController. It automatically determines the proper class name. If you want a user hook to be called during event processing, enter its full class name into Userhook Class Name. Make sure the library (jar file) containing your classes and all others on which they depend are deployed in the following folder beneath the installation: install_path/ids-j-domain-Sn/confdb/common/lib For information on how to write a user hook, see the DirX Identity Customization Guide. Select the notify part of the join activity and then adjust the settings in the following tabs: Notification tab: Define the mail to be sent on common user password changes. Notification on Reset tab: Define the mail to be sent on reset of a user password. Recipients tab: Define recipients of the notifications for password change and reset operations. In the General tab of the workflow: Set the Active flag of the workflow. Right-click the workflow object and then select Load IdS-J Configuration to load the workflow into the Java-based Server. The User Password Expiration Notification workflow is running in the Java-based Server and has replaced the older PwExpirationNotification workflow running in the C++-based Server. It finds users whose passwords are about to expire and informs the users about it by sending a notification mail. Unlike the old workflow, which used the MailConnector, the new one sends the notifications over the notify port using the NotifyChannelConnector as it is done for almost all other realtime workflows. More information about the notify port functionality can be found in the \"Context Sensitive Help\" in the DirX Identity Connectivity Administration Guide. To run the User Password Expiration Notification workflow successfully you must perform these steps: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then select the Controller tab. Adjust the settings in this tab as follows: Set the Number of Notifications to the desired value. Do not change the selected Join Engine controller PwdUserExpireController unless you have changed the component description PwdUserExpireController.xml of that controller under Expert View → Configuration → GUI → system → componentDescriptions to adjust for example the initial content for the controller’s properties. Those changes would become active then for every newly created workflow. Right-click the join activity and then select Edit Content if you want to adjust the following properties of the PwdUserExpireController’s controller section: searchBase - set to *cn=Users,cn=*domain by default, where domain automatically resolves to the domain to which your workflow was copied. Must not be changed usually. domain - set by default to the domain to which your workflow was copied. It is used for searching the password policies and should not be changed. userAttrs - the multi value property contains the list of all attributes either the PwdUserExpireController needs to calculate the password expiration date, which are dxrPwdChangedTime and dxrPwdExpiryNotified, or those to be used in ${IDATTR()} expressions in the mail parameters of the notify port, for example, in the mail body or mail subject. The attributes configured by default are sn, givenName, mail. If you want to use more attributes, you can extend this multi-value property. There are two pseudo attributes (not in LDAP) that the PwdUserExpireController automatically adds to the userAttrs list which can also be used in the IDATTR expressions of the mail parameters: daysToExpire - the number of days after which the user’s password will expire. expirationDate - the expiration date of the user’s password. Beneath the join activity, select the notify port, then select the Notification tab and adjust the mail parameters to your needs. The ${IDATTR()} expressions can be used for any attributes, that are contained in userAttrs. Set the Active flag of the workflow. Right-click the workflow object and select Load IdS-J Configuration to load the workflow into the Java-based Server. The workflow only runs scheduled and searches for users under the configured search base whose passwords are about to expire and notifies the affected users about it. Password expiration for users depends on the assigned user password policy and on a set of attributes at the policy and the user. The password policy is assigned via the password policy link (attribute dxrPwdPolicyLink). If no password policy is assigned, the default password policy is used. The expiration calculation depends on the following attributes: dxrPwdMaxAge (Maximum age) - at the password policy. It defines the maximum allowed age of the password. dxrPwdExpireWarning (Expiration Warning Time) - at the password policy. It defines the time at which to warn about a pending password expiration. dxrPwdChangedTime (Password Changed Time) - at the user entry. It defines the last time the password was changed. If the current date is greater than (dxrPwdChangedTime+dxrPwdMaxAge-dxrPwdExpireWarning), the workflow sends a notification e-mail. After sending the e-mail, the dxrPwdExpiryNotified (Password Expiration Notified) attribute of the user entry is incremented. If the configured Number of Notifications is reached no more mails are sent on subsequent workflow runs. When the user changes the password or an administrator resets the password with Web Center the dxrPwdExpiryNotified attribute is reset to 0 again. You can transfer data between Identity Store instances with several methods. For an overview see the chapter \"Transporting Data\" in the chapter \"Using Utilities\" of the DirX Identity User Interfaces Guide. This section describes the available transport workflow samples. You can transport data between Connectivity and Provisioning domains. Because this is slightly different, we provide four sample workflows that you can use to set up your own procedures: Export Connectivity Collections - shows how to export data from a Connectivity configuration domain. Import Connectivity Collections - shows how to import data into a Connectivity configuration domain. Export Provisioning Collections - shows how to export data from a Provisioning configuration domain. Import Provisioning Collections - shows how to import data into a Provisioning configuration domain. This sample workflow exports by default Java-based LDAP workflows based on a collection rule. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Make sure your scenario includes an existing ConfDB connected directory from where you want to export. Your scenario should have two instances of this connected directory with an intermediate workflow line between them. Right-click the workflow line and then select New to copy the workflow Export Connectivity Collections. The first tab asks for a new workflow name. Enter your desired name. In the General Workflow Info tab, check the Timeout parameter if appropriate and activate the workflow. In the Connection tab: Open Bind profile and check the bind profile parameters. Open Connected directory and follow the link to Service. Check for correct parameters. In the Export Definitions tab Define either a search in the Filter area to retrieve a set of Connectivity collections to export (you need not define the object class dxmIDMWorkflow, define only additional criteria) or select a list of Connectivity collections in the Collections area. Note that you can only use one of these options. Determine whether to create standard LDIF format with Base64 content or use the default readable format. Because readable format works best for configuration management systems and data that must be changed during import transport workflows, we recommend that you keep the default (no standard LDIF format). If you want to generate data for a configuration management system, restrict the generated line length. Check the configuration management documentation. For ClearCase, we recommend a line length of 2000. Click Finish to store your new workflow. Now you can run the workflow either manually or via a schedule. This sample workflow imports by default the previously exported set of Java-based LDAP workflows (see the Export Connectivity Collections workflow). To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Make sure your scenario includes an existing ConfDB connected directory from where you want to export. Your scenario should have two instances of this connected directory with an intermediate workflow line between them. Right-click the workflow line and then select New to copy the workflow Import Connectivity Collections. The first tab asks for a new workflow name. Enter your desired name. In the General Workflow Info tab, check the Timeout parameter if appropriate and activate the workflow. In the Connection tab: Open Bind profile and check the bind profile parameters for your target connected directory. Open Connected directory and follow the link to Service. Check for correct parameters. In the Deletion tab: Enable the Is Active flag if you intend to delete a set of entries before the import operation. In the Collection area, list all collection definitions (its DNs) that are to be used to delete the entries. In the Import Definitions tab: In the Import area, select all files you want to import. By default, the files are type LDIF. In the SPML area, you can select SPML format and you can select that the SPML file is to be validated before the import. Set the required options in the LDIF area; for example, an input filter that retrieves only specific object types from your files. You can use the dryrun option of the Simulation Mode for a dry run. Use the log file to check the effects. Click Finish to store your new workflow. Import workflows help to filter and adapt the data. To control the mappings, perform these steps: Click the Expert view and locate your workflow in your workflow folder. Open this entry and then open the perform activity. All mappings are located under this entry. Either change one of the existing mappings or create or delete mappings. The sample workflow sets all imported workflows to active and changes the cluster and resource values (as an example). Now you can run the workflow either manually or via a schedule. This sample workflow exports by default the complete privilege tree based on a collection rule. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Make sure your scenario includes an existing Identity Store connected directory from where you want to export. Your scenario should have two instances of this connected directory with an intermediate workflow line between them. Right-click the workflow line and then select New to copy the workflow Export Provisioning Collections. The first tab asks for a new workflow name. Enter your desired name. In the General Workflow Info tab, check the Timeout parameter if appropriate and activate the workflow. In the Connection tab: Open Bind profile and check the bind profile parameters. Open Connected directory and follow the link to Service. Check for correct parameters. In the Export Definitions tab: Define either a search in the Filter area to retrieve a set of Connectivity collections to export (you need not define the object class dxmIDMWorkflow, define only additional criteria) or select a list of Connectivity collections in the Collections area. Note that you can only use one of these options. To get the DNs of the collection objects, right-click the object in the Provisioning view and then select Goto DataView to retrieve the DN of the object. Determine whether to create standard LDIF format with Base64 content or use the default readable format. Because readable format works best for configuration management systems and data that needs to be adapted during import transport workflows, we recommend that you keep the default (no standard LDIF format). If you want to generate data for a configuration management system, restrict the generated line length. Check the configuration management documentation. For ClearCase, we recommend a line length of 2000. Click Finish to store your new workflow. Now you can execute the workflow either manually or via a schedule. This sample workflow imports by default the previously exported complete privilege tree (see the Export Provisioning Collections workflow). To configure the workflow, perform these steps: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Make sure your scenario includes an existing Identity Store connected directory from where you want to export. Your scenario should have two instances of this connected directory with an intermediate workflow line between them. Right-click the workflow line and then select New to copy the workflow Import Provisioning Collections. The first tab asks for a new workflow name. Enter your desired name. In the General Workflow Info tab, check the Timeout parameter if appropriate and activate the workflow. In the Connection tab: Open Bind profile and check the bind profile parameters for your target connected directory. Open Connected directory and follow the link to Service. Check for correct parameters. In the Deletion tab: Enable the Is Active flag if you intend to delete a set of entries before the import operation. List in the Collection area all collection definitions (it’s DNs) that shall be used to delete the entries. In the Import Definitions tab: In the Import area, select all files you want to import. By default, the files are type LDIF. In the SPML area, you can select SPML format and you can select that the SPML file is to be validated before the import. Set the required options in the LDIF area; for example, an input filter that retrieves only specific object types from your files. You can use the dryrun option of the Simulation Mode for a dry run. Use the log file to check the effects. Set the correct Domain Mappings. The default workflow changes all occurrences from \"My-Company\" to \"Customer Domain\". If you have data from different domains, you can define multiple mappings to your target domain. Click Finish to store your new workflow. Import workflows help to filter and adapt the data. To control the mappings, perform these steps: Click the Expert view and locate your workflow in your workflow folder. Open this entry and then open the perform activity. All mappings are located under this entry. Either change one of the existing mappings or create or delete mappings. The sample workflow deletes all dxrGroupMember attribute values (we use the wildcard dxrGroupMember* here). Only the structure is imported, not the specific group members because these are different in your target domain. Now you can run the workflow either manually or via a schedule. The Joint Backup workflow performs a synchronized backup of the Java-based Server’s repository and the LDAP connectivity and provisioning data store. It can also transfer the generated files to a target backup system via the Java-based Server (not currently supported) or via your own user hook class. To transfer all generated backup files to the destination system, you can: Manually transfer the generated files. With this method, files are not automatically cleaned up. Let the IdS-J service transfer the generated files. To use this method, the IdS-J service must have the rights to access all files and the target path. If the system landscape is distributed, the IdS-J service needs to run under an appropriate account with access rights to network shares. With this method, created files are cleaned up if the file transfer fails for any reason. Implement your own Java user class to transfer the files. This method is currently not supported. Contact technical support for more information. Remote LDAP backup has the following constraint: The remote backup of an LDAP data store is performed via an LDAP extended operation. Only DirX Directory V8.1A or newer supports this operation. The DNs of users that are allowed to do a remote backup are maintained in the ldapConfiguration subentry in the attribute ldapExtOpAdmins. See the section \"LDAP Extended Operations Admins\" in the DirX Directory Administration Reference for details. On Windows, you must install gzip 1.3.12 or newer. A suitable gzip is available on http://www.gnu.org. gzip.exe must be found via the PATH environment variable. To configure the workflow: Activate the backup in the Java-based server. (See the section \"Java-based Server - Repository\" in the appendix \"Context Sensitive Help\" in the DirX Identity Connectivity Administration Guide for details.) Administer the LDAP servers: Enter the DNs of the Connectivity Domain Administrator used by IdS-J (cn=DomainAdmin,cn=*your_domain,dxmC=Users,dxmC=DirXmetahub*) and, if necessary, of the Provisioning Domain Administrator used by the IdS-J *(cn=DomainAdmin, cn=*your_domain) in the multi-value attribute ldapExtOpAdmins of the ldapConfiguration subentry of the appropriate DirX LDAP Server. In the Controller tab of the perform activity, ensure that the fully-qualified pathname of the controller is correct: com.siemens.idm.jobs.Backup. In the Backup Parameters tab of the perform activity you must set the folders where to store the backups and indicate whether this folder is located on a Windows system. Ignore the settings for the message server and leave them empty. Note: The location of the Java-based Server’s backup file is configured with the server’s configuration. In the field Connectivity Configuration / Backup Path, specify the fully-qualified pathname of an existing folder for the backup location of the DirX Server that hosts the Connectivity data store. Note that the pathname must not be a part of the installation tree of the DirX Server. This is a mandatory field. Check On Windows System if the DirX Server runs on Windows. If the Provisioning part is hosted on a different LDAP server, specify the fully-qualified pathname of an existing folder for the backup location in the field Provisioning Configuration / Backup Path. See also the notes above. Check On Windows System if the DirX Server runs on Windows. Create a schedule for the workflow. (See the section \"Schedule\" in the appendix \"Context Sensitive Help\" in the DirX Identity Connectivity Administration Guide for details.) If you are letting the IdS-J service transfer the generated files, provide the following information: In the field Target Backup System Path of the Post Operation tab, specify the fully-qualified pathname of an existing folder for the transfer location. On Windows, you can use a shared network drive, but then the IdS-J service must run under a different account from the system account and you must use the UNC syntax for the transfer folder. Check On Windows System if the transfer location is hosted on Windows. If you implemented your own Java user class to transfer the generated files, provide the following information: In Userhook Class Name, specify the name of your own class. Note: This method is not currently supported. Contact technical support for more information. Set the Active flag of the workflow and perform Load IdS-J Configuration from the context menu of the workflow object to load the workflow into the Java-based Server. The Java-based consistency management workflows include: The Check Consistency workflow The Mark Affected Users workflow The User Resolution Workflow These workflows are described in the DirX Identity Provisioning Administration Guide in the section \"Managing Consistency\" in the chapter \"Managing the Provisioning System\". Compared to the Tcl-based maintenance workflows, the Java-based consistency management workflows allow for: Subsetting of objects for deletion and particularly consistency checks. Separate user resolution workflows for clear user subsets. The Java-based and Tcl-based consistency maintenance workflows use common storage mechanisms. For optimization information, see the section \"Using the Maintenance Workflows\" → \"Understanding the Tcl-based Maintenance Workflows\" → \"Consistency Check Workflow\" → \"Consistency Check Workflow Optimization\". The Java-based consistency management workflow Check Consistency applies configured consistency rules and performs basic hard-coded consistency checks. Compared to the Tcl-based Consistency Check workflow: The Java-based workflow is a combination of a policy execution workflow handling consistency policies and the Tcl consistencyCheck workflow. The workflow performs no user resolution. You can select to run only part of the checks this workflow performs. You can select to run the checks on a subset of objects. For more information about this workflow, see the section \"Consistency Check and Consistency Rules\" in the DirX Identity Provisioning Administration Guide. To configure the workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then select the Check Consistency Attributes tab to modify the configuration. See the context-sensitive help for details about configuration parameters. Right-click the workflow object and then select Load IdS-J Configuration to load the workflow into the Java-based Server. Because the workflow runs in the Java-based Server, you can configure tracing via Identity WebAdmin. The following packages may be involved: com.siemens.idm.jobs.consistencyCheck siemens.dxr.agents siemens.dxm.ruleprocessing.rules The following default values are used for empty attributes in the Check Consistency Attributes tab: LDAP Page Size - 50 Batch Accumulator Size - 500 Cache MRU Size - 10000 Check Users Search Base - cn=users,cn=my-company Check Users Filter - (objectClass=dxrUser) Search Base for Roles - cn=RoleCatalogue,cn=my-company Filter for Roles - (objectClass=dxrRole) Search Base for Permissions - cn=Permissions,cn=my-company Filter for Permissions - (objectClass=dxrPermission) Search Base for Target Systems - cn=TargetSystems,cn=my-company Filter for Target Systems - (objectClass=dxrTargetSystem) Apply Consistency Rules Search Base - no default Apply Consistency Rules Filter - (objectClass=dxrConsistencyRule) Apply Consistency Rules sort attribute - cn Apply Consistency Rules sort ascending - true Apply Consistency Rules LDAP Page Size - 300 Apply Consistency Rules MRU Size - 500 Check Consistency workflow operation depends on the selections configured in the Consistency Check Workflow Attributes tab (visible in the workflow’s join activity). If Check for Privileges To Be Deleted is selected, the workflow: Searches for roles, permissions, and groups in the state TBDEL. For each privilege in the state TBDEL, the workflow: Removes the incoming assignments to users and/or senior privileges and then sets the To Be Analyzed (TBA) flag for the affected objects. Deletes roles/permissions or sets the state to DELETED if history is configured. Sets the state of groups to DELETED. If Check Users is selected, the workflow performs the following steps for users that match the given search base (cn=users,cn=my-company if empty) and filter ((objectClass=dxrUser) if empty): Searches all privilege assignments with relevant start or end dates. The exact filter is: (&(|(objectClass=dxrUserToRole)(objectClass=dxrUserToGroup)(objectClass=dxrUserToPermission))(|(dxrEndDate=*)(dxrStartDate=*))) Deletes outdated start dates, removes assignments with outdated end dates, and marks this user for privilege resolution. Next, the workflow checks the consistency of the matching users. It: Deletes users in the state TBDEL with an expired DeleteDate. Sets the DeleteDate for users in the state TBDEL that do not yet have a DeleteDate set. Sets as the StartDate the current date for users in state NEW that do not yet have a StartDate set. Checks whether the various date fields of the user are consistent with the user state. If not, the user is flagged with TBA for a succeeding privilege resolution. Checks whether the various date fields of the user are consistent, which means that the sequence of the date fields must be StartDate, DisableStartDate, DisableEndDate, EndDate, DeleteDate. Checks for broken references of privilege assignments. Checks for the correct user state and then migrates the old state DELETED to TBDEL. Flags users with TBA if the ErrorExpirationDate is reached. If Check Roles/Permissions is selected, the workflow performs the following steps for objects that match the specified search base and filter: Analyzes the role structures: Works on all matching roles. Checks whether the role is valid, that means it must have a permission or junior role assigned. Checks for broken references to junior roles and assigned permissions. Analyzes the permission structures: Works on all matching permissions. Checks whether the permission is valid, that means it must have a group assigned. Checks for broken references to assigned groups. Checks whether the permission is assigned to users if it is not flagged for user assignment. Checks for correct permission parameters. If Check Accounts/Groups is selected, the workflow performs the following steps for all accounts/groups of the target systems that match the specified search base and filter: Checks whether the Local Admin link of a target system is broken. Works on all matching target system accounts. Deletes all accounts that are marked with Managed in Target System Only that are in state Deleted in the target system. Checks whether the target system of this account is of the correct type and exists. Checks for multiple primary accounts for a user. Checks whether the User Link of the account is broken. Checks for correct account states. Deletes accounts that are in the state DELETED and whose EndDate is expired. Checks that the account is either marked Managed in Target System Only and has no user link assigned or that it is not marked Managed in Target System Only and has a user link assigned. When analyzing target system groups, the workflow: Works on all matching target system groups. Deletes all groups that are marked Managed in Target System Only that are in the state Deleted in the target system. Checks whether all permission parameter values (dxrRPValues) are consistent with the permission parameter definition at the domain root object. Checks for broken obligation links. Checks for broken group members. Checks whether the groups state has a correct value. Deletes groups in the states DELETED or DISABLED with expired EndDates. Updates the distribution list of a virtual group. If Apply Consistency Rules is selected, the workflow applies all consistency rules that match the specified search base and filter. Rule processing works in the Assign privilege only provisioning mode with Suppress Change Events set to true. This processing mode means that no user resolution is performed and no user change events are initiated. The Java-based consistency management workflow Mark Affected Users finds privileges with dxrTBA = true, finds the users that might be affected by a change and sets the flag dxrTBA = true for these users. The User Resolution workflow will then subsequently ensure their resolution. This functionality is the same as provided in the Consistency Check Tcl-based maintenance workflow. In the Mark Affected Users workflow, the functionality is separated into a single workflow and can be run more frequently. It is best to run it before the User Resolution workflow. For more information about this workflow, see the section \"Consistency Check and Consistency Rules\" in the DirX Identity Provisioning Administration Guide. To configure the Java-based Mark Affected Users workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then select the Optimization Attributes tab to modify the configuration. See the context-sensitive help for details about the configuration parameters provided in this tab. Right-click the workflow object and then select Load IdS-J Configuration to load the workflow into the Java-based Server. Because the workflow runs in the Java-based Server, you can configure tracing via Identity WebAdmin. The following packages may be involved: com.siemens.idm.jobs.consistencyCheck siemens.dxr.agents siemens.dxm.ruleprocessing.rules The following default values are used for empty attributes in the Optimization Attributes tab: LDAP Page Size - 50 Batch Accumulator Size - 500 Cache MRU Size - 10000 The Mark Affected Users workflow performs the following steps: Searches the entire user and privilege database. Sets the To Be Analyzed) (TBA) flag for all users that have a privilege assigned that is itself flagged with TBA. The workflow considers direct and indirect relationships (indirect relationships go via a role or permission). The Java-based consistency management workflow User Resolution performs the following tasks: Applies provisioning rules to users. Enables or removes user-privilege assignments where start or end dates are reached. Finds users where the state must be changed because one of the corresponding start or end dates has been changed. Triggers user-privilege resolution for all matching users by sending a message to the Resolution Adapter per user. Compared to its Tcl-based counterpart, the Java-based User Resolution workflow is a combination of a policy execution workflow handling Provisioning rules and parts of the Tcl PrivilegeResolution workflow. You can use configuration parameters to limit the set of users and rules to be evaluated. For more information about this workflow, see the section \"Consistency Check and Consistency Rules\" in the DirX Identity Provisioning Administration Guide. To configure the Java-based User Resolution workflow: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select Connectivity → Expert View and then select the copied workflow object. Select the join activity and then select the Resolution Attributes tab to modify the configuration. See the context-sensitive help for details about the configuration parameters provided in this tab. Right-click the workflow object and then select Load IdS-J Configuration to load the workflow into the Java-based Server. Because the workflow runs in the Java-based Server, you can configure tracing via Identity WebAdmin. The following packages may be involved: com.siemens.idm.jobs.consistencyCheck siemens.dxr.agents siemens.dxm.ruleprocessing.rules The following default values are used for empty attributes in the Resolution Attributes tab: Filter for users - (objectClass=dxrUser) LDAP Page Size for Provisioning Rules-300 Cache MRU Size for Provisioning Rules - 10000 Batch Accumulator Size for Provisioning Rules - 500 LDAP Page Size for User Resolution - 50 Cache MRU Size for User Resolution - 10000 Batch Accumulator Size for User Resolution- 500 To analyze users and assignments, the workflow performs the following actions for the given user filter and search base: Searches all privilege assignments with relevant start or end dates. The exact filter is: (&(|(objectClass=dxrUserToRole)(objectClass=dxrUserToGroup)(objectClass=dxrUserToPermission))(|(dxrEndDate<=today)(dxrStartDate<=today))) where today is replaced with the current date Deletes the start date or privilege assignment and marks this user for privilege resolution. Searches for matching users that must undergo a state transition: it searches for all matching users with an inconsistent state and dates and flags these users with TBA. The exact filter is: (&(objectClass=dxrUser)(|(&(dxrEndDate<=today)(|(dxrState=ENABLED)(dxrState=DISABLED)))(&(dxrStartDate<=today)(dxrState=NEW))(&(dxrDisableEndDate<=today)(dxrState=DISABLED))(&(dxrDisableStartDate<=today)(dxrState=ENABLED))(dxrDeleteDate<=today)(&(dxrState=TBDEL)(!(dxrEndDate<=today))))) Next, the workflow applies the selected Provisioning rules. The rules are implicitly combined with the given user filter and search base, which means that rules are only applied for the given subset of users. Finally, the workflow sends a message to the Resolution Adapter for all users that match the given search base and filter and are flagged with dxrTBA=true. A Tcl-based maintenance workflow typically runs scheduled and as a process in the C++-based Server (IdS-C). The pre-configured Tcl-based maintenance workflows include: CleanupObjects - a workflow that cleans up all deleted or outdated objects. If auditing is enabled, the objects are only cleaned if all audit trail records are removed. This workflow is a special configuration for the policy execution service. ConsistencyCheck (Java workflow) - a workflow that checks the Identity Store for consistency and performs role resolution. ExtractAuditTrail - a workflow that checks the Identity Store for audit trail records (auditing information), writes them to the audit trail database and cleans up the audit trail records in the Identity Store. FullSoDCheck - a workflow that checks the entire DirX Identity user database for SoD violations. InitializeReapproval - a workflow that checks that all user-to-privilege assignments from privileges with checked re-approval are flagged correctly. PwdExpirationNotification - a workflow that checks for passwords that are about to expire and warns the corresponding users to change them before the expiration date. This workflow has been replaced by the UserPasswordExpirationNotification workflow, which runs in the Java-based Server, but can still be used if the customer has already copied it to his scenario. PolicyExecution - a workflow that applies a set of rules to a set of provisioning objects in the Identity Store and can also perform privilege resolution. This workflow is part of the \"policy execution service\". PrivilegeResolution - a workflow that performs privilege resolution without checking the Identity Store for consistency. RunWorkflowExternally - a workflow that can start workflows in another Connectivity domain that is based on another Connectivity configuration database. StartReapprovalWorkflows - a workflow that checks for necessary re-approval. It starts the corresponding request workflows. Status Report Generation - a workflow that writes a report in XML or HTML format for objects of the Provisioning or Connectivity view group to a file. The Cleanup Objects workflow runs the policy execution service. By default, the workflow is configured for all consistency rules whose names start with \"cleanup\". The default rules are: cleanupDeletedObjects - removes all objects in state DELETED without history and whose endDate empty or passed. Note that User objects are not handled by this rule. The service agent deletes User objects that are in state TBDEL and whose endDate has passed. cleanupOutDatedDelegations - removes Delegations whose drxDeleteDate is reached. cleanupOutDatedRequWflowInstances - removes all request workflow instances whose dxmStatusExpirationTime has been reached. This workflow runs in the C++-based Server but does not run in conjunction with the meta controller and thus does not use Tcl code. To configure this workflow, run the workflow configuration wizard (option Configure in the context menu): In the Rule Search Parameters tab, you can change the cleanup rules to be executed. By default, the workflow uses three standard rules whose names start with \"cleanup\". In the User Search Parameters tab, you can set several parameters to optimize runs. See the section \"Policy Agent Optimization\" in the DirX Identity Provisioning Administration Guide. In the Tracing tab, set the tracing parameters. By default, the workflow reports errors and warnings. We recommend that you run this workflow once daily to remove all objects whose lifetime has expired. The Consistency Check workflow runs the service agent in checkConsistency mode. This section describes: How to configure the workflow The service agent configuration (*.ini) file How the workflow operates How to optimize the workflow This workflow runs in the C++-based Server but does not run in conjunction with the meta controller and thus does not use Tcl code. To configure this workflow, run the workflow configuration wizard (option Configure in the context menu): In the Consistency Check Parameters tab, set the Subject Filter. This setting allows you to define the number of users the service agent is to check. The default filter checks all users that are flagged with the dxrTBA flag (this flag indicates that the entry is \"to be analyzed\"). In the Consistency Check Limits tab, you can set several parameters that you can use to optimize runs. See the section \"Service Agent Configuration File\" for a detailed explanation. In the Tracing tab, set the tracing parameters. By default, only errors are reported. For a detailed description of the consistency check procedure, see the section \"Consistency Check Workflow Operation\". The complete list of INI file parameters is shown in the next section. The service agent initialization file (*.ini) file is a Java property file. Each property is described by property name=property value. Lines can be commented with a leading #. The following table describes the supported properties. Table 1. DirX Identity Provisioning Service Agent INI File Section: Key: Description: Tracing trace.filename Name of the trace file. All messages are written into one file. It is located in the working directory of the workflow activity. trace.level Trace level values are: 0 - no trace, no errors 1 - error (is default) 2-4: - warnings 5-8: - flow trace 9: - debug Higher levels include the content of lower levels. This means: if you specify 5, errors and warnings are also written. trace.timestamp.format When defined, precedes each line in the trace file with a timestamp. For details about the format specification, see below. Request Properties request Activity the agent is to perform: resolution - the agents evaluates many object types and resolves users and its privileges at the end. userResolution - the agent evaluates only users and their privileges. checkConsistency - the agent checks the consistency of the Identity Store (Provisioning Configuration) and performs a privilege resolution at the end. generateReport - the agent generates a report. report.name DN of report configuration object in Identity Store (Provisioning Configuration). report.filename Name of report output file (optional), overwrites name in report configuration object, if present. report.outputFormat Format of report output. Valid options are: XML - XML format for further processing HTML - HTML format ready to view with browsers report.sizelimit The maximum number of objects a report can retrieve. Connection properties domainRootDN Distinguished name of DirX Identity Provisioning domain. user.expert.filter The number of users to be checked or resolved. This parameter is not relevant for report mode. bindProfile.hostname Host name of DirX Identity Provisioning Configuration bindProfile.isSSL SSL switch: false - do not use SSL to connect to directory server (default) true - use SSL to connect to directory server bindProfile.securePort Port number (default 636) of DirX Identity Provisioning Configuration for SSL connections. bindProfile.port Port number (default 389) of DirX Identity Provisioning Configuration for non-SSL connections. bindProfile.user Distinguished name of DirX Identity Provisioning Configuration domain administrator. bindProfile.pwd Password of DirX Identity Provisioning Configuration domain administrator. bindProfile.authenticationType Authentication type. Valid options are: SIMPLE - simple authentication (user and password) Performance properties batch.accumulator.size Number of objects (default 500) to be read in advance before role resolution processing continues. ldap.pagesize Page size (default 300) in paged search operations. cache.update Cache update policy: always - Always update cached entry. The cached entry will be updated every time it is requested. never - Never update cached entry (default). An entry is read only once. timestamp Update cached entry if the entry in the directory server is newer. cache.mru.size Number of objects (default 10,000) to be cached Other Properties suppressChangeEvents If set to true, no change events are fired for the resolved users. To specify the time format use a time pattern string. In this pattern, all ASCII letters are reserved as pattern letters, which are defined as the following: Symbol Meaning Presentation Example G era designator (Text) AD y year (Number) 1996 M month in year (Text & Number) July & 07 d day in month (Number) 10 h hour in am/pm (1~12) 12 H hour in day (0~23) 0 m minute in hour (Number) 30 s second in minute (Number) 55 S millisecond (Number) 978 E day in week (Text) Tuesday D day in year (Number) 189 F day of week in month (Number) 2 (2nd Wed in July) w week in year (Number) 27 W week in month (Number) 2 a am/pm marker (Text) PM k hour in day (1~24) 24 K hour in am/pm (0~11) 0 z time zone (Text) Pacific Standard Time ' escape for text (Delimiter) '' single quote (Literal) ' The definition trace.timestamp.format=EEE MMM d HH:mm:ss.SSS yyyy: results in Wed Mar 3 11:30:21.323 2004: …​ (rest of trace file line) Running the DirX Identity service agent in consistency mode consists of these steps: Analyze Privileges toBeDeleted This module: Searches for roles, permissions, and groups in state TBDEL For each privilege in state TBDEL it Removes the incoming assignments to users and / or senior privileges and sets the TBA (to-be-analyzed) flag for the affected objects. Deletes roles / permissions or sets its state to DELETED if history is configured. Sets the state of groups to DELETED. Mark Affected Users This module: Searches the whole user and privilege database. Sets the TBA (to-be-analyzed) flag for all users that have a privilege assigned that is itself flagged with TBA. Considers direct and indirect relationships (indirect relationships go via a role or permission). Analyze Users and Assignments This module analyzes assignments: Searches all privilege assignments with relevant start or end dates. The exact filter is: (&(|(objectClass=dxrUserToRole)(objectClass=dxrUserToGroup)(objectClass=dxrUserToPermission)) (|(dxrEndDate=)(dxrStartDate=))) Deletes out-dated start dates, removes assignments with out-dated end dates, and marks this user for privilege resolution. Then it checks the consistency of the whole user database with the filter: (objectClass=dxrUser) Deletes users in state TBDEL with expired DeleteDate. Sets the DeleteDate for users in state TBDEL that do not yet have a DeleteDate set. Sets as StartDate the current date for users in state NEW that do not yet have a StartDate set. Checks whether the various date fields of the user are consistent with the user state. If not, the user is flagged with TBA for a succeeding privilege resolution. Checks whether the various date fields of the user are consistent, which means the sequence of the date fields must be StartDate, DisableStartDate, DisableEndDate, EndDate, DeleteDate. Checks for broken references of privilege assignments. Checks for correct user state and migrates the old state DELETED to TBDEL. Flags users with TBA if the ErrorExpirationDate is reached. During the next privilege resolution, it stores the assigned groups even if the user is in error. Analyze the Privilege Structure This module: Analyzes the role structures: Works on all roles within the database (filter: (objectClass=dxrRole)). Checks whether the role is valid, that means it must have a permission or junior role assigned. Checks for broken references to junior roles and assigned permissions. Analyzes the permission structures: Works on all permissions within the database (filter: (objectClass=dxrPermission)). Checks whether the permission is valid, that means it must have a group assigned. Checks for broken references to assigned groups. Checks whether the permission is assigned to users if it is not flagged for user assignment. Checks for correct permission parameters. Analyze Target System Accounts This module: Checks whether the Local Admin link of a target system is broken. Works on all target system accounts within the database (filter: (objectClass=dxrTargetSystemAccount)). Deletes all accounts that are marked with Managed in Target System Only that are in state Deleted in the target system. Checks whether the target system of this account is of correct type and exists. Checks for multiple primary accounts for a user. Checks whether the User Link of the account is broken. Checks for correct account states. Deletes accounts that are in state DELETED and whose EndDate is expired. Checks that the account is either marked for Managed in Target System Only and has no user link assigned or that it is not marked Managed in Target System Only and has a user link assigned. Analyze Target System Groups Works on all target system groups within the database (filter: (objectClass=dxrTargetSystemGroup)). Deletes all groups that are marked for Managed in Target System Only that are in state Deleted in the target system. Checks whether all permission parameter values (dxrRPValues) are consistent with the permission parameter definition at the domain root object. Checks for broken obligation links. Checks for broken group members. Checks whether the groups state has a correct value. Deletes groups in state DELETED or DISABLED with expired EndDate. Updates the distribution list of a virtual group. Analyze User Changes Sends a resolve message to the Resolution Adapter for all users that match the expert filter of this consistency run. A set of parameters exist that optimize the role resolution in batch mode (as executed in the Service Agent or in the Policy Agent). Read this section carefully and perform the proposed actions. The names in brackets are the parameter names in the agents INI file. Object Accumulator Size (batch.accumulator.size; default=500) This parameter controls the algorithm that calculates the affected users from the privileges to be analyzed. Increasing this parameter reduces the number of LDAP searches but increases the length of the search filters. We recommend keeping the default value as long as the searches are successful. You’ll need to reduce this parameter if the search for affected users results in an \"Unwilling to perform\" error returned by the LDAP Server. Object LDAP Page Size (ldap.pagesize; default=50) The effects of the LDAP page size parameter include: Increasing the LDAP page size reduces the number of LDAP searches. The reduction of searches reduces the client-server communication overhead and thus improves performance. Increasing the LDAP page size leads to increased heap space. Furthermore, the time from one paged search to the next increases, since more users must be resolved until the next page is requested. Thus, it is more likely that a paging policy timeout at the LDAP server can occur. This timeout results in a fatal error in the ServiceAgent and processing is stopped. The optimum LDAP page size depends on the customer’s data profile (privilege structure, number of accounts/groups assigned to a user, number of target systems). Thus, it should be optimized at the customer’s site: Check the service agent runtime with LDAP page size of 50, 100, 150, 200, 250, 300. Run the tests with full logging and check the time between subsequent paged user searches. Ensure that the paging policy timeout does not abort the agent run. You may increase the paging policy timeout configured at the server or reduce the LDAP page size if the paging policy timeout is hit. Object Cache MRU Size (cache.mru.size; default=10000) The objects being read via LDAP are stored in a cache in the storage layer. The Object Cache MRU Size defines the size of the most recently used cache, holding the objects that are not affected by the garbage collector. If the Object Cache MRU Size is too low, the objects are removed by the garbage collector and are restored from LDAP when they are accessed the next time. This slows down the agent considerably. A debug message \"gc: recovering properties for dn\" is issued in this case. Periodically run the ServiceAgent with full logging and check for that message. This task must be done from time to time since additional privileges / target systems may require a change in this setting. In case the garbage collector message often occurs, increase the Object Cache MRU Size (cache.mru.size) to a higher value, until the message disappears. An increase of the Object Cache MRU Size may require an increase of the maximum heap space of the Service Agent, since more objects are held in the cache that are not removed by the garbage collector. Further Optimization In a scenario with a target system holding a small number of groups that keep almost every user as a member (the account memberships are stored with the groups) the XXLGroups flag should be checked at the target system’s advanced tab. Checking this flag will result in caching all the groups of this target system during role resolution. If you have hundreds of groups in a TS, the XXLGroups flag must not be checked since the initial load of this large number of groups is time- and memory consuming then. The Extract Audit Trail workflow checks the Identity Store for audit trail records in the Provisioning view. It writes these records to the audit trail database (a file store) and performs a cleanup of the audit trail records in the Identity Store. You can define the objects to be audited via audit policies. See the section \"Managing the Audit Trail\" in the DirX Identity Provisioning Administration Guide. If you work with DirX Audit, you do not need to run this workflow. In this case, the LDAP binding component is used to extract the audit records. Read the following sections to learn more about how to configure the workflow. This workflow runs in the C++-based Identity Server but does not run in conjunction with the meta controller and thus does not use Tcl code. To configure this workflow, run the workflow configuration wizard (option Configure in the context menu): In the Export Properties tab, you can define the base objects at which to start the search, the subset and the filter. Modify the base object if you want to run several Extract Audit Trail workflows in parallel on different parts of the Identity Store. In the Import Properties tab, you can define the file path at which to write the extracted information.* Note*: It makes sense to place the audit trail database on a separate disk to prevent all other processes from stopping when this disk is full. In the Tracing tab, you can define the tracing parameters. By default, the workflow produces the history audit record format of version 8.0C and earlier. Beginning with 8.0C SP1, an extended history audit format is available. This format is used in conjunction with the DirX Audit product but you can also use it in your custom audit environment. To configure it, perform these steps: Select the job object of your Extract Audit Trail workflow. Select the Specific Attributes tab. Click Edit and set the parameter name to transformToPre80CSP0 and the value to false. Click Save. Now the workflow produces the new audit format. This workflow runs the policy execution service. By default, the workflow is configured for the following consistency rule: FullSoDCheck - processes all active SoD policies. For each policy, all users are checked. Found violations result in approval workflow start for all according privileges. This workflow runs in the C++-based Server but does not run in conjunction with the meta controller and thus does not use Tcl code. To configure this workflow, run the workflow configuration wizard (option Configure in the context menu): In the Rule Search Parameters tab, you can change the rule to be executed. By default, the standard FullSoDCheck rule is used. In the User Search Parameters tab, you can set several parameters to optimize runs. See the section \"Policy Agent Optimization\" in the DirX Identity Provisioning Administration Guide. In the Tracing tab, set the tracing parameters. By default, the workflow reports errors and warnings. We recommend that you run this workflow once a day to check for SoD violations. Be sure that your user database is prepared for SoD checks. If you are in doubt, run the MigrateUsersForSoD rule once. This workflow runs the policy execution service. By default, the workflow is configured for the following consistency rule: InitializePrivilegeForReapproval - this rule processes all privileges that require re-approval. Each assignment to such a privilege is initialized for re-approval, which sets their reapproval and end date or period attributes. This workflow runs in the C++-based Server but does not run in conjunction with the meta controller and thus does not use Tcl code. To configure this workflow, run the workflow configuration wizard (option Configure in the context menu): In the Rule Search Parameters tab, you can change the rule to be executed. By default, the standard InitializeReapproval rule is used. In the User Search Parameters tab, you can set several parameters to optimize runs. See the section \"Policy Agent Optimization\" in the DirX Identity Provisioning Administration Guide. In the Tracing tab, set the tracing parameters. By default, the workflow reports errors and warnings. We recommend that you run this workflow once a day to initialize re-approval. After running this workflow, you should run the Start Reapproval Workflow. The Password Expiration Notification workflow checks user entries for passwords that are about to expire and sends a notification (e-mail) to the affected users. The workflow: Sends a configurable number of notifications (the time between the notifications depends on the schedule frequency). Allows you to define e-mail format. This workflow runs in the C++-based Server but does not run in conjunction with the meta controller and thus does not use Tcl code. To complete the configuration for this workflow, you must adapt some values in the DirX Identity Connectivity configuration to your environment. Use the configuration wizard in the Identity Manager global view as follows: Double-click the connected directory icon Mail Server. In the wizard window, click the icon to the right of the Service field. Change the IP Address and Port fields to define the mail server. Click OK. In the wizard window, click Bind Profiles. In Bind Profiles, click Admin, and then click the button on the right to open the property window for this entry. Set the User and Password fields if your mail server requires authentication. Click OK and then click Finish. You can also set the notification parameters of the workflow: Right-click the workflow line between the connected directory icons Identity Store and Mail Server. In the pop-up menu, select the workflow PwExpirationNotification and then click Configure. Click MailConfiguration and/or MailContent. Adjust the values as required. Click Finish to close the wizard and save your changes. At last you must go to the Mail Server Connected Directory in the Expert View and either set the specific attribute mapmailaddress to a valid administrator mail address if you want that all mails about expired passwords are sent to that administrator or delete the preconfigured value “dummy” if you want the mails to be sent to each user’s mail address specified in the “to” field of the Mail Configuration tab of the PwExpirationNotification job. Now the workflow should run. You can assign to each user a password policy. The password policy is assigned via the password policy link (attribute dxrPwdPolicyLink). If no password policy is assigned, the default password policy is used. The expiration calculation depends on the following attributes: dxrPwdMaxAge (Maximum age) - at the password policy. It defines the maximum allowed age of the password. dxrPwdExpireWarning (Expiration Warning Time) - at the password policy. The time to warn before the password expires. dxrPwdChangedTime (Password Changed Time) - at the user entry. The last time the password was changed. If the current date is greater than (dxrPwdChangedTime+dxrPwdMaxAge-dxrPwdExpireWarning), the workflow generates a warning e-mail. After sending the warning, the dxrPwdExpiryNotified (Password Expiration Notified) attribute of the user entry is incremented. If the configured Number of Notifications is reached no more warnings are sent on subsequent workflow runs. If the user changes the password or an administrator resets the password with Web Center the dxrPwdExpiryNotified attribute is reset to 0 again. This workflow runs the policy execution service to assign and remove privileges automatically. By default, the workflow is configured for the following provisioning rules: cn=Role based scenario,cn=Rules,cn=Policies,cn=My-Company - the workflow executes all provisioning rules under this specified node. This workflow runs in the C++-based Server but does not run in conjunction with the meta controller and thus does not use Tcl code. To configure this workflow, run the workflow configuration wizard (option Configure in the context menu): In the Policy Agent Parameters tab, you can define whether the workflow runs in simulation mode (Simulate rules) or in real mode (Process rules). In simulation mode it only logs information and makes no changes in the Identity Store. Additionally you can define if, after an assignment, the user should be immediately resolved (Assign Privilege and Resolve). You should use this feature only when your Provisioning domain uses simple privilege structures and has a small Identity Store. The service assigns a privilege to a user and then resolves the user. Assignment of several privileges to the same user results in multiple resolutions of this user, which can result in low performance. To optimize performance, you can build a nested workflow that consists of a policy execution step and a privilege resolution step. If SoD is enabled at the domain object, the option Assign Privilege and Resolve is enforced because SoD works hierarchically and therefore a resolution is always necessary. If possible assign several privileges with one rule instead of assigning each privilege with a separate rule. The result is a faster running policy engine process. If Suppress Change Events is set to true no “User Change Events” are initiated. In the Rule Search Parameters tab, you can select the set of rules to be executed. In the User Search Parameters tab, you can set several parameters to optimize runs. See the section \"Policy Agent Optimization\" in the DirX Identity Provisioning Administration Guide. In the Tracing tab, set the tracing parameters. By default, the workflow reports errors and warnings. We recommend that you run this workflow once a day to check for SoD violations. For optimization or in case of specific errors read the section \"Consistency Check Workflow Optimization\". The Privilege Resolution workflow runs the service agent in resolution mode. The next sections describe: how to configure the workflow how the workflow operates how to optimize the workflow This workflow runs in the C++-based Server but does not run in conjunction with the meta controller and thus does not use Tcl code. To configure this workflow, run the workflow configuration wizard (option Configure in the context menu): In the Privilege Resolution Parameters tab, set the Subject Filter. This setting allows you to define the number of users the service agent is to check. The default filter checks all users that are flagged with the dxrTBA flag (this flag indicates that the entry is \"to be analyzed\"). In the Provisioning Resolution Limits tab, you can set several parameters that you can use to optimize runs. See the section \"Service Agent Configuration File\" for a detailed explanation. In the Tracing tab, set the tracing parameters. By default, only errors are reported. For a detailed description of the privilege resolution procedure, see the section \"Privilege Resolution Workflow Operation\". The complete list of INI file parameters is shown in the section \"Service Agent Configuration File\". How privilege resolution works regarding accounts and account-group-memberships and its related states is described in detail in the chapter \"Managing Provisioning → Managing States → How Privilege Resolution Works\" DirX Identity Provisioning Administration Guide. Running the DirX Identity service agent in user resolution mode consists of these steps: Analyze User Changes This module: Executes a privilege resolution on all users that match the expert filter of this run. Running the DirX Identity service agent in resolution mode consists of these steps: Analyze Privileges toBeDeleted This module: Searches for roles, permissions, and groups in state TBDEL. For each privilege in state TBDEL it Removes the incoming assignments to users and / or senior privileges and sets the TBA (to-be-analyzed) flag for the affected objects. Deletes roles / permissions or sets it state to DELETED if history is configured. Sets the state of groups to DELETED. Mark Affected Users This module: Searches the whole user and privilege database. Sets the TBA (to-be-analyzed) flag for all users that have a privilege assigned that is itself flagged with TBA. Considers direct and indirect relationships (indirect relationships go via an assignment object). Analyze Users and Assignments This module analyzes assignments: Searches all privilege assignments with relevant start or end dates. The exact filter is: (&(|(objectClass=dxrUserToRole)(objectClass=dxrUserToGroup)(objectClass=dxrUserToPermission))(|(dxrEndDate<=today)(dxrStartDate<=today))) where today is replaced with the current date Deletes the start date or privilege assignment and marks this user for privilege resolution. Then it searches for users that must undergo a state transition: Is searches for all users with inconsistent state and dates and flags these users with TBA. The exact filter is: (&(objectClass=dxrUser)(|(&(dxrEndDate<=today)(|(dxrState=ENABLED)(dxrState=DISABLED)))(&(dxrStartDate<=today)(dxrState=NEW))(&(dxrDisableEndDate<=today)(dxrState=DISABLED))(&(dxrDisableStartDate<=today)(dxrState=ENABLED))(dxrDeleteDate<=today)(&(dxrState=TBDEL)(!(dxrEndDate<=today))))) Analyze Target System Accounts This module: Deletes accounts that are in state DELETED and whose EndDate is expired. Analyze Target System Groups This module: Deletes groups in state DELETED or DISABLED with expired EndDate. Analyze User Changes This module: Executes a privilege resolution on all users that match the expert filter of this run. For optimization or in case of specific errors read the section \"Consistency Check Workflow Optimization\". Use the Run Workflow Externally workflow to start Tcl-based workflows in another Connectivity domain. This workflow allows you to control processes between independent DirX Identity Connectivity domains. Note: This workflow runs in the C++-based Server but does not run in conjunction with the meta controller and thus does not use Tcl code. To configure this workflow, run the workflow configuration wizard (option Configure in the context menu). In the runWf tab, define the following parameters: WorkflowName - defines the path of the workflow definition. For example, \"Default/Source Scheduled/LDIFfile/LDIFfile2Ident\" starts the LDIFfile2Ident workflow. Instantiator - defines the name of the foreign domain (or any other meaningful name) that is later visible in the status entry. MessageServer - selects your type of message server. In the Tracing tab, you can change the tracing parameters. This workflow runs the policy execution service. By default, the workflow is configured for the following consistency rule: StartWorkflowsForReapproval - this rule starts the request workflow that has been configured for the privilege that requires re-approval. This workflow runs in the C++-based Server but does not run in conjunction with the meta controller and thus does not use Tcl code. To configure this workflow, run the workflow configuration wizard (option Configure in the context menu): In the Rule Search Parameters tab, you can change the rule to be executed. By default, the standard StartWorkflowsForReapproval rule is used. In the User Search Parameters tab, you can set several parameters to optimize runs. See the section \"Policy Agent Optimization\" in the DirX Identity Provisioning Administration Guide. In the Tracing tab, set the tracing parameters. By default, the workflow reports errors and warnings. We recommend that you run this workflow once a day to run all necessary re-approval workflows. Before running this workflow, you should run the Initialize Reapproval Workflow. This workflow allows you to run reports by hand or automatically. DirX Identity provides a pre-configured status report workflow for both the Provisioning and the Connectivity views: ReportGeneration - this workflow is an example of a Provisioning status report that works on the users tree. The Status Report Generation workflow for the Provisioning view runs the service agent in the generateReports mode. Ident2Report - this workflow is an example of a Connectivity configuration status report. The Status Report Generation workflow for the Connectivity view runs a special report agent. The next sections describe how to: Configure the workflow for the Provisioning view Configure the workflow for the Connectivity view This workflow runs in the C++-based Server but does not run in conjunction with the meta controller and thus does not use Tcl code. To configure this workflow, run the workflow configuration wizard (option Configure in the context menu): In the Report Parameters tab, you can set the report definition path, the output format and the size limit. See the section \"Service Agent Configuration File\" for a detailed explanation. In the Report Output File Properties tab, set the file name to which the report is to be written. In the Tracing tab, set the tracing parameters. By default, only errors are reported. For a detailed description of the privilege resolution procedure, see the section \"Privilege Resolution Workflow Operation\". The complete list of INI file parameters is shown in the Consistency Check Workflow section. See the section \"Service Agent Configuration File\". To configure this workflow, run the workflow configuration wizard (option Configure in the context menu): In the Report Properties tab, you can set the search base, the report name and the output format. In the Tracing tab, set the tracing parameters. By default, no trace is performed.","title":"Using the Maintenance Workflows","component":"dirx-identity-docs","version":"9.0.0","name":"ch6_maintWFs","url":"/dirx-identity-docs/latest/appl-dev-guide/ch6_maintWFs.html","titles":[{"text":"Understanding the Java-based Maintenance Workflows","hash":"_understanding_java_based_maintenance_workflows","id":1},{"text":"Entry Change Workflows","hash":"_entry_change_workflows","id":2},{"text":"Accounts","hash":"_accounts","id":3},{"text":"Configuring the Event-based Maintenance Workflow for Accounts","hash":"_configuring_the_event_based_maintenance_workflow_for_accounts","id":4},{"text":"Event-based Maintenance Workflow Operation for Accounts","hash":"_event_based_maintenance_workflow_operation_for_accounts","id":5},{"text":"Organizations","hash":"_organizations","id":6},{"text":"Configuring the Event-based Maintenance Workflow for Organizations","hash":"_configuring_the_event_based_maintenance_workflow_for_organizations","id":7},{"text":"Event-based Maintenance Workflow Operation for Organizations","hash":"_event_based_maintenance_workflow_operation_for_organizations","id":8},{"text":"Organizational Units","hash":"_organizational_units","id":9},{"text":"Configuring the Event-based Maintenance Workflow for Organizational Units","hash":"_configuring_the_event_based_maintenance_workflow_for_organizational_units","id":10},{"text":"Event-based Maintenance Workflow Operation for Organizational Units","hash":"_event_based_maintenance_workflow_operation_for_organizational_units","id":11},{"text":"Context Objects","hash":"_context_objects","id":12},{"text":"Configuring the Event-based Maintenance Workflow for Context Objects","hash":"_configuring_the_event_based_maintenance_workflow_for_context_objects","id":13},{"text":"Event-based Maintenance Workflow Operation for Context Objects","hash":"_event_based_maintenance_workflow_operation_for_context_objects","id":14},{"text":"Location Objects","hash":"_location_objects","id":15},{"text":"Configuring the Event-based Maintenance Workflow for Location Objects","hash":"_configuring_the_event_based_maintenance_workflow_for_location_objects","id":16},{"text":"Event-based Maintenance Workflow Operation for Location Objects","hash":"_event_based_maintenance_workflow_operation_for_location_objects","id":17},{"text":"Cost Unit Objects","hash":"_cost_unit_objects","id":18},{"text":"Configuring the Event-based Maintenance Workflow for Cost Unit Objects","hash":"_configuring_the_event_based_maintenance_workflow_for_cost_unit_objects","id":19},{"text":"Event-based Maintenance Workflow Operation for Cost Unit Objects","hash":"_event_based_maintenance_workflow_operation_for_cost_unit_objects","id":20},{"text":"Project Objects","hash":"_project_objects","id":21},{"text":"Configuring the Event-based Maintenance Workflow for Project Objects","hash":"_configuring_the_event_based_maintenance_workflow_for_project_objects","id":22},{"text":"Event-based Maintenance Workflow Operation for Projects","hash":"_event_based_maintenance_workflow_operation_for_projects","id":23},{"text":"Users","hash":"_users","id":24},{"text":"Configuring the Event-based User Resolution Workflow","hash":"_configuring_the_event_based_user_resolution_workflow","id":25},{"text":"Event-based User Resolution Workflow Operation","hash":"_event_based_user_resolution_workflow_operation","id":26},{"text":"Personas","hash":"_personas","id":27},{"text":"Functional Users","hash":"_functional_users","id":28},{"text":"Generic Objects","hash":"_generic_objects","id":29},{"text":"Configuring the Generic Event-based Processing Workflow","hash":"_configuring_the_generic_event_based_processing_workflow","id":30},{"text":"Generic Event-based Processing Workflow Operation","hash":"_generic_event_based_processing_workflow_operation","id":31},{"text":"Process Tickets Internal Workflow","hash":"_process_tickets_internal_workflow","id":32},{"text":"Configuring the Process Tickets Internal Workflow","hash":"_configuring_the_process_tickets_internal_workflow","id":33},{"text":"Process Tickets Internal Workflow Operation","hash":"_process_tickets_internal_workflow_operation","id":34},{"text":"Account Password Manager Workflow","hash":"_account_password_manager_workflow","id":35},{"text":"Configuring the Account Password Manager Workflow","hash":"_configuring_the_account_password_manager_workflow","id":36},{"text":"Account Password Manager Workflow Operation","hash":"_account_password_manager_workflow_operation","id":37},{"text":"Reset Account Passwords Workflow","hash":"_reset_account_passwords_workflow","id":38},{"text":"Configuring the Reset Account Passwords Workflow","hash":"_configuring_the_reset_account_passwords_workflow","id":39},{"text":"Reset Account Passwords Workflow Operation","hash":"_reset_account_passwords_workflow_operation","id":40},{"text":"Reset Password If Displayed Workflow","hash":"_reset_password_if_displayed_workflow","id":41},{"text":"Configuring the Reset Password If Displayed Workflow","hash":"_configuring_the_reset_password_if_displayed_workflow","id":42},{"text":"Reset Password If Displayed Operation","hash":"_reset_password_if_displayed_operation","id":43},{"text":"User Password Event Manager Workflow","hash":"_user_password_event_manager_workflow","id":44},{"text":"Configuring the User Password Event Manager Workflow","hash":"_configuring_the_user_password_event_manager_workflow","id":45},{"text":"User Password Expiration Notification Workflow","hash":"_user_password_expiration_notification_workflow","id":46},{"text":"Configuring the User Password Expiration Notification Workflow","hash":"_configuring_the_user_password_expiration_notification_workflow","id":47},{"text":"User Password Expiration Notification Workflow Operation","hash":"_user_password_expiration_notification_workflow_operation","id":48},{"text":"Transport Workflows","hash":"_transport_workflows","id":49},{"text":"Export Connectivity Collections","hash":"_export_connectivity_collections","id":50},{"text":"Import Connectivity Collections","hash":"_import_connectivity_collections","id":51},{"text":"Export Provisioning Collections","hash":"_export_provisioning_collections","id":52},{"text":"Import Provisioning Collections","hash":"_import_provisioning_collections","id":53},{"text":"Joint Backup Workflow","hash":"_joint_backup_workflow","id":54},{"text":"Configuring the Joint Backup Workflow","hash":"_configuring_the_joint_backup_workflow","id":55},{"text":"Consistency Management Workflows","hash":"_consistency_management_workflows","id":56},{"text":"Check Consistency Workflow","hash":"_check_consistency_workflow","id":57},{"text":"Configuring the Check Consistency Workflow","hash":"_configuring_the_check_consistency_workflow","id":58},{"text":"Check Consistency Workflow Operation","hash":"_check_consistency_workflow_operation","id":59},{"text":"Mark Affected Users Workflow","hash":"_mark_affected_users_workflow","id":60},{"text":"Configuring the Mark Affected Users Workflow","hash":"_configuring_the_mark_affected_users_workflow","id":61},{"text":"Mark Affected Users Workflow Operation","hash":"_mark_affected_users_workflow_operation","id":62},{"text":"User Resolution Workflow","hash":"_user_resolution_workflow","id":63},{"text":"Configuring the User Resolution Workflow","hash":"_configuring_the_user_resolution_workflow","id":64},{"text":"User Resolution Workflow Operation","hash":"_user_resolution_workflow_operation","id":65},{"text":"Understanding the Tcl-based Maintenance Workflows","hash":"_understanding_tcl_based_maintenance_workflows","id":66},{"text":"Cleanup Objects Workflow","hash":"_cleanup_objects_workflow","id":67},{"text":"Configuring the Cleanup Objects Workflow","hash":"_configuring_the_cleanup_objects_workflow","id":68},{"text":"Consistency Check Workflow","hash":"_consistency_check_workflow","id":69},{"text":"Configuring the Consistency Check Workflow","hash":"_configuring_the_consistency_check_workflow","id":70},{"text":"Service Agent Configuration File","hash":"_service_agent_configuration_file","id":71},{"text":"Time Format Syntax","hash":"_time_format_syntax","id":72},{"text":"Consistency Check Workflow Operation","hash":"_consistency_check_workflow_operation","id":73},{"text":"Consistency Check Workflow Optimization","hash":"_consistency_check_workflow_optimization","id":74},{"text":"Extract Audit Trail Workflow","hash":"_extract_audit_trail_workflow","id":75},{"text":"Configuring the Extract Audit Trail Workflow","hash":"_configuring_the_extract_audit_trail_workflow","id":76},{"text":"Full SoD Check Workflow","hash":"_full_sod_check_workflow","id":77},{"text":"Configuring the Full SoD Check Workflow","hash":"_configuring_the_full_sod_check_workflow","id":78},{"text":"Initialize Re-approval Workflow","hash":"_initialize_re_approval_workflow","id":79},{"text":"Configuring the Initialize Re-approval Workflow","hash":"_configuring_the_initialize_re_approval_workflow","id":80},{"text":"Password Expiration Notification Workflow","hash":"_password_expiration_notification_workflow","id":81},{"text":"Configuring the Password Expiration Notification Workflow","hash":"_configuring_the_password_expiration_notification_workflow","id":82},{"text":"Password Expiration Notification Workflow Operation","hash":"_password_expiration_notification_workflow_operation","id":83},{"text":"Policy Execution Workflow","hash":"_policy_execution_workflow","id":84},{"text":"Configuring the Policy Execution Workflow","hash":"_configuring_the_policy_execution_workflow","id":85},{"text":"Policy Execution Workflow Optimization","hash":"_policy_execution_workflow_optimization","id":86},{"text":"Privilege Resolution Workflow","hash":"_privilege_resolution_workflow","id":87},{"text":"Configuring the Privilege Resolution Workflow","hash":"_configuring_the_privilege_resolution_workflow","id":88},{"text":"Privilege Resolution Workflow Operation","hash":"_privilege_resolution_workflow_operation","id":89},{"text":"Privilege Resolution Workflow Optimization","hash":"_privilege_resolution_workflow_optimization","id":90},{"text":"Run Workflow Externally Workflow","hash":"_run_workflow_externally_workflow","id":91},{"text":"Configuring the Run Workflow Externally Workflow","hash":"_configuring_the_run_workflow_externally_workflow","id":92},{"text":"Start Re-approval Workflow","hash":"_start_re_approval_workflow","id":93},{"text":"Configuring the Start Reapproval Workflow","hash":"_configuring_the_start_reapproval_workflow","id":94},{"text":"Status Report Generation Workflow","hash":"_status_report_generation_workflow","id":95},{"text":"Configuring the Status Report Generation Workflow for the Provisioning View","hash":"_configuring_the_status_report_generation_workflow_for_the_provisioning_view","id":96},{"text":"Configuring the Status Report Generation Workflow for the Connectivity View","hash":"_configuring_the_status_report_generation_workflow_for_the_connectivity_view","id":97}]},"12":{"id":12,"text":"DirX Identity target system (Provisioning) workflows synchronize information from connected systems with the Identity Store. The DirX Identity target system workflows provided with the default Connectivity scenario include: Initial load/validation workflows - workflows that perform an initial load or a validation from the connected system.In initial load mode, existing accounts and groups can be loaded from the connected system into the Identity Store.In validation mode, the workflow compares accounts and group information from the connected system with the current content of the Identity Store and updates the objects in DirX Identity or marks the differences for later reconciliation. Synchronization workflows - workflows that synchronize accounts and groups from the Identity Store to the corresponding connected system.This type of workflow runs in full, delta or event-triggered mode to provision the changed information as quickly as possible. This chapter provides detailed information about target system workflow configuration, special features and user hooks.The sections in this chapter include: Extending the Schema for Target System Workflows - describes the procedure for extending the DirX Identity Store schema with target system-specific information required by most (but not all) of the Java-based and Tcl-based target system workflows. Understanding Java-based Target System Workflows - describes the Java-based target system workflows. Understanding Tcl-based Target System Workflows - describes the Tcl-based target system workflows. Most of the target system provisioning workflows require you to extend the schema for the DirX Identity Store so that it can store target system-specific information. Setting up the Identity Store schema depending on the type of target systems you’d like to provision is a task that you should plan thoroughly. You should only set up the required object classes and attributes to guarantee high performance and easy handling. If you selected to install the Sample Domain when you installed and configured DirX Identity, the configuration procedure has automatically extended the Identity Store schema with a minimal set of attributes and object classes for most of the supported target systems. You should check these schema extensions to make sure they meet your provisioning requirements. If you do not install the Sample Domain, no automatic schema extensions are performed. As a result, if you have not installed the Sample Domain or you want to use additional target system-specific attributes that are not present in the Identity Store schema, you need to extend the schema manually by: Customizing the target system-specific schema LDIF files provided with DirX Identity to your requirements. Running the agent schema tool to install your schema customizations. The next sections describe how to perform these tasks. We strongly recommend that you back up your directory before you run any scripts. You cannot reverse schema extensions in a directory. DirX Identity provides several complete sets of attribute and object class extensions for each supported target system type, delivered as LDIF files. The first step in extending the schema is to update these schema definitions according to your requirements: Open the directory install_path*/schema/tools*. Open the subdirectory that corresponds to your directory installation: dirx-ee for a DirX Directory installation. Copy the entire Customer Domain subdirectory and name it Customer Domain.orig. Now you can update the schema definitions in the Customer Domain subdirectory according to your requirements. For a DirX Directory installation (dirx-ee is DirX Directory V8.3 or newer): In the ldif subdirectory, select the LDIF file that corresponds to your DirX Identity Connectivity package. For example, dirx.nt.ldif. Remove the attributes you don’t want to use by removing their corresponding MODIFY records that refer to attributeTypes creations. Remove these attributes from the object class definitions by removing their corresponding LDAP attribute names from the MODIFY records that refer to objectClasses creations. If indexes have been defined for these attributes, remove the attribute types from the dbconfig_opt statements in the dirxadm script of your DirX Identity Connectivity package. For example, DirXmetahub-schema.Nt.adm for Windows NT. Now you can use the agent schema tool to install your schema extensions. To install your schema extensions: Under install_path/schema/tools, run the script agent-schema.bat (on Windows) or agent-schema.sh (on UNIX). Type the password of the DirX Identity administrator admin. Select the appropriate DirX Identity Connectivity package to install this part of the schema extension. If you have multiple Connectivity packages to extend, you must select each Connectivity package separately. Select whether or not to create the attribute indexes. The schema extensions are now installed. Check the trace.txt file for errors (the exit codes at the end should be 0). This section provides configuration hints and details about the Java-based target system (provisioning) workflows, including: ADS workflows (Microsoft) - default workflows that provision the Microsoft Active Directory including the Exchange Server and the Skype for Business Server (formerly the Lync Server). Citrix ShareFile workflows - default workflows that provision a Citrix ShareFile system. DirX Access workflows - there exist two methods to connect DirX Access with DirX Identity. Evidian Single Sign-on (ESSO) workflows - workflows that provision an Evidian ESSO system. Google Apps workflows - default workflows that provision a target system of type Google Apps in the Identity Store and the corresponding connected Google Apps endpoint. Imprivata workflows - default workflows that synchronize data between a target system of type SPMLv1 in the Identity Store and the corresponding connected Imprivata OneSign system. JDBC workflows - default workflows that provision three predefined tables in any relational database that provides a JDBC connection. LDAP workflows - default workflows that provision any LDAP directory. IBM Notes workflows (IBM) - workflows that provision IBM Notes. Medico workflows (Siemens) - workflows that provision the Siemens healthcare medico//s system. Office 365 workflows - workflows that provision a target system of type Office365 in the Identity Store and the corresponding connected Office 365 endpoint. OpenICF Windows Local Accounts workflows - workflows that synchronize data between a target system of type OpenICF in the Identity Store and the corresponding connected Windows local accounts and groups system accessible through a .Net OpenICF connector server. RACF workflows - default workflows that provision RACF systems via the IBM Tivoli Directory Server (LDAP). Salesforce workflows - workflows that provision a target system of type Salesforce in the Identity Store and the corresponding connected Salesforce system. SAP ECC (R/3) UM workflows - workflows that synchronize data between a target system of type SAPR3UM in the Identity Store and the corresponding connected SAP R/3 system. Service Management workflows - workflows that allow for manual provisioning of offline (not connected) target systems. SharePoint workflows (Microsoft) - workflows that provision Microsoft SharePoint server sites in conjunction with the ADS workflows. Unify Office workflows - workflows that provision a target system of type Unify Office in the Identity Store and the corresponding connected Unify Office (RingCentral) endpoint. UNIX-OpenICF workflows - workflows that provision a target system of type OpenICF in the Identity Store and the corresponding connected OpenICF connector server. This section covers features that are common for all or a subset of the Java Provisioning Workflows, including: How the workflows automatically create superior folders How to configure the workflows that support a central proxy server configuration This section describes how the workflows automatically create superior folders in connected systems and in the Identity Store. When the creation of new objects fails due to missing superior nodes, the realtime workflows automatically try to create them. But there is one limitation: the same structure is required in both in the Identity Store and in the connected system and therefore the individual nodes are mapped one-to-one. When creating the missing entry in the connected system, the workflows use the following attributes from the appropriate entry in the Identity Store: dxrOCLinTS: defines the object classes in the connected system dxrOptions: defines default values for other mandatory attributes DN in Identity Store: cn=Miller,ou=sales,o=My-Company,cn=Accounts,cn=My-TS,cn=TargetSystems,cn=My-Company DN in connected system: cn=Miller Peter,ou=sales,o=My-Company,c=de Assume that \"c=de\" exists, but nothing else. Then: For creation of \"o=My-Company,c=de\", the workflows use the attributes \"dxrOCLinTS\" and \"dxrOptions\" of the entry \"o=My-Company,cn=Accounts,cn=My-TS,cn=TargetSystems,cn=My-Company\". For creation of \"ou=sales,o=My-Company,c=de\", the workflows use the attributes \"dxrOCLinTS\" and \"dxrOptions\" of the entry \"ou=sales,o=My-Company,cn=Accounts,cn=My-TS,cn=TargetSystems,cn=My-Company\". The realtime workflows will create the missing superiors as far as possible. A) If a superior node doesn’t exist in the connected system, they create the relevant entry in the Identity Store with a default attribute list: dxrType=dxrTSAccountGroupContainer objectClass=dxrTSContainer objectClass=dxrContainer objectClass=top B) If the superior node exists in the connected system, the workflows use the following attributes from the appropriate entry in the connected system: The attributes \"c\", \"o\", \"ou\", \"l\", \"dc\" are stored in the same attribute types . The attribute \"objectClass\" is mapped to \"dxrOCLinTS\". The naming attribute value in the Connected System is mapped to \"dxrRDNinTS\". The attributes \"dxrType\" and \"objectClass\" are mapped in the same way as the previous step. DN in connected system: cn=Miller Peter,ou=sales germany,o=My-Company,c=de DN in Identity Store: cn=Miller,ou=sales germany,ou=sales europe,o=My-Company,,cn=Accounts,cn=My-TS,cn=TargetSystems,cn=My-Company [defined by Identifier mapping] The entry \"o=My-Company,cn=Accounts,cn=My-TS,cn=TargetSystems,cn=My-Company\" is created with information as defined in B. The entry \"ou=sales europe,o=My-Company,cn=Accounts,cn=My-TS,cn=TargetSystems,cn=My-Company\" (which has no appropriate entry in the connected system) is created with information as defined in A. The entry \"ou=sales germany,ou=sales europe,o=My-Company,cn=Accounts,cn=My-TS,cn=TargetSystems,cn=My-Company\" is created with information as defined in B. Some of the target system workflows - such as the Google Apps, Office 365 and Salesforce workflows - support a central proxy server configuration. If your organization requires the use of an HTTP proxy server for Web access, configure the host and port of the HTTP proxy server represented by a connected directory within the Identity Store folder for your Provisioning domain: Go to the Expert View and then create a new proxy server entry as a copy of an existing template from Connectivity Configuration Data → Connected Directories → Default → Identity Store → Proxy Server if necessary. On the HTTP/HTTPS Proxy Server tab for each connected directory that supports a central proxy server configuration, set a link to the proxy server entry. Do not use an authenticated proxy server. Configure and deploy a local transparent HTTP proxy server that can handle authentication and can forward requests to the corporate HTTP proxy server if necessary. Configure this local proxy server as the one used with DirX Identity. If you have direct access to the HTTP/HTTPS servers needed to run the relevant workflows, remove any links to proxy servers from the HTTP/HTTPS Proxy Server tab of the relevant connected directories. The Active Directory (ADS) Provisioning workflows operate between a target system of type \"ADS\" in the Identity Store and the corresponding Active Directory connected system. The ADS connector used in the workflows communicates with the ADS server (AD LDAP provider) across the native LDAP protocol, as illustrated in the following figure. Figure 1. Active Directory Workflow Architecture The workflows allow you to synchronize Identity account and group objects with ADS standard users, mail- or mailbox-enabled users, groups or distribution lists depending on the attributes set. The ADS Provisioning workflows have the following prerequisites: Before you can use the workflows, you must extend the DirX Identity Store schema with ADS target system-specific attributes and object classes so that the workflows can store Active Directory-specific information in the Identity Store. For instructions, see the section \"Extending the Schema for the Target System Workflows\". If you plan to create mailbox-enabled users and groups or other mailbox-enabled object types like shared, room or equipment mailboxes in Active Directory, you must install an Exchange Server in the Active Directory Domain, which extends the Active Directory schema with mail-enabling attributes. If you plan to create lync-enabled users in Active Directory, you must install a Skype for Business Server, formerly Lync Server, in your environment, which extends the Active Directory schema with lync-enabling attributes. This section provides information about ADS workflow configuration on the Connectivity side. Connection to the target system: Specify the IP address and the data port at the ADS service object (ADS CD → Service). The IP address may contain the server name - full qualified or not - or a TCP/IP address. In the Bind Profile (ADS CD → Bind Profile) specify a user in DN format. This user must have administrative rights in Active Directory. If you want to enable/disable SSL for one of the workflows, don’t use the SSL flag in the Bind Profile, which is kept there for compatibility reasons with the Tcl-based workflows. Use the SSL flag in the TS port of the join activity of the selected workflow instead. This section provides information about ADS target system configuration on the Provisioning side. In the Advanced tab of the target system object, the properties Type, Forest and Domain must be set correctly according to your connected system. The event-based workflows on the Connectivity side assigned to this target system must hold the same values in their Is applicable for section. If a Windows Password Listener is also active in the related Active Directory domain, the property Forest must be specified in the full qualified form, for example “dc=your-company,dc=net” and the property Domain must contain just the name of the domain, like “your-company” to correctly receive the password change requests - keeping this information in their topics- sent by the Password Listener. dxrPrimaryKey The dxrPrimaryKey attribute of accounts and groups contains the objects' connected system DN. It is also used as the member attribute of groups. On account creation, it is generated by the tsaccount.xml object description using the target system-specific attributes Account Root in TS and Group Root in TS in the Options tab. dxrName The dxrName attribute of accounts and groups contains the target system-unique attribute samAccountName. It is generated with the Java script dxrNameForAccounts if the account or group is created in DirX Identity. It is used for joining in the Identity direction. In the Options tab of the target system object, the DN values for the Account Root in TS and Group Root in TS properties must be set correctly. They are used to generate the dxrPrimaryKey attribute on creation or modification of an account or group in DirX Identity. The dxrPrimaryKey attribute holds the DN of the object in the connected system. If an Exchange system is to be provisioned, some basic Exchange attributes must be configured in the Options tab of the target system object. They are used as base values for generating mailbox-specific attributes for an account when the \"dxr mailbox users\", \"dxr shared mailbox creation\", \"dxr room mailbox creation\" or \"dxr equipment mailbox creation\" groups are assigned to the related user. To enable an account in DirX Identity for Exchange mailbox functionality, assign the \"dxr mailbox users\" group to the related user. To make this assignment, you usually create a corresponding role assigned to this group or you assign this group directly. On assignment, the obligations linked to this group set all of the mailbox-enabling attributes that are required to create a mailbox-enabled user in Active Directory. On revocation, these attributes are cleared or set according to revocation. There are two levels of obligations assigned: The base obligations common to all mailbox types (user, shared, room, equipment mailboxes) held in the obligation object Configuration → Obligations → Mailbox-enabling to which each mailbox-enabling group links. The obligations specified directly in the Obligations tab of each mailbox-enabling group specific to the mailbox type. To create a shared, a room or an equipment mailbox in Exchange 2013 or newer, assign the “dxr shared mailbox creation”, “dxr room mailbox creation” or “dxr equipment mailbox creation” group to a user representing this mailbox object in Active Directory. On assignment, the obligation rules for this group calculate and set all attributes required for the relevant mailbox type. On revocation, these attributes are cleared or set to the appropriate value. To grant permissions to a user in DirX Identity to access a specific shared, room or equipment mailbox in Exchange, create a related rights assigning group in DirX Identity by copying the existing “dxr shared mailbox team1” group and adapt its obligation rules. The “dxr shared mailbox team1” group is a sample for giving an account the right to share the specific mailbox named SharedMailbox_team1, which must exist already in Exchange. For every shared, room or equipment mailbox in your Exchange system that you want to share, you need to create a shared-mailbox-enabling group - for example, by copying and renaming the sample “dxr shared mailbox team1” group - and adapt the name of the mailbox to be shared in the OnAssignment rule of the Obligations tab, which sets the mailbox name to be shared to the dxmADsExtensionAttribute2. This attribute is then mapped in the ADS synchronization workflow account channel to the target virtual (not in the schema) attribute ps_script_param1 and passed as the first parameter to the specified PowerShell script. The PowerShell script name is set in the OnAssignment rule to the dxmADsExtensionAttribute1 attribute, which is mapped to the target non-schema attribute ps_script_name. The dxmADsExtensionAttribute3 attribute is filled with the cn of the assigned user, which is mapped to the target attribute ps_script_param2 and passed as the second parameter to the PowerShell script AddSharedMailboxPermission.ps1 (running the Add-MailboxPermission cmdlet). The script is executed after the account has been created or updated in the connected system and assigns the rights to access the shared mailbox to the account. On unassigning these rights, the script RemoveSharedMailboxPermission.ps1 (running the Remove-MailboxPermission cmdlet) is called. This is specified in the OnRevocation rules of the obligations. The PowerShell scripts AddSharedMailboxPermission.ps1 and RemoveSharedMailboxPermission.ps1 are installed under install_path\\samples\\ADS\\scripts\\ and must be copied into the Java-based Server’s repository\\scripts folder. For assigning and unassigning rights for room and equipment mailboxes, you perform the analogous actions and create a rights-assigning group for each Exchange room or equipment mailbox to be shared. The same PowerShell scripts for any mailbox types used for sharing (shared, room or equipment mailbox types) can be used for rights assignment and unassignment. Only mailbox-enabled accounts can get permissions on other mailboxes. Standard Active Directory accounts with no mailbox-enabling attributes set cannot be given permissions on other shared mailboxes. If an Active Directory system hosting a Skype for Business Server (formerly Lync Server) is to be provisioned, some basic lync-enabling attributes must be configured in the Options tab of the target system object. They are used as base values for generating lync-enabling attributes for an account when the \"dxr lync users\" group is assigned to that account. To enable an account in DirX Identity for Skype (formerly Lync) functionality, assign the \"dxr lync users\" group to this account. To make this assignment, you usually create a corresponding role assigned to this group or you assign this group directly. On assignment, the obligations linked to this group set all of the lync-enabling attributes that are required to create a lync-enabled user in Active Directory. On revocation, these attributes are cleared. The following figure shows the layout of the channels that are used by the ADS workflow’s join activity. Figure 2. ADS Workflow Channels and Objects As the figure shows, there is a pair of channels between accounts, groups and members on each side. The members are linked to the groups on both sides. This section provides information about ADS workflow ports. TS Port CF - Crypt Filter The configured Crypt Filter is used to send the password attribute unicodePwd decrypted to the ADS server. This section provides information about ADS workflow channels. Both Directions a. Master attributes You can master attributes by setting the OnAddOnly flag in the according mapping direction. For example, if you want Identity to master a certain attribute, you set this flag in the mapping direction to Identity to let the connected system only set the attribute on an add operation in Identity and vice versa. If the mapping is more complex, mastering can also be implemented in a Java mapping, as done for the Identifier mapping. The Identifier is mastered by DirX Identity in the default real-time synchronization workflow. In the target system direction, it is set by Identity with the dxrPrimaryKey attribute value and results in moving the object in the target system if dxrPrimaryKey changes. In the Identity direction, the Identifier is calculated only on an add operation, otherwise the joined object’s Identifier is taken. Special caution is necessary for the attribute proxyAddresses: The proxyAddresses multi-value attribute is handled as case-sensitive in Active Directory because a value starting with the uppercase letters \"SMTP:\" is considered to be the primary e-mail address of a user in contrast to possible further values starting with the lowercase letters \"smtp:\". In DirX Identity, the corresponding attribute dxmEX2kProxyAddresses is not defined to be case-sensitive but is case-insensitive in the schema; this definition should not be changed in DirX Identity for compatibility reasons. Provisioning it can cause the primary address of a user, which possibly might have been changed by an administrator in Active Directory, to be overwritten with the wrong value of lowercase letters on the next synchronization run to Active Directory, regardless of whether or not a validation has been previously performed. To solve this problem, the OnAddOnly flag can be set in the mapping direction to Active Directory for the proxyAddresses attribute. This setting can be made because the attribute does not belong to the mailbox-enabling attributes, which must be able to be assigned and unassigned at any time during the lifetime of the user. If you want to set proxyAddresses on both an add and a modify operation, you can uncheck the flag checkModification. In this case, the join engine does not compare the values of the joined entry in Active Directory with the mapped values but just replaces the values as they are in the mapped entry. Then uppercase and lowercase letters are preserved and must just be provided correctly on synchronization to Active Directory. b. Moving objects The default ADS real-time synchronization workflow can perform a rename/move in AD as follows: If the dxrPrimaryKey attribute of the account is changed in Identity (as a result of a user resolution and new calculation of the account attributes, which can have dependsOn or masteredBy settings in the accounts object description), the workflow performs the following tasks: Takes this as the new DN in AD. Tries to find (join) the account with the configured join attributes (trying one after the other). Takes the samAccountName attribute as the default, which is unique in the whole AD domain (that’s why it shouldn’t change on user resolution in Identity, otherwise another unique attribute must be taken for joining). When the account has been found in AD, takes that DN as the old DN and renames/moves the account from this old DN to the new DN. Puts the current AD DN into the dxrPrimaryKey and dxrPrimaryKeyOld attributes in Identity on the way back. The dxrPrimaryKeyOld attribute is not taken for synchronization to the connected system but only for other purposes. Direction: Identity → Connected System a. PostMapping A PostMapping exists only for the group channel in the target system direction. It is used for changing the request type to DELETE if the dxrState attribute in Identity contains the value DELETED. This results in deleting the object in the target system. For accounts, the deletion of objects in the connected system is handled in the userAccountControl Java mapping. The password channel updates the Active Directory account passwords. The associated SetPassword workflow is started by either the User or the Account Password Event Manager workflow listening for Web Center or Password Listener requests. The Active Directory attributes unicodePwd and pwdLastSet are mapped from the pseudo source attributes dxmPassword and dxmPasswordExpired, which are contained only in the password change request and not read from an LDAP attribute. The ADS Set Password workflow also resets the lockoutTime attribute to zero (0) to finish the user’s lockout period immediately and to enable him to log in again after his password has been updated. A password channel can also be configured backwards from the connected system to Identity to be able to update some attributes in Identity after a password change or a reset has taken place in the connected system. The join engine then synchronizes the attributes specified in the corresponding password channel mapping to Identity after the account with its password relevant attributes was updated in the connected system. This section provides: A description about delta workflows. Hints and guidelines on how to configure selected versions of Microsoft Exchange. A description of how to run PowerShell scripts. A description of how to manage remote folders with external tools that can execute remote commands. For a general explanation of the delta workflows, see the sections under \"Java-based Workflow Architecture\" in \"Understanding the Default Application Workflows\" in this guide. The default delta workflow for Active Directory ADS_Ident_Realtime_Delta is configured with the delta type SearchAttributes in the account and group channels. With this setting and the default search attributes uSNchanged and uSNcreated, the export search filter is extended by searching only for those objects whose uSNchanged or uSNcreated attribute values are greater than or equal to the highest value of the last delta run stored in the Identity domain for each channel. If you also want to export the objects that were deleted after the last delta run - in addition to the ones that were changed - you must change the delta type to Expert Operational Attributes. This action generates and shows the operational attributes section for the attribute dxm.delta and the placeholder value ${LastDeltaValue}. At runtime, the join engine replaces the placeholder with the last delta state value stored in the Identity domain as a base64-encoded binary value (cookie). It reflects the last value that was returned by Active Directory at the end of the previous delta search. If operational attributes are used for delta searches, several adaptations must be made at the workflow configuration: Search Base Adaptations The ADS connector uses the DirSync LDAP control for doing delta searches. This has the restriction that only root searches are allowed. As a result, the specified search base must be a domain or subdomain; for example, dc=domain1,dc=munich,dc=my-company,dc=net. In the default delta workflow configuration, the search base configured at the ADS Connected Directory channels is beneath an organizational unit. To restrict the search result to a certain set of objects, any filter can be specified. Filter Adaptations In the default workflow, the filter (&(objectClass=user)(objectCategory=person)) is specified. Since deleted objects lose the objectCategory person, eliminate that part of the filter. Mapping Adaptations Extend the mapping to Active Directory with the isDeleted attribute by inserting a direct mapping null→isDeleted with the attribute flags readOnly and retrievable set. The mapping function for the dxrTSState attribute in Identity evaluates the flag and sets the value DELETED for the deleted objects. Mapping Flags Adaptations Since the DirSync LDAP control returns only changed attributes for an object, you must remove the flag checkModification for every attribute in the mapping to Identity; otherwise, the attributes are deleted in Identity if they have not been changed in Active Directory and hence do not exist in the list of exported attributes. Hints for Deciding which Delta Type to Use Technical conditions: If you want to integrate the delta workflow into an existing target system with real-time workflows configured to synchronize accounts and groups beneath an organizational unit (like the default ADS real-time workflows do), you must use the default settings of the delta workflow (filter extension type) for this target system, because the search base is configured at the channels and used by all workflows of the target system. Consequently, a delta workflow using operational attributes is Appropriate primarily for a target system provisioning a complete Active Directory domain, Possible also for a target system with at least the search base specified as the domain root and the search filter specified to get only a subset of objects. Remember that users and groups in Active Directory usually do not have the attribute ou configured holding their organizational unit, which would make it possible to set the search filter appropriately and get only objects beneath a certain organizational unit. You can either configure this behavior or use other filters. Scenario considerations: The validation workflow can also recognize changes and deletions made in Active Directory by calculating the differences of the complete set of objects on both sides. It does not evaluate the delta settings resulting in delta exports like the delta workflow does. As a result, there are different possibilities for which workflows and configurations to use depending on your scenario. If you have a scenario with a validation workflow scheduled to run very infrequently - for example, because it takes a long time due to a high number of users and groups to synchronize - and you want to react to changes - especially deletions - made in Active Directory more often, you should choose the delta type of operational attributes. If you have the same scenario without the need to react quickly to deleted and moved objects but with the need to react quickly to changed objects, you can use the default delta type of filter extensions. Moreover, if you have a scenario with a fairly limited set of users, you could schedule a validation workflow more often to recognize the deleted objects and leave the delta workflow with the default settings to recognize the changed objects. The default Java-based synchronization workflow mapping is configured to provision an Exchange 2016/2019 connected system. The configuration in Provisioning regarding object descriptions and obligation rules for the mailbox-enabling groups is also set up for an Exchange 2016/2019 connected system. This does not affect your existing ADS target systems and workflows. If you create a new ADS target system with the target system wizard (the type in DirX Identity is still called Windows 2000), the base properties of your specific Exchange system have been set - or can be set afterwards - in the Options tab of the new target system. The following section describes other issues related to customizations. Common aspects for all versions greater than or equal to Exchange 2007 The ADS connector and the ADS agent (which is used in the Tcl-based workflows) both generate the mandatory attributes msExchMailboxSecurityDescriptor and msExchMailboxGuid automatically when a user is to be mailbox-enabled. The connecto and the agent determine whether or not a user is to be mailbox-enabled by checking whether the attribute msExchRecipientTypeDetails is contained in the list of attributes to be set, which is true only if a mailbox-enabling group was assigned. All other attributes mandatory for creating a fully-functioning Exchange mailbox are created through the standard obligation rules used as source attributes in the mapping to the AD attributes. For a user update in Active Directory, the ADS connector uses the LDAP interface and the ADS Agent uses the ADSI Interface. If you want to synchronize additional Exchange attributes, you have the following choices: If you just want to see the content of some more Exchange attributes on the Identity side, you don’t have to deal with obligation rules at all. You only need to map them towards Identity either to related Identity attributes if they exist in the Identity schema or to some of the various extension attributes (dxmADsExtensionAttribute1-15 and dxmEX2013ExtensionAttribute16-20). You can also adapt the tsaccount.xml object description to make them visible in the Active Directory tab of the account. If you want to provision more Exchange attributes towards Active Directory and their related attributes exist in the DirX Identity schema, you can just add obligation rules to fill them and then use them in the mapping in both directions. If their related attributes don’t exist in the schema on Identity side, you can either extend the Identity schema or just use the various extension attributes by setting them through obligation rules and then mapping them to the desired AD attributes. If you only need to set constant values for some attributes and the related attributes don’t exist in the schema on the Identity side, be aware that if you just set those values in the mapping towards the connected system, these attributes are then always contained in the requests towards the connected system for \"non mailbox- enabled\" users provisioned with the same workflow, which can cause problems on user modification. To avoid this situation, you can set the attributes in a Postmapping depending on whether a specific Exchange attribute, for example msExchRecipientTypeDetails, is set, which is only true if a mail-enabling group was assigned. The easiest and recommended way, however, is to fill some extension attributes in obligation rules and map them to AD attributes instead of defining a Postmapping. Customizing Exchange 2016/2019 If you want to provision an Exchange 2016/2019 connected system and you created a new target system with the target system wizard of the current version, you must apply the following customizations: In the Obligations tab of all mailbox-enabling groups you intend to use (dxr mailbox users, dxr shared mailbox creation, dxr room mailbox creation and dxr equipment mailbox creation), adapt the OnAssignment rule generating the multi-value attribute dxmEX2kShowInAddressBook to the values appropriate to your specific Exchange system (DNs of the default Exchange address books). Note: Since multi-values can now be directly assigned in obligation rules, the former method of assigning the values in the updateAddressbook.js java script is no longer needed. Customizing Exchange 2013 If you want to provision an Exchange 2013 connected system and you created a new target system with the target system wizard of the current version, you must apply the following customizations: In the Obligations tab of all mailbox-enabling groups you intend to use, adapt the OnAssignment rule generating the multi-value attribute dxmEX2kShowInAddressBook to the values appropriate to your specific Exchange system (DNs of the default Exchange address books). Customizing Exchange 2010 If you want to provision an Exchange 2010 connected system and you created a new target system with the target system wizard of the current version, you must apply the following customizations: Add the attribute homeMTA to the mapping of both directions and to the obligation rules of the dxr mailbox users group. From Exchange 2013 on, the attribute must not be provisioned because the Transport Server Role can no longer reside on a different server than the Database Server Role. Set the attribute msExchVersion in the obligation onAssignment rule of the dxr mailbox users group to the value 44220983382016. Adapt the Java script updateAddressbook.js in Domain Configuration → TargetSystems → Windows 2000 → JavaScripts with the DNs of the default Exchange address books of your Exchange system. In the Obligations tab of all mailbox-enabling groups you intend to use, adapt the OnAssignment rule generating the multi-value attribute dxmEX2kShowInAddressBook to the values appropriate to your specific Exchange system. Customizing Exchange 2007 or Exchange 2003 If you want to provision an Exchange 2007 or Exchange 2003 connected system and you created a new target system with the target system wizard of the current version, you must apply the following customizations: Add the attribute homeMTA to the mapping of both directions and to the obligation rules of the dxr mailbox users group. Delete the attribute msExchRecipientTypeDetails from the mapping and the obligation rules. Delete the attribute msExchVersion from the mapping and the obligation rules. Adapt the Java script updateAddressbook.js in Domain Configuration → TargetSystems → Windows 2000 → JavaScripts with the DNs of the default Exchange address books of your Exchange system. In the Obligations tab of all mailbox-enabling groups you intend to use, adapt the OnAssignment rule generating the multi-value attribute dxmEX2kShowInAddressBook to the values appropriate to your specific Exchange system. DirX Identity provides a general user hook class UserHookRunExecutable, which allows running any executable configured in a realtime workflow channel object. For the preUpdate and the postUpdate methods of the user hook, an executable with a command line can be configured in the specific attributes pre_executable and/or post_executable of the channel. The corresponding command lines are specified in pre_cmdline and/or post_cmdline. In the postUpdate case, the executable is only called if the update (add or modify) of the object was successful. The UserHookRunExecutable class starts powershell.exe - as a specific executable - only if a PowerShell script name is passed to it as a parameter; otherwise it just logs that nothing needs to be done. This configuration allows always specifying the UserHookRunExecutable class in the General tab of the Accounts channel (and of course any other channel), because the PowerShell script name is now only set with a non-empty value in the standard mapping if a permission-granting mailbox group is assigned to the associated user. In all other cases, the script name is not populated and hence powershell.exe is not started. This behavior, along with setting the script name depending on whether or not other (rights-representing) attributes are set, is also useful for modeling other customer-specific requirements. Common Architecture for Running Executables The common architecture and features for running executables from a user hook are described in \"Running Executables from a User Hook\" in \"Understanding the Default Application Workflow Technology\". PowerShell Prerequisites A PowerShell script can use the cmdlets that are part of the locally-installed PowerShell instance and it can also use and remotely run cmdlets that are only part of the remotely-installed PowerShell instance. You can even call PowerShell 64-bit cmdlets from clients running a PowerShell 32-bit version. You need to have the Windows Management Framework installed to use PowerShell cmdlets that reside only on the remote server and not on the client machine’s locally installed PowerShell instance. An example is to administer Exchange using the remote Exchange management cmdlets without having them installed locally. Windows Management Framework includes Windows PowerShell V2 and Windows Remote Management (WinRM) 2.0, which is the Microsoft implementation of the SOAP-based WS (=Web Services)-Management Protocol. For Windows 7 or Windows Server 2008 R2 and newer, the correct version of the Windows Management Framework is already installed. Required PowerShell Settings Apply the following settings to enable the remote server to execute PowerShell commands. For Windows versions greater than or equal to Windows Server 2012, this is usually already enabled by default and so none of the following settings need to be explicitly applied. Server-side settings: Call the command enable-psremoting in the Administrator PowerShell of the remote server. It creates a listener for HTTP connections and sets firewall exceptions for Http port 80 and Https port 443. Client-side settings: Call the command set-executionpolicy remotesigned in the Administrator PowerShell of the client to enable it to run scripts. The standard ADS real-time workflow account channel is pre-configured to run any PowerShell script - after the account is updated in the connected system - that is passed as a parameter in the source attribute dxmADsExtensionAttribute1 mapped to the target attribute ps_script_name. The script parameters are set in additional extension attributes depending on the groups that are assigned to the accounts’ associated user. Script name and parameters are then passed to the post_cmdline specific attribute, which is taken as input for running powershell.exe specified as the executable in post_executable. The extension attributes are cleared in the mapping back to Identity to prevent the PowerShell script from being started again on the next synchronization run. User Hook name: The user hook class name com.siemens.dxm.join.userhook.common.UserHookRunExecutable is specified by default in the General tab of the account channel in the ADS direction. If no PowerShell script name is passed in the dxmADsExtensionAttribute1 source attribute in the mapping - which is the case for \"normal\" accounts with no special mailbox rights assigned or for those accounts that the script has already run once - the UserHookRunExecutable class does not start powershell.exe unnecessarily. Specific attribute post_executable: The PowerShell executable powershell.exe is already specified in the specific attribute post_executable. Nothing must be changed here. Specific attribute post_cmdline: The name of the script to run is set through the mapping and passed to post_cmdline as the first parameter. The \"$\\{env.scripts}\" placeholder resolves to the scripts subfolder of the Java-based Server’s repository folder. Consequently, you must: Copy the scripts to run from install_path*\\samples\\ADS\\scripts\\* or from your own folder with possibly your own scripts to the scripts subfolder of the Java-based Server’s repository folder if you want to leave the setting, or Specify an absolute path where your scripts reside, or Copy the scripts to a folder contained in the Path variable; for example, into the bin subfolder of the associated Java-based Server. If the script path contains a blank, PowerShell expects a \"&\" before the script name and the script name to be enclosed in double quotes and parameters containing blanks to be enclosed in triple double quotes if the script is called from the command line, like this: powershell \"& \"\"C:\\Documents and Settings\\myscript.ps1\"\"\" \"\"\"param 1\"\"\" \"\"\"param 2\"\"\" If the script is called from within the PowerShell, it is done as follows: & \"C:\\Documents and Settings\\script1.ps1\" \"param 1\" \"param 2\" The delivered batch script runPSS.bat to start and test PowerShell scripts standalone (not started by the Java-based Server) handles this correctly. Adaptation of the delivered PowerShell sample scripts to run: Adapt the variables $server, $binduser and $pwd to your environment. Note that you must generate the encrypted password file yourself, for example cred.txt, by running the delivered sample PowerShell script CreatePasswordFile.ps1 installed under install_path\\samples\\ADS\\scripts\\ in the Administrator PowerShell. If you do not want to use the PowerShell encrypting password feature, you can also extend the parameter list of the script and pass username and password from the ADS bind profile by adapting the UserHookRunExecutable class, as described in \"Running Executables from a User Hook\" in \"Understanding the Default Application Workflow Technology\". Java Server service account: If your PowerShell script - like the delivered script AddSharedMailboxPermission.ps1- reads a password from a file (for example, from cred.txt as previously described), that was encrypted by PowerShell running under a specific account, the Java-based Server must also run under this account. Running an Exchange cmdlet in the Java-based Server In addition to the PowerShell scripts AddSharedMailboxPermission.ps1 and RemoveSharedMailboxPermission.ps1, which are used in the standard ADS realtime synchronization workflow for assigning mailbox rights, DirX Identity delivers sample scripts that contain Exchange cmdlets. These scripts are installed under install_path*\\samples\\ads\\scripts*. The DisableMailbox.ps1 sample script expects two parameters: one for identifying the mailbox (user principal name) and one for identifying whether or not the mailbox shall be disabled. This parameter can also be set independently from the msExchHideFromAddressLists attribute. It is taken here as one reasonable way for specifying enabling or disabling a mailbox, because a disabled mailbox should also not appear in the global address lists. The DisableMailbox.ps1 script uses the Disable-Mailbox cmdlet. In addition to removing all mailbox-enabling attributes from the Active Directory user, the Disable-Mailbox cmdlet also performs a cleanup task on the mailbox, disconnecting the mailbox immediately from the user so that you don’t need to wait for a nightly maintenance complete mailbox database cleanup task. The ConnectMailbox.ps1 script uses the Connect-Mailbox cmdlet, which reconnects a disconnected mailbox to an Active Directory user. If you want to create a new mailbox for an existing Active Directory user, the Enable-Mailbox cmdlet must be used. You can easily create a new PowerShell script for this task simply by copying the ConnectMailbox.ps1 script to a new script - for example, EnableMailbox.ps1 - and then exchanging the Connect-Mailbox cmdlet with Enable-Mailbox, which expects the same parameters as Connect-Mailbox. Note: If you want to mailbox-enable a user by running an Exchange cmdlet (for example, Enable-Mailbox for an existing user or New-Mailbox for a new user) instead of setting the mailbox-enabling attributes with the standard ADS synchronization workflow, adapt the workflow mapping and the obligation rules of the dxr mailbox users group appropriately depending on the attributes you want to pass to the cmdlet as parameters. Cmdlets usually offer a lot of variation on which parameters can be passed and which are set with default values. Read the Microsoft documentation about the complete functionality of each cmdlet you want to use. Running a Lync cmdlet in the Java-based Server You can also extend the standard ADS real-time workflow to run a PowerShell script containing Lync cmdlets to be executed on the remote Skype for Business Server (formerly Lync Server). For an explanation about how to pass parameters to the script, how to provide credentials and where to place the script, see the instructions given in \"Running an Exchange cmdlet in the Java-based Server\". The sample script LyncEnableUser.ps1 is installed under install_path*\\samples\\ads\\scripts*. Running it is an alternative way to lync-enable a user instead of doing it by mapping all lync-enabling attributes produced by the obligation rules of the dxr lync enabling group as done in the default ADS real-time workflow. The LyncEnableUser.ps1 script uses the Enable-CsUser cmdlet for lync-enabling a user. The Disable-CsUser cmdlet is also described in this script as well as other lync-handling cmdlet samples. In order to be allowed to remotely execute the cmdlets, a secure connection to the Lync Server over https is required. As a prerequisite for such a secure connection, the root CA certificate that issued the lync-related certificates must be imported into the Trusted Root Store of the workstation running the script. A user in Active Directory with administrative rights can only be lync-enabled by using either the AdsConnector to set the lync-enabling attributes or by running the Enable-CsUser PowerShell cmdlet. It cannot be lync-enabled by using the Skype for Business (formerly Lync Server) \"Control Panel\" admin tool. Remote Folder Management can be performed using the related PowerShell cmdlets, but you can also use this older tool described here. The functionality described here allows the management of folders and shares on a remote computer running the Windows 2003 Server operating system or newer. You can use it in a user hook or in the attribute mapping code of a Java-based workflow. It can create and delete folders on a remote computer and copy/move folders between remote computers. Architecture The remote execution works over $ADMIN and $IPC shares on the remote computer. The external CLI utility accesses the $ADMIN share to set up the remote listener service and then passes remote commands via $IPC share. Results and outputs from these commands are returned to the Java code. The following figure illustrates this control flow: Figure 3. Remote Folder Management Architecture With the exception of ssh, all of the tools use $IPC and $ADMIN shares. The remote management functionality that has been used and tested in customer projects includes: create folder delete folder move/copy folder inside partition over partition over machines check if folder exists set folder file system permissions account name/SID support create share set share permissions account name/SID support delete share convert share name to local path CLI Tools To enable remote management, you need to select a toolkit. The following list evaluates tools that can be used to execute commands remotely. xCmd is the preferred tool. xCmd + freeware + nothing required on target machine (service is copied automatically) + sources are available - works only between Windows machines For more information and for download, visit: http://www.codeguru.com/Cpp/I-N/network/remoteinvocation/article.php/c5433 PsExec + nothing required on target machine (service is copied automatically) - works only on Windows machines For more information and for download, visit: http://technet.microsoft.com/en-us/sysinternals/bb897553.aspx winexe + freeware + sources available + nothing required on target machine - works only from UNIX to Windows machines For more information and for download, visit: http://sourceforge.net/projects/winexe. ssh + freeware + sources available + reliable + works from any of the supported platforms to any other - needs ssh-keygen to prepare ssh keys so that it doesn’t prompt for a password. - manual sshd installation on remote machine required Support Utilities The following set of utilities provides useful functions on a remote machine. Part of standard Windows installation: mkdir rmdir dir xcopy move cacls net share External utilities: setacl 2.x (supports SID identifiers in place of account names, http://setacl.sourceforge.net/) Requirements To set up and use folder management based on the xCmd utilities: Reference the dxmJoin.jar package, which contains the necessary classes, in com.siemens.dxm.join.userhook.ads. The xCmd utility must be available in the executable path of the IdS-J server. The account that will be used to access a remote computer must have admin privileges on the remote computer. The account is not to be specified in DN format. The IdS-J server must run under an account with set password to be able to connect to the network. The default LocalSystem account is therefore not suitable. When setting the account permission to a folder or share, note that the account must be visible on the remote computer unless you are using the account SID and the correct domain prefix must be specified if necessary. Deployment Copy the xCmd utility to the path where the IdS-J server can find it. If necessary, copy the setacls utility to all target machines that will be managed. Usage Sample This functionality can be used, for example, to implement the creation of user home and profile folders with appropriate shares on a given user home server within Active Directory target system provisioning: create account change account attributes delete account Some permanent configuration information is stored as target system environment variables (root of home folders, default permissions to be set). Account credentials to connect remotely to the home server are extracted from the target system connection obtained from the environment (same account used). The user hook is bound to the account channel of the target system. The channel mapping manages the homeFolder and profilePath attributes of Active Directory. When creating the folders after a new account is created, permissions are not set within the given user account name, but within the user SID, because the home server does not know about the new account immediately. The user hook handles the following situations: Add request: the source entry is searched for the home folder attribute and when found, folder and share are created. Modify request: the account state modification is checked first. If it is presented, it is evaluated first (see below). If not, the request is searched for the home folder modification and when found and it differs from the source entry value, folders are moved and shares are recreated in a new location. If the account state changes to DISABLED: no action is performed. If the account state changes to ENABLED: folder and share are checked for existence and created if necessary. Delete request: the source entry is searched for the home folder attribute and when found, folders and shares are deleted. Additional Information For additional information, search for the FolderManager.java class under the Additions\\RealtimeWorkflows folder of the DirX Identity delivery media. It contains a channel user hook template for creation of the account home folder and share. The Citrix ShareFile Provisioning workflows operate between a target system of type LDAP in the Identity Store and the corresponding connected Citrix ShareFile application. The workflows use the Citrix ShareFile connector for provisioning. This connector communicates with the Citrix ShareFile across the HTTP protocol. The workflows handle the following objects: Users - the Citrix ShareFile users and contacts. Groups - the Citrix ShareFile groups. The delivered workflows are: Ident_Citrix ShareFile_Realtime - the synchronization workflow that exports detected changes for account and group objects from Identity Store to the Citrix ShareFile cloud and then validates the processed changes in the Citrix ShareFile to the Identity Store. Validate_Citrix ShareFile_Realtime - the validation workflow that imports existing Citrix ShareFile users and groups with group assignments from the Citrix ShareFile cloud to the Identity Store. Depending on the type of Citrix subscription, the maximum number of employees that can be managed by DirX Identity may be limited. It is not possible to change a group’s name using the GUI in the DirX Identity Manager. The delivered workflows do not configure password synchronization. Because of a constraint in DirX Identity when handling membership for a user without an existing account in Citrix, the e-mail address is used to identify the user inside an SPML modify request. (The same condition applies to an add request.) If there is already an account for the user in Citrix, the Citrix id is used to identify the user inside an SPML modify request. The Citrix ShareFile API does not allow you to create a user with the same e-mail address as an existing user. Such an attempt fails. The Citrix ShareFile connector returns the ID of the user with this e-mail address in the SPML response. The Citrix ShareFile API does allow you to create a group with the same name as an existing group. However, the Citrix ShareFile connector does not forward such a request to Citrix and returns an error. To configure the connection to Citrix ShareFile: Specify the name of the Citrix ShareFile server. Set up the bind credentials of the connected directory representing Citrix ShareFile. Use a ShareFile account with sufficient rights. Specify the HTTP proxy in the bind profile if necessary. Check the provisioning settings used by the connected Citrix ShareFile system. Specify them according to real values for your provisioned Citrix ShareFile target system. The Citrix ShareFile target system requires the following layout: Accounts - all accounts are located in a subfolder Accounts. Groups - all groups are located in a subfolder Groups. The attribute dxrPrimaryKey of accounts and groups contains the identifier of these objects in the connected system. The Citrix ShareFile users and group (and membership) are synchronized via a pair of channels (one channel per direction). The membership in Identity is stored on accounts. See the default Citrix ShareFile workflow for details. This section describes the Citrix ShareFile ports. TS Port CF - Crypt Filter A Citrix ShareFile filter is configured implicitly. It is used to send the decrypted password attribute userPassword to the Citrix ShareFile cloud. There are two methods to connect DirX Access with DirX Identity: DirX Access can directly make use of the DirX Identity target system. DirX Identity can provision DirX Access via standard LDAP workflows. The first method is easy to set up and handle, is always up to date and avoids any synchronization effort. The second method should be used if the combined load coming from DirX Access and DirX Identity is too high for the directory server. This variant assumes that DirX Access uses directly the DirX Identity target system. Perform these steps: Set up a virtual target system in DirX Identity. State handling is not necessary for this type of target system. Set up DirX Access to use the DirX Identity target system as user store. Read the corresponding DirX Access documentation. Test the solution. All changes of accounts and group memberships in DirX Identity are immediately visible from DirX Access. In this model we assume two different directory server instances: one keeps the Identity Store, the other one acts as DirX Access repository. To set up this solution, perform these steps: Create a new target system of type LDAP in DirX Identity. The necessary synchronization and validation workflows will be automatically configured. Adapt the mapping of the synchronization and validation workflows according to the requirements of DirX Access. Test the solution. In this case provisioning changes (account and group changes) are propagated with real-time workflows to DirX Access. The delay is typically only a few seconds. The Evidian ESSO system is an Active Directory (ADS) or LDAP target system in which every account can be enabled for single sign-on (SSO) to intranet- and extranet-based applications. A target system associated with the application to be accessed via SSO from user accounts in the ADS/LDAP ESSO target system is configured in the Evidian ESSO workflow. This configuration allows a user who is logged into the ADS/LDAP ESSO connected system with the corresponding ADS/LDAP account to access the application-specific connected system - for example, a Salesforce system - without additional login. The Evidian ESSO workflow operates between an Identity Store and an ADS/LDAP ESSO connected system. The workflow uses the LDAP connector on the Identity Store side and the ESSO connector on the Evidian ESSO side. The connector communicates via the Evidian User Access Web Service (labeled ESSO Web API in the next figure). The following figure shows this deployment: Figure 4. Evidian ESSO Provisioning Workflow Architecture To provision the Evidian ESSO system, you create an Evidian ESSO connected directory and link it to the ADS/LDAP ESSO target system’s connected directory. The following figure illustrates the simplified data model in Connectivity/Provisioning: Figure 5. Evidian ESSO Provisioning Workflow Data Flow The Evidian ESSO workflow has the following prerequisites: The Evidian User Access Web Service must be reachable. The Evidian certificate authority (CA) must be added to the cacerts file used by the Java-based Server (IdS-J). The Evidian ESSO system must be configured as an Active Directory target system. The accounts must be available (at least in the state IMPORTED) and linked to a user. To perform ESSO provisioning for the ADS ESSO target system, a connected directory of type ESSO (shown as ESSO in the previous figure) must be configured and linked with the ADS ESSO connected directory (shown as ADS/LDAP ESSO in the previous figure). The Evidian ESSO workflow assumes that a boolean flag dxrOptions(enablesso) is configured for the account. It’s up to you how to populate it. You can define a flag at the user that is mastered to the account or you can define rules that specify for which accounts ESSO should be enabled. Here is a target system instance-specific object description extension for the definition: ... ... To set up the Evidian ESSO workflow: Create the ADS or LDAP target system for the Evidian ESSO system. Run the validation workflow to get the account data. Link the accounts to the users. Introduce the \"enable SSO\" flag into the target system associated with the application; for example, the Salesforce TS. Create the Evidian ESSO connected directory and then link it to the ADS ESSO target system that you created in the first step. Create the Evidian ESSO workflow and then link to the target system associated with the application. Add the Evidian certificate authority (CA) to cacerts. In the Provisioning tab of the ESSO connected directory configuration object, specify the URL to the Evidian Web Service. In the Bind Profiles tab, specify a user and a password. The following figure shows the Evidian ESSO workflow’s join activity objects at the Identity Store and connected system sides as well as the related ports and channels and their relationships. Figure 6. Evidian ESSO Provisioning Workflow Join Activity, Channels and Objects In General → Associated TS for the Evidian ESSO workflow configuration object, specify the target system that corresponds to the application you want to access via Evidian ESSO. The Is applicable for section for the workflow must match the Match properties defined in the associated target system. The workflow uses the SynchOneWay controller. This section provides information about the Evidian ESSO Provisioning workflow ports. TS Port CF - Crypt Filter The standard crypt filter for password decryption. This section provides information about Evidian ESSO channels. Only accounts are supported. Since a SynchOneWay controller is used, the channel on the Identity side is only relevant for reading the necessary attributes. Direction: Identity Store → ESSO ID is calculated using the environment variables essouser and essoapplication. The environment variable essoapplication is configured at the account channel in the Specific Attributes tab and is always DirXIdentity. com.siemens.dxm.join.userhook.esso.UserHookAccountsTo Implements the \"Process Source Entry\" procedure. It reads the user link of the source entry and tries to find the corresponding account in the ADS/LDAP ESSO target system. It provides the DN (in the connected system) of this account and the State attributes in the following environment properties: essouser, essouserstate, essousercsstate. If the account cannot be found, it returns false and the entry will not be processed (you can’t manage Evidian ESSO accounts without an Active Directory account). A simple expression is used: ${env.essouser} + \",application=\" + ${env.essoapplication} + \",role=DirXIdentity\" The user DN part of the identifier is taken from the environment property essouser which is populated by the processSourceEntry user hook. The application part is taken from the essoapplication environment property. The join expression is just a dummy as the connecter does not support filters. The whole Join criteria is given by the base DN, which identifies exactly one account in the ADS/LDAP ESSO connected system. ID mapping is a Java source mapping. It corresponds to the base object of the export (if no joined entry is found): String adsUserDN = (String) env.get(\"essouser\"); String application = (String) env.get(\"essoapplication\"); targetIdStr = adsUserDN + \",application=\"+application+\",role=DirXIdentity\"; Post mapping is a Java source mapping. The following attributes control the outcome: The State attributes of the corresponding ADS/LDAP ESSO account (from environment) The dxrState of the source entry (the account in the associated target system) The flag that specifies whether ESSO should be enabled in the default dxrOption(enableesso) attribute of the source entry (the account in the associated target system) The joined entry (whether it is available) The application is defined as a Specific Attribute at the channel configuration object. This section describes how to customize the Evidian ESSO Provisioning workflow. If you want to use another attribute or another mechanism to define whether an account should be enabled for SSO: Edit the postmapping to get the flag Adapt the object description to manage this flag (optional) By default, \"cn=Accounts,\"${env.assocts}\"* is used as the search base. If your associated target system holds accounts and groups in the same folder, you need to change this to: *\"cn=Accounts and Groups,\"${env.assocts}\". The Google Apps Provisioning workflows operate between a target system of type LDAP in the Identity Store and the corresponding connected Google Apps endpoint. The workflows use the Google Apps connector for provisioning. This connector communicates with the Google Apps endpoint across the HTTP protocol using a REST API provided by Google, called Admin Directory API. The connector uses Google OAuth service for authentication and authorization purposes. The workflows handle the following objects: Users - the Google Apps users. Groups - the Google Apps groups. The delivered workflows are: Ident_GoogleApps_Realtime - the synchronization workflow that exports detected changes for account and group objects from the Identity Store to the GoogleApps server and then validates the processed changes in Google Apps to the Identity Store. The workflow also generates a password if the object is created. Validate_GoogleApps_Realtime - the validation workflow that imports existing Google Apps users and groups along with group assignments from Google Apps to the Identity Store. SetPassword in Google Apps - the workflow that sets the password for the user object in GoogleApps. The following figure illustrates the Google Apps Provisioning workflow architecture. Figure 7. Google Apps Workflow Architecture The Google Apps connector acts as a remote application to the Google Apps system. As a result, you need to create a Google Admin Account and then link it to a Google Service Account in order to be able to access the API using the OAuth 2.0. (For details, see https://developers.google.com/accounts/docs/OAuth2Login.) To obtain Google Admin Directory API credentials: Log in to the Google Developers Console with your admin user credentials at https://console.developers.google.com. Create a new project. You need only provide a name; for example, DirX-Interop. In the Projects window, navigate to APIs & auth → APIs. Search for the Admin SDK API and enable it for this user. Navigate to APIs & auth → Credentials and then create a new Service Account: In the OAuth section, click Create new Client ID. From the pop-up window, select the Service account and then click Create Client ID. Your Client ID, Service Account Email and Private P12 Key have been generated (Please download your generated key as a P12 file. You will need it when setting up the Google Apps connected directory in DirX Identity). To use the Google Admin Directory API: Log in to the Google Admin Console with your admin user credentials at https://admin.google.com. Navigate to Security → Advanced settings → Manage OAuth Client access. In Client Name, enter the client ID generated by Google in the Developers Console. In One or more API Scopes, enter the Google API scope URLs, separated by commas (we only need to be able to modify users and groups: https://www.googleapis.com/auth/admin.directory.group, https://www.googleapis.com/auth/admin.directory.user). Click Authorize and then check to see that your changes appear in the list below. Note that when you make these changes, it takes Google a little time to apply them on its side. Now you are ready to use the Google Admin Directory API. To configure the connection to Google Apps: Set up the bind credentials of the connected directory that represents the Google Apps system. Use the correct credentials (with sufficient rights). These are the credentials used for administration of the Google Apps domain. The User must be a valid Google Apps user name or e-mail address. Set up the following items in your Google Apps connected directory (in the Google API tab): Private Key - use the P12 file generated by Google for your account. Service Account Email - use the one generated by the Google developer console. Application Name - you can use anything you like. Domain Name - must contain the name of your company domain. (If the domain is not configured (default) it is deduced from the bind profile user id) If necessary, specify the HTTP proxy server in the HTTP/HTTPS Proxy Server tab. Check the provisioning settings used by the connected Google Apps system and set them to the values required by your provisioned Google Apps target system. To run the Google Apps workflows: Assign the resource family GoogleApps in the IdS-J server. The Google Apps target system requires the following layout: Accounts - all accounts (Google Apps users) are located in a subfolder Accounts. Groups - all groups are located in a subfolder Groups. The dxrPrimaryKey attribute of accounts and groups contains the identifier of these objects in the connected system. This attribute is generated only by Google. The group membership is stored at the account object and references the dxrPrimaryKey attribute of group objects. Configure the Domain property at the target system at the Options tab. This value is used as a suffix for Google Apps User Email and Group Email. The following figure shows the layout of the channels that are used by the Google Apps workflow join activity. Figure 8. Google Apps Workflow Channels and Objects The Google Apps users and groups (and memberships) are synchronized via a pair of channels (one channel per direction). The membership in the Identity Store is stored in accounts. See the default Google Apps workflow for details This section describes the Google Apps ports. TS Port CF - Crypt Filter A Google Apps filter is configured implicitly. It is used to send the decrypted password attribute userPassword to the Google Apps endpoint. In the account channel mapping, many LDAP attribute are mapped to/from Google Apps attributes. The following attributes receive special handling: Direction: Identity Store → Google Apps ID - dxrPrimaryKey Join - $\\{source.dxrPrimaryKey} Password - remember that the account’s password is inherited from the user object in Identity Store when you assign a group to a user (and the account is then created implicitly). If no password is present at the user, the account’s password is initially set to the default password. Check to make sure that the passwords comply with the password policies in effect for the Google Apps system. (By default, Google needs a password with a minimum length of eight (8) characters). userName - this attribute doesn’t need mapping because Google automatically generates the user name by concatenating the givenName and familyName givenName - this attribute is set to \"N/A\" if the user doesn’t provide a givenName. orgUnitPath - the root (/) is always mapped to this attribute because the connector doesn’t support the full functionality of the Google Apps organizational units. Direction: Google Apps → Identity Store ID - $\\{joinedEntry.id} or \"cn=\"${source.userName}\",\"+${env.role_ts_account_base} Join - ${target.dxrPrimaryKey} or ${target.id}. givenName - ${joinedEntry.givenName} or ${source.givenName} because the Google Apps system may register the changes after the validate workflow is finished. sn - ${joinedEntry.sn} or ${source.familyName} because the Google Apps system may register the changes after the validate workflow is finished. dxrName - ${joinedEntry.dxrName} or ${source.userName} because the Google Apps system may register the changes after the validate workflow is finished. c, l, postalCode, postalAddress, postOfficeBox, st, street - these attributes are all mapped from Google’s multi-valued addresses attribute only for the address flagged as primary. secretary - Google permits multiple secretaries. Only the first entry is mapped to the Identity Store. employeeNumber - mapped from Google’s multi-valued externalIds attribute only for the externalId of type organization. Mappings are defined for the Google Apps attributes Name, Description and Email. Direction: Identity Store → GoogleApps ID - dxrPrimaryKey Join - ${source.dxrPrimaryKey} Post-Mapping - if the dxrState attribute in the Identity Store is DELETED, the operation (as part of the mapped entry) is set to DELETE. Direction: GoogleApps → Identity Store ID - ${joinedEntry.id} or \"cn=\"${source.groupName}\",\"+ env.role_ts_group_base} Join - ${target.dxrPrimaryKey} or ${target.id}. dxrTSState - the attribute used to detect the current state of the group in Google Apps. It is set to ENABLED for existing entries and to DELETED for non-existing entries. The member-channel configuration holds the mapping of the group members. A password channel updates the Google Apps account passwords. The Imprivata OneSign Provisioning workflows are used to synchronize data between a target system of type SPMLv1 in the Identity Store and the corresponding connected Imprivata OneSign system. The Imprivata OneSign is provisioned via the SPMLv1 messages sent to an enabled Provisioning System Adaptor in the Imprivata OneSign appliance. The workflows handle the following Imprivata OneSign objects: Subscriber - the subscriber represents the physical user. It holds the demographical data and can be used for accessing Imprivata OneSign. Account - each user can have one or more application accounts to log into an application managed via Imprivata OneSign. It stores the application credentials. The delivered workflows are: Ident_Imprivata_Realtime - the synchronization one-way workflow that exports detected changes for a subscriber object from Identity to the Imprivata OneSign and updates the state of the affected entry in Identity. SetPassword in Imprivata - the workflow that sets the password for the subscriber object in Imprivata OneSign. Ident_ImprivataExtranetPortal_Realtime - the synchronization one-way workflow that exports detected changes of application credentials for an application account object from Identity to Imprivata OneSign. The workflow does not update the state of the account entry in the Identity target system. This workflow is a sample that works by default from the Extranet Portal target system in the My-Company sample domain. SetPassword in ImprivataExtranetPortal - the workflow that sets the password for the application account object in Imprivata OneSign. This workflow is a sample that works by default from the Extranet Portal target system in the My-Company sample domain. The subscriber object is directly mapped to the single account object of the corresponding Imprivata target system in the Provisioning configuration. The application account object is mapped to a real account of a target system in DirX Identity, which is configured in Imprivata OneSign as an application for single sign-on (SSO). The following figure illustrates this object mapping. Figure 9. Imprivata Object Mapping As shown in the figure: The Imprivata OneSign Domain is mapped to the DirX Identity target system The Imprivata OneSign Subscriber is mapped to the DirX Identity account in the Imprivata target system The Imprivata OneSign Application is mapped to any DirX Identity target system that allows setting passwords The Imprivata OneSign Account is mapped to the DirX Identity account of any target system that permits passwords to be set At each event, the Imprivata application target systems real-time provisioning triggers two different workflows. One workflow synchronizes the entries for the real application (for example, actualizes an account in an LDAP connected directory) and the other workflow synchronizes the credentials of the user for the LDAP application configured in Imprivata OneSign for SSO. Both workflows handle the events with the same topic. The following figure illustrates these workflows. Figure 10. Imprivata Workflows The subscriber and account objects in an Imprivata OneSign target system and in a target system managed via Imprivata OneSign must be created, modified and deleted in the same time. It is necessary to build a privilege structure that supports the concurrent handling of the Imprivata OneSign subscriber and account objects (use permissions that are linked to the corresponding groups to accomplish this task). The Imprivata Provisioning workflows support: Imprivata OneSign 4.1 SP1 or newer. One-to-one relationship between a subscriber object and an application account object in an application. More accounts for a subscriber in an application are not supported. The Imprivata Provisioning workflows do not support: Disable operation for subscriber objects. Only the delete operation is supported. Reconciliation of the subscriber or account objects due to search operation limitations of the Imprivata OneSign Provisioning System Adaptor. To configure the connection to Imprivata: Specify the IP Address of the Imprivata OneSign host. Imprivata OneSign is typically configured to accept SPMLv1 requests on the pre-configured secure port 443 and forces the use of the secured transport layer (HTTPS). Use the corresponding Imprivata service object which is the part of the connected directory that represents Imprivata OneSign. URL Path and Socket Timeout can be configured at the target system port of the appropriate workflow object. The URL Path of the Imprivata OneSign SPMLv1 provisioning service is pre-configured to the default value sso/provision/spmlrouter, Do not change this setting. Use Socket Timeout to increase the timeout value (in seconds) if necessary. The Imprivata OneSign provisioning service does not use the bind credentials of the connected directory. Use the pre-configured values. The HTTPS protocol requires the Imprivata OneSign certificate used for the secured connection to be trusted by the Java Runtime Environment for DirX Identity which is located in dxi_java_home. Perform trust store administration with Java keytool and import the Imprivata OneSign certificate. (See the chapter \"Using OneSign Provisioning Features\" in the Imprivata OneSign documentation for more details.) Imprivata OneSign workflows use a specially implemented SPMLv1 based connector. Each SPMLv1 request sent to Imprivata OneSign must be identified by a External System Name which is part of the target system port of the appropriate workflow object. It is also pre-configured in the mapping for the channels that synchronize subscriber and account objects. This name is equivalent to the name of the configured Provisioning System Adaptor in the Imprivata OneSign appliance. Set these values in channel mappings and in the connector port according to the values configured in the Imprivata OneSign system. The Imprivata target system requires the following layout: Accounts - one account object exists in the Identity target system for each Imprivata OneSign subscriber object in the connected system. All accounts are located in the subfolder Accounts. Groups - Imprivata OneSign does not use any type of group. Use a pre-configured \"virtual\" group for the creation of the Imprivata OneSign subscribers. The dxrPrimaryKey attribute has a special meaning: it stores the generated Imprivata ID for subscriber objects. The dxrName attribute is a single copy of the employeeNumber attribute by default and is used as the username in Imprivata OneSign. An application target system managed via Imprivata OneSign requires the following layout: Accounts - one account object exists in Identity for every Imprivata OneSign account object in the connected system. All accounts can be located in an Accounts subfolder. Groups - Imprivata OneSign does not require any type of group from the application target system. To assign accounts, use existing groups of the managed application. Accounts and groups - an application can also work with the single common subtree containing both accounts and groups. The dxmGUID attribute has a special meaning for Imprivata OneSign application accounts: it stores the generated Imprivata ID for account objects. The uid attribute is a single copy of the employeeNumber attribute by default. It must be generated in the same way as the dxrName attribute for the subscriber objects since it is used to identify the corresponding subscriber for the account object. The dxrName attribute for the application account objects is mapped to the application username. To keep the mapping from subscriber to account consistent, you may need to update the object descriptions for the target system accounts that are used as accounts for the Imprivata OneSign application (typically, you must define an additional configuration of the uid attribute). The following figures show the layout of the channels that are used by the join activity. Figure 11. Imprivata Workflow Channels for Imprivata OneSign Subscriber Objects As this figure shows, the Imprivata OneSign subscriber objects are synchronized via a pair of channels. The group channels are only present to handle incoming events for groups. Such events are ignored. Figure 12. Imprivata Workflow Channels for Imprivata OneSign Account Objects As this figure shows, the Imprivata OneSign account objects are also synchronized via a pair of channels. The group channels are only present to handle incoming events for groups and are also ignored. This section provides information about the Imprivata workflow ports. TS Port Crypt Filter An Imprivata Filter is configured implicitly. It is used to send the password and applicationPassword subscriber and account application password attributes in the SOAP request decrypted to Imprivata OneSign via SPMLv1. This filter is used only for the password synchronization workflow. The initial password is pre-configured (see the mapping for the channel account on the Identity side for both workflows). This section provides information about Imprivata workflow channels. Direction: Identity Store → Imprivata OneSign userDisabled - the attribute used for disabling of the subscriber object in Imprivata. The value is derived from dxrState attribute of the corresponding account object in DirX Identity. The subscriber cannot be disabled in the default configuration, but it can be deleted. Direction: Imprivata → Identity Store The workflow only uses the one-way synchronization controller, so updates can only be made via a user hook. Direction: Identity Store → Imprivata OneSign ID: dxrPrimaryKey Join: ${target.externalSystemName}, ${target.externalDomainName} and ${target.username} Username: dxrName User hook stores the subscriber ID generated by Imprivata OneSign to the dxrPrimaryKey attribute. It also updates the state of the entry returned by the Imprivata OneSign. Direction: Identity Store → Imprivata OneSign ID: dxmGUID Join: ${target.externalSystemName}, ${target.externalDomainName}, ${target.externalApplicationName} and ${target.username} Username: uid Application username: dxrName User hook stores the account ID generated by Imprivata OneSign to the dxmGUID attribute. PostMapping script changes the type of the request to delete if necessary. Direction: Identity Store → Imprivata OneSign User hook ignores all incoming event to update the group objects to Imprivata OneSign. A password channel updates the subscriber and account passwords. A password channel can also be configured backwards from the connected system to the Identity Store to be able to update some attributes in Identity after a password change or reset has taken place in the connected system. The join engine then synchronizes the attributes specified in the corresponding password channel mapping to the Identity Store as usual after the account with its password-relevant attributes is updated in the connected system. The JDBC Provisioning workflow synchronizes data between a JDBC target system within the Identity Store and a relational database. The following figure shows the deployment. Figure 13. JDBC Provisioning Workflow Architecture The workflow uses the LDAP connector on the Identity Store side and the JDBC connector on the database side. The connector communicates with JDBC drivers. The default JDBC workflow is set up for three application-related database tables that hold accounts, groups and memberships. The membership table keeps the relationship between the accounts and the groups. Handling of other or more tables is a customization task. You must install the driver jar files that correspond to the JDBC drivers you intend to use. For each IdS-J Server installation, place the jar files in the server’s confdb\\common\\lib directory to enable the IdS-J Server to use the drivers. The default for new JDBC target systems is now that memberships are held at the account objects, which enhances performance for the real-time workflows. Because the Tcl-based workflows assume memberships at group objects, you cannot use the Tcl-based JDBC provisioning workflows in parallel with the JDBC real-time workflows for the same target system instance. The JDBC connector runs in lite mode as much as possible, which means that database meta information is read from the database and therefore must not be explicitly configured. To configure the connection to JDBC: Select the type in the Configuration Page of the JDBC Connected Directory and the corresponding Driver Type. Check the driver’s documentation to determine the URL that is required to connect. Memberships are held at the account objects. The default workflow configuration assumes that every provisioned table has an auto-generated primary key. This key cannot be calculated in DirX Identity. It is generated by the database. This key is used as dxrPrimarykey. Attributes in the DirX Identity target system belong to the corresponding attributes in the JDBC target system. DirX Identity - Group JDBC - Group Table Remark cn dxrGroupName Unique name in DirX Identity dxrPrimaryKey, dxrName ID (DB key) Identifiers DirX Identity - Group JDBC - Memberships Table Remark dxrPrimaryKey, dxrName of group GroupID: DB key of group Identifiers DxrPrimaryKey, dxrName of referenced account AccountID: DB key of account Identifiers DirX Identity - Account JDBC - Accounts Table Remark cn DxrAccountName Unique name in DirX Identity dxrPrimaryKey, dxrName ID (DB key) Identifiers The following figure shows the JDBC workflow’s join activity objects at the Identity Store and connected system sides as well as the related ports and channels and their relationships. Figure 14. JDBC Provisioning Workflow Join Activity, Channels and Objects As shown in the figure: The \"accounts\" channel points to the \"member\" channel because the accounts keep the memberships. The primary channel construct defines the memberships in the database. The password synchronization workflow uses the password channel. This section provides information about the JDBC workflow ports. TS Port CF - Crypt Filter The standard crypt filter for password decryption. JF - JDBC Filter A JDBC Filter is configured. It is used to transform multi-value membership attributes in Identity to multiple records in the JDBC membership table. As the Filter is a general Filter for handling transformation of multi-value attributes to multiple records, its configuration is independent of the workflows environment. Configuration: Request: Member Attribute - the attribute that holds the target of the membership. Default: GroupID (because the Accounts table references the Groups table). Member Table - the table that holds memberships. Default: Memberships. Member Source Attribute - the attribute that holds the source of a membership. Default: AccountID as Accounts reference groups. Search Response: Match Type - the attribute used for matching records corresponding to the same identity object. Here it is accountID, as all memberships belonging to this account have the same accountID. Multivalue Attributes - the attribute that should be accumulated. Default: GroupID as all GroupIDs should be stored at the corresponding account. This section provides information about JDBC workflow channels. Direction: Identity Store → JDBC ID is calculated via calculateIdInJdbc. For details, see the Java documentation. Direction: JDBC → Identity Store ID is calculated via CommonProcsJDBC.calculateIdInIdentity. It assumes that the specific attributes \"accountnameatt\" and \"groupnameatt\" (at the JDBC connected directory) contains the attribute names holding the (unique) account name and (unique) group name attributes. dxrName is taken from the database ID column. Direction: Identity Store → JDBC (TS Account-Group-Membership) ID: \"accountId=\"$\\{source.dxrPrimaryKey}\",Table=Memberships\" Primary Channel account Join: Memberships.AccountID = ID Maps the dxmPassword to the password column in your account table. A password channel can also be configured backwards from the connected system to Identity to be able to update some attributes in Identity after a password change or reset has taken place in the connected system. The join engine then as usual synchronizes the attributes specified in the corresponding password channel mapping to Identity after the account with its password-relevant attributes has been updated in the connected system. You can customize the JDBC workflows in two ways: Adapt the database scheme in relationship to a different table layout Call stored procedures In most cases, your database table(s) will differ from the assumed default tables. Table Names In every mapping where the syntax Tablename.ColumnName is used, change the table name IDMapping → JDBC: Change calculateIdInJdbc targetId = CommonProcsJdbc.calculateIdInJdbc( sourceEntry, joinedEntry, env, entry_type, \"Groups\", \"groups-id\"); If your Group Table is named GRP, change to: targetId = CommonProcsJdbc.calculateIdInJdbc( sourceEntry, joinedEntry, env, entry_type, \"GRP\", \"GRP-id\"); Change the Export Search base. At the JDBC CD, set the SpecificAttribute membertable to your membertable. At the JDBC filter, adjust the member table. Column Names You can change the column names directly in every mapping line. If you want to select attribute names from a list, you must edit the JDBC CD attribute configuration. If column names of the columns holding the unique identity attribute (by default, dxrGroupName, dxrAccountName) differs, adjust this in JDBC CD SpecificAttribute accountnameatt / groupnameatt If an ID attribute changes: All mappings containing ID Channels → Id: dxrName/dxrPrimaryKey/dxrPrimaryKeyOld: Javamapping sourceAttrName = \"ID\"; Account-group-membership channel: join condition Primary If accountID/groupID changes in membership table: JDBC filter configuration Adjust Specific attribute memberatt/ membersourceatt at JDBC connected directory ID Mapping → JDBC account-group-membership Primary Channel join secondary account-group-membership Join in account-group-membership channel Primary Key is not an Auto Key This is not possible in pure lite mode. Define instead the primary keys (in TS port): Accounts.ID Groups.ID Memberships.ID Accounts Groups Memberships Here a separate ID column in the membership table is assumed. It’s also possible account-id and group-id defines the key. In this case the definition of the membership table and the corresponding abbreviation is not needed. Use the defined abbreviation for id column in ID mapping targetId = CommonProcsJdbc.calculateIdInJdbc( sourceEntry, joinedEntry, env, entry_type, \"Accounts\", \"account-id\",false); Use CommonProcsJdbc.calculateIdInJdbc with argument autogeneratedkey=false. Use the defined abbreviation in members channel as the primary value in Primary Channel join condition. Use the defined abbreviation in join condition \"accountid=\"+${source.dxrPrimaryKey}+\",Table=Accounts\" Use the defined abbreviations in Primarykey(old) and DxrName Java mapping at Identity side. Change the object description to generate a unique key for dxrPrimaryKey. Use a Column to specify the Account State To configure a column representing the account state in your account table insert a new line at the JDBC connected directory propertypage Specific Attributes. As name enter accountstateatt. Fill in the column name as value. The default dxrTSState Mapping for the account uses this column to set the dxrTSState if the configured column exists. Only the values ENABLED and DELETED are allowed. If your column contains other values, you must map your values to these allowed values. To do this edit the dxrTSState mapping at the account channel. Under the default JDBC TS port, you will find an example for a stored procedure definition. The sample represents a SQL server stored procedure returning 0 on success. It takes two parameters: the ID that identifies the record and the password that should be set. To call this stored procedure, an extended request is necessary. This request may be called in the postmapping or in a user hook. Building the extended request in the postmapping means that it is called after a normal request. Call via postmapping: In the default setPassword channel, you will find an example (in comments): logger.debug(\"SP postmapping called\"); HashMap sourceAttrs = source.getAttrs(); if (sourceAttrs == null) return mappedEntry; // the Stored Procedure + String theSP = \"changePassword\"; ExtendedRequest extReq = new ExtendedRequest(); mappedEntry.addExtendedRequest(extReq); // append the SP call as extended request extReq.setRequestID(\"SPCall\"); OperationIdentifier opId = new OperationIdentifier(); opId.setOperationID(theSP); // name of SP + opId.setOperationIDType(OperationIdentifierOperationIDTypeType.GENERICSTRING); extReq.setOperationIdentifier(opId); ProviderIdentifier provId = new ProviderIdentifier(); provId.setProviderID(\"SP\"); // SP for Stored procedure provId.setProviderIDType(ProviderIdentifierProviderIDTypeType.URN); extReq.setProviderIdentifier(provId); // assume two parameter, the ID the password pw + // first ID from source ??later also from mappedEntry + // only the first element of attArr is computed by the connector + Attributes[] attArr = new Attributes[1]; DsmlAttr pkey =sourceAttrs.get(\"dxrprimarykey\"); DsmlAttr id = new DsmlAttr(); id.setName(\"ID\"); id.addDsmlValue(pkey.getDsmlValue(0)); Attributes atts = new Attributes(); atts.addAttr(id); logger.debug(\"SP argument ID: \"+pkey.getDsmlValue(0).toString()); // second Password from mapped pw attr DsmlModification[] mod = mappedEntry.getModification(\"pw\"); if (mod.length > 0) { // take first DsmlAttr pw = new DsmlAttr(); pw.setName(\"pw\"); pw.addDsmlValue(mod[0].getDsmlValue(0)); atts.addAttr(pw); logger.debug(\"SP argument pw: \"+pw.getDsmlValue(0).toString()); } attArr[0] = atts; extReq.setAttributes(attArr); // only extended Request to be processed mappedEntry.setRequestType(Request.Type.NONE); Here the first argument ID is taken from the source attribute dxrprimarykey. The second argument is taken from the mapped entry. This example shows that you can do some complicated mapping and take the result as an argument. Keep in mind that for mapped attributes, modifications will be generated. If you do not want the password to be set twice (by generated modification an by stored procedure) you can use the attribute flag Readonly to prevent it. In this sample, the RequestType is set to NONE at the end, which means that only the stored procedure is called and other generated modifications are ignored. Normally you do not intend to do this, so all generated modifications are made (for example, the description has changed) and afterwards the stored procedure is called to set the password column. In the com.siemens.dxm.join.userhook.jdbc.UserHookAccountsTo user hook, you will find an example of how to call a stored procedure in a user hook. /** * Call an SP via extended request * * Can also be done in postMapping or another user hook * @see com.siemens.dxm.join.api.IUserHookExt#preUpdate(siemens.dxm.connector.DxmRequestor, siemens.dxm.connector.DxmRequestor, siemens.dxm.connector.spml.Identifier, java.util.HashMap, com.siemens.dxm.join.map.MappedEntry, siemens.dxm.connector.spml.Identifier, java.util.HashMap) */ public boolean preUpdate(DxmRequestor srcConn, DxmRequestor tgtConn, Identifier sourceId, HashMap sourceAttrs, MappedEntry mappedEntry, Identifier joinedId, HashMap joinedAttrs) { // the Stored Procedure String theSP = \"changePassword\"; ExtendedRequest extReq = new ExtendedRequest(); extReq.setRequestID(\"SPCall4SetPassword\"); OperationIdentifier opId = new OperationIdentifier(); opId.setOperationID(theSP); // name of SP opId.setOperationIDType(OperationIdentifierOperationIDTypeType.GENERICSTRING); extReq.setOperationIdentifier(opId); ProviderIdentifier provId = new ProviderIdentifier(); provId.setProviderID(\"SP\"); // SP for Stored procedure provId.setProviderIDType(ProviderIdentifierProviderIDTypeType.URN); extReq.setProviderIdentifier(provId); // we have two parameters, the ID and the password pw // first take ID from source attributes // only the first att is computed by the connector Attributes[] attArr = new Attributes[1]; DsmlAttr pkey =sourceAttrs.get(\"dxrprimarykey\"); DsmlAttr id = new DsmlAttr(); id.setName(\"ID\"); id.addDsmlValue(pkey.getDsmlValue(0)); Attributes atts = new Attributes(); atts.addAttr(id); logger.debug(\"SP argument ID: \" + pkey.getDsmlValue(0).toString()); // second parameter Password from mapped pw attribute DsmlModification[] mod = mappedEntry.getModification(\"pw\"); if (mod.length > 0) { // take first DsmlAttr pw = new DsmlAttr(); pw.setName(\"pw\"); pw.addDsmlValue(mod[0].getDsmlValue(0)); atts.addAttr(pw); logger.debug(\"SP argument pw: \"+pw.getDsmlValue(0).toString()); } attArr[0] = atts; // IN and IN_OUT parameters extReq.setAttributes(attArr); if (tgtConn instanceof DxmConnectorExtended) { // call extended Connector DxmConnectorExtended theConnector = (DxmConnectorExtended)tgtConn; try { ExtendedResponse rsp = theConnector.extendedRequest(extReq); } catch (DxmConnectorException e) { logger.error(\"SP Call failed: \",e); } } // process extended request only // ignore other modifications to avoid a 2nd modification of the mapped pw mappedEntry.setRequestType(Request.Type.NONE); return true; } What’s the difference? In a user hook, you must call the connector’s extendedRequest method explicitly. In postmapping, you just build the extendedRequest and add it to the mapped entry: mappedEntry.addExtendedRequest(extReq); // append th SP call as extended request General Notes: Always set \"SP\" as providerId Attributes Array always has size 1. Every argument is an element of this one and is the only array element. Function or Procedure? The definition of a stored procedure may depend on the database system. For the JDBC connector definition, a function is defined if it returns a value. If no value is returned, it is a procedure. Here is a Microsoft SQL Server 2005 stored procedure: ALTER PROCEDURE [dbo].[changePassword] -- parameters for the stored procedure @userId int, @pw varchar(50) This stored procedure returns an int, which means you must configure this procedure as a function: In Oracle, a stored procedure does not return a value, which means you must configure a procedure. But for a procedure, you must specify the \"return\" argument because the connector needs an indicator for the outcome of the procedure. Therefore, you cannot use a procedure with the same arguments in Oracle. You must wrap the procedure to get an \"out\" argument for return: The LDAP Provisioning workflows operate between a target system of type \"LDAP\" in the Identity Store and the corresponding connected LDAP Directory system. The LDAP connector used in the workflows communicates with the LDAP server across the native LDAP protocol, as shown in the following figure. Figure 15. LDAP Workflow Architecture The workflows allow you to synchronize Identity account and group objects with LDAP Directory users and group objects. The LDAP workflows currently have no prerequisites or limitations. This section provides information about LDAP target system configuration. Connection to the target system: Specify the IP address, the data port, and the secure port at the LDAP service object (LDAP CD → Service). The IP address may contain the server name - fully-qualified or not - or a TCP/IP address. In the Bind Profile (LDAP CD → Bind Profile), specify a user in DN format. For SSL/TLS, fill the following fields: SSL Connection - check it for SSL connections, whether server or client authentication. Client Authentication - check if if you want to use client-side SSL. Path to Key Store File - the file name of the file-based keystore containing the certificate/private key pair and the relevant CA certificates for this client certificate. Key Store Password - the password for accessing the key store. Key Store Alias - the alias name of the keystore entry (optional). Path to Trust Store File - the file name of the file-based truststore containing the LDAP server CA certificate. Trust Store Password - the password for accessing the truststore. Pay attention to the following attributes: The attribute dxrPrimaryKey of accounts and groups contains the object’s target system DN. It is also used as the member attribute of groups. On account creation, it is generated by the tsaccount.xml object description using the connected directory-specific attributes account base and group base. The attribute dxrName of accounts and groups contain the dxrPrimaryKey value. It is used for joining in Identity direction. The following figure shows the layout of the channels that are used by the join activity. Figure 16. LDAP Workflow Channels As the figure shows, there is a pair of channels between accounts, groups and members on each side. The members are linked to the groups on both sides. This section describes LDAP workflow ports. TS Port CF - Crypt Filter The configured Crypt Filter is used to send the password attribute userPassword decrypted to the LDAP server. This section provides information about LDAP workflow channels. Master attributes: Most attributes (except, for example, the dxrTSState attribute) are mastered by DirX Identity. Consequently, these attributes have the OnAddOnly flag in the mapping direction to Identity. This is particularly true for the Identifier, which is also mastered by DirX Identity in the default real-time synchronization workflow. In the target system direction, it is calculated by DirX Identity in the dxrPrimaryKey attribute and results in moving the object in the target system if dxrPrimaryKey changed. In the DirX Identity direction, the Identifier is calculated only on an add operation, otherwise the joined object’s Identifier is taken. Moving account objects: The default LDAP real-time synchronization workflow can perform a rename/move of accounts in the LDAP target system. It operates in the following way: If the dxrPrimaryKey attribute of the account is changed in DirX Identity (as a result of a user resolution and new calculation of the account attributes, which can have dependsOn or masteredBy settings in the account’s object description), the workflow performs the following actions: It takes this as the new DN in LDAP. It tries to find (join) the account with the configured join attributes (trying one after the other). One of the join attributes is the employeeNumber, which shouldn’t change on user resolution in Identity. When it finds the account in LDAP, it takes this DN is as the old DN and renames/removes the account from this old DN to the new DN. On the way back, it puts the actual LDAP DN into the dxrPrimaryKey and dxrPrimaryKeyOld attributes in DirX Identity. The dxrPrimaryKeyOld (as described above) is not taken for sync to TS but for other purposes. Changing the account state holding the attribute employeeType: If you want to use another attribute for holding the account state than employeeType you must do the following mapping adaptions in the account channel: Direction Identity → Connected System Just change the java mapping line with employeeType on the right side by exchanging employeeType with another attribute name. The content of the Java coding on the left side has not to be changed because it references now the term tgtAttrname instead of hard coded employeeType. The Java class name is just changed to the new attribute name if the mapping is saved. Direction Connected System → Identity Adapt the Java mapping to the target attribute dxrTSState and exchange employeeType in the line CommonProcsLdap.setAccountStateAttr(\"employeeType\"); by the new attribute name. PostMapping: A postMapping exists only for the group channel in the target system direction. It is used for changing the request type to DELETE if the dxrState attribute in Identity contains the value DELETED, which results in deleting the object in the target system. For accounts deletion of objects in the target system is handled in the Java mapping to the account state holding attribute, which is by default employeeType. The target system’s password attribute userPassword is updated with the current password of the account in DirX Identity and the pwdReset attribute, which determines whether or not the password must be changed on the next login by the user, is set depending on the source attribute dxmPasswordExpired. This attribute was previously set by the User or Account Password Event Manager workflow listening for requests from Identity Web Center or Password Listener. If you want to enable case-sensitive renames like ou=RedFlag → ou=Redflag, you need to set the operational attribute caseExactRDNComparison to true in the generated request. Use the Op. Mapping tab of your channel get this into the workflow: true For a general explanation of the delta workflows, see the sections under \"Java-based Workflow Architecture\" in \"Understanding the Default Application Workflows\" in this guide. The default LDAP delta workflow LDAP_Ident_Realtime_Delta (as the workflow name already implies) synchronizes deltas from an LDAP connected system to the Identity Store both for accounts and groups. You can verify this function by looking at the deltaSyncOneWay2Identity controller used by the workflow. The delta definitions given in the Delta tab for the LDAP connected directory’s channels apply (Connectivity Configuration Data → Connected Directories → Target Scheduled → LDAP → Channels). Delta synchronization for the LDAP connected directories is based on time stamps: specifically, the LDAP attributes createTimeStamp and modifyTimeStamp. In the Delta tab, Delta Type is set to SearchAttributes and the two LDAP attributes are listed, and in Sort Type, the value String is selected. When searching for deltas, the (configured) export search filter is extended and entries whose createTimeStamp or modifyTimeStamp attributes are set to a value that is more recent than (or equal to) the time stamp of the previous workflow run will be searched. For the first run, the (configured) export filter is not changed because there is no time stamp available for comparison. When evaluating the search result, the most recent time stamp is retained as delta information and is stored in the Identity domain for each channel. This time stamp is subsequently used when the workflow is next activated (either in the DirX Identity Manager or by schedule). The Delta tab of the corresponding channels (that is, the Identity Store channels) hold delta definitions, too. These definitions apply if you have defined a delta workflow for synchronization from the Identity Store to the LDAP connected system. The IBM Notes (formerly Lotus Notes) Provisioning workflow synchronizes data between an IBM Notes target system within the Identity Store and an IBM Domino server. The following figure shows the deployment. Figure 17. IBM Notes Workflows Architecture The join engine running in the Java-based Server needs to send and retrieve data from a Domino server. The Notes API that is used for accessing the Notes address book is a C/C interface. Therefore, the Notes Provisioning workflow provides an SPML/SOAP connector that enables the join engine to exchange SPML requests and responses with the C-based Server. The SPML/SOAP-service running in the C-based Server exchanges the SPML requests and responses with the Notes connector, which finally interacts with the Domino server using the Notes C/C-API. The Notes Provisioning workflow allows you to synchronize accounts and groups with Notes users and groups in the Notes address book. The Notes Provisioning workflow has the following prerequisites and limitations: The workflow requires the version of Notes C/C++-API V 7.0.2 or newer. Before you can use the workflow, you must extend the DirX Identity Store schema with Notes target system-specific attributes and object classes so that the workflows can store Notes-specific information in the Identity Store. For instructions, see the section \"Extending the Schema for the Target System Workflows\". Configuring a Notes Provisioning workflow consists of the following steps: Configuring the Notes Connector (running in the C++-based Server) In Identity Manager, log in to Connectivity, go to the Expert View, and set the Is Active flag in Connectivity Configuration Data → Configuration → DirX Identity Servers → C Servers → server_name → Notes_Connector_name Verify the attributes of the C++-based Server (in ConSvr SOAP Listener and ConSvr SOAP Receiver tab) in Connectivity Configuration Data → Configuration → DirX Identity Servers → C Servers → server_name Configuring the Notes Service Assign the Notes server name in the following (Notes-specific) format: CN=server_name/O=org_name[/…​] Make sure that the attribute types in the server name (for example, CN, O, OU) are specified in uppercase letters. Example 1. Notes server name format CN=my-server/O=my-organization Configuring the Connected Directory Assign the Addr(ess) Book field. In the Provisioning tab, check the fields Account Base and Group Base in \"in Identity\" property page. user Base and Group Base in \"in Target System\" property page. Admin Request Database, Admin Request Author, Group Member Limit and Unique Org Unit Attr in \"Notes specific\" property page. For details see the section \"Static Configuration\" in the DirX Identity Connectivity Reference. Configuring the Bind Profiles At least two bind profiles are required: one for the Notes administrator (Admin) and another one for registering, moving or renaming users (Certifier). Others may be required when moving Notes users to different organizations or organizational units. (one per organization or organizational unit) Note that the User field of the bind profile is used as the file name of the appropriate Notes ID file. Furthermore, make sure that the file name exactly matches the file in the Notes profile when used as “PathFileCertId”. For details, see the section “Static Configuration” in the DirX Identity Connectivity Reference. Configuring the Organizational Specific Profiles For registration of users or moving users in the Notes address book, the Notes APIs need several attributes. For details, see the topic “Notes Connector” in the DirX Identity Connectivity Reference. Profiles are used for storing Notes-relevant attributes per organizational unit in order to avoid storing each attribute in the account separately. The profiles are located in domain_root → TargetSystems → Targetsystem_name → configurations → profiles At least one default profile must exist. It’s used when no organizational unit specific one is available. To support Notes groups and accounts in Identity Store, the service layer makes use of object descriptions and Java scripts that are located in domain_root → TargetSystems → Notes → ObjectDescriptions domain_root → TargetSystems → Notes → JavaScripts The following object descriptions are provided: Group.xml - for creation of Notes groups in the Identity Store Profile.xml - for creation of profile objects (profiles) in the Identity Store TS.xml - for creation of a Notes target system in the Identity Store TSAccount.xml - for creation of Notes accounts in the Identity Store The following Java scripts (called when processing the object descriptions) are also provided: mail.js - for creation of the mail attribute ProfileFromOU.js - for creation of the dxrProfileLink attribute UniqueNameForAccounts.js - for creation of the dxrPrimaryKey attribute for accounts (which represents the attribute FullName in Notes) UniqueNameForGroups.js - for creation of the dxrPrimaryKey attribute for groups (which represents the attribute ListName in Notes) The following section describes these object descriptions in detail. Object Descriptions This section provides detailed information about object descriptions. Group.xml The object description is used for creation of a Notes group in the Identity Store. Profile.xml The Notes APIs need several attributes for registration of users or moving users in the Notes address book. For details, please refer to the section Notes Connector” in the DirX Identity Connectivity Reference. Profiles are used for storing Notes-relevant attributes per organizational unit in order to avoid storing each attribute in the account separately. The profiles are located in domain_root → TargetSystems → Targetsystem_name → configurations → profiles At least one default profile must exist. It is used when no organizational unit specific one is available. The available attributes from the Notes profile objects are: Control parameters: CreateIdFile CreateMailDatabase CreateMailDBNow CreateNorthAmericanId SaveIdInAddressBook SaveIdInFile SaveInternetPassword DeleteMailFile Other attributes: CertifierStructure (will be passed as TargetCertifier to the Notes Connector) ClientType DbQuotaSizeLimit DbQuotaWarningThreshold DefaultMailServer (will normally be mapped to the attribute MailServer) LocalAdmin MailACLManager MailForwardAddress MailOwnerAccess MailServer MailSystem MailTemplate MinPasswordLength OtherMailServers PathFileCertId PathFileCertLog PathUserId RegistrationServer Validity TS.xml The object description is used for creation of a Notes target system in the Identity Store. TSAccount.xml The object description is used for creation of a Notes account in the Identity Store. New accounts inherit many attributes from the user. (for example, description, ou, and so on). The following attributes are explicitly set by the object description and hold the following default values: dxmLNcreateInAddressBook=true dxmLNregisterUser=true dxmLNuserRegistered=false dxmLNuserInAddressBook=false There are a few attributes that depend on others: dxrProfilesLink depends on ou dxrPrimaryKey depends on dxrProfileLink dxmLNuniqueOrgUnit depends on dxrPrimaryKey mail depends on dxmLNshortName Keep in mind that dxrProfileLink is only set for new objects (see description of ProfileFromOU.js) and therefore all the other attributes are only created and never changed. Java Scripts This section provides detailed information about Java scripts. Mail.js In the object description TSAccount.xml, the Java script mail.js is called to generate the mail attribute of the account. The value is calculated whenever the attribute dxmLNshortName changes or is created for the first time. The script checks whether the account object holds the attribute dxrProfileLink. If true, it uses the attribute dxrCreateObjDefaults(mail) of the profile. The value of that attribute is used as a suffix that is blindly appended to the calculated value of the mail address. If dxrCreateObjDefaults(mail) is not set or the attribute dxrProfileLink is not available, then no mail attribute value is returned. If the mail suffix is available, the mail attribute is calculated in the following way: value_of_givenName.value_of_sn.value_of_dxmLNshortName@mail_suffix If one of the attributes givenName, sn (surname), dxmLNshortName is not set, the missing components (including the delimiter for the next component) are dropped. The return value of the Java script is stored in the variable \"mail\". ProfileFromOU.js In the object description TSAccount.xml, the Java script ProfileFromOU.js is called to generate the dxrProfileLink attribute of the account. The value is returned in the variable dxrProfile and is set based on the value of the attribute ou. If a value of the organizational unit is present, the script tries to find the appropriate profile in the target system specific subtree domain_root → TargetSystems → TargetSystem_name → configuration → profiles by matching the ou value with the cn value of the profile. If no profile for that organizational unit was found or if the ou attribute in the account is empty, the Java script tries to find the default profile. If there is no default profile, the return value dxrProfile of the Java script is \"\". Note that the attribute dxrProfileLink is only calculated for new objects. If, for example, the ou changes in the user object, then the ou attribute in the account changes, too (by a master mechanism); nevertheless, the attribute dxrProfileLink is not updated (even if it depends on attribute ou). It is a workflow task (in the user hooks) to update the attribute dxrProfileLink after having renamed the user in the Notes address book. UniqueNameForAccounts.js In the object description TSAccount.xml, the Java script UniqueNameForAccounts.js is called to generate the dxrPrimaryKey attribute of the account. The value is returned in the variable UniqueNameAccount. The attribute UniqueNameAccount must be unique and is generated the following way: CN=value_of_givenName value_of_initials value_of_sn/OU=value_of_uniqueOrgUnit/O=value_of_orgUnit Setup of CN is straightforward. Missing components are simply ignored and the delimiter moves to the next components. The other components require a more sophisticated approach. For the components O and OU, the Java script reads the attributes dxrCreateObjDefaults(Unique) dxrOptions(TargetCertifier) of the relevant profile (that is defined in the attribute dxrProfileLink). The attribute dxrOptions(TargetCertifier) is used as value of the component O. The component OU is only set, if the attribute UniqueNameAccount is not yet unique. Therefore the Java script searches all accounts whose attribute dxrPrimaryKey matches the component CN and component OU. If no object with that name is found UniqueNameAccount is returned as CN=value_of_givenName value_of_initials value_of_sn/O=value_of_orgUnit If more than one object has been found, then the Java script function getUniqueOrgUnit analyzes the search results and returns the next available value for OU by using the base for OU (dxrCreateObjDefaults(Unique)) and appending a unique number. As opposed to UniqueNameForGroups.js, a unique account name is generated by the script itself. There is no need for the service layer to call the script several times to generate a unique value by a trial and error procedure. UniqueNameForGroups.js In the object description Group.xml, the Java script UniqueNameForGroups.js is called to generate the dxrPrimaryKey attribute of the group. The value is returned in the variable ListName. The Java script uses the attribute cn of the group as the ListName and generates a unique name by simply appending an integer value. The service layer provides the current value of that integer value in the variable $UniqueOrgUnit. The service layer tries to create the group with that name; if not unique, it will call the Java script again with an incremented value of $UniqueOrgUnit. If the Java script reaches the limit 100, it returns the string JavaScript.Error, which causes the service layer to stop creation of the group (because no unique list name could be generated). UniqueShortName.js In the object description TSAccount.xml, the Java script UniqueShortNames.js is called to generate the dxmLNshortName attribute of the account. The value is returned in the variable ShortName. The Java script sets up the value as follows: first letter of givenName first letter of sn employeeNumber The Java script checks whether that value is unique by calling the Java script function searchAccountName, which searches all accounts whose dxmLNshortName attribute matches that value (initial substring matching). If the attribute value is not unique, the Java script calls the function getUniqueCounter, which calculates the next available number to make the basic value unique. getUniqueCounter analyzes the search result (returned by searchAccountName) and returns the next available unique number. This unique number is appended to the basic value. As opposed to UniqueNameForGroups.js, a unique short name is generated by the script itself. There is no need for the service layer to call the script several times to generate a unique value by a trial and error procedure. The following figure shows the layout of the channels that are used by the join activity. Figure 18. Notes Workflow Channels and Objects The workflows handle these Notes objects: Person - a physical user in the Notes address book Group - a group in the Notes address book DirX Identity supports these Notes workflows: Ident_Notes_Realtime - this workflow is a Java-based synchronization workflow. It can run either scheduled or event-based. Event-based means that it is triggered by an account or group change in DirX Identity. Each modification of an account or a group, for example, adding an attribute to an account, adding a new group, adding/removing a member to or from a group or changing the group owner starts a workflow that propagates this change to Notes. Once the change is applied, it is propagated back to the account or group object in the DirX Identity target system, for example to adjust the group’s state or other data. Restore_Notes_Ident - this workflow is a scheduled validation workflow running from the Identity Store to the Notes address book. It imports persons and groups in the Notes address book using the associated Identity target systems accounts and groups. It creates new persons and groups in the Notes address book modifies existing persons and groups (for example, modifies the group’s members and other attributes according to the current group state) deletes persons and groups in the Notes address book This workflow is used to perform an initial load of the Notes address book and to keep the Notes address book in sync if changes are done in Identity target system (for example, accounts or groups are added or deleted). SetPassword_in_Notes - this workflow is a Java-based synchronization workflow that synchronizes the attribute dxmPassword of a target system account with the attribute HTTPPassword of a person in the Notes address book. Validate_Notes_Ident - this workflow is a scheduled validation workflow. It imports persons and groups from the Notes address book to the associated Identity target systems and creates new accounts and groups in the Identity Store modifies existing accounts and groups (for example, modifies the group’s members and other attributes according to the current group state) deletes accounts and groups in the Identity Store This workflow is used to perform an initial load of the Identity Notes target systems and to keep the Identity target systems in sync if changes are done in Notes (for example, persons or groups are added or deleted). This section describes Notes workflow ports. TS Port The ts port references the Notes connected directory and its channels. The channels contain the mapping definitions for the import of persons/groups to the Notes address book and the join definitions. The export parameters are also defined (for exporting persons and groups from the Notes address book). The following filters are defined: CF - Crypt Filter Standard crypt filter for password decryption. IdentityDomain Port The IdentityDomain port references the Notes channels (Channel Parent) of the Identity connected directory. The channels contain the mapping definitions for the import of accounts and groups from the Notes address book and the join definition for Identity. The export parameters are also defined (for exporting persons and groups from the Notes address book). There is no filter defined in the IdentityDomain port. Note that the validation workflow and the sync workflow use the same connected directory and channel configuration. Only the controller class is changed in the join activity. This section provides information about Notes workflow channels. This section describes the mapping and user hook details of the direction Identity Store to IBM Notes. Complex post-mappings and user hooks are required because the Notes target system handles some of the update requests asynchronously (using the adminP process) and problems arise if the previous request has not been successfully processed when the next request arrives. Therefore the Notes real-time workflows use an internal attribute dxrPendingRequest that indicates whether or not a request can be sent to the Notes system without resulting in an error. For details, please refer to the following sections. For a complete list and explanation of Notes-specific attributes, see the attribute section of the Notes connector description in the DirX Identity Connectivity Reference. Post-Mapping for Groups If the attribute dxrState in Identity Store is \"DELETED\", the operation (as part of the mapped entry) is set to DELETE. Post-Mapping for Accounts If the attribute dxrState in Identity Store is “DELETED”, the operation (as part of the mapped entry) is set to DELETE and the value of the attribute DeleteMailFile is set to 0. For Modify Requests, the following steps apply: For each modify request to the Notes connector, a check is performed whether there is a pending request available (these pending requests are stored in the attribute dxrPendingRequest). Presence of a pending request results in a check of the FullName of Notes against the attribute dxrPrimaryKey in the Identity Store. If the attributes are still the same, a trace entry (a warning) is written indicating that the current request will not be propagated (the Request-Type in the mapped entry is set to NONE). If the attribute values differ, then later on, the attribute dxrPendingRequest will be removed by the user hook preUpdate, because the user hook knows the connector for updating the attribute whereas the post-mapping procedure doesn’t. Next, the current request is analyzed. A check is made as to whether the request would result in both a Rename and a MoveInHierarchy operation. The Rename operation is detected by comparing the attributes LastName, FirstName, MiddleInitial and UniqueOrgUnit (identified by the UniqueOrgUnitAttrType attribute) of Notes against sn, givenName, initials and dxmLNuniqueOrgUnit in the Identity Store. If one of the values is different, a Rename operation is propagated. A MoveInHierarchy operation is detected by the existence of the attribute PathFileTargetCertId in the attribute list.) If both a Rename and MoveInHierarchy operation are detected, then the parameters for the MoveInHierarchy operation are dropped and a logging entry (a warning) is written. The MoveInHierachy operation (PathFileTargetCertId) will be propagated the next time the account is synchronized again to Notes. AC - com.siemens.dxm.join.userhook.notes.UserHookAccountsTo (user hooks for accounts) The following user hooks are used: User hook preUpdate This user hook checks whether the attribute dxrPendingRequest (set by an earlier request) could be reset. This is indicated by a change of the FullName which means that the request has been processed by Notes. If the FullName of Notes is different from the attribute dxrPrimaryKey in the Identity Store, then the attribute dxrPendingRequest is deleted. The user hook must provide additional attributes that are kept in the Notes profile object in the Identity Store. For this reason, the profile identified by the value of the attribute ou is selected. If no such profile exists or the value of ou is empty, then the default profile is selected. The source attribute list is extended by a set of attributes from the profile object. For details, see the section \"Notes Dynamic Configuration\" in the DirX Identity Connectivity Reference. Next, the user hook checks whether the account has been moved to another organizational unit in the Identity Store. This is indicated by a change of the ou attribute, whereas the attribute dxrProfileLink was not changed. If the entry was moved, then a potentially new Notes profile object needs to be assigned in the attribute dxrProfileLink. The user hook preUpdate determines which profile applies and stores the name of the new profile in the member variable newProfileName of the user hook. Later on, the user hook postUpdate will update that profile name in the Identity Store. Assignment of a new profile updates these attributes:* PathFileTargetCertId* (derived from the attribute PathFileCertId of the new profile) TargetCertifier Validity If no profile is available for the new ou and the old value of dxrProfileLink was mapped to the default profile, then propagation of MoveInHierachy to Notes is not possible as no new information for PathFileTargetCertId and TargetCertifier is available. If the attribute dxrProfileLink is not set (for example, because the account was created in an earlier DirX Identity version that did not support this attribute) then the user hook preUpdate evaluates a profile name using the value of ou. User hook postUpdate After a successful update in Notes this user hook checks whether the attribute dxrPendingRequest needs to be set. The existence of the attribute dxrPendingRequest guarantees that no other critical update operation (rename or move) on the same objects is initialized while the previous one is still running. The check comprises these tests: If the attribute dxmLNregisterUser is set to true, the user is registered in the Notes server and normally the FullName is generated. If the FullName is not available in the SPML-Response of the update request, then a pending request is generated. The attributes LastName, FirstName, MiddleInitial and UniqueOrgUnit (stored in the attribute defined by uniqueOrgUnitAttrType) of Notes are checked against the attributes sn, givenName, initials and dxmLNuniqueOrgUnit of the Identity Store. If there is a difference in one of these attributes and the FullName of Notes is still the same as dxrPrimaryKey in Identity Store, the attribute dxrPendingRequest is set. If the attribute PathFileTargetCertId is present in the attribute list, then a MoveInHierarchy operation needs to be executed by Notes. This is an indication to set the attribute dxrPendingRequest. The format of the attribute dxrPendingRequest is: date=date;PendingOperation=operation;PathFileCertId=value;PathFileTargetCertId=value;FullName=value Furthermore, if a requested move operation was successful, then the attribute dxrProfileLink is set to the value of the previously evaluated newProfileName (see the preUpdate user hook). This section describes the user hook details of the direction Identity Store to IBM Notes. For a complete list and explanation of Notes-specific attributes that are kept in the Identity Store, see the attribute section of the Notes connector description in the DirX Identity Connectivity Reference. AI - com.siemens.dxm.join.userhook.notes.UserHookAccountsFrom (user hooks for accounts) The following user hooks are used: User hook postUpdate The user hook checks after a successful update in Identity Store, whether the attribute dxrPendingRequest could be deleted. If the request contained an update of the attribute dxrPrimaryKey, then the attribute dxrPendingRequest has to be read first. The reason is, that it could have been set in the postUpdate user hook of Identity Store to Notes synchronization. Therefore, it is not available in the attribute list of the Identity Store on the way back due to the fact that the Identity Store is normally not read again. If dxrPendingRequest exists it will be deleted. A password channel updates the account passwords. A password channel can also be configured backwards from the connected system to Identity to be able to update some attributes in Identity after a password change or reset has taken place in the connected system. The join engine then as usual synchronizes the attributes specified in the corresponding password channel mapping to Identity after the account with its password-relevant attributes was updated in the connected system. The Medico Provisioning workflows operate between a target system of type Medico in the Identity Store and the corresponding connected Medico system. Because Medico provides an SPML/SOAP service, the workflows use the SPML connector (SpmlV1SoapConnector2TS) for provisioning. This connector communicates with the Medico SPML server. The following figure illustrates the Medico Provisioning workflow architecture. Figure 19. Medico Provisioning Workflow Architecture The workflows handle the following Medico objects: Person - the physical user. The Person object holds the demographic data and is not used for login. LoginID (or User ID) - the user login account ID. Each user can have one or more accounts to log into a Medico application. Different accounts are needed for different access rights. Access rights are expressed in terms of roles, profiles and groups. There are special accounts (“Sonderbenutzer” / “Sonderrolle”) with high access rights that are reserved for emergency situations. Role - the role associated with the LoginID. A role is composed of a set of entry points that regulate the applications and menu entries that are allowed for and presented to a LoginID. Profile - the profile associated with the LoginID. The profile contains information used mainly to determine the stations (beds) for which physicians are responsible. Group - the group associated with the LoginID. The group exists for historical reasons, but it can be used to specify general access rights, for example, printer access. A LoginID must have exactly one group associated with it. The following figure illustrates the relationships between Medico and DirX Identity objects. Figure 20. Relationships between Medico and DirX Identity Objects As shown in the figure, a Person and LoginID object on the Medico side are created from the Account entry on the Identity side. Groups within the Medico target system in DirX Identity have a type attribute. The corresponding object on the Medico side (Role, Profile, Group) is mapped according to this type attribute. The memberships between a LoginID and a Role or Profile are described as member attributes of a Role or Profile. Membership changes result in an add or delete member attribute at the Identity side. The membership between a LoginID and a Group is described in the groupid attribute of the LoginID. The Medico workflow requires medico//s Release 16 or higher. The Medico SPML server supports a subset of the SPML V1 request; in particular, the server does not support search requests without filter specifications. As a result, you must be careful when changing the configuration. For detailed information on the Medico SPML server, see the Medico documentation. This limitation also means that the real-time password workflow SetPassword currently does not work. Please use the \"setPassword in Medico\" workflow instead. To configure the connection to Medico: Specify the IP address and the data port at the Medico service object (Medico CD → Service). Configure the socket timeout at the workflow’s TS port. You may increase the timeout value (in seconds) for long SPML requests to the Medico SPML server (for example, searches with a large result set). Do not change the URL path. The Medico target system requires the following layout: Accounts - for each Medico LoginID, one account with dxrType=login is created in DirX Identity. The Medico target system in the Identity Store does not contain any Person objects. All accounts are located in a subfolder logins. Groups - the Medico role, profile and group objects are represented as groups in the subfolders Medico Roles, Medico Profiles and Medico Groups. The attribute dxrType is used to identify the type. The Medico-specific JavaScript superior.js is used to distribute the objects to the different folders. The following Medico-specific JavaScripts calculate the attributes dxrName and dxrPrimaryKey: calcDxrNameAcc.js calcDxrNameGroup.js calcPrimaryKeyAcc.js calcPrimaryKeyGroup.js The attribute dxrPrimaryKey contains the SPML ID in the target system: loginid=dxrName/employeeNumber,type=login groupid=dxrName,type=group profileid=dxrName,type=profile roleid=dxrName,type=role The attribute dxrName contains the employeeNumber for accounts and the cn for groups. Mastered attributes for accounts include: dxrProfession gender dayOfBirth mail street postalCode l c telephoneNumber title The following figure shows the layout of the channels that are used by the Medico workflow’s join activity. Figure 21. Medico Provisioning Workflow Channels and Objects A pair of channels (one channel per direction) exists for every Medico object (Role, Profile, Group, LoginID, Person). There are no member channels. Memberships are modeled as the member attribute. The following construction is used for the logins and persons channels: Identity side - the logins channel is the primary channel of the persons channel. Person data is merged with the login channel that represents the account. DirX Identity does not model a Person object. Medico side - the persons channel references the Medico Person object. Demographic data is passed in this channel. This section describes the Medico workflow ports. TS Port CR - Crypt Filter The standard crypt filter for password decryption. MF - Medico Crypt Filter A MedicoCrypt filter is implicitly configured. It is used to send the Medico password attribute pawo in the SOAP request decrypted to the Medico SPML server. This filter is used only for the initial password when a new login is added. This section provides information about Medico workflow channels. Direction: Identity Store → Medico mapAttrMaxLength - Medico attributes have a maximum length, and requests with attribute values exceeding this limit will fail. As a result, this mapping function truncates the value. mapAttrDefaultMaxLength - for convenience, an additional mapping function is defined which sets a given default value if there is no source attribute value. The function also truncates the value to the defined maximum length. mapValidFromAttr - in the Medico system, objects are never deleted. Each object has a validFrom and validTo attribute. The conversion is handled within this mapping function. Direction: Medico → Identity Store CommonProcsMedico.calculateIdInIdentity - calculates the Id. dxrType is set according to the type of the channel handles (login, profile, …​). dxrPrimarykey is set to the value of the source ID. dxrName is taken from the Medico id attribute (loginid, profileid, …​). Direction: Identity Store → Medico ID: \"pnr=\"$\\{source.employeeNumber}\",type=person Join: pnr= $\\{source.employeeNumber} A Medico person has two additional name attributes:* Namechr* surname, givenName Namechrnorm Namchr umlauts are expanded and converted to lowercase For details see the JavaDoc of mapNameChr and mapNameChrNorm Medico supports only one e-mail address per person. In DirX Identity, e-mail is defined as a multi-valued attribute. If there is no e-mail attribute value stored in Medico, the first value is taken from the DirX Identity e-mail attribute. If the value in Medico matches one of the DirX Identity values, nothing is changed. If not, the first value is taken. Direction: Medico → Identity Store Primary Channel login - join to primary via employeeNumber. Postmapping - prevents creating a Person object. Action is set to NONE if the action was set to add. Direction: Identity Store → Medico ID: the dxrPrimaryKey is used as the identifying attribute. Join: the join is performed with the ID. loginid: the dxrName value is used as the loginid. For new logins, a constant groupid DIRXOHNE is set (groupid is a mandatory attribute). LC - com.siemens.dxm.join.userhook.medico.UserHookAccountsTo preUpdate - creates a person if necessary postUpdate - if login was renamed, the old login is disabled Direction: Medico→ Identity Store LI - com.siemens.dxm.join.userhook.medico.UserHookAccountsFrom preUpdate: merge the person attribute to account. In the current workflow version, it should work without this user hook (primary channel construct). If you have an older version of this workflow, you need this user hook. A password channel updates the login passwords. A Password Channel can also be configured backwards from the Connected System to Identity to be able to update some attributes in Identity after a password change or reset has taken place in the Connected System. The join engine then as usual synchronizes the attributes specified in the corresponding Password Channel Mapping to Identity after the account with its password relevant attributes was updated in the Connected System. The Office 365 Provisioning workflows operate between a target system of type Office 365 in the Identity Store and the corresponding connected Office 365 endpoint. The workflows use the Office 365 connector (Office365Connector) for provisioning. This connector communicates with the Office 365 endpoint using RESTful API with JSON requests. The connector uses Office 365 OAuth server for authentication and authorization. The Office 365 workflows handle the following Office 365 objects: Account - the common Office 365 (Windows Azure) accounts. Group - the common Office 365 (Windows Azure) security groups. Role - the predefined Office 365 (Windows Azure) administrative roles. Service Plan - the access to the predefined Office 365 applications bound to a single Office 365 license (subscribed sku). The delivered workflows include: Validate_Office365_Realtime - the validation workflow that imports existing Office 365 accounts, security groups, roles and service plans together with assignment from Office 365 server to the Identity Store. Ident_Office365_Realtime - the synchronization workflow that exports detected changes for account and group objects including assignments from Identity Store to the Office 365 endpoint in the first step. The second step is to validate the processed changes in Office 365 endpoint to the Identity Store. SetPassword in Office365 - the SetPassword workflow that sets the password for the user object in Office 365. The following figure illustrates the Office 365 Provisioning workflow architecture. Figure 22. Office 365 Provisioning Workflow Architecture The Office 365 Provisioning workflows support only those object and attributes supported by the Office 365 connector. The workflows can handle only one valid Office 365 license (subscribed sku). Verify that services are correctly configured at the Office 365 connected directory. The Office 365 Service referenced by the connected directory should contain the default value graph.microsoft.com with SSL enabled. The referenced Office 365 OAuth Service should contain the full URL https://login.microsoftonline.com/*tenantID/oauth2/token*. Verify that both Graph API (https://graph.microsoft.com) and the OAuth service (https://login.microsoftonline.com/tenantID/oauth2/token) are accessible from the host where the Office 365 workflows will run. Office 365 connected directory and provisioning workflows support the central HTTP proxy server configuration. See the section \"HTTP Proxy Server Configuration\" for details. DirX Identity must be registered as a valid principal service for your existing Office 365 tenant domain. Use Windows PowerShell commands to create a principal service. You can also use an existing script CreateServicePrincipal.ps1 which can be freely downloaded from Internet. As a result of the configuration, you will obtain an application principal ID and a symmetric key used for authentication to the OAuth service. Configure the tab Graph API and enter your Office 365 Tenant and Application ID. Enter the generated client key in the Application Secret field. Make sure that the registered principal service representing DirX Identity has sufficient rights. For basic user synchronization and group assignment, the Office 365 role User Account Administrator is sufficient. The assignment of the Office 365 roles requires assignment of the Company Administrator role. Use Microsoft PowerShell to administer the rights of the principal service. Note that the default validity for the Application Secret is one year. The Office 365 OAuth service will refuse incoming requests that use an expired key. Renew the Application Secret also in Microsoft PowerShell when necessary. Check the Provisioning settings used by the connected directory and then set them to the real values for your provisioned target system. The Office 365 target system requires the following layout: Accounts – all Office 365 accounts are located in a subfolder Accounts. Groups/Security Groups – all Office 365 groups are located in a subfolder Security Groups. Groups/Roles – all Office 365 roles are located in a subfolder Roles. Groups/Service Plans – all Office 365 service plans that belong to a single valid Office 365 license (subscribed sku) are located in a subfolder Service Plans. The dxrPrimaryKey attribute of accounts, groups, roles and service plans contains the unique ID generated by the Office 365 endpoint. The dxrLicense attribute is automatically populated if any active service plan assignment exists. It’s deleted when the last service plan is unassigned from a user. It uses the obligation mechanism (see service plan objects) and the target system-specific JavaScript AccountSkuId.js. The group membership (security groups, roles and service plans) is stored at the account object and references the dxrPrimaryKey attribute of group objects. Configure the Tenant Domain property at the target system at the Options tab. This value is used as a suffix for the Office 365 User Principal Name (dxmADsUserPrincipalName). The following figure shows the layout of the channels that are used by the join activity. Figure 23. Office 365 Provisioning Workflow Channels and Objects The Office 365 objects and membership are synchronized via a pair of channels (one channel per direction). This section describes the Office 365 workflow ports. TS Port CF - Crypt Filter An Office 365 filter is configured implicitly. It is used to send the decrypted password attribute password to the Office 365 endpoint. This section provides information about Office 365 workflow channels. Direction: Identity Store → Office 365: ID: dxrPrimaryKey Join: ${source.dxrPrimaryKey} accountEnabled - the attribute used to disable the account object in Office 365. The correct value is derived from the dxrState attribute of the corresponding account object in the Identity Store. AC - com.siemens.dxm.join.map.office365.accounts.to.UserHookSyncServicePlansAndSkuId preUpdate - removes the mapped values for the attributes skuId and disabledPlans with values for joined entry in order to prevent the synchronization of these attributes. postUpdate – checks whether a synchronization of the skuId and disabledPlans attributes is necessary. It actualizes the list of disabled service plans according to the current list of assigned service plans in Office 365. It also removes an unused license (sku) for an Office 365 account. Direction: Office 365 → Identity Store ID: ${joinedEntry.id} or \"cn=\"${source.displayName}\",\"+${env.role_ts_account_base} Join: ${source.dxrPrimaryKey} or ${target.id}. dxrTSState - the attribute used to detect the current state of the account in Office 365. The correct value is derived from the accountEnabled attribute of the corresponding account object in Office 365. It is set to DELETED when no account entry is found. AI - com.siemens.dxm.join.map.office365.accounts.from.UserHookGetServicePlans prolog - creates a list of available service plans for a valid Office 365 license. It makes them available for other mapping classes. Direction: Identity Store → Office 365 ID: dxrPrimaryKey Join: ${source.dxrPrimaryKey} Post-Mapping - if the dxrState attribute in the Identity Store is DELETED, the operation (as part of the mapped entry) is set to DELETE. Direction: Office 365 → Identity Store ID: ${joinedEntry.id} or \"cn=\"${source.displayName}\",cn=security groups,\"+${env.role_ts_group_base} Join: ${source.dxrPrimaryKey} or ${target.id}. dxrTSState - the attribute used for detection of the real state of the group in Office 365. It is set to ENABLED for existing entries; for non-existing entries, it is set to DELETED. Direction: Identity Store → Office 365 RC - com.siemens.dxm.join.map.office365.roles.to.UserHookRolesTo processSourceEntry - prevents synchronization of role objects to Office 365 since roles are read-only. Direction: Office 365 → Identity Store ID: ${joinedEntry.id} or \"cn=\"${source.displayName}\",cn=roles,\"+${env.role_ts_group_base} Join: ${source.dxrPrimaryKey} or ${target.id}. dxrTSState - the correct value is derived from the roleDisabled attribute of the corresponding role object in Office 365. It is set to DELETED when no role entry is found. Direction: Identity Store → Office 365 SC - om.siemens.dxm.join.map.office365.plans.to.UserHookServicePlansTo processSourceEntry – this user hook prevents synchronization of service plan objects to Office 365 since service plan are read-only parts of an existing Office 365 license. Direction: Office 365 → Identity Store ID: ${joinedEntry.id} or \"cn=\"${source.servicePlanName}\",cn=service plans,\"+${env.role_ts_group_base} Join: ${source.dxrPrimaryKey} or ${target.id}. dxrTSState - the attribute used for detection of real state of the service plan in Office 365. It is set to ENABLED for existing entries, for non-existing entries it is set to DELETED. A password channel updates the Office 365 account passwords. The member channel configuration holds the mapping of the group members. Direction: Identity Store → Office 365 The mapping of the memberOf attribute is handled in a special Java mapping function. It separates membership for service plans and sends the result to Office 365. The Office 365 connector can handle both role and group memberships. The service plans and license assignments are handled in the AC user hook (user channel user hook). Direction: Office 365 → Identity Store The mapping of the member state dxrGroupMember attributes is standard for all attributes. The information about assigned groups, roles and service plans in Office 365 is joined. The OpenICF Windows Local Accounts Provisioning workflows operate between a target system of type OpenICF in the Identity Store and the corresponding OpenICF .Net connector server, which is configured for communication with a Windows Local Accounts and Groups database using the OpenICF connector bundle WindowsLocalAccounts.Connector.dll. The WindowsLocalAccounts.Connector.dll bundle represents the OpenICF Windows Local Accounts connector, which is described in the DirX Identity Connectivity Reference in the section \"OpenICF Windows Local Accounts Connector\". The following figure illustrates the OpenICF Windows Local Accounts deployment. Figure 24. OpenICF Windows Local Accounts Deployment As shown in the figure, the Java-based UNIX-OpenICF connector sends a request to an OpenICF .Net connector server which runs on a Windows platform. The OpenICF connector server passes the request to the Windows Local Accounts connector bundle. The bundle then establishes a connection to the specified Windows host and performs the operations on the host’s local Security Account Manager (SAM) database. It is possible to provision several Windows hosts using a single OpenICF .Net connector server. For a more detailed description about deployment scenarios, see the DirX Identity Connectivity Reference → \"OpenICF Windows Local Accounts Connector\". For a detailed description of the DirX Identity Java-based UNIX-OpenICF connector, see the DirX Identity Connectivity Reference → \"UNIX-OpenICF Connector\". The following figure illustrates the OpenICF Windows Local Accounts Provisioning workflow architecture. Figure 25. OpenICF Windows Local Accounts Provisioning Workflow Architecture The workflows handle the following Windows local system objects: Account (synonymously also named User) - the Windows local system accounts. Group - the Windows local system groups. The delivered workflows are: Ident_WinLA-OICF_Realtime - the synchronization workflow that exports detected changes for account and group objects from the Identity Store to the Windows system and then validates the processed changes in the Windows system to the Identity Store. SetPassword in WinLA-OICF - the workflow that sets the password for the account in the Windows system. Validate_WinLA-OICF_Realtime - the validation workflow that imports existing Windows accounts and groups including group assignments from the Windows system to the Identity Store. All prerequisites and limitations refer to the connector and are therefore described in the DirX Identity Connectivity Reference \"OpenICF Windows Local Accounts Connector\" section. Before you configure the workflows, install and configure the OpenICF .Net Connector Server as described in the DirX Identity Connectivity Reference → OpenICF Windows Local Accounts Connector. Then configure the following: From the WinLA-OpenICF connected directory that represents the Windows Local Accounts system to be provisioned, go to the OpenICF Connector Server tab and from there to the connected directory that represents the OpenICF Server (Generic connected directory type) and specify the IP address or the host name and the data port of the OpenICF Server service object. Adapt the bind profile for the OpenICF Server: set the password that is configured as a shared secret with the OpenICF connector server and enable SSL if it is enabled on the OpenICF server side. Using SSL may require additional configuration steps. See the section \"UNIX-OpenICF Connector\" in the DirX Identity Connectivity Reference for details. On the WinLA-OpenICF connected directory, specify the IP address or the host name of the targeted Windows system at the WinLA-OpenICF service object. No port number is required here. Then set the bind profile properly. Because the OpenICF .Net Connector Server is started under credentials with appropriate access rights for managing the target Windows systems, no user name must be specified. A user name beginning with \"dummy\" would have the same effect because it is not used for building a connection to the target Windows system. The password is ignored in these cases. Specify the Response Timeout property on the OpenICF Connector Server tab of the WinLA-OpenICF Connected Directory. The default value is 30 and should be sufficient. Check the settings related to the OpenICF connector bundle at the TS port object tab OpenICF Connector Bundle, which usually must not be changed. The properties to define are Bundle Name (default: WindowsLocalAccounts.Connector), Bundle Version (default: 1.4.0.0) and Class Name (the default is Org.IdentityConnectors.WindowsLocalAccounts.WindowsLocalAccountsConnector). Assign the resource family OpenICF in the IdS-J server. The target system requires the following layout: Accounts - all Windows accounts are located in a subfolder Accounts. Groups - all Windows groups are located in a subfolder Groups. The attributes dxrName and dxrPrimaryKey of accounts contain the name (SamAccountName) of these objects in the connected Windows system. The standard JavaScript dxrNameForAccounts.js generates the attribute dxrName for the Windows account. The attributes dxrName and dxrPrimaryKey of groups contain the name (SamAccountName) of these objects in the connected Windows system. The account object also stores the group membership and references the dxrPrimaryKey attribute of the group objects. The following figure shows the layout of the channels that are used by the OpenICF Windows Local Accounts workflow’s join activity: Figure 26. OpenICF Windows Local Accounts Provisioning Workflow Channels This section describes the ports of the workflows. TS Port CF - Crypt Filter This filter is configured implicitly. It is used to send the decrypted password attribute PASSWORD to the OpenICF connector server. This section provides information about the OpenICF Windows Local Accounts workflow channels. Direction: Identity Store → WinLA -OpenICF Direct mapping dxrPrimaryKey → ID - where dxrPrimaryKey is built by the common JavaScript dxrNameForAccounts, producing a unique account name in the Identity target system. Java Source mapping → ENABLE - the attribute is used for enabling or disabling the account in the Windows system. The value is derived from the dxrState attribute of the corresponding account object in DirX Identity. Direct mapping dxmPassword → PASSWORD - which is used only on an add request. Join - ${source.dxrPrimaryKey} Direction: WinLA -OpenICF → Identity Store Join via the dxrName attribute that is mapped in the same way as the dxrPrimaryKey attribute from $\\{source.id}. Direction: Identity Store → WinLA -OpenICF Direct mapping dxrPrimaryKey → ID– where dxrPrimaryKey is taken from the cn of the group in the Identity target system. Join - ${source.dxrPrimaryKey} PostMapping script - changes the type of the request to delete if dxrState=DELETED. Direction: WinLA -OpenICF → Identity Store Join via the dxrName attribute that is mapped in the same way as the dxrPrimaryKey attribute from ${source.id}. Direction: Identity Store → WinLA-OpenICF Java common class mapping Members → GROUPS. Direction: Identity Store → WinLA-OpenICF Direct mapping dxmPassword → PASSWORD Direct mapping dxmPasswordExpired → PASSWORD_EXPIRED The RACF Provisioning workflows operate between a target system of type RACF in the Identity Store and the corresponding connected RACF system. The RACF connector used in the workflows communicates with the LDAP server across the native LDAP protocol, as shown in the following figure: Figure 27. RACF Workflow Architecture The delivered workflows include: Ident_RACF_Realtime - the synchronization workflow that exports detected changes for account and group objects from Identity Store to the RACF end system and then validates the processed changes in RACF to the Identity Store. The workflow also generates a password if the object is created. When this workflow is triggered by a schedule or started directly in DirX Identity Manager, it also synchronizes the Users and Groups subtrees. SetPassword_in_RACF - the SetPassword workflow that synchronizes the user’s password to RACF when a password change in the Identity Store is detected. Validate_RACF_Realtime - the validation workflow that imports existing RACF accounts and RACF groups from RACF to the Identity Store. The RACF workflows have the following prerequisites and limitations: The RACF connector does not support nested group assignments. They cannot be read or written. The workflow and the connector do not handle the RACF group member limit for groups that are not default groups. Group memberships in the DirX Identity target system must be stored at the account. Group memberships must be stored at the accounts, so Reference Group from Account must be checked. Each RACF user must have a RACF default group. When a RACF user is to be created, the channel user hook of the Provisioning workflow calculates the default group to be used. It selects from a list of default groups that are configured in the target system using the Options tab → Default Groups. Make sure to fill in this list with enough groups to hold all the RACF users and make sure they already exist in RACF. Keep in mind that the maximum number of users per RACF group is limited to 5900. The Options tab of the target system also shows the field Last Used Default Group. It is managed by the workflow user hook and holds the last used default group. You do not need to fill in this field. As the RACF connector accesses the RACF system via LDAP, the properties for the LDAP service and bind profile apply. As with the LDAP connected directory, it is important to configure the base nodes for users and groups within the DirX Identity target system folder and in the connected system. The corresponding fields can be set in the connected directory’s Provisioning tab. If the tab is not visible, perform Reload Object Descriptors from the context menu. In addition, for a RACF system, you must configure the parent node for the connection objects (representing RACF user - group memberships) in the Specific Attributes tab. Provisioning Account Base - the base node for the account tree in the DirX Identity target system. Group Base - the base node for the group tree in the DirX Identity target system. User Base - the base node for the accounts in the RACF connected system. Group Base - the base node for the groups in the RACF connected system. Specific Attributes connect_base - the base node for the connect objects (user-group memberships) in the RACF connected system. This section describes RACF workflow ports. TS Port CF - Crypt Filter The configured Crypt Filter decrypts the password attribute racfPassword before passing it to the RACF connector. The attribute name is configured in the Target System tab of the TS port. This section provides information about RACF workflow channels. The members channel must be referenced from the accounts channel. Note the following attributes: racfid The racfid is used as an identifier for users in RACF and is stored in the DirX Identity target system account in the attribute racfid. The racfid cannot have more than 8 characters. racfDefaultGroup The default group for a RACF user is calculated in the channel user hook and passed as an artificial attribute of the source entry. For details on configuring default groups, see the section “Configuring the RACF Target System” in this guide. racfAttributes The racfAttributes attribute triggers special processing in the RACF LDAP service and represents their result when reading. The following values related to activating / deactivating a RACF user are set by the connector. They are calculated in the mapping function configured for this attribute: RESUME – set for unlocking a RACF user. REVOKE – set for locking a RACF user. After successful processing, RACF sets the value REVOKED. racfPassword Make sure to set an initial password when the account is created in the DirX Identity target system and map it from dxmPassword to racfPassword. When you observe the values PASSWORD or PROTECTED in the user’s racfAttributes in the RACF system, the typical reason is that the user has no password or an expired one. For more details on racfAttributes, see the IBM documentation, for example, https://www.ibm.com/docs/en/zos/2.5.0?topic=information-associating-ldap-attributes-racf-fields. Note that the attributes racfSuperiorGroup, racfOwner, and racfSubGroupName are only read from the RACF system. The racfid is used as identifier for groups in RACF and is stored in the DirX Identity target system group in the attribute racfid. Note that the racfid cannot have more than 8 characters. The members channel must be referenced from the accounts channel. The attribute dxrPrimaryKey must be mapped to the identifier. Password change operation The old password must be part of the password change request because RACF does not allow resetting a password. After the password is set, the connector performs an extra bind operation with the RACF user and the old password to set the new password. The two passwords are delivered in one string, separated by a slash character, for example, oldpassword/newpassword. The Salesforce Provisioning workflows operate between a target system of type Salesforce in the Identity Store and the corresponding connected Salesforce system. The Salesforce connector uses the REST API, which provides a powerful, convenient and simple Web services API for interacting with the Salesforce system. The Salesforce workflows handle the following Salesforce tables (note: in this section, SF indicates Salesforce objects and DXI indicates DirX Identity objects): SF Account - the Salesforce accounts. This table represents an individual account, which is an organization or person involved with a business (such as customers, competitors, and partners) and holds a ContactID, which is the ID of the user who currently owns the account. SF Contact - the Salesforce contacts. This table represents a contact, which is a person associated with an account. It holds the following important attributes: ContactID - the ID of the account that’s the parent of this contact. OwnerID - the ID of the owner of the account associated with this contact. SF PermissionSet - the Salesforce permission sets. This table represents a set of permissions used to grant more access to one or more users without changing their profiles or reassigning profiles. (The Permission Set object is available in the SalesForce API version 22.0 and newer.) SF Profile - the Salesforce profiles. This table represents a profile, which defines a set of permissions to perform different operations, such as querying, adding, updating, or deleting information. It holds a UserLicenseId, which is the ID of the UserLicense associated with this profile. SF User - the Salesforce users in an organization. This table holds the following important attributes: AccountID - the ID of the account associated with a customer portal user. This field is null for Salesforce users. ContactID - the ID of the contact associated with this account. This field is null for Salesforce users. The Salesforce workflows synchronize a Salesforce user (with its profile/user license information and optionally one or more permission sets) to a target system account in DirX Identity and store the SF Profile and SF PermissionSets as target system groups. Salesforce also supports the concept of community users, which are external users with access to a Salesforce community. These users require holding information about SF Contacts and SF Accounts. A community user uses one of the following user licenses: Customer_Community, Customer_Community_Login, Partner_Community, Partner_Community_Login. Salesforce stores community users in the same user table as other users. The only difference is the use of a few ProfileIds that are attached to these community user licenses. As a result, community users appear in the DirX Identity account tree of the target system. SF Accounts are mapped to DXI Organizations. They should reside in the subfolder Business Objects/SalesforceAccounts to distinguish them from other organizations. SF Contacts are mapped to DXI users. These users are assumed to be associated with organizations such as customers. Storing SF Contacts in the DirX Identity user tree makes them available to user relations and to delegated user management. Thus they can also be provisioned to other target systems. This design supports a global view compared to having everything in a target system. SF Contacts should reside in the subfolder Users/SalesforceContacts to distinguish them from internal users. The following figure illustrates how DirX Identity represents the Salesforce object model: Figure 28. DirX Identity - Salesforce Object Model The figure shows the DirX Identity objects on the left and the Salesforce objects on the right. On the DirX Identity side: The target system holds the DirX Identity accounts (which are SF users and SF (Community) users) and the DirX Identity groups (which are the SF Profiles and the SF Permission Sets). Outside the target system are the DirX Identity business organizations for SF Accounts and the DirX Identity users (for SF Contacts). The names enclosed in brackets () represent DirX Identity objects. The names of objects that appear underneath the DirX Identity objects are the corresponding Salesforce objects. On the Salesforce side: The SF users and the SF (Community) users are enclosed in a dashed-line box to indicate that \"normal\" users have no relationship to SF Account and SF Contacts whereas the SF (Community) users require the existence of an entry in the SF Account and in the SF Contact table. The arrows represent the links between the tables. The delivered Salesforce workflows include: Ident_Salesforce_Realtime - the synchronization workflow that exports detected changes for account and group objects from Identity Store to the Salesforce cloud and then validates the processed changes in Salesforce to the Identity Store. The workflow also generates a password if the object is created. When this workflow is triggered by a schedule or started directly in DirX Identity Manager, it also synchronizes the Users/SalesforceContacts and the Business Objects/SalesforceAccounts subtrees. Ident_Salesforce_SLSFAccounts_Realtime - the synchronization workflow that is triggered by an entry change event and exports detected changes for an object in the Business Objects/SalesforceAccounts subtree in Identity Store to the Salesforce cloud and then validates the processed changes in Salesforce to the Identity Store. Note that this workflow uses an entry change topic and therefore uses the following definition in the WhenApplicable section: Topic Prefix: dxm.event.ebr Type: aSFOrganization Cluster; * Domain: * This definition implies that an event policy for the object description aSFOrganization and the LDAP object class dxmSLSFaccount needs to be active. Ident_Salesforce_SLSFContacts_Realtime - the synchronization workflow that is triggered by an entry change event and exports detected changes for an object in the Users/SalesforceContacts subtree in Identity Store to the Salesforce cloud and then validates the processed changes in Salesforce to the Identity Store. Note that this workflow uses an entry change topic and therefore uses the following definition in the WhenApplicable section: Topic Prefix: dxm.event.ebr Type: aSFContact Cluster; * Domain: * This definition implies that an event policy for the object description aSFContact and the LDAP object class dxmSLSFcontactt needs to be active. Validate_Salesforce_Realtime - the validation workflow that imports existing SF Accounts, SF Contacts, SF PermissionSets and SF Profiles from the Salesforce cloud to the Identity Store. SetPassword in Salesforce - the SetPassword workflow that synchronizes the user’s password to Salesforce when a password change in the Identity Store is detected. The following figure illustrates the Salesforce Provisioning workflow architecture. Figure 29. Salesforce Provisioning Workflow Architecture SF Profiles and SF PermissionSets are only administered in Salesforce directly. (One of the reasons for this is that SF PermissionSets are very complex objects with a huge variety of permission flags). As a result, you always need to start by running the Validate_Salesforce_Realtime workflow to make these objects available in the TS groups subtree. Once these objects are available, you can fully administer the SF Accounts, SF Contacts and SF users directly in the Identity Store. When creating new entries in DirX Identity, the (Salesforce) Id attribute of such an entry is not yet known; it is synchronized back from Salesforce to Identity and the object in Identity is renamed (because the Id is stored in the cn in Identity). DirX Identity provisions both SF Profiles and SF Permission Sets as groups and stores them in the TS subtree groups → Profiles and groups → PermissionSets. When you assign Salesforce groups to a user, you must assign exactly one group that is an SF Profile and optionally one or more SF PermissionSets. SF Profiles and SF PermissionSets can be differentiated by the description attributes. SF Profiles are identified by the (PRF) prefix, for example: (PRF): Chatter Free User; (UL): Chatter Free Note that the substrings (UL) identify the underlying user license on which the SF Profile is based. SF PermissionSets are identified by the (PERM) prefix; for example: (PERM): (PRF): Chatter Free User; (UL): Chatter Free (PERM): (PRF): -; (UL): - (PERM): (PRF): -; (UL): Salesforce The substring (PRF) identifies the SF Profile that is assigned to that SF PermissionSet. The (UL) prefix identifies the underlying user license on which the SF Profile is based. (PRF) and (UL) may be absent (represented by a hyphen (-), if the SF PermissionSet is not attached to an SF Profile. In this case, such permission sets can be used in addition to any SF profile. Keep in mind that the SF Profile and the SF PermissionSet profile definitions must match. If they do not, they are in conflict and can’t be assigned in parallel. Before you can use the Salesforce workflows, you must perform the following tasks: Create and register a Remote Access application in the Salesforce system, as described in \"Registering the Remote Access Application\". Create the customer-specific attribute StatusInfoc to manage the status of Salesforce user deletion, as described in \"Creating the StatusInfoc Attribute\". Extend the DirX Identity Store schema with Salesforce target system-specific attributes and object classes so that the workflows can store Salesforce-specific information in the Identity Store, as described in the section \"Extending the Schema for the Target System Workflows\". The Salesforce connector acts as a remote application to the Salesforce system. As a result, you need to create a Remote Access application in the Salesforce system before you can use the Salesforce workflows. (For details, see https://developer.salesforce.com/page/Getting_Started_with_the_Force.com_REST_API). To register the remote access application: Log in to Salesforce.com with your (developer) account and then navigate to Setup > Develop > Remote Access. In the Connected Apps section, click New. In the next dialog, enter the following items: Connected App Name; for example, DirXIdentityConnector API Name; for example, DirXIdentityConnector Contact Email - your e-mail address In API (Enable OAuth Settings), select Enable OAuth Settings. Enter the following items: Callback URL; for example, https://localhost:88123/REST-API/callback Selected OAUth Scopes - select full access (full) When you click Save, you will see the following items in the API (Enable OAuth Settings) section: Consumer Key Consumer Secret Now your remote access application has been created. Consumer Key and Consumer Secret must be provided in the connected directory for Salesforce as described in \"Configuring the Salesforce Workflows\". Salesforce users can’t be deleted. In the Salesforce system, each user has an IsActive attribute that is set to false if the user is deleted. Furthermore the workflow sets the customer specific attribute StatusInfo__c of the Salesforce user to DELETED. So there is another task before you can run the workflows. You have to create the customer specific attribute StatusInfo_c: Log in to Salesforce.com with your (developer) account and then navigate to Setup > Build > Customize > Users > Fields. In the section User Custom Fields, click New. In the Data Type section, select Text and then click Next. In Step 2. Enter the details, enter the following fields: Field Label: StatusInfo Length: 16 Field Name: StatusInfo and then click Next. In Step 3. Establish field level security, select the Visible field and then click Next. In Step 4. Add to page layouts, the Add field and User Layout should already be selected. If they are not selected, select them, and then click Save. You will see the User Custom Fields again and you will see the new attribute StatusInfo with its internal API name StatusInfo__c. The internal name StatusInfo__c is used in the account-channel mapping and in the account-channel Export section as a filter. If you want to use another Salesforce attribute, you must change the account-channel mapping and the account-channel Export section. The following limitations apply: Currently, only Salesforce users and profiles are synchronized. A Salesforce user can only hold one value in the ProfileId attribute. Consequently, you can only assign one group (=Salesforce Profile) to a DirX Identity account. Salesforce users can’t be deleted. In the Salesforce system, each user has an IsActive attribute that is set to false if the user is deleted. Furthermore the workflow sets the customer-specific attribute StatusInfoc of the Salesforce user to DELETED, as described in \"Creating the StatusInfoc Attribute\". When you remove a group from an Identity Store user, the account is normally disabled. At the account (which also received the state DISABLED), you normally no longer see the assigned group in the Member of tab. The Salesforce workflows have a different behavior concerning the deletion of groups. The ProfileId attribute (which represents the assigned group) can’t be deleted at the Salesforce user. Thus, when synchronizing back to the Identity Store, the ProfileId is still returned in the search result and so, when applying the mapping for the dxrGroupMemberDelete attribute, the value doesn’t change (will not be deleted). As a result, you will always see the group (ProfileId) with the state DELETE in the Member of tab of the account. Salesforce profiles can’t be created/deleted using the Salesforce connector. As a result, you must run the Validate_Salesforce_Realtime workflow as the first action once you have set up your environment. When doing so, the Salesforce profiles are created as groups in the Identity Store. From now on, you can assign one of these groups to your Identity Store users. To configure the connection to Salesforce: Specify the IP Address in the Salesforce service object; for example, login.salesforce.com. Check the SSL flag. No Ports are required. Set up the bind credentials of the connected directory that represents the Salesforce system. Use a Salesforce user with sufficient rights. Enter Name, Password and Security Token (which you normally receive as e-mail from Salesforce, if you registered for the first time or if you changed your password). Set up the following items in your Salesforce connected directory (in the Salesforce tab): URL-Suffixes: For connecting to the Salesforce system using OAuth, enter: /services/oauth2/token For performing search and updates requests, enter the Salesforce API version you want to use. For example: /services/data/v30.0 Consumer Key - enter the consumer key of your remote access application. Consumer Secret - enter the consumer secret of your remote access application. Set up the following items in your Salesforce connected directory, if required (in the HTTP/HTTPS Proxy Server tab): In Proxy Server, the link to the proxy server modeled as a connected directory object. In Proxy Server Bind Profile, the link to the bind profile used by the proxy server. To configure the Salesforce workflows: Install the schema extensions required by the Salesforce workflows as described in the section \"Extending the Schema for the Target System Workflows\", selecting the Salesforce extensions. Assign the resource family Salesforce in the IdS-J server. The Salesforce target system requires the following layout: Accounts - all accounts (Salesforce users) are located in a subfolder Accounts. Groups - all groups (Salesforce profiles) are located in a subfolder Groups. The Salesforce users and profiles are synchronized via a pair of channels (one channel per direction). The membership in Identity (Salesforce attribute ProfileId) is stored on accounts. See the default Salesforce workflow for details. This section describes the Salesforce workflow ports. TS Port CF - Crypt Filter A Salesforce crypt filter is implicitly configured. It is used to send the decrypted password attribute Password to the Salesforce system. In the Account channel mapping, many LDAP attributes are mapped one-to-one to Salesforce attributes. The following attributes receive special handling: EmailEncodingKey, LanguageLocaleKey, LocaleSidKey, TimeZoneKey - these mandatory attributes are generated via a Java Source mapping, but only for an ADD operation. The attributes are not stored in the Identity Store. In the Java Source mapping, either the LDAP attribute language or c is evaluated. Password - remember that the account’s password is inherited from the user object in Identity Store when you assign a group (=Salesforce profile) to a user (and then implicitly the account is created). If no password is present at the user, the account’s password is initially set to dirxdirx1. Check to make sure that the passwords comply with the password policies in effect for the Salesforce system. If the default password dirxdirx1 is not useful for your purposes, you need to change the object description for Salesforce (cn=TSAccount.xml,cn=Object Descriptions,cn=Salesforce,cn=TargetSystems,cn=Configuration,cn=). Email - the Email attribute in the Salesforce system is a single-valued attribute; in the Identity Store, the corresponding LDAP mail attribute is a recurring attribute. As a result, the Java Source mapping operates as follows: If the attribute is not yet set in the Salesforce system, the value of mail that fits best with the attribute dxrName is mapped to Email. (remember that the Username attribute in Salesforce is derived from dxrName in the Identity Store, and that Username and Email in the Salesforce system normally appear to be similar or are even the same.).If none of the values of mail matches with dxrName, the first value of mail is mapped to Email. If the value of Email is already set in the Salesforce system, this value is retained \"as is\" if it is available in the mail attribute in the Identity Store. If the value of Email in the Salesforce system is completely different from the values of mail in the Identity Store, the value is generated as if it was not yet set in the Salesforce system. Phone - the Phone attribute in the Salesforce system is a single-valued attribute; in the Identity Store, the corresponding LDAP attruibute telephoneNumber is a recurring attribute. As a result, the Java Source mapping operates as follows: If the attribute is not yet set in the Salesforce system, the first value of telephoneNumber is mapped to Phone. If the value of Phone is already set in the Salesforce system, this value is retaiined \"as is\" if it is available in the telephoneNumber attribute in the Identity Store. If the attribute value of Phone in the Salesforce system is completely different from the values of telephoneNumber in the Identity Store, the first value of telephoneNumber is mapped to Phone. StatusInfoc - the customer-specific attribute StatusInfoc is set to DELETED if the corresponding dxrState attribute in the Identity Store is set to DISABLED or DELETED. IsActive - the IsActive attribute is set to true if the corresponding dxrState attribute in the Identity Store is set to DISABLED or DELETED. When a new account is created by assigning a Salesforce group to a user in Identity Store. Mappings are defined for the Salesforce attributes Name, Description, LicenseId and ProfileId. However, because SF PermissionSets cannot be added, modified or deleted, you should avoid making changes to the groups in Identity Store. (Note that these mappings are only present to define the set of attributes that is read when synchronizing from Salesforce to Identity Store.) Make the changes in Salesforce and then run the Validate_Salesforce_Realtime workflow to update the groups in the Identity Store. Many attributes are simply mapped one to one or comparable attribute names are mapped (for example, Name to cn). The dxrPrimaryKey attribute of groups contains the identifier (the Id attribute in Salesforce) of the Salesforce profile objects. The dxrName attribute contains the Salesforce Name attribute. Mappings are defined for the Salesforce attributes Name, Description, UserLicenseId and UserType. However, because Salesforce profiles cannot be added, modified or deleted, you should avoid making changes to the groups in Identity Store. (Note that these mappings are only present to define the set of attributes that is read when synchronizing from Salesforce to Identity Store.) Make the changes in Salesforce and then run the Validate_Salesforce_Realtime workflow to update the groups in the Identity Store. Many attributes are simply mapped one to one or comparable attribute names are mapped (for example, Name to cn). The dxrPrimaryKey attribute of groups contains the identifier (the Id attribute in Salesforce) of the Salesforce profile objects. The dxrName attribute contains the Salesforce Name attribute. Mappings are defined for the Salesforce attributes Name, Description, LicenseId and ProfileId. However, because SF PermissionSets cannot be added, modified or deleted, you should avoid making changes to the groups in Identity Store. (Note that these mappings are only present to define the set of attributes that is read when synchronizing from Salesforce to Identity Store.) Make the changes in Salesforce and then run the Validate_Salesforce_Realtime workflow to update the groups in the Identity Store. Many attributes are simply mapped one to one or comparable attribute names are mapped (for example, Name to cn). The dxrPrimaryKey attribute of SF Accounts contains the identifier (the Id attribute in Salesforce) of the SF Accounts objects. The dxrName attribute contains the Salesforce Name attribute. When creating an SF Account in Identity Store, take the following steps: Set the attribute “Provision To Salesforce”; if it is not set, the SF Account is not synchronized to Salesforce. Assign an “Owner” in the “Owner Information” section; note that the “Owner Id” is automatically set when assigning the “Owner”. Set additional attributes. Note that the BO organization in Identity Store that you just created is renamed by the workflow and the cn then holds the id attribute of the new SF Account in Salesforce. Many attributes are simply mapped one to one or comparable attribute names are mapped (for example, dxmSLSFwebSite to cn). The dxrPrimaryKey attribute contains the identifier (the Id attribute in Salesforce) of the SF Contact objects. The dxrName attribute contains the Salesforce Name attribute. The member channel mapping for PermissionSetId (which contains both the Ids for the SF Profile and the SF PermissionSets) sets the attribute ProfileId in Salesforce when assigning groups to a user in Identity Store. It also creates/updates/removes the internal Salesforce Permission Set assignment. Password changes in the Identity Store (in the LDAP attribute dxmPassword) are transferred as a modification of the pseudo-attribute Password. An additional modification request is also sent to the Salesforce system to reset the user’s password. When you subsequently log in to Salesforce, the system asks you to enter a security question with its answer. On this Web page, you need to enter the new password (and the security question/answer); but you don’t need to change the password again. Many attributes are simply mapped one-to-one or comparable attribute names are mapped (for example, CompanyName to o). The dxrPrimaryKey attribute of accounts contains the identifier (the Id attribute in Salesforce) of the Salesforce user object. The attribute dxrName contains the Salesforce Username. Remember, too, that for most of the attributes, the onAddOnly flag is set in the mapping because the assumption is that the Identity Store holds the master data and thus the Identity Store will never be overwritten with updates from Salesforce. Many attributes are simply mapped one-to-one or comparable attribute names are mapped (for example, UserLicenseId to dxmSLSFuserLicenseId). The dxrPrimaryKey attribute of accounts contains the identifier (the Id attribute in Salesforce) of the SF Profile object. The attribute dxrName contains the Salesforce Name. Many attributes are simply mapped one-to-one or comparable attribute names are mapped (for example, LicenseId to dxmSLSFuserLicenseId). The dxrPrimaryKey attribute of accounts contains the identifier (the Id attribute in Salesforce) of the SF PermissionSet object. The attribute dxrName contains the Salesforce Name. Many attributes are simply mapped one-to-one or comparable attribute names are mapped (for example, Fax to facsimileTelephoneNumber). Note that the schema maps the Salesforce attributes to attributes in the Identity Store using the same name and the prefix dxmSLSF; for example, Site is mapped to dxmSLSFsite. The dxrPrimaryKey attribute contains the identifier (the Id attribute in Salesforce) of the SF Account object. The attribute dxrName contains the Salesforce Name. Many attributes are simply mapped one-to-one or comparable attribute names are mapped (for example, MobilePhone to mobile). Note that the schema maps the Salesforce attributes to attributes in the Identity Store using the same name and the prefix dxmSLSF; for example, OtherPhone is mapped to dxmSLSFotherPhone. The dxrPrimaryKey attribute contains the identifier (the Id attribute in Salesforce) of the SF Contact object. The attribute dxrName contains the Salesforce Name. The SAP ECC (formerly R/3) UM Provisioning workflows synchronize data between a target system of type SAPR3UM in the Identity Store and the corresponding connected SAP ECC system. In the following sections, R/3 is synonymous with ECC. The SAP R/3 UM connector used in the workflows communicates with the SAP R/3 system across the SAP Java connector JCo. The following figure illustrates the SAP R/3 UM workflow architecture. Figure 30. SAP R/3 UM Workflow Architecture The validation, synchronization and password workflows allow you to synchronize DirX Identity account and group objects with SAP R/3 user, role and profile objects. The SAP R/3 UM workflows have the following prerequisites and limitations: The SAP Java Connector JCo must be installed on the machine where the SAP R/3 UM connector runs. It can be downloaded free of charge from the SAP Web pages. Roles and profiles are not allowed to be created in SAP R/3 by the underlying SAP BAPI interfaces, so the synchronization workflows can only modify user-SAP role or user-SAP profile assignments. Before you can use the workflows, you must extend the DirX Identity Store schema with SAP R/3 UM target system-specific attributes and object classes so that the workflows can store SAP R/3 UM-specific information in the Identity Store. For instructions, see the section \"Extending the Schema for the Target System Workflows\". This section provides information about SAP R/3 UM target system configuration. Connectivity View Configure the SAPR3UM connected directory with the connected directory configuration wizard from the Global View target real-time scenario. You are guided through the steps. The main configuration tasks are: Specify the IP address or host name of the SAP R/3 UM service object (SAP application server). Specify username and password in the bind profile. Specify account and group base of the target system in provisioning. Specify the values on the parameters page, mainly client Id, system number and whether you work with a CUA enabled system or not. Provisioning View When creating the account, the attribute dxrName is created with a target system-wide unique value. You can see this in the tsaccount.xml object description. Also the attribute sapUsername is filled with this value. sapUsername is used for generating the identifier passed to the SAP R/3 connector when synchronizing the account to the SAP R/3 connected system. In the DirX Identity direction, the dxrName attribute is used for joining. In the SAP R/3 UM target system, the members are referenced from the account objects. The reference attribute is the cn attribute of the groups. Also in the connected SAP R/3 system the memberships are held by the accounts. The following figure shows the layout of the channels that are used by the join activity. Figure 31. SAP R/3 UM Workflow Channels and Objects As the figure shows, there is a pair of channels between accounts, groups and members on each side. The members are linked to the accounts on both sides, so there is no cross channel relationship. This section describes SAP R/3 UM workflow ports. TS Port CF - Crypt Filter The configured crypt filter is used to send the password attribute PASSWORD.BAPIPWD decrypted to the SAP R/3 system. This section provides information about SAP R/3 UM workflow channels. Master attributes Almost all attributes except a few special ones like dxrTSState are mastered by DirX Identity. Consequently, in the mapping direction to DirX Identity, these attributes have set the OnAddOnly flag and in the target system direction this flag is not set. However, some attributes cannot be changed for single users through the mapping. Those attributes, for example ADDRESS.STREET, are linked to an extra table for a certain group of users, where they are set by the SAP R/3 administrator. CUA- or non CUA system The workflow does not need to be adapted depending on whether or not the connected system is a CUA (Central User Administration) system. The workflow mappings and post-mappings handle the difference transparently. Direction: Identity → Connected System The attribute dxrTSState is a pseudo attribute of the SAP R/3 connector. That is it is not passed to the SAP R/3 system as an attribute, but is interpreted by the connector, which performs the corresponding actions depending on the values ENABLED, DISABLED or DELETED. Direction: Connected System → Identity The attributes ISLOCKED.LOCAL_LOCK and ISLOCKED.GLOB_LOCK, which are set depending on whether a CUA or non-CUA system is connected, are read from the SAP R/3 connected system and converted by the dxrTSState Java mapping to the corresponding states in DirX Identity. Direction: Identity → Connected System The group mapping only results in modifications to the corresponding role in SAP R/3 because roles and profiles are not allowed to be created in SAP R/3 via an interface. Add operations are rejected by the SAP R/3 connector. Direction: Connected System → Identity The mapping, the export filters and the join filters of the group channels are configured to synchronize SAP R/3 roles - not profiles - to Identity groups. In both systems, DirX Identity and SAP R/3, accounts hold the memberships. Therefore, no cross-channel relationship is required. Direction: Identity → Connected System Post-Mapping If a non-CUA system is connected, the target attribute ACTIVITYGROUPS.AGR_NAME must be mapped. If a CUA system is connected, the attribute dxrRole.NAME must be set. This action is handled in the Java PostMapping, which must have access to both attributes. The target systems password attribute PASSWORD.BAPIPWD is updated with the current password of the account in DirX Identity contained in the attribute dxmPassword. The dxrPwdReset attribute of the SAP R/3 connector, which determines whether the user must change the password on the next login, is set depending on the source attribute dxmPasswordExpired. This attribute was set beforehand by the Password Event Manager workflow listening for requests of Web Center or Password Listener. A Password Channel can also be configured backwards from the Connected System to Identity to be able to update some attributes in Identity after a password change or reset has taken place in the Connected System. The join engine then as usual synchronizes the attributes specified in the corresponding Password Channel Mapping to Identity after the account with its password relevant attributes was updated in the Connected System. The workflows can be customized to synchronize SAP R/3 profiles instead of SAP R/3 roles. To make this customization: Set up a corresponding object structure on the Identity side. Specify the prefix \"PROFILE:\" instead of \"ROLE:\" in the workflows export filter and identifier mapping of the group channel. Specify the corresponding member attributes in the membership mapping. The Service Management Provisioning workflows operate between a target system of type RequestWorkflow in the Identity Store and the external offline system. Instead of direct provisioning, the Java-based workflows start a corresponding request workflow instance for each provisioning action via the DirX Identity Request Workflow Services. This model assumes that there is an acting administrator who receives tasks via request workflow approval activities. He performs manual provisioning and then approves the task. For more information about manual provisioning, read the corresponding section in the DirX Identity Use Case Document \"DXI Service Management\". The workflows handle these common objects: Account - the account represents a common account in a target system. It represents any account-like object in the real (offline) system. Group - the group represents a common group in a target system. It represents any group-like object in the real (offline) system. The delivered workflows are: Ident_SvcMgmt_Realtime - the synchronization one-way workflow that exports detected changes for account or group objects from DirX Identity to the Workflow Service, which creates the appropriate request workflow instances. The Connectivity workflow does not update the entries in the external offline system directly. It only invokes a special request workflow that contains tasks for a human administrator. This means that there is no direct provisioning to the offline system. In this scenario, password management does not make sense because the administrator would see all user passwords. The scenario does not comprise initial load or validation workflows. Such workflows must be built as project-specific solutions; for example, via files. To configure the Service Management workflows, use the connected directory and workflow wizards. Connected Directory Wizard Open the connected directory wizard and open the Service object. Specify the IP Address of the host where the DirX Identity Request Workflow Service runs. This is the Java-based Server that is configured for the domain. DirX Identity is typically configured to accept SOAP requests for request workflow management on the pre-configured unsecured port 40000 (and on the secured port 40443). Workflow Wizard Open the workflow wizard. Click the Join Activity General Info tab. Here you can configure the timing parameters for the join activity. Click the Request Workflows Settings tab. Here you can configure the URL Path and Socket Timeout at the target system port of the appropriate workflow object. The URL Path of the Workflow Service is pre-configured to the default value workflowService/services/WorkflowService. Do not change this setting. Set the timeout value (in seconds) in Socket Timeout if necessary. Enter LDAP name of the provisioning domain into the optional Domain property. It enables the Java-based Server to identify if the request is for the correct domain. Primary Workflow DN is the valid DN of the active request workflow definition, which will be used for handling the generated requests. The primary workflow will always be invoked for account objects if configured. It will also be used for group objects if the Secondary Workflow DN is not set. Secondary workflow can be configured only for handling the group objects. The secondary workflow configuration is valid only if the primary workflow is also configured. If both primary and secondary workflow configurations are not set, the Workflow Service will try to find a suitable request workflow definition according to its When Applicable settings. It is recommended to configure at least a primary workflow. Remember that using a single request workflow definition requires an implementation that can handle two different object types. A service management target system requires the following layout: Accounts - in the DirX Identity target system, a corresponding account object exists for every account in the external offline system. All accounts are located in the subfolder Accounts. Groups - in the DirX Identity target system, a corresponding group object exists for every group in the external offline system. All groups are located in the subfolder Groups. The attribute dxrPrimaryKey has a special meaning. It stores the identification of the account or group object in the offline system. It is also a description that should be well-understood by an administrator performing the manual operation in the offline system. The slight modification of the object descriptions for account and group objects in the Provisioning configuration may be necessary in order to satisfy this goal. The following figure shows the layout of the channels that are used by the join activity: Figure 32. Service Management Channels and Object Types The service management account and group objects are synchronized via a pair of channels. Both channels use the same user hook implementation. This section describes the Service Management ports. TS Port Crypt Filter a service management filter is configured implicitly. It is pre-configured for custom usage only. This section provides information about Service Management Workflow channels. Direction: Identity Store → Service Management The workflow uses a special channel user hook implementation. The workflow gets the original SPMLv1 event along with tracked attribute changes initiated by the saved change of an account or a group object. Add or delete events are directly transformed to add or delete types of the mapped SPMLv1 request. A modify event can be transformed to a delete type if the tracked event modifications contain the change of the dxrState attribute with the added value \"DELETED\". Add and modify events always contain a list of changed attributes. These event attributes are taken and compared with the list of mapped attributes (channel configuration). The result contains the intersection of the attribute names contained in the event and in the mapped entry. If such an intersection is empty, no request is propagated. The generated request always contains the attribute values taken from the corresponding mapped attribute. Attribute values contained in the event are ignored. Direction: Service Management → Identity Store The workflow uses the one-way synchronization controller. Therefore no direct updates are possible. Direction: Identity Store → Service Management ID: ${source.id} Join: is not applicable since the connector always returns an empty result. State attribute: dxrState The user hook handles the events along with the mapped entries; see \"Common Aspects\". Direction: Identity Store → Service Management ID: ${source.id} Join: is not applicable since the connector always returns an empty result. State attribute: dxrState The user hook handles the events along with the mapped entries; see \"Common Aspects\". The SharePoint Provisioning workflows provision groups and group memberships between a target system of type SharePoint in the Identity Store and the corresponding connected SharePoint system. Supported SharePoint systems are SharePoint Server 2007, SharePoint Server 2010, SharePoint Server 2013 and SharePoint Server 2016. Microsoft introduced the claims-based identity model in SharePoint Server 2013. A claim is a piece of identity information, like name, email address, group membership or type of the identity. This model includes that SharePoint group memberships are kept in the form claims-based identity prefixdomain_name\\user_name. For instructions on how to configure the SharePoint workflows and the SharePoint target system to correctly provision group memberships, see the sections \"Configuring the SharePoint Target System\" and \"SharePoint Workflow Channels\". Because SharePoint uses the accounts from the Active Directory, a corresponding ADS workflow must be configured. The SharePoint workflow’s join activity uses the LDAP connector to connect to the Identity Store and the SharePoint connector to connect to the SharePoint server. Two default workflows are provided for DirX Identity SharePoint synchronization: Ident_SharePoint_Realtime_Clustered - performs synchronization to SharePoint. Validate_SharePoint_Ident_Clustered - helps to validate the SharePoint connected system with the related DirX Identity target system. The following figure illustrates the SharePoint Provisioning workflow architecture. Figure 33. SharePoint Provisioning Workflow Architecture Data Structures SharePoint is organized into sites. Each site has its own set of groups with a different set of access rights (called roles in SharePoint). SharePoint uses the Windows account names to identify users. Adding an account to a SharePoint group will grant the user the access rights that are attached to the group. Each SharePoint site has its own bind credentials that are related to a bind account. DirX Identity’s target system cluster feature is used to map this structure to DirX Identity. Each SharePoint site has its counterpart in a DirX Identity target system that is part of a common SharePoint cluster. The advantages of this approach are that only one workflow needs to be configured for use by all the clustered target systems and that clusters support a bind account mechanism. Each target system references one bind account that holds the credentials for the target system connection. This mechanism fits perfectly with the requirement of different bind credentials per site. Since SharePoint uses the Windows Active Directory accounts, account objects are not held in the SharePoint target systems. Each SharePoint target system references the associated Active Directory target systems by a peer target system link. In a group of an Identity SharePoint target system, the members are DN links to the user objects. Special SharePoint user hooks are added to the SharePoint workflows that transform user DNs to account names and vice-versa by evaluating the accounts in the linked peer target system related to the user by the dxrUserLink attribute. The SharePoint workflows have the following prerequisites and limitations: Before you can use the workflows, you must extend the DirX Identity Store schema with SharePoint target system-specific attributes and object classes so that the workflows can store SharePoint-specific information in the Identity Store. For instructions, see the section \"Extending the Schema for the Target System Workflows\". Configuring the SharePoint workflows consists of the following steps: Setting up SharePoint clustered target systems Setting up the SharePoint workflows Setting up a SharePoint SSL connection To set up a SharePoint cluster in the Identity Manager: Select the Provisioning → Target System view. Select New → Cluster Container at the top-level node and create a cluster container. For example, name it SharePoint. Select this container, and then select New Cluster to create a cluster for your SharePoint server. For example, name it SharePointServer1. It shall contain all SharePoint sites as target systems. Select the cluster object, and then select New Target System for each site. This action starts the Target System wizard. Note that the wizard does not create Java-based workflows because only one workflow is necessary for a SharePoint cluster (it handles all contained sites). To set up the synchronization and validation workflows, perform the procedure described in \"Configuring SharePoint Workflows\". The result is a structure like this: SharePoint SharePointServer1 Site1 Site2 …​ SharePointServer2 Site1 …​ All target systems use a common configuration tree with common object descriptions. Thus, after you create the first target system, move the configuration container from the target system one level up. Now it is a child of the cluster and lies in parallel with the target system. If you add the next target system to the cluster, the configuration container is automatically omitted. The following configuration steps must be performed at each SharePoint target system: In the General tab, add the links to the related peer target systems. These are the target systems containing the related active directory accounts. In the Server Connection tab, enter the URL of the related SharePoint site. In the Server Connection tab, edit the bind account. Click Edit and enter the bind credentials for the SharePoint site: domain**loginname (for example, *domain1\\admin*) and password. Save bind account and target system. If you don’t want to use the Target System wizard to create the SharePoint workflows, you can also: Use the Identity Manager to copy the workflow to your scenario (Connectivity → Global View). Select the copied workflow from the context menu of the workflow line, and then select Configure. Check that the Is applicable for parameters section is set correctly (for the synchronization workflow only; leave the parameters empty for the validation workflow): Type - must be set to SharePoint. Cluster - should be set to the Cluster field value of the target system objects in your corresponding cluster (Advanced tab, Match properties). Domain - set this field to '*'. This action defines that this workflow runs for all target systems in your target system cluster, which means it runs for all sites in your SharePoint server. To create an SSL connection to SharePoint: Create a trust store (a keystore containing the certificate of the trusted root certification authority). Configure SSL in DirX Identity. Creating the Trust Store The trust store is a Java keystore that is created using the keytool supplied with the Java Runtime Environment. The certificate is obtained by exporting it from the Internet Explorer’s key store of trusted root certification authorities. Export the certificate as DER encoded binary X.509 (.CER) to file, for example, SharePointCa.cer. To create a Java keystore containing this file, call the Java keytool with the following arguments: keytool -import -alias alias -storepass password -keystore keystore_filename -file certificate_filename alias can be randomly chosen, and it must be unique if multiple certificates are stored in the keystore. password is the keystore password. It must be entered later on as the trustStorePassword in the DirX Identity target system configuration. keystore_filename is the keystore file name. It should have the extension .jks certificate_filename denotes the file containing the certificate, with the extension .cer keytool asks if this certificate is trusted. You must answer \"Yes\" if you want to use this certificate. Here is a sample call: keytool -import -alias sharepoint -storepass changeme -keystore SharePointCaCerts.jks -file SharePointCa.cer This call creates a keystore file SharePointCaCerts.jks containing the certificate exported in the first step. It is called a trust store since it contains certificates of trusted authorities. Configuring SSL in DirX Identity Select the DirX Identity target system and choose the Server Connection tab. Set the following parameters to set up SSL: Site URL - set the site URL beginning with https and using the secure port (by default, 443). A sample structure of the URL is https://server:port/sites/site Path to Trust Store File - set the fully-qualified path name of the trust store file created in the preceding step. Trust Store Password - set the trust store password. Note that the password should be scrambled or RSA-encrypted. You must then restart the Java-based Server to apply the changes. Users are not created in SharePoint but are taken from a peer target system. Note that the SharePoint user hook supports multiple peer target system links. If you set multiple links, all accounts a user has in the related target systems are enabled for the SharePoint site. The next sections describe the settings of the target system in more detail. Advanced Settings The match properties Type, Cluster and Domain are part of the event topic that is sent when a group is changed. They are used to select the appropriate workflow and to identify the target system in the workflow: Type - must contain the fixed value SharePoint (do not change!). Cluster - should contain the name of your SharePoint server (can be a symbolic name). Domain - should contain the SharePoint site name. The assignment properties should not be changed. You must check Enable Realtime Provisioning to start an event-based workflow for a group change. Disable Password Sync should be set because the accounts reside in the Active Directory domain. Server Configuration This tab allows setting the URL. It contains the host address and the port. Normally SharePoint is accessed via port 80. In case of SSL, port 443 is used. The reference to the bind account is entered here, holding the bind credentials for the related site. Note that the account’s dxrName attribute must contain domain*\\account;* for example, domain1\\admin. The password must be stored in the bind account’s dxmPassword attribute. To achieve this, you must change the userPassword attribute of the bind account in the Data View. Connector Configuration You can configure the following values for an optional proxy server: Host - host name of the proxy server (optional). Port - port of the proxy server (optional). User - user for proxy server authentication (optional). Password - password for proxy server authentication (optional). You can configure the following values for the connector: User Name Prefix - is used in sites whose members follow the syntax prefixaccount_name. For example the prefix ptdssomember: is used for sites with member syntax ptdssomember:*account_name. Note that you must configure an empty *domainnameattribute at the connected directory of those sites. Search Groups from Site Collection - a Boolean flag indicating that the groups must be searched from the site collection rather than from the specified (sub)site. If the subsite on your SharePoint server was created with inheriting the site collection (parent site) permissions, the groups created in this subsite are part of the site collection and are only contained in the search result for the subsite if this flag is set. If the subsite to be provisioned was created with unique permissions, this flag must not be set (default) if only the subsite’s groups are to be provisioned and not all site collection groups including those of subsites with inherited permissions, too. Debugging trace file: Trace File - a path and filename for the request. This file is useful in debugging mode to inspect the SPML requests towards the connector and the corresponding responses. Once the workflows become productive, delete or rename the option to prevent writing to the trace file. Environment Properties You can configure the following values: Domain\\Userloginname - a valid default user login name for a new group.. A user name in SharePoint versions before SharePoint Server 2013 is presented in the form domain**account. From SharePoint Server 2013 on, a user name is presented in the form of a claims-based identity type prefix (for a Windows claims identity type, the prefix is *i:0#.w|*) followed by domain*\\*account. If this default_userloginname is set, it is used as the defaultUserLoginName when a new group is created in SharePoint. If it is left empty, the group’s default userloginname is populated from the user provided with the bind account. Default Owner → Owner - the default owner, if a group’s owner attribute on the DirX Identity side is not populated. The SharePoint attribute ownerIdentifier is mandatory for creating a group in SharePoint. The owner type, whose default value can be set in the environment property default_owner_type, must be either User or Group. If the owner type is User, the value for the default owner must be a valid username in the syntax domain**account or claims_based_prefixdomain*\\*account depending on the SharePoint Server version as described in Domain\\Userloginname. If the owner type is Group, the default owner must be the name of a group in the same SharePoint site.. Default Owner → Owner Type - the default owner type. Allowed values are User and Group. Base DN (mandatory) - the base DN for groups in the current target system. This DN is used as a parent folder for the groups imported from the validation workflow. It is automatically set during save of the target system to the value *cn=Groups,*dn of target system. The following figure shows the layout of the channels that are used by the SharePoint workflow’s join activity. Figure 34. SharePoint Provisioning Workflow Channels and Objects DirX Identity supports these SharePoint workflows: Ident_SharePoint_Realtime_Clustered - this workflow is a Java-based synchronization workflow. It can run either scheduled or event-based. Event-based means it is triggered by a group change in DirX Identity. Each modification of a group - for example, adding a new group, adding/removing a member to a group or changing the group owner - starts a workflow that propagates this change to SharePoint. Once the change is applied, it is propagated back to the group object in the DirX Identity target system, for example, to adjust the group’s state or other data. Validate_SharePoint_Ident_Clustered - this workflow is a scheduled validation workflow. It imports groups from SharePoint sites to the associated DirX Identity target systems and modifies the group’s members and other attributes according to the current group state. This workflow is used to perform an initial load of the DirX Identity SharePoint target systems and to keep the DirX Identity target systems in sync if changes are made in SharePoint (for example, groups are added or deleted). This section describes the SharePoint workflow ports. TS Port The TS port references the SharePoint connected directory and its channels. The channels contain the mapping definitions for export of groups to SharePoint and the join definition for SharePoint. IdentityDomain Port The IdentityDomain port references the SharePoint channels (Channel Parent) of the DirX Identity connected directory. The channels contain the mapping definitions for import of groups from SharePoint and the join definition for DirX Identity. Note that the SharePoint validation workflow and the synchronization workflow use the same connected directory and channel configuration. Only the controller class is changed in the join activity. This section provides information about SharePoint workflow channels. At the SharePoint connected directory, the directory type LDAP is used since the required configuration parameters are almost the same. The clustered workflows ignore the SharePoint target system service and the bind profiles. These parameters are read from the target systems/bind profiles in the Provisioning domain. The Identity → Group Base property must not be set at the connected directory because it is different for each target system. In a clustered workflow, this value is overwritten by the target system-specific configuration attribute Group Folder → Base DN in the Environment Properties tab (attribute role_ts_group_base) in the Provisioning domain. The Target System → Group Base property of the connected directory must be set even though it is ignored when exporting the groups from the SharePoint server since all groups per site are flat. Some specific attributes of the Connected Directory are important for the workflows: accountnameattribute (mandatory) - the name of the LDAP attribute holding the Windows account name in the peer target system’s account objects. delete_group_enabled - a boolean flag. If set to true, deleting a group in DirX Identity results in a physical deletion of the group in the connected SharePoint site. If set to false, groups are not deleted in SharePoint. debug_to_screen - a boolean flag. If set to true, extra debug information is written to stdout. This attribute must be set to false in a production environment. domainnameattribute - the name of the LDAP attribute holding the Windows domain name in the peer target system’s account objects. If no value is specified, the domain of the bind account is added to the account name. In SharePoint Server versions prior to SharePoint Server 2013, the user name is composed of domain**account. In SharePoint Server 2013 and higher, the user name is composed of a claims-based identity type prefix (for a Windows claims identity type, the prefix is i:0#.w|) followed by domain**account. This means that the domain attribute (the default attribute name holding the domain name is dxmAdsDomain) of an account in the peer target system must consist of this claims-based prefix plus the domain name; for example, *i:0#.w|domain1*. In SharePoint sites that use the member syntax prefixaccount (for example, *ptdssomember:*account) the domainnameattribute must be left blank. This leads to the following behavior: In the sync direction (Identity to SharePoint) the members are created without the domain prefix in the join engine. The SharePoint connector then adds the prefix to the account name. In the validation direction (SharePoint to Identity), the connector strips off the configured prefix from the members. In the join engine, the corresponding accounts then are searched without domain name, only with the filter *cn=*account. If you use both sites with and without user name prefix, it may be necessary that you must configure two SharePoint clusters: one for the use with user name prefix (and empty domainnameattribute), and one for the use for members with syntax domain*\\*account (with domainnameattribute configured). filterblocksize - the maximum number of account names in one search filter. The account name-to-user mapping is performed via LDAP searches in DirX Identity. This attribute adjusts the maximum number of account names that are combined in one search filter. Direction: Identity Store → SharePoint GC - com.siemens.dxm.join.userhook.sharepoint.UserHookGroupsTo This user hook performs the following mapping functions: The group member DNs are converted to the target account names by searching the accounts in the peer target system according to their dxrUserLinks. The references member DN to domainname_account name_ are extracted from the accounts. If the owner DN points to a user, it is converted to domainname_account_ by the same mechanism. If it is a group, the group name is extracted. Export Section This section contains the search filter to export all SharePoint groups of one site. In the future, other object types (beside groups) may be handled, so an object class Group is introduced here. Mapping Section The DirX Identity to SharePoint mapping is: Identifier - the identifier is created in a Java mapping function. It contains the group’s cn. objectClass - set to the fixed value \"Group\" groupName - the cn of the group. ownerIdentifier - a Java source mapping that performs the following mapping: If a value for owner is present in the source entry, this valued is returned in the map result. Otherwise, the value for default_owner_type is read from the environment and returned in the map result. If none of the above is present, the ownerIdentifier is not deleted for a modify group operation; the old value is kept instead. For an add operation, the group creation will fail, because the ownerIdentifier attribute in SharePoint is mandatory. ownerType - a Java source mapping that performs the following mapping: If a value for owner is present in the source entry, this value is returned in the map result. Otherwise, the value for default_owner_identifier is read from the environment and returned in the map result. role - in the sample workflow, dxrHistoryRemoved holds the SharePoint role names. It is directly mapped to the sharePoint role attribute. You must choose your own attribute here if you intend to provision role names. description - direct mapping to the same attribute. defaultUserLoginName - a Java source mapping that performs the following mapping: If a value for owner is present in the source entry and the owner is a user, this value is returned in the result. Otherwise, the value for default_userloginname is read from the environment and returned in the result. Operational Mapping Section The remote members of the group are mapped to the operational attribute \"localMember\". This mechanism preserves local members so that they are not deleted in SharePoint. Join Section The join filter matches the group’s cn in DirX Identity against its SharePoint group name. Direction: SharePoint → Identity Store GI - com.siemens.dxm.join.userhook.sharepoint.UserHookGroupsFrom This user hook performs the following mapping functions: The target account names are converted to user DNs. Through the domainnameattribute and the accountnameattribute in the connected directory configuration, the account is searched in the peer target system. If found, the dxrUserLink attribute if populated holds the related user DN. If no DN is found for an account name, the member is mapped to \"remotemember\". The owner identifier is converted to a user or a group DN. If no DN is found, the owner is mapped to \"remoteowner\". Export Section The export section defines the search filter to export all groups of a SharePoint target system. As the search base role_ts_group_base is used, it is defined in the DirX Identity target system configuration (Base DN in the Environment Properties tab). Mapping Section The SharePoint to DirX Identity mapping is: Identifier - the identifier is created in a Java mapping function. If a joinedId already exists, this value is used. In a validation workflow, the group’s DN is built from the SharePoint groupName and the role_ts_group_base configured at the corresponding DirX Identity target system. objectClass - defines the object classes required for a target system group. description - direct mapping from the description in SharePoint. ownerType - the type of the SharePoint owner is mapped to dxrDefaultGroupType in the sample. You may need to change this mapping if you use dxrDefaultGroupType for other purposes. owner - the owner is mapped from the ownerIdentifier. Note that the user hook runs prior to the mapping and thus the ownerIdentifier is already a DN here. cn - the group’s common name is filled with the SharePoint groupName. dxrHistoryRemoved - this attribute is used to hold the SharePoint role names in the sample workflow. You should change this to another attribute if you intend to provision the roles. dxrState, dxrTSState, dxrTSLocal and dxrToDo - the standard mapping as, for example, in the LDAP-to-LDAP workflows is used here, too. Join Section The group is joined in DirX Identity by its DN created in the mapping section. The member channel configuration holds the mapping of the group members. Direction: Identity Store → SharePoint The mapping of the member attribute is handled in a special Java mapping function. It was copied from the LDAP-to-LDAP workflow. Direction: SharePoint → Identity Store Mapping Section The DirX Identity to SharePoint mapping is: dxrGroupMember attributes - the mapping of the member state attributes is standard for most attributes. Only dxrGroupMemberRemote and uniqueMember are mapped with special Java functions. dxrGroupMemberRemote - before the mapping, remotemember contains all SharePoint user names that cannot be mapped to a DirX Identity user. This situation occurs if the Windows account is not managed in a peer target system. The Java mapping function maps remotemember to dxrGroupMemberRemote. If no remotemember exists, dxrGroupMemberRemote is deleted. uniqueMember - in a target system without accounts but with states, uniqueMember must contain all users referencing the group. Once the user is removed from all group members, it is also removed from uniqueMember. The Unify Office Provisioning workflows operate between a target system of type Unify Office in the Identity Store and the corresponding connected Unify Office endpoint. The workflows use the Unify Office connector (UnifyOfficeConnector) for provisioning. This connector communicates with the Unify Office (RingCentral) endpoint using RESTful API with JSON requests. The connector uses the Unify Office (RingCentral) OAuth server for authentication and authorization. The Unify Office workflows handle the following Unify Office objects: Account - the common Unify Office (RingCentral) user (SCIMv2 conformant, translates to RingCentral extension object). The delivered workflows include: Validate_UnifyOffice_Realtime - the validation workflow that imports existing Unify Office users from Unify Office (RingCentral) server to the Identity Store. Ident_UnifyOffice_Realtime - the synchronization workflow that exports detected changes for account from Identity Store to the Unify Office (RingCentral) endpoint and then validates the processed changes in Unify Office (RingCentral) endpoint to the Identity Store. The following figure illustrates the Unify Office (RingCentral) Provisioning workflow architecture. Figure 35. Unify Office Provisioning Workflow Architecture The Unify Office Provisioning workflows only offer channels for the SCIM objects and attributes provided by the appropriate RingCentral API endpoint. The Unify Office Connector supports other objects as well, but since these are specific for voice telephony they are out of scope. Verify that services are correctly configured at the Unify Office connected directory. The Unify Office Service referenced by the connected directory should contain the default value platform.devtest.ringcentral.com with SSL enabled. This platform connects to the sandbox account; for production, it must be changed to platform.ringcentral.com. The Unify Office connected directory and Provisioning workflows support the central HTTP proxy server configuration. See the section “HTTP Proxy Server Configuration” for details. DirX Identity must be registered as a valid principal service for your existing Unify Office tenant (account). Use the Unify Office (RingCentral) developer portal https://developers.ringcentral.com/ to create your app and generate your client ID and client secret. Configure the bind profile for the Admin User when you plan to use the Resource Owner Password Flow and configure the bind profile for client authentication with the generated client ID and Client Secret field from your generated app. Check the Provisioning settings used by the connected directory and then set them to the real values for your provisioned target system. The Unify Office target system requires the following layout: Accounts - all Unify Office accounts are located in a subfolder Accounts. The dxrPrimaryKey attribute of accounts contains the unique ID generated by the Unify Office (RingCentral) endpoint. The following figure shows the layout of the channels that are used by the join activity: Figure 36. Unify Office Provisioning Workflow Channels and Objects The Unify Office objects are synchronized via a pair of channels (one channel per direction). This section describes the Unify Office workflow ports. TS Port CF - Crypt Filter A connector filter is configured implicitly. It is used to send decrypted passwords to the Unify Office endpoint. This section provides information about Unify Office workflow channels. Direction: Identity Store → Unify Office: ID: dxrPrimaryKey Join: ${source.dxrPrimaryKey} or userName=${target.userName} accountEnabled - the attribute used to disable the account object in Unify Office. The correct value is derived from the dxrState attribute of the corresponding account object in the Identity Store. Direction: Unify Office → Identity Store ID: \"cn=\"${source.userName}\",\"+${env.role_ts_account_base} or ${joinedEntry.id} Join: ${target.dxrPrimaryKey} or ${target.dxrName} or ${target.id}. dxrTSState - the attribute used to detect the current state of the account in Unify Office. The correct value is derived from the accountEnabled attribute of the corresponding account object in Unify Office. It is set to DELETED when no account entry is found. The UNIX-OpenICF Provisioning workflows operate between a target system of type OpenICF in the Identity Store and the corresponding connected OpenICF connector server which is configured for communication with a UNIX (Linux) system using the OpenICF connector bundle org.forgerock.openicf.connectors.solaris-connector (UNIX connector). The following figure illustrates the OpenICF connector server architecture. Figure 37. UNIX-OpenICF Connector Server Architecture As shown in the figure, the Java OpenICF connector sends a request to an OpenICF connector server which runs on a supported platform. Note that single an OpenICF server may support more connector bundles at the same time. The OpenICF server passes the request to the UNIX connector bundle. The bundle then establishes a SSH or telnet connection to a configured UNIX host and executes the necessary scripts. It is possible to provision more UNIX hosts using the single OpenICF connector server. The workflows use the specially preconfigured DirX Identity OpenICF connector for UNIX provisioning (OpenIcfConnector2Unix). This connector communicates with the OpenICF connector server using the special OpenICF protocol. See the section \"OpenICF Connector\" in the DirX Identity Connectivity Reference for more details. The following figure illustrates the UNIX-OpenICF Provisioning workflow architecture. Figure 38. UNIX-OpenICF Provisioning Workflow Architecture The workflows handle the following UNIX objects: Account - the common UNIX accounts. Group - the common UNIX groups. The delivered workflows are: Ident_UNIX-OICF_Realtime - the synchronization workflow that exports detected changes for account and group objects from Identity Store to the UNIX system and then validates the processed changes in the UNIX system to the Identity Store. SetPassword in UNIX-OICF - the workflow that sets the password for the account in the UNIX system. Validate_UNIX-OICF_Realtime - the validation workflow that imports existing UNIX accounts and groups with group assignments from the UNIX system to the Identity Store. The UNIX-OpenICF workflows have the following prerequisites and limitations: The delivered workflows require a properly deployed OpenICF connector server with a supported version of org.forgerock.openicf.connectors.solaris-connector (UNIX connector). DirX Identity delivers an enhanced version of this bundle based on version 1.1.1.0-SNAPSHOT. Some SUSE Enterprise Server distributions may not be able to completely remove secondary group assignments for a user. The OpenICF UNIX connector uses the common UNIX command usermod -G \"\" account_name. This command might not work correctly on SUSE distributions. In this case, deprecated secondary group assignments will remain unassigned. Before you can use the workflows, you must extend the DirX Identity Store schema with UNIX-OpenICF target system-specific attributes and object classes so that the workflows can store UNIX-OpenICF-specific information in the Identity Store. For instructions, see the section \"Extending the Schema for the Target System Workflows\". When performing the procedures described in this section, select the extensions for PAM-UNIX and UNIX. Building the connection to the UNIX system consists of two steps: Installing and configuring the Java-based OpenICF connector server Configuring the connection to the OpenICF connector server This section provides information on how to set up the Java-based OpenICF connector server. OpenICF Server Download a stable installation package for the Java OpenICF connector server on http://www.forgerock.org/openicf-archive.html. We recommend the version OpenICF Java 1.1.1.0 for compatibility reasons. Follow the installation instructions on http://openicf.forgerock.org/connector-framework-internal/connector_server.html. Configure the OpenICF server port, shared secret and create host certificates if you intend to use SSL. OpenICF UNIX Connector Bundle Deploy the delivered improved version of the UNIX connector bundle to your OpenICF connector server installation directory. After you have installed the feature for OpenICF connectivity, you can find the UNIX connector in the folder install_path/connectors/OpenICF/bundles/java (the file name is in the form solaris-connector-.jar*). Copy the file to the openicf_install_path*/bundles* directory. If there is an older version of the file solaris-connector-.jar* in this folder, delete it. The configuration of the connector bundle does not require any special steps. To configure the connection to a UNIX system using an OpenICF connector server: Specify the IP address or the host name and the data port of the OpenICF connector server with the deployed UnixConnector bundle. Adapt the bind profile for the OpenICF server - set the password that is configured as a shared secret with the OpenICF connector server and enable SSL if it is enabled on the OpenICF server side. Using SSL may require additional configuration steps. See the section \"OpenICF Connector\" in the DirX Identity Connectivity Reference for more details. All of these properties can be configured using the connected directory (Generic connected directory type) that represents the OpenICF server. It is referenced from the connected directory that represents the UNIX system (the OpenICF Server and OpenICF Server Bind Profile property on the OpenICF Connector Server tab). Specify the IP address or the host name of the UNIX system at the UNIX-OpenICF service object and then set the bind profile properly. UNIX-OpenICF connected directory represents a real UNIX system that will be provisioned by our workflows. Use the correct port numbers that are configured on the UNIX host for the desired type of communication (SSH or telnet). Use credentials with sufficient access rights (UNIX account and group management). Specify the Response Timeout property on the OpenICF Connector Server tab of the UNIX-OpenICF connected directory. Set the value that is sufficient for the selected bundle type (UnixConnector). The default value is 30. Check the settings related to the OpenICF connector bundle at the TS port of the workflow object (OpenICF Connector Bundle tab). The Bundle Specification area allows you to define the Bundle Name (the default is org.forgerock.openicf.connectors.solaris-connector), Bundle Version (the default is 1.1.1.0-SNAPSHOT) and Class Name property (the default is org.identityconnectors.solaris.UNIXConnector). Only use values that are valid for a connector bundle deployed on the OpenICF connector server. Override default values if necessary. The Bundle Settings area lets you choose the Unix Mode (use linux for Linux flavors), Connection Type (use ssh or telnet) and set the Shell Prompt (use the string character that is displayed at the beginning of the UNIX command prompt for the connected user. The hash tag (#) sign is typically used for the root account.) The UNIX-OpenICF target system requires the following layout: Accounts - all UNIX accounts are located in a subfolder Accounts. Groups - all UNIX groups are located in a subfolder Groups. The attributes uid, dxrName and dxrPrimaryKey of accounts contain the name (uid) of these objects in the connected UNIX system. The standard JavaScript dxrNameForAccounts.js generates the attribute uid for the UNIX account. The attributes dxrName and dxrPrimaryKey of groups contain the name (gid) of these objects in the connected UNIX system. The attribute dxmUnixPrimaryGroup for the UNIX account (refers to the primary UNIX group of the account) is by default automatically chosen as one of the currently assigned UNIX groups. It uses the obligation mechanism (see group objects) and the UNIX-OpenICF specific JavaScript AccountPrimaryGroup.js. The JavaScript updates the dxmUnixPrimaryGroup when necessary. You can change the primary group manually at the account object. The account object also stores the group membership and references the dxrPrimaryKey attribute of the group objects. The workflows support disabling of the accounts. In this case, a special primary group needs to be assigned for a disabled account since the primary group membership is mandatory for UNIX systems. You can configure the name of the group that will be used solely for disabled accounts. See the UNIX-OpenICF tab of the target system instance and the property Group for disabled accounts. Create a real group in the connected UNIX system with no access rights with the corresponding name (gid). The following figure shows the layout of the channels that are used by the UNIX-OpenICF workflow’s join activity: Figure 39. UNIX-OpenICF Provisioning Workflow Channels and Objects The UNIX objects account and group (and membership) are synchronized via a pair of channels (one channel per direction). This section describes the UNIX-OpenICF workflow ports. TS Port CF - Crypt Filter A UNIX-OpenICF filter is implicitly configured. It is used to send the decrypted password attribute PASSWORD to the OpenICF connector server. This section provides information about UNIX-OpenICF workflow channels. Direction: Identity Store → UNIX-OpenICF ENABLE - the attribute used for disabling the account in UNIX. The value is derived from dxrState attribute of the corresponding account object in DirX Identity. secondary_group - the attribute for secondary UNIX group membership detects changes of primary group assignment and adds the deprecated primary membership to secondary UNIX groups if necessary. It also removes primary groups from the list of secondary (supplementary) groups. Direction: Identity Store → UNIX-OpenICF ID: dxrPrimaryKey Join: ${source.dxrPrimaryKey} or ${source.uidNumber} The GROUPS attribute holds the name of the primary group. Direction: UNIX-OpenICF → Identity Store Join via the dxrName attribute that is mapped identically as the uid and dxrPrimaryKey attribute. Direction: Identity Store → UNIX-OpenICF ID: dxrPrimaryKey Join: ${source.dxrPrimaryKey} or {source.gidNumber} PostMapping script changes the type of the request to delete if necessary. Direction: UNIX-OpenICF → Identity Store Join via the dxrName attribute that is mapped identically as the dxrPrimaryKey attribute. The topics in this section provide configuration information about the Tcl-based target system (Provisioning) workflows, including: The types of Provisioning workflows that exist for each target system Object identification and group-to-account referencing A summary of target system reference, join, and primary key attributes For a description of the script structure used by the target system workflows, see \"Understanding the Default Application Workflow Technology\" > \"Understanding Tcl-based Workflows\" > \"Tcl-based Connectivity Architecture\" > \"Provisioning Workflow Script Structure\". This section provides details about the Tcl-based default target system workflows, including: HiPath workflow (Siemens) - describes details about the HDMS / HiPath 4000 Manager workflow Note that the Siemens HiPath synchronization workflow does not work from a DirX Identity target system - it works from the user tree of the Identity Store. See the HiPath workflow section for more information. ODBC workflow - describes details about the ODBC workflow RACF workflow (IBM) - describes details about the RACF workflow SiPass workflow (Siemens) - describes details about the SiPass workflows Each target system has a validation and a synchronization provisioning workflow. You can run the validation workflow in one of two modes: InitialLoad - exports all of the accounts and groups and the relationships between them from the target system and imports them into the relevant target system subtree in the Identity Store. It performs a full export of the target system and an import to DirX Identity in replace mode. This is the default mode. Validation - detects deviations between the state known in DirX Identity and in the target system, for example about created or deleted accounts and groups or their relationships in the target system. It writes messages about the deviations it finds into the \"to do\" fields of the affected target system objects in the Identity Store. It does a full export of the target system and an import to DirX Identity in replace mode. Initial load and validation modes use the same jobs and are almost identical. The only difference between them is the specific attribute mode of the workflow object, which is set to InitialLoad for the initial load workflow. The Provisioning common script checks this flag and writes the dxrToDo fields for a validation workflow run. The synchronization workflow exports all relevant changes from the DirX Identity accounts and groups subtree, imports them into the target system and acknowledges the changes back to the Identity Store. It does a delta export in both directions and imports the data to DirX Identity in merge mode. Both synchronization and validation workflows update the dxrTSState attribute and the group member attributes of the affected target system objects in the DirX Identity store with the state of the object in the target system. The Provisioning workflows for the default Connectivity scenario operate on both \"hierarchical and \"non-hierarchical\" target systems. In a hierarchical target system, entries (typically, accounts and groups) are ordered hierarchically in trees; LDAP and ADS are examples of hierarchical target systems. A non-hierarchical target system has a \"flat\" ordering of entries; Windows is an example of a non-hierarchical target system. This section provides referencing and joining information about the hierarchical and non-hierarchical target system workflows provided with the default scenario. This section provides general, referencing, and joining information for the ADS, Exchange, SAP EP UM, and LDAP hierarchical target system workflows. The hierarchical workflows for the ADS, Exchange, SAP EP UM and LDAP target systems map the hierarchical tree structure of the target system to the DirX Identity target system accounts and groups subtree. They use the DirX Identity attribute dxrPrimaryKey for account and group objects to hold the target system DN of the object. At the end of the initial load and validation workflows, the AccountRootInTs and GroupRootInTs parameters of the target system object in DirX Identity Provisioning are set to the values specified in DirX Identity Connectivity in the target system connected directory in the provisioning step. They define the account and group root distinguished name (DN) in the target system and are used in DirX Identity to create the dxrPrimaryKey attribute of an account or group object that is created in DirX Identity. The workflows for the target systems ADS, Exchange, LDAP and SAP EP UM use the dxrPrimaryKey attribute as the reference attribute from a group to an account. Because it holds the DN of the object in the target system, the DirX Identity group member attributes can be mapped directly to the target system member attribute and vice-versa. The Exchange and SAP EP UM workflows use the dxrPrimaryKey attribute for joining (identifying) a target system object with an object in the Identity Store. The LDAP workflows use the employeeNumber attribute and the ADS workflows use the sAMAccountName attribute for joining. This usage has the advantage that objects that have been moved in the LDAP or ADS directory are identified in the Identity Store and can be moved there if the flag Rename Allowed is set in the import properties of metacp. This section provides information about referencing and joining for the Windows NT and ODBC non-hierarchical workflows. The NT and ODBC non-hierarchical workflows use the cn attribute as the reference attribute from groups to accounts. The ODBC workflows supply an ODBC unique identifier in the dxrPrimaryKey attribute and use it for joining in subsequent workflows. The Windows NT workflows do not use the dxrPrimaryKey attribute; instead, they use cn, which holds the Windows NT account name, for joining. In the non-hierarchical workflows RACF and SAP R3 UM, the accounts contain the group member lists so that the groups are referenced from the accounts. This flag is set in the target system advanced page. The reference attribute of the RACF target system is the racfid of a group, and the reference attribute of the SAP R3 UM target system is the cn of a group. Neither of these target system workflows use the dxrPrimaryKey attribute. The RACF workflow uses the racfid for joining and the SAP R3 UM workflow uses sapUsername. The following table provides the reference attribute, reference direction, join attribute and dxrPrimaryKey for all of the target systems supported by DirX Identity. Reference Attribute Reference Direction Join Attribute dxrPrimaryKey ADS dxrPrimaryKey Group - Group sAMAccountName DN of TS object LDAP dxrPrimaryKey Group - Group employeeNumber DN of TS object LDAPXXL dxrPrimaryKey Account - Group employeeNumber DN of TS object ODBC cn Group - Group dxrPrimaryKey ODBC unique identifier JDBC cn Group - Group dxrPrimaryKey JDBC unique identifier Notes cn Group - Group cn (=LNfullName) not used RACF racfid Account - Account racfid not used SAPR3UM cn Account - Account sapUsername not used SAPEPUM uid Group - Group dxrPrimaryKey DN of TS object The reference direction indicates how the group memberships are stored in DirX Identity and in the target system. For example \"Group - Group\" indicates: Identity Store: the memberships are stored in attributes that point from the groups to the accounts. Target system database: the memberships are stored in attributes that point from the groups to the accounts. The group-side storage does not work for very large numbers of group members. In a company with 500,000 employees, all might be in the group \"Standard Employee\" which resides in 500,000 attribute values in one group attribute. Target systems (for example, LDAP directories) cannot handle groups of any size. If the memberships are stored on the account side, the limit is less critical because the number of groups of which a user can be a member will not be more than 10,000. This number can be handled by any LDAP server. The HiPath Workflow Ident_HiPath handles bi-directional synchronization between a Siemens Hicom Domain Management System (HiPath 4000) and the Identity Store (user area, not target system area!). The workflow communicates with the HiPath database using the Hicom XIE import/export interface. The following HiPath systems are supported: HDMS 3.1 HDMS 3.6 HDMS-US 5.2 HiPath 4000 Manager V1.0 HiPath 4000 Manager V3.1 The basic assumptions and prerequisites for the HiPath workflow are: MetaStore is entry master for the HiPath database. The HiPath database is attribute master for telephoneNumber and facsimileTelephoneNumber (hardcoded). The person entry in the LDAP directory must contain the attribute dxmOprOriginator. In the DirX Identity default scenario this is guaranteed via the objectClass dxrUser. The workflow performs the following steps in sequence: Activity Meta2HiPath_HiPath Activity HiPath2Meta_HiPath Before you can use the HiPath workflow, you must extend the DirX Identity Store schema with HDMS target system-specific attributes and object classes so that the workflow can store HDMS-specific information in the Identity Store. For instructions, see the section \"Extending the Schema for the Target System Workflows\". The default scenario HiPath workflow is: Ident_HiPath To complete the configuration for this workflow, you must set up the environment and then adapt some values in the Connectivity configuration. Set and test the environment as described in the \"Environment Setup\" topic in \"Default Application Reference\". Use the configuration wizard in the Identity Manager Global View as follows: Go to the Default scenario and double-click the connected directory icon HiPath. In the wizard window, click the icon to the right of the Service field. Set the Server Name and IP Address fields. Click OK. Click Hicom DMS Parameters. Select the HiPath Version and set the correct Remote Mode parameters (see the context- sensitive help in the DirX Identity Connectivity Administration Guide). Click OK, and then click Finish. Next, set the parameters of the workflow as follows, but only if you selected HDMS 5.2 as the version: Right-click the workflow line between the connected directory icons Identity Store and HiPath. In the pop-up menu, select the workflow Ident_HiPath and then click Configure. Click Ident2HiPath Attribute Mapping, then: Change the output attribute text3 (this one is not supported by the US version) to another unused attribute, for example info3. Change the output attribute longname (this one is not supported by the US version) to another unused attribute, for example room. Click HiPath2Ident Attribute Mapping, then: Change the input attribute text3 (this one is not supported by the US version) to another unused attribute, for example info3 (use the same one you selected for Ident2HiPath Attribute Mapping). Click Finish to close the wizard and save your changes. Now the workflow should run. The workflow transfers some information back to the Identity Store (for example, the telephoneNumber and facsimileTelephoneNumber). This workflow does not create or delete any entries (it assumes that the Identity Store is the master for entries). For details, see the next sections. This section describes the operation and the prerequisites of the Ident2HiPath_HiPath activity. Delta operation at the LDAP side. Filter: Status = ENABLED or TBDEL. Updates HiPath in merge mode (ADD operations are converted to INSERT operations in HiPath, MODIFY operations are converted to UPDATE operations in HiPath and DELETE operations are converted to DELETE operations in HiPath). The workflow handles referential integrity for HDMS 3.X: If the Workflow detects that entries in HDMS tables COMPIMP, ORGIMP, BUILDIMP, LOCIMP are required before creating a Person in HDMS, it will create these entries implicitly. The basic assumptions and prerequisites for this activity are: The attributes dxrState, dxmOprOriginator and createTimeStamp should be selected at the source side. If you intend to use an attribute other than dxrState as the status attribute, you need to customize the export post mapping and the export search filter. This activity performs a full or delta export of meta directory entries into a CSV file, which it then imports into an HiPath database. It has the following phases: Initialization - This phase reads the relevant directory data and the complete HiPath database into a data file. This phase also creates a metacp index list handle that represents the database sorted by DMSIDs and a handle that represents the database sorted by join criteria (for example, employee Number) which is created in full mode only. Comparison - This phase compares the directory and HiPath and derives the required HiPath update actions, including creation of the related HiPath update request file. Update - This phase updates the HiPath database using the request file created in the comparison phase. In full mode, export works as follows: it selects entries from the Identity Store (filter dxmOprStatus = ENABLED or TBDEL) and transfers them to the HiPath directory. For each entry in the directory search result, it considers the following cases: Directory entry has related HiPath entries. In this case, perform these steps for each related DMSID: Find related HiPath entry by DMSID. If there is no match, this is considered as an inconsistency to be resolved by the administrator. The entry will be documented in the trace file as missing in HiPath. If there is one match, update the related HiPath entry if directory entry is in state ENABLED (in particular, trace HiPath entry as up-to-date if no changes have been detected), and delete the related HiPath entry if the directory entry is in state TBDEL Directory entry does not have related HiPath entries. Try to find the related HiPath-entry via best-guess-match and distinguish the following cases: No HiPath-entry matches. If the Directory entry is in state TBDEL, nothing is to be done for that entry. Otherwise INSERT entry into HiPath. More than one HiPath-entry matches. This ambiguity will be documented in the trace file. Exactly one HiPath-entry matches. Consider the following subcases: Directory entry is in state ENABLED. If the match is unique also in the directory. perform an UPDATE operation for updating the related HiPath-entry where the attributes to be synchronized are taken from the directory. The directory entry will also be updated with the related DMS-Identifier (if not yet present in the directory entry). Directory entry is in state TBDEL If the match is unique also in the directory, then DELETE the related entry in HiPath. In delta mode, there is a slight difference: for directory entries without related HiPath entries: The creationTimestamp of the Directory entry is evaluated (no best-guess-match). Entries with a creationTimestamp that is more recent than export-last-update-time will lead to an INSERT in HiPath. Entries with a creationTimestamp that is less recent than export-last-update-time are assumed to have related HiPath entries from previous synchronization cycles. Therefore, such an entry (old creationTimestamp and no related HiPath entry) will be discarded and documented in the trace file. The HDMSAgent uses a remote copy command in order to transfer files to the remote host, and a remote shell command to execute the HDMS request on the remote host: The related remote copy command is rcp (remote copy) if the value of the remote_secure_interaction parameter is FALSE, and the command scp (secure shell), if the parameter value is TRUE. The related remote shell command is rsh (remote shell) if the value of the remote_secure_interaction parameter is FALSE, and the command ssh (secure shell), if the parameter value is TRUE. The meta controller script controls the remote HiPath system as follows: Creation of a request file, for example, x.req. Copy request file to remote host, using the remote copy command. Invoke the script remote_hdms on remote host, using said remote shell command. The script remote_hdms calls dmsieproc with request file (for example, x.req), the response file (for example, x.rsp) contains the result of each request specified in request file. Copy response file from remote host using the remote copy command. To make this work correctly, you must set up the environment. See the section \"Setting Up the HiPath Environment\" for details. This section describes the operation and the prerequisites of the HiPath2Ident_HiPath activity. Updates Directory in merge mode. Performs MODIFY operations only. A DELETEd HiPath-Entry is propagated as Directory MODIFY operation (it removes those attribute values which are correlated with the HiPath-Entry). A INSERTed/UPDATEd HiPath-Entry is propagated as Directory MODIFY operation (it updates those Attribute values which are correlated with the HiPath-Entry). It links multiple HiPath entries to one Directory Entry. The basic assumptions and prerequisites for this activity are: The attributes objectClass, dxmOprOriginator and all attributes necessary for the join operation must be selected at the target side. This step performs a full or delta export of HiPath Person (PERS) entries into a CSV file, which it then imports into a meta directory database. The performed steps are: Getting updated/deleted PERS-table entries from HiPath. In delta-mode, an appropriate SQL-like filter regarding creation/modification time is passed to HiPath. Connecting to the directory. For each record in the result obtained in step 1, try to find the related Directory entry first by a join operation with employeeNumber, then with DMS-Identifier in the dxmOprOriginator attribute. If the number of matches is different from one, document this fact in trace file. If the match is unique, perform a MODIFY operation as follows: For a deleted HiPath entry, remove the corresponding phone and fax numbers from the directory entry. For an inserted/updated HiPath entry, update the corresponding phone and fax numbers from the directory entry. Notes: The parameter Multi Master Attribute List (from HiPath2Ident Entry Handling) specifies the list of attributes being subject to the special handling in import as described in this section above. The default setting defines the special handling (including maintenance of attribute dxmOprOriginator) to be applied for attributes telephoneNumber and facsimileTelephoneNumber only. The parameter Keep Unmastered Attributes (from HiPath2Ident Entry Handling, default “TRUE”) controls whether or not unmastered (for example, manually entered attribute values) will be preserved. The agent can handle LDAP directory entries and HiPath PERS table entries. Each LDAP directory entry that corresponds one-to-one with a HiPath entry will be extended by the objectClass value dxrUser. This concept is a general concept for multi mastering of attribute values. Currently it is only implemented for the HiPath workflow. The method should be used sparingly because it decreases performance when used with a high number of entries. The relevant attributes of this objectClass for the HiPath workflow are: dxrState (status) - Only Directory Entries with status ENABLED and TBDEL are subject to synchronization into HiPath. dxmOprOriginator - A multivalued attribute in the form “value x of attribute y originates from entry of target system system”. The purpose of this attribute is storage of attribute mastership information. The attribute structure is: masterkeyattribute_name#attribute_value with master - Name of the master system. The Master Name operational attribute of the connected directory is taken to define this value. key - unique identifier for an entry in related target system (for the HiPath workflow the DMSID is used) attribute_name - the mastered LDAP attribute name (for example telephoneNumber) attribute_value - the mastered LDAP attribute value (for example +49 89 722 12345) Sample Attribute values are: HDMS#12345#telephoneNumber#+49 89 123 12345 HDMS#23456#facsimileTelephoneNumber#+49 89 987 65432 HDMS#34567## The first line represents the assertion “Attribute value #+49 89 123 12345 of attribute telephoneNumber originates from entry with DMSID=12345 of the master system with Master Name HDMS\". The last line represents just a link to a HiPath entry. This section provides instructions on how to set up the HiPath environment and then test it. To set up the environment: Copy (using ftp, for example) the remote_hdms shell script from the install_path\\*agents\\HDMS* to the subdirectory specified in the remote_subdir parameter relative to the remote account specified by the remote_account parameter. Edit the copied remote_hdms script to ensure that: The DMS_DIR variable setting specified in the script matches the full pathname of the HDMS XIE import/export program on the remote HiPath installation. The DATA_DIR variable setting specified in the script matches the setting in the remote_subdir parameter. Ensure that the account that runs HDMSAgent on the local system has the rights to run rcp and rsh (or scp and ssh, respectively) to access the remote system. Enable the HiPath environment for remote operation, depending on the remote_secure_interaction parameter. Enable the HiPath environment for rsh and rcp (see the section \"Enable HiPath Environment for rsh and rcp\"), if the parameter value is FALSE. Enable the HiPath environment for ssh and scp (see the section \"Enable HiPath environment for ssh and scp\"), if the parameter value is TRUE. Connectivity to a HiPath system requires a UNIX account that has read and write access over the HiPath XIE interface. UNIX accounts created with HiPath 4000 Manager V3.1 do not have these access rights. To create an account with the required access rights: Log in as user engr. This is the root user of the HiPath 4000 system. Run the UNIX command useradd to create the account hdmsuser. In the dmsie subdirectory of your HiPath installation, copy the file root and rename it to hdmsuser. If you want to grant read and write access only for the PERSDAT table, delete all lines that are different from PERSDAT from the hdmsuser file. Allow read access for all users to the file hdmsuser. Add a line:* hdmsuser* to the .users file in the dmsie subdirectory of your HiPath installation. If the .users file does not exist, create this file with owner root, group sys, and access rights 644. Run the following procadmin commands:* procadmin -t -g XIEAPI procadmin -s -g XIEAPI procadmin -l -g XIEAPI* See your HiPath system documentation for details about the procadmin command. Suppose that HDMSAgent runs on system host1 from the account metauser and host1 has the network address ip1. Suppose you want to configure HDMSAgent for interaction with HDMS V3.1 on host2, network address ip2. First, perform the following steps on host2: Create the account hdmsuser as described in the section \"User creation directives for HiPath 4000 Manager V3.1\" above. With XIE, grant full access rights to this account to manage the related tables PERS, COMPIMP, LOCIMP, BUILDIMP, ORGIMP. If you use another user account, be aware of the correct access rights. Log in as hdmsuser. Edit the .rhosts file in the hdmsuser home directory to grant metauser on host1 rsh, rcp and ftp access (by creating an entry ip1 metauser in the .rhosts file). Be sure that the spelling of the metauser account is correct (this field is case-sensitive). Create the subdirectories req and bin. For the actions required on host1, always use the correct (case-sensitive) account name in the login dialog (in our example, metauser instead of Metauser). We recommend that you test your setup by running rcp, rsh, and remote_hdms by hand, as shown in the following example: On host1, remote copy (rcp) a file on the remote host into the req subdirectory of hdmsuser’s home directory: rcp xxx hdmsuser@:req (if host1 is a UNIX host) rcp xxx .hdmsuser:req (if host1 is Windows NT host) On host1, remote copy (rcp) a file from host2 that exists in the req subdirectory of hdmsuser's home directory but that does not exist in your current working directory: rcp hdmsuser@:req/xxx . (if host1 is a UNIX host) rcp hdmsuser@:req/xxx . (if host1 is a Windows NT host) On host1, run a remote execution (rsh) of a simple command. For example: rsh ip2 -l hdmsuser ls -l req On host2: Log in as hdmsuser and create an HiPath request file $HOME/req/xxx.req with the following contents and no leading white spaces: # HDMS Call: xxx.req 1;SELECT * FROM COMPIMP #@* Note*: For HDMS-US 5.2, HiPath 4000 Manager V1.0 and V3.0, the COMIMP table does not exist. Please use any other valid table (e.g. PERSDAT) instead of COMPIMP. Change directory to the hdmsuser home directory. On the command line, type bin/remote_hdms xxx.req. On the command line, type echo$? to check the exit code. On success, the exit code is 0 and the file $HOME/req/xxx.rsp should exist with content that indicates successful execution of the request, such as: # HDMS Call: xxx.req; 2000-03-22 14:00:13.00 #1;1 38500|DE|PQR|||| #@ or (if the HDMS database is empty): # HDMS Call: xxx.req; 2000-03-22 14:00:13.00 #1;0 #@ Define a user account, say some_user_account, that is to run HiPath Workflow. We recommend the DirX Identity installation account for this purpose wherever possible. Deviation from this recommendation will imply some extra work when configuring the workflow. Ensure that some_user_account has the permissions to call the HDMS XIE import/export program and has the permissions to manage the related tables using the XIE program, namely PERS, COMPIMP, LOCIMP, BUILDIMP, ORGIMP for HDMS 3.X PERSDAT for HDMS-US 5.2, HiPath 4000 Manager V1.0 and V3.0 You can also test your setup by running the HiPath Workflow in trial mode. For example, suppose that HDMSAgent runs on system host1 from the account metauser and host1 has the network address ip1. Suppose you want to configure HDMSAgent for interaction with HDMS V3.1 on host2, network address ip2. First, perform the following steps on host1: Login as metauser. Create public/private key with the ssh-keygen command, as shown in the following sample dialog: $ cd $ ssh-keygen -t rsa Enter for all input requests and wait until the generation is finished. Now, perform the following steps on host2: Create the account hdmsuser as described in section \"User creation directives for HiPath 4000 Manager V3.0\" above. With XIE, grant full access rights to this account to manage the related tables PERS, COMPIMP, LOCIMP, BUILDIMP, ORGIMP. If you use another user account, pay attention to the correct access rights. Log in as hdmsuser. Transfer the public key (which you created for account metauser on host host1) to host2, for example scp metauser@host1:.ssh/id_rsa.pub ./metapublickey.txt. Be sure that the spelling of the metauser account is correct (this field is case sensitive). Create the directory $HOME/.ssh if it does not yet exist. Append the public key to the authorized keys file of the user hdmsuser, for example type cat $HOME/metapublickey.txt >> $HOME/.ssh/authorized_keys. Verify the permissions of the file authorized_keys. They should be 644. Create the subdirectories req and bin. For the actions required on host1, always use the correct (case-sensitive) account name in the login dialog (in our example, metauser instead of Metauser). We recommend that you test your setup by running scp, ssh, and the remote_hdms by hand. It is essential that the commands scp and ssh execute without requesting a password. The commands can be tested as shown in the following example: On host1, remote copy (scp) a file on the remote host into the req subdirectory of hdmsuser's home directory. scp xxx hdmsuser@:req On host1, remote copy (scp) a file from host2 that exists in the req subdirectory of hdmsuser's home directory but that does not exist in your current working directory: scp hdmsuser@:req/xxx . On host1, run a remote execution (ssh) of a simple command. For example: ssh hdmsuser@ ls -l req On host2: Log in as hdmsuser and create an HDMS request file $HOME/req/xxx.req with the following contents and no leading white spaces: # HDMS Call: xxx.req 1;SELECT * FROM COMPIMP #@* Note*: For HDMS-US 5.2, HiPath 4000 Manager V1.0 and V3.0, the COMIMP table does not exist. Please use any other valid table (e.g. PERSDAT) instead of COMPIMP. Change directory to the hdmsuser home directory. On the command line, type bin/remote_hdms xxx.req. On the command line, type echo $? to check the exit code. On success, the exit code is 0 and the file $HOME/req/xxx.rsp should exist with content that indicates successful execution of the request, for example: # HDMS Call: xxx.req; 2000-03-22 14:00:13.00 #1;1 38500|DE|PQR|||| #@ or (if the HDMS database is empty): # HDMS Call: xxx.req; 2000-03-22 14:00:13.00 #1;0 #@ Define a user account, say some_user_account, that is to run the HiPath workflow. We recommend the DirX Identity installation account for this purpose wherever possible; deviating from this recommendation will require some extra work when configuring the workflow. Ensure that some_user_account has the permissions to call the HDMS XIE import/export program and has the permissions to manage the related tables using the XIE program, namely PERS, COMPIMP, LOCIMP, BUILDIMP, ORGIMP for HDMS 3.X PERSDAT for HDMS-US 5.2, HiPath 4000 Manager V1.0 and V3.0 You can also test your setup by running the HiPath workflow in trial mode. The export trace file records the progress of the export task and statistical information about the operations being performed. This section describes the format of the generated information, which consists of these sections: Meta directory entries HiPath entries Derived HiPath updates Derived Directory updates HiPath update statistics DMS identifier update statistics Directory entries: Number of meta directory entries to be synchronized into HiPath. Discarded: Number of \"invalid\" meta directory entries to be discarded. By default (that is, default definition of the export user hook uh::LoopExtraFilter), an entry will be discarded in delta mode if it does not have any related HiPath entry but is older than the \"last export\" time. In this case, HiPath Workflow assumes that a previous synchronization attempt of the entry into the HiPath database failed and discards the entry. The meta controller trace file contains notices about such entries. Missing in HiPath: Number of meta directory entries with DMS identifier that are not marked as to be deleted in HiPath, but do not exist in HiPath. The meta controller trace file contains notices about such entries. Deleted in Directory and HiPath: Number of meta directory entries with flag deleted in HiPath set to TRUE. The trace file will contain notices about such entries. To-Be-Deleted, missing in HiPath: Number of meta directory entries with a DMS identifier that are marked as to be deleted in HiPath, but do not exist in HiPath. The trace-file will contain notices about such entries. Ambiguous in Directory: Number of meta directory entries where the related HiPath entry has been found by best-guess match, but where multiple entries have the same related HiPath entry. The meta controller trace file will contain notices about such entries. Ambiguous in HiPath: Number of meta directory entries where the related HiPath entry cannot be determined uniquely by best-guess match. The meta controller trace file will contain notices about such entries. Up-to-date in HiPath: Number of meta directory entries where the related HiPath entry is already up-to-date with respect to the attributes to be synchronized. Example: # Directory entries: 9 # Discarded: 0 # Missing in HDMS: 0 # Deleted in Directory and HDMS : 0 # To-Be-Deleted, missing in HDMS: 0 # Ambiguous in Directory: 0 # Ambiguous in HDMS: 0 # Up-to-date in HDMS: 3 In this example, 9 meta directory entries have been detected to be synchronized into HiPath, 3 of them are already up-to-date. If HiPath workflow has loaded the PERS table and one or more of its dependent tables (COMPIMP, ORGIMP, LOCIMP, and BUILDIMP) were examined for referential integrity, this section shows the number of entries in each table. For example: # HDMS PERS-table entries: 6 # HDMS COMPIMP-table entries: 1 # HDMS ORGIMP-table entries: 5 # HDMS LOCIMP-table entries: 4 # HDMS BUILDIMP-table entries: 4 If HiPath workflow does not need to load one or more of these tables (for example, if it detects only up-to-date entries) the section contains a message that the table has not been loaded. For example: # HDMS ORGIMP-table not loaded. The derived HiPath Updates section shows the HiPath database update actions that the HiPath workflow export comparison phase has determined. A counter exists for each action to be performed in the HiPath database. For example: # HDMS-Update-Actions derived in Comparision phase # PERS-table INSERTs: 3 # PERS-table UPDATEs: 1 # PERS-table DELETEs: 2 # COMPIMP-table INSERTS: 0 # ORGIMP-table INSERTS: 2 # LOCIMP-table INSERTS: 0 # BUILDIMP-table INSERTS: 0 In this example, HiPath workflow requests INSERT of 3 PERS-table entries, UPDATE of 1 PERS-table entry, and DELETE of 2 PERS-TABLE entries. In addition, two organizations (ORGIMP table entries) will be created for support of referential integrity. This section shows a counter for each HiPath update action that HiPath workflow can perform and whether or not it succeeded or failed for this synchronization task. The INSERTs are not counted per-table. For example: # HDMS update statistics: # Successful INSERTs: 4 # Unsuccessful INSERTs: 1 # Successful UPDATEs: 1 # Unsuccessful UPDATEs: 0 # Successful DELETEs: 2 You can customize the HiPath workflow in many areas, but it requires Tcl know-how. You must make sure that the HiPath workflow uses the authentication that has been used when testing the remote copy and remote shell command in previous setup steps. Check the Authentication tab of both Jobs of the HiPath Workflow. There are 2 possibilities: If your Identity IdS-C service already runs with the appropriate account (i.e. because in our example above), the authentication tab should not contain any data. If your Identity IdS-C service runs as local system account (on Windows platforms) or another accounts being privileged to launch jobs with different user authentication, you must enter authentication information (i.e. User Name = metauser in our example above and password and domain as appropriate). The correct attribute set is chosen implicitly by the HiPath Workflow itself in dependency of the HDMS Version defined in the related HiPath connected directory. This approach is much more comfortable than selecting dozens of attributes one-by-one and putting them into the appropriate order. There is a drawback of this approach: The Identity Manager will not be able to detect and visualize invalid HiPath attribute mapping rules and select boxes for HiPath join expression The administrator must use the appropriate HiPath attribute abbreviations (when using attributes in customized TCL code) and HiPath attribute names (when using Identity Manager) See section HiPath Tables for valid attribute abbreviations and names for your HDMS/HiPath version. Note: If the HiPath workflow shall support a customer extended HiPath dataschema, you need to customize the file_attr_list variables: Change the statement set src_conn_param(attr_list) \"$file_attr_list_tpl($hdms_version)\" for computation of variable file_attr_list in the script Import HDMS Var Tcl Script of the import task Change the statement set tgt_conn_param(attr_list) \"$file_attr_list_tpl($hdms_version)\" for computation of variable file_attr_list in the script “Export HDMS Var Tcl Script” of the Export Task The default attribute mapping is suitable for a synchronization where entries are joined by a unique identifier (e.g. dxmGUID) which is stored in an unused HiPath attribute (e.g. text3). Moreover, this mapping computes all attributes which are required for creation of person entries and - for HDMS 3.X - implicit creation of additional entries (in tables COMPIMP, ORGIMP, BUILDIMP, LOCIMP). Please note that target attribute text3 is not appropriate for HDMS US 5.2. For this HDMS release, another attribute must be used (e.g. info3). Please note that target attribute longname is not suitable for HDMS-US 5.2. For this HDMS release, another attribute must be used (e.g. room) In general, appropriate mappings must be defined for your attributes constituting your join criteria (HDMS Join expression and Joinback expression). The postmapping section updates the ChangeType based on the status attribute which is dxrState by default. If your status attribute is other than dxrState, then you must customize this section and to cross-check your customization with the source selected attributes and the export filter. Please note some special mapping rules: Special meaning of empty value - An empty string value (“”) for a HiPath attribute denotes, that the related attribute will be left unchanged when modifying a HiPath entry. Special meaning of blank value - If you intend to delete an attribute in HiPath in order to synchronize deletion of related attribute in the Directory, then your mapping must result into a blank value. Example: Suppose you intend to synchronize the ldap attribute description onto HiPath attribute text1. Then you need: A mapping rule mapping description onto text1 A statement in the postmapping section like: if \\{ $rh_dms(TEXT1) == } then \\{ set rh_dms(TEXT1) [llist “ “ ];# list containing non-empty string with a blank} The HDMS Join Expression / Joinback expression parameters define the best-guess-match policy that HiPath Workflow is to use to join meta directory and HiPath entries. Each Attribute in Joinback Expression must correspond one-to-one with an attribute in HiPath Join Expression. For example: Joinback Expression: surname and givenname HDMS Join Expression: name and christianname In this example, HiPath workflow is to match meta directory entries with HiPath entries using a combination of surname and given name. The meta directory sn (surname) attribute maps to the HiPath attribute “name” and the meta directory gn (given name) attribute maps to the HiPath attribute “christianname”. There must be related mapping rules. These settings assume that each meta directory entry can be identified by a unique identifier which is stored in the attribute “text3” of an HiPath entry. Please note that attribute text3 is not appropriate for HDMS US 5.2. For this HiPath release, another attribute must be used (e.g., info3). The postmapping computes a filter value to be used on the attribute dxmOprOriginator in the form: #dmsidval#* The dmsidval variable was computed in the mapping table. This filter works on the dxmOprAttribute that contains values of the form: masternamedmsidvalattributename#attributevalue The specific handling of this attribute is done in the workflow-specific user hook uh::LoopPostJoin. These tables define the relationship between the abbreviation names used in the DirX Identity workflows and the HDMS/HiPath name. The first column contains the field number in the interface file, the second column the DirX Identity abbreviation name and the third the related HDMS/HiPath name. See the Hicom DMS 3.1 SA4, Service Manual, Section \"Import/Export interface API\" for full details about XIE interface request/response format and the meaning of the attributes. 1 - CMD - identifier 2 - C - country 3 - O - company 4 - ORG1 - org1 5 - ORG2 - org2 6 - ORG3 - org3 7 - NAME - name 8 - SRTNAME - sortname 9 - CHN - christianname 10 - TIT - title 11 - SAL - salutation 12 - LOC - location 13 - BUILD - building 14 - LNAME - longname 15 - EXT - extension 16 - SWITCH - switch 17 - POS - position 18 - TIENUM - tienum 19 - EXTAREA - ext_areacode 20 - EXTNET - ext_netcode 21 - EXTEXT - ext_ext 22 - FTN - faxnumber 23 - OWNGROUP - owner_group 24 - DIRTRACC - direct_trunc_acc 25 - TEXT1 - text1 26 - TEXT2 - text2 27 - TEXT3 - text3 See the Hicom DMS 3.6, Service Manual, Section \"Import/Export interface API\" for full details about XIE interface request/response format and the meaning of the attributes. 1 - CMD - Command 2 - C - country 3 - O - company 4 - ORG1 - org1 5 - ORG2 - org2 6 - ORG3 - org3 7 - NAME - name 8 - SRTNAME - sortname 9 - CHN - christianname 10 - TIT - title 11 - SAL - salutation 12 - LOC - location 13 - BUILD - building 14 - LNAME - longname 15 - EXT - extension 16 - SWITCH - switch 17 - POS - position 18 - TIENUM - tienum 19 - EXTAREA - ext_areacode 20 - EXTNET - ext_netcode 21 - EXTEXT - ext_ext 22 - FTN - faxnumber 23 - OWNGROUP - owner_group 24 - DIRTRACC - direct_trunc_acc 25 - TEXT1 - text1 26 - TEXT2 - text2 27 - TEXT3 - text3 28 - TEXT4 - text4 29 - IMPDATA - import_dat 30 - ACCCTRL - access_control 31 - MODDATE - modify_date 32 - EQ - equipment 33-52 - L1-L20 - l1-l20 53 - LPREFIX - l_prefix 54 - EXTCC - ext_cc 55 - COSTCENTRE - costcentre 56 - CHARGEID - charge_id 57 - BANKCODE - bankcode 58 - ACCNUM - accnum See the Hicom DMS-US 5.2, Service Manual, Section \"Import/Export interface API\" for full details about XIE interface request/response format and the meaning of the attributes. 1 - CMD - Command 2 - SWITCH - switch 3 - DOMAIN - domain 4 - C - country 5 - O - company 6 - ORG1 - org1 7 - ORG2 - org2 8 - ORG3 - org3 9 - NAME - name 10 - SRTNAME - sortname 11 - CHN - christianname 12 - TIT - title 13 - ADDR - address 14 - LOC - location 15 - BUILD - building 16 - ROOM - room 17 - STATION - station 18 - POS - position 19 - TIENUM - tienum 20 - EXTAREA - ext_areacode 21 - EXTNET - ext_netcode 22 - EXTEXT - ext_ext 23 - FTN - faxnumber 24 - IMPDATA - import_dat 25 - OWNGROUP - owner_group 26 - MODDATE - modify_date 27 - ACCCTRL - access_control 28 - INFO1 - info1 29 - INFO2 - info2 30 - INFO3 - info3 31 - INFO4 - info4 32 - DIRTRACC - direct_trunc_acc 33 - EQ - equipment 34-53 - L1-L20 - l1-l20 54 - LPREFIX - l_prefix 55 - IDF - idf 56 - IDFCABLEPAIR - Idf_cable_pair 57-71 - INFO5-INFO19 - info5-info19 See the HiPath Manager V1.0, Service Manual, Section \"Import/Export interface API\" for full details about XIE interface request/response format and the meaning, syntax, format and maximum length of the attributes. 1 - CMD - cmd 2 - C - country 3 - O - company 4 - ORG1 - org1 5 - ORG2 - org2 6 - ORG3 - org3 7 - ORG4 - org4 8 - ORG5 - org5 9 - ORG6 - org6 10 - NAME - name 11 - SRTNAME - srtname 12 - CHN - christianname 13 - TIT - title 14 - SAL - salutation 15 - LOC - location 16 - BUILD - building 17 - LNAME - longname 18 - EXT - extension 19 - SWITCH - switch 20 - SEQNUM - seq_num 21 - TIENUM - tienum 22 - EXTAREA - ext_areacode 23 - EXTNET - ext_netcode 24 - EXTEXT - ext_ext 25 - FTN - faxnumber 26 - IMPDATA - import_dat 27 - OWNGROUP - owner_group 28 - MODDATE - modify_date 29 - ACCCTRL - access_control 30 - TEXT1 - text1 31 - TEXT2 - text2 32 - TEXT3 - text3 33 - DIRTRACC - direct_trunc_acc 34 - EQ - equipment 35-54 - L1-L20 - l1-l20 55 - LPREFIX - l_prefix 56 - TEXT4 - text4 57 - EXTCC - ext_cc 58 - CHARGEID - chargeid 59 - BASCHCLASS - basic_charge_class 60 - BANKCODE - bankcode 61 - ACCNUM - accnum 62 - XPREXISTS - xpr_exists 63 - XPRKEY - xpr_key 64 - XPRPIN - xpr_pin 65 - XPRSERVER - xpr_server 66 - XPRVMSADMIN - xpr_vmsadmin 67 - XPRBROADCAST - xpr_broadcast 68 - XPRDCTSEND - xpr_dctsend 69 - XPRDCTRCV - xpr_dctrcv 70 - XPRPWD - xpr_password 71 - XPRNAME - xpr_name 72 - XPRFLAG1 - xpr_flag1 73 - XPRFLAG2 - xpr_flag2 74 - XPRCONNECT - xpr_connect 75 - XPRQUOTA - xpr_quota 76 - XPRRESERVE1 - xpr_reserve1 77 - XPRRESERVE2 - xpr_reserve2 78 - PERSNUM - persnum 79 - DOMAIN - domain 80 - IDF - idf 81 - IDFCABLEPAIR - idf_cable_pair 82-96 - INFO5-INFO19 - info5-info19 97 – VSW – v_switch 98 – HUSID – usid 99 – UMUI – umuid 100 – UMUS – um_user 101 – UMM - um_marked 102 – UMOP - um_operation_id See the HiPath 4000 Manager V3.1, section \"Import/Export interface API\" in the Service Documentation for details about the XIE interface request/response format and the meaning, syntax, format and maximum length of the attributes. 1 through 102 - See the section \"HiPath 4000 Manager V1.0 Conversion Table\" above 103 - APEGRNO apg_group_no 104 - XPRDELPW - xpr_delpwd 105 - XPRDELPWTMP - xpr_delpwd_tmp The DirX Identity ODBC workflows provision an ODBC target system. Two workflows are available: ODBC2Ident_Validation - performs initial load or validation from an ODBC target system Ident_ODBC_Sync - synchronizes the DirX Identity target system and the real ODBC target system The workflows' implementation assumes the following table layout in the ODBC target system: A table of groups, where each row represents one group A table of accounts, where each row represents one account A table of memberships where each row represents a membership of one account in one group The next sections provide conceptual and configuration information about the ODBC Provisioning workflows. Before you can use the ODBC workflows, you must extend the DirX Identity Store schema with ODBC target system-specific attributes and object classes so that the workflows can store ODBC-specific information in the Identity Store. For instructions, see the section \"Extending the Schema for the Target System Workflows\". This section explains the concepts of the workflow implementation. The ODBC Tcl-based workflow assumes the same database structure as the JDBC Java-based workflow. For details, see the section \"Target System Configuration\" in \"JDBC Provisioning Workflows\". Note that the attribute configuration contains two additional pseudo-attributes addMember and delMember that do not exist in the database. These attributes are used to transform multiple joined database records to the DirX Identity multi-valued attributes dxrGroupMemberAdd and dxrGroupMemberDelete and vice-versa. This section provides information about the transformation of DirX Identity multi-valued attributes to ODBC multi-records, from the ODBC-to-Identity direction and vice-versa. From ODBC to DirX Identity: The reading of group memberships in ODBC is performed by special join operations. For every membership, one result record is retrieved. In DirX Identity, each member is stored in a multi-valued attribute (dxrGroupMemberImported, dxrGroupMemberaAdd and dxrGroupMemberDelete). A special profile script ODBC2Role is used for the transformation operation. The script assumes that the ODBC records are sorted by groups. As long as records of the same group are read, only the membership attributes are accumulated. At the end, or when reading a different group record, the accumulated record is written. The following procedure accumulates members: proc appendMV \\{ source_data rec_data first} \\{ # # appends the members to the multi-valued attributes delmember/addmember # depending on the changetype # # Parameters: # src_data name of source handle (if 'src_dir_type' is 'File') # rec_data handle of currently read data record # first TRUE first record of group (use set else lappend) # # Return Values: This default appendMV procedure works well for the synchronization workflow because it handles change types. The ODBC profile script in the validation workflow requires a special appendMV procedure, which is defined in the user hook script of the ODBC2Ident_ValGroup_MetaCP job. Here the members are accumulated in the field AccountDxrName of the source record. The attribute that is used to determine records that belong to same group is hard-coded into GroupDxrName. From Identity to ODBC: DirX Identity uses the multi-valued attributes dxrGroupMemberAdd and dxrGroupMemberDelete to store memberships. For every member to be added, an ODBC add operation to the memberships tables is generated. For every member to be deleted, an ODBC delete operation to the memberships table is generated. This procedure is part of the user hook script of the Role2ODBC_SyncGroupMembers_MetaCP job (LoopExtraFunction). For every member a rh_file_tgt handle is created. The data is mapped to it and the appropriate changetype is set. Afterwards it is written with write_record and then released. Because the DB keys are used for ODBC operation, the DB key for the account is read from the account’s dxrPrimary key Attribute, which results in one extra search per membership. As all mapping is performed in the user hooks routine, the mapping routine itself is very small. In postJoinMapping, the action is set to \"none\", so no extra record is written for this dummy mapped record. The entries from the ODBC database are loaded into DirX Identity. The ODBC database is treated as the entry master. In validation mode, the workflow writes ToDo Messages to the DirX Identity objects that are not synchronized with the ODBC database. The validation workflow uses the following activities: ODBC2Ident_ODBCExport - exports groups with their memberships from the ODBC database. ODBC2Ident_ValGroup_metaCP - handles groups and memberships in DirX Identity. ODBC2Ident_ValAccount_ODBCExport - exports accounts from the ODBC database. ODBC2Ident_ValAccount_metaCP - handles accounts in DirX Identity. The following select statement exports groups and their members: Keys=GroupDxrName,MembershipGroupID,MembershipAccountID Select=AccountDxrName,GroupDxrName,MembershipAccountID,MembershipGroupID,GroupID From=(Groups LEFT JOIN Memberships ON Memberships.GroupID=Groups.ID) LEFT JOIN Accounts ON Accounts.ID=Memberships.AccountID Where=1=1 ORDER BY Groups.dxrGroupname The statement generates one record into the export file for each membership. Groups without members are also exported (LEFT JOIN, one record for each empty group). As described in the section \"Identity Multi-Valued Attribute to ODBC Multi Record Transformation\", all records for a specific group are accumulated to one record, where dxrAccountName contains all members as a multi-valued attribute. The ORDER BY clause is necessary for accumulation. Every group is mapped to a group in the DirX Identity ODBC target system. dxrGroupName → Name (cn) of Group GroupID → dxrPrimaryKey of group Every dxrAccountName is seen as group member. DirX Identity Account Handling Accounts are selected from the ODBC database with the statement: Select= AccountDesc,AccountDxrName,AccountID,AccountOdbcName From=Accounts One record is exported for each account. The dxrAccountName attribute is used as the cn for the DirX Identity account. The database key maps to the dxrPrimaryKeyAttribute. First we’ll look at some ODBC-specific issues. Synchronization enforces changes of groups/accounts and memberships in the ODBC database and synchronizes back these changes to DirX Identity (set the appropriate status attributes, group membership states). Because we don’t want to violate the referential integrity in the ODBC database, the membership should be deleted first, and then the referenced object can be deleted. On the other hand, we need the DB keys to add a new membership. So for newly created accounts/groups, we need to synchronize back the DB key before inserting memberships. The ODBC synchronization workflow uses the following activities and workflows: Ident2ODBC_SyncAccount_MetaCP - an activity that exports Identity accounts with dxrTSState=NONE from the Identity Store. These are accounts that are to be inserted into the ODBC database. Ident2ODBC_ SyncAccount_ODBCImport - an activity that imports new accounts into the ODBC database. ODBC2Ident_SyncNewAccWF - a workflow that exports the delta accounts back to the Identity Store. In addition to the accounts created in the previous step, the workflow handles deleted or modified accounts (initiated by a previous workflow run or by changing the database). Ident2ODBC_SyncGroup_MetaCP - an activity that exports new DirX Identity groups (dxrTSState=NONE) from the Identity Store. IdentODBC_SyncGroup_ODBCImport - an activity that imports these new groups into the ODBC database ODBC2Ident_SyncNewGroupWF - a workflow that exports the delta groups back to the Identity Store. In addition to the groups created in the previous step, the workflow handles deleted or modified accounts (initiated by a previous workflow run or by changing the database). For example, a group in the Identity Store deleted by the last run of the synchronization workflow is produced as delta information and is then \"deleted\" in the Identity Store. Ident2ODBC_SyncGroupMembers_MetaCP - an activity that exports all GroupMembers that are either in status Add or Delete. For each member, one record with a changetype add or delete is exported. Ident2ODBC_SyncGroupMembers_ODBCImport - an activity that adds or deletes memberships in the Memberships table in the ODBC database. Ident2ODBC_SyncAccountDel - a workflow that exports accounts to be deleted from the Identity Store and deletes them in the ODBC database. Ident2ODBC_SyncGroupDel - a workflow that exports groups to be deleted from the Identity Store and deletes them in the ODBC database. ODBC2Ident_SyncGroup_ODBCExport - an activity that exports changed groups with their memberships from the ODBC database. ODBC2Ident_SyncGroup_MetaCP - an activity that imports the changed groups and the related membership changes. Only memberships are updated. Groups are not deleted here. The next synchronization or validation workflow will delete these groups if necessary. ODBC2Ident_SyncAcc_ODBCExport - an activity that exports changed accounts from the ODBC database. ODBC2Ident_SyncAcc_MetaCP - an activity that imports the changed account to the Identity Store. The workflow consists of the following tasks: Handling new accounts in DirX Identity - create in ODBC and synchronize back the dbKey to dxrPrimary key Handling new groups in DirX Identity - create in ODBC and synchronize back the dbKey to dxrPrimary key Handling new/deleted memberships in DirX Identity - the membership table in ODBC is updated Handling accounts in state deleted in the Identity Store - accounts are deleted in ODBC Handling groups deleted in identity store - groups are deleted in ODBC Synchronizing back groups/memberships - only memberships are handled at the moment. Groups are not deleted in Role (use the validation workflow for this task) Synchronize back accounts The ODBC workflow implementation delivered with DirX Identity assumes that all ODBC import tasks do not use stored procedures. Using stored procedures may simplify these tasks. Stored procedures can handle referential integrity - For adds to the membership table, only account/group name is necessary, because stored procedures may get the database keys through selects. So, we don’t need to synchronize back new objects before handling memberships. Instead, the stored procedure handles these issues. Using a stored procedure, the remaining tasks are: Handling all changed accounts in the Identity Store - performs add or delete operations in the Accounts table (implicitly also some memberships might be deleted if a referenced account is deleted). Handling all changed groups in the Identity Store - performs add or delete operations in the Accounts table (implicitly also some memberships might be deleted if a referenced group is deleted). Handling all changed group memberships - performs add or delete operations in the Membership table. Note: One stored procedure can handle these tasks. Synchronize back accounts. Synchronize back groups/memberships. This section describes how to change the workflows when other database structures exist. To change the ODBC synchronization workflow to use additional ODBC attributes: Specify your attributes in the attribute configuration Add the mapping of your attributes as a user hook Extend the selected attributes/mapping with your attributes. Add the correct values to the ODBC export/import properties. The next sections provide details. Attribute Configuration Specify the attributes of your database tables that are not included yet. The following attributes should not be changed: changetype DDN addMember delMember The abbreviations of the following attributes (abbreviations) should not be changed. You can change the Name (table.column) and optionally the prefix: AccountDxrName AccountID GroupDxrName GroupID MembershipAccountID MembershipGroupID MembershipID User Hook in Job Ident2ODBC_SyncGroupMembers_MetaCP In this job, the mapping is performed in the LoopExtraFunction user hook. See the corresponding section in the existing workflow: # mapping set rh_file_tgt(changetype) \"add\" set rh_file_tgt(AccountDxrName) $memb set rh_file_tgt(MembershipGroupID) $src(dxrPrimaryKey) set rh_file_tgt(GroupDxrName) $src(cn) and a similar section with changetype delete. You can add the mapping of your additional attributes here. Selected Attributes / Mapping The existing workflow already contains the minimum set of attributes needed. So in most cases, you just need to extend it with your additional attributes. ODBC Export / Import Properties You will find these properties in the channels under the ODBC connected directory. You do not need to change fields where abbreviations are used. Enter the correct values for your database in the other fields. If your database schema differs from the expected three table structure, no general statements can be made. You can try to change the ODBC Selects so that they produce a similar result as with the given schema. On the other hand, if you have fewer tables, you may simplify the whole workflow by packing some activities into one.. The DirX Identity RACF workflows provision a RACF target system. Two workflows are available: RACF2Ident_Validation - performs initial load or validation from a RACF target system Ident_RACF_Sync - synchronizes between the Identity Store and a RACF target system The RACF workflows are based on the DirX Identity meta controller (metacp). They use the RACF LDAP interface via IBM’s SecureWay LDAP server. The workflows can support all object types and attribute types that are accessible via the RACF interface. Before you can use the RACF workflows, you must extend the DirX Identity Store schema with RACF target system-specific attributes and object classes so that the workflows can store RACF-specific information in the Identity Store. For instructions, see the section \"Extending the Schema for the Target System Workflows\". RACF contains a lot of subsystems that are not used at every customer site. DirX Identity only supports a basic set of subsystems. Others must be configured for a specific customer. The following subsystems are configured in the default applications: TSO (Time Sharing Option) - basic configuration of users, groups, and so on WORKATTR (Work Attributes) - additional attributes OMVS (Open Edition MVS) - UNIX system for MVS, only used for FTP transfer (for all users, not specific for each user) The following subsystems are not configured in the default applications: CICS (Customer Information Control System) - tele-processing monitor for online transaction systems DCE (Distributed Computing Environment) - distributed application handling NETVIEW (Network Automation) - network monitoring and automation OVM (Open Edition VM) - UNIX system for VM OPAPAM - MCS console LANGUAGE - nationalization DFP (SMS Routine = System Managed Storage) - file management, pool sharing, disk management, profile management, disk space management. Note: Due to capabilities that are missing from the RACF LDAP server, it is not possible to read or update the schema via LDAP with DirX Identity automatic schema retrieval. The DirX Identity SiPass workflows provision a SiPass target system. Two workflows are available: SiPass2Ident_Validation - performs initial load or validation from a SiPass target system Ident_SiPass_Sync - synchronizes the DirX Identity target system and the SiPass target system The following restrictions and hints apply to the SiPass standard workflows: The workflows' SiPass agent step runs only on Windows systems. The SiPass agent must run on the machine where the SiPass server is installed. To achieve this you can setup a C++-based secondary server on this machine. We recommend to run the metacp jobs also on this machine to avoid file transfers. The SiPass standard workflow only handles work group objects. It does not handle access groups. Scrambled and encrypted bind passwords and data attributes are not supported. As a result, the \"disable encryption\" flag in the bind profile must be set. SiPass workflows are pre-configured with Regional and Language Options set in Regional Options to standard English (United States). If SiPass is installed on a machine with other regional settings, you must adapt the format strings in SiPass agent jobs (see the Date Formats tab). The SiPass attribute CardNumber is mandatory for each SiPass cardholder. The synchronization workflow is pre-configured to get this attribute from the attribute dxrName that stores the reference number. For a real provisioning application, the CardNumber attribute should be mapped to the dxrCardNumber attribute, which is empty by default. It is necessary to supply this attribute (for example, as a copy from the corresponding user). The dxrName attribute is used as identifier at the SiPass side (CardNumber). Therefore it must be of type integer and it must be unique. Groups must exist in the SiPass system. The agent cannot create groups due to a restriction of the SiPass interface. During initial load a group is loaded that indicates accounts that are not members of another group. The group name is either or depending on the language used. Trying to load accounts with no group membership into SiPass causes an error. The dxrState attribute at the Identity Store stays in state 'None'. SiPass can only assign exactly one group to an account. Build your role structure so that only one group is assigned to an account. DirX Identity does not check this restriction. If an account is assigned to more than one group, the import into SiPass fails.","title":"Using the Target System (Provisioning) Workflows","component":"dirx-identity-docs","version":"9.0.0","name":"ch7_targetWFs","url":"/dirx-identity-docs/latest/appl-dev-guide/ch7_targetWFs.html","titles":[{"text":"Extending the Schema for the Target System Workflows","hash":"extending_the_schema_for_target_system_workflows","id":1},{"text":"Customizing the LDIF Schema Files","hash":"_customizing_the_ldif_schema_files","id":2},{"text":"Installing the LDIF Schema Extensions","hash":"_installing_the_ldif_schema_extensions","id":3},{"text":"Understanding the Java-based Target System Workflows","hash":"_understanding_java_based_target_system_workflows","id":4},{"text":"General Information","hash":"_general_information","id":5},{"text":"Superior Folder Creation","hash":"_superior_folder_creation","id":6},{"text":"In the Connected System","hash":"_in_the_connected_system","id":7},{"text":"In the Identity Store","hash":"_in_the_identity_store","id":8},{"text":"HTTP Proxy Server Configuration","hash":"_http_proxy_server_configuration","id":9},{"text":"Active Directory (ADS) Workflows","hash":"_active_directory_ads_workflows","id":10},{"text":"ADS Workflow Prerequisites and Limitations","hash":"_ads_workflow_prerequisites_and_limitations","id":11},{"text":"Connecting to Active Directory","hash":"_connecting_to_active_directory","id":12},{"text":"Configuring the ADS Target System","hash":"_configuring_the_ads_target_system","id":13},{"text":"Setting Match Properties","hash":"_setting_match_properties","id":14},{"text":"Special Attributes","hash":"_special_attributes","id":15},{"text":"Setting Account- and Group Root in TS","hash":"_setting_account_and_group_root_in_ts","id":16},{"text":"Setting Exchange Base Properties","hash":"_setting_exchange_base_properties","id":17},{"text":"Enabling User Mailboxes","hash":"_enabling_user_mailboxes","id":18},{"text":"Creating Shared, Room and Equipment Mailboxes","hash":"_creating_shared_room_and_equipment_mailboxes","id":19},{"text":"Enabling Share, Room and Equipment Mailboxes","hash":"_enabling_share_room_and_equipment_mailboxes","id":20},{"text":"Setting Lync Base Properties","hash":"_setting_lync_base_properties","id":21},{"text":"Lync Enabling","hash":"_lync_enabling","id":22},{"text":"ADS Workflows and Activities","hash":"_ads_workflows_and_activities","id":23},{"text":"ADS Workflow Ports","hash":"_ads_workflow_ports","id":24},{"text":"ADS Workflow Channels","hash":"_ads_workflow_channels","id":25},{"text":"Account and Group Channels","hash":"_account_and_group_channels","id":26},{"text":"Password Channel","hash":"_password_channel","id":27},{"text":"Customizing the ADS Workflows","hash":"_customizing_the_ads_workflows","id":28},{"text":"ADS Delta Workflows","hash":"_ads_delta_workflows","id":29},{"text":"Configuring Exchange","hash":"_configuring_exchange","id":30},{"text":"Running PowerShell Scripts","hash":"_running_powershell_scripts","id":31},{"text":"Specifying PowerShell Script Names in the Standard ADS Workflows","hash":"_specifying_powershell_script_names_in_the_standard_ads_workflows","id":32},{"text":"Remote Folder Management","hash":"_remote_folder_management","id":33},{"text":"Citrix ShareFile Workflows","hash":"_citrix_sharefile_workflows","id":34},{"text":"Citrix ShareFile Prerequisites and Limitations","hash":"_citrix_sharefile_prerequisites_and_limitations","id":35},{"text":"Connecting to Citrix ShareFile","hash":"_connecting_to_citrix_sharefile","id":36},{"text":"Configuring the Citrix ShareFile Target System","hash":"_configuring_the_citrix_sharefile_target_system","id":37},{"text":"Citrix ShareFile Workflow and Activities","hash":"_citrix_sharefile_workflow_and_activities","id":38},{"text":"Citrix ShareFile Ports","hash":"_citrix_sharefile_ports","id":39},{"text":"DirX Access Workflows","hash":"_dirx_access_workflows","id":40},{"text":"Using the Target System","hash":"_using_the_target_system","id":41},{"text":"Using LDAP Connectivity","hash":"_using_ldap_connectivity","id":42},{"text":"Evidian ESSO Workflow","hash":"_evidian_esso_workflow","id":43},{"text":"Evidian ESSO Workflow Prerequisites and Limitations","hash":"_evidian_esso_workflow_prerequisites_and_limitations","id":44},{"text":"Setting up the Evidian ESSO Workflow","hash":"_setting_up_the_evidian_esso_workflow","id":45},{"text":"Connecting to Evidian ESSO","hash":"_connecting_to_evidian_esso","id":46},{"text":"Evidian ESSO Workflow and Activities","hash":"_evidian_esso_workflow_and_activities","id":47},{"text":"ESSO Workflow","hash":"_esso_workflow","id":48},{"text":"Evidian ESSO Workflow Ports","hash":"_evidian_esso_workflow_ports","id":49},{"text":"Evidian ESSO Workflow Channels","hash":"_evidian_esso_workflow_channels","id":50},{"text":"Common Aspects","hash":"_common_aspects","id":51},{"text":"User Hook","hash":"_user_hook","id":52},{"text":"Export/Join","hash":"_exportjoin","id":53},{"text":"ID Mapping","hash":"_id_mapping","id":54},{"text":"Post Mapping","hash":"_post_mapping","id":55},{"text":"Application","hash":"_application","id":56},{"text":"Customizing the Evidian ESSO Workflow","hash":"_customizing_the_evidian_esso_workflow","id":57},{"text":"Using a Different Enable-SSO Flag","hash":"_using_a_different_enable_sso_flag","id":58},{"text":"Exporting the Search Base on the Identity Side","hash":"_exporting_the_search_base_on_the_identity_side","id":59},{"text":"Google Apps Workflows","hash":"_google_apps_workflows","id":60},{"text":"Google Apps Workflow Prerequisites and Limitations","hash":"_google_apps_workflow_prerequisites_and_limitations","id":61},{"text":"Connecting to Google Apps","hash":"_connecting_to_google_apps","id":62},{"text":"Configuring the Google Apps Target System","hash":"_configuring_the_google_apps_target_system","id":63},{"text":"Google Apps Workflow and Activities","hash":"_google_apps_workflow_and_activities","id":64},{"text":"Google Apps Ports","hash":"_google_apps_ports","id":65},{"text":"Google Apps Account-Channel Mapping","hash":"_google_apps_account_channel_mapping","id":66},{"text":"Google Apps Group-Channel Mapping","hash":"_google_apps_group_channel_mapping","id":67},{"text":"Google Apps Member-Channel Mapping","hash":"_google_apps_member_channel_mapping","id":68},{"text":"Google Apps SetPassword-Channel Mapping","hash":"_google_apps_setpassword_channel_mapping","id":69},{"text":"Imprivata Workflows","hash":"_imprivata_workflows","id":70},{"text":"Imprivata Workflow Prerequisites and Limitations","hash":"_imprivata_workflow_prerequisites_and_limitations","id":71},{"text":"Connecting to Imprivata","hash":"_connecting_to_imprivata","id":72},{"text":"Configuring the Imprivata Target System","hash":"_configuring_the_imprivata_target_system","id":73},{"text":"Imprivata Workflow and Activities","hash":"_imprivata_workflow_and_activities","id":74},{"text":"Imprivata Ports","hash":"_imprivata_ports","id":75},{"text":"Imprivata Channels","hash":"_imprivata_channels","id":76},{"text":"Common Aspects","hash":"_common_aspects_2","id":77},{"text":"Subscriber","hash":"_subscriber","id":78},{"text":"Account","hash":"_account","id":79},{"text":"Group","hash":"_group","id":80},{"text":"Password Channel","hash":"_password_channel_2","id":81},{"text":"JDBC Workflow","hash":"_jdbc_workflow","id":82},{"text":"JDBC Workflow Prerequisites and Limitations","hash":"_jdbc_workflow_prerequisites_and_limitations","id":83},{"text":"Connecting to JDBC","hash":"_connecting_to_jdbc","id":84},{"text":"Configuring the JDBC Target System","hash":"_configuring_the_jdbc_target_system","id":85},{"text":"Attribute Correlation","hash":"_attribute_correlation","id":86},{"text":"JDBC Workflow and Activities","hash":"_jdbc_workflow_and_activities","id":87},{"text":"JDBC Workflow Ports","hash":"_jdbc_workflow_ports","id":88},{"text":"JDBC Workflow Channels","hash":"_jdbc_workflow_channels","id":89},{"text":"Common Aspects","hash":"_common_aspects_3","id":90},{"text":"Membership","hash":"_membership","id":91},{"text":"SetPassword","hash":"_setpassword","id":92},{"text":"Customizing the JDBC Workflows","hash":"_customizing_the_jdbc_workflows","id":93},{"text":"Adapting the Database Scheme","hash":"_adapting_the_database_scheme","id":94},{"text":"Calling Stored Procedures","hash":"_calling_stored_procedures","id":95},{"text":"LDAP Workflows","hash":"_ldap_workflows","id":96},{"text":"LDAP Workflow Prerequisites and Limitations","hash":"_ldap_workflow_prerequisites_and_limitations","id":97},{"text":"Configuring the Connection to LDAP","hash":"_configuring_the_connection_to_ldap","id":98},{"text":"Configuring the LDAP Target System","hash":"_configuring_the_ldap_target_system","id":99},{"text":"LDAP Workflow and Activities","hash":"_ldap_workflow_and_activities","id":100},{"text":"LDAP Workflow Ports","hash":"_ldap_workflow_ports","id":101},{"text":"LDAP Workflow Channels","hash":"_ldap_workflow_channels","id":102},{"text":"Account and Group Channels in both Directions","hash":"_account_and_group_channels_in_both_directions","id":103},{"text":"Password Channel","hash":"_password_channel_3","id":104},{"text":"Case-Sensitive Rename","hash":"_case_sensitive_rename","id":105},{"text":"LDAP Delta Workflows","hash":"_ldap_delta_workflows","id":106},{"text":"IBM Notes Workflows","hash":"_ibm_notes_workflows","id":107},{"text":"Notes Workflow Prerequisites and Limitations","hash":"_notes_workflow_prerequisites_and_limitations","id":108},{"text":"Configuring the Notes Workflow","hash":"_configuring_the_notes_workflow","id":109},{"text":"Configuring the Notes Target System","hash":"_configuring_the_notes_target_system","id":110},{"text":"Notes Workflow and Activities","hash":"_notes_workflow_and_activities","id":111},{"text":"Notes Workflow Ports","hash":"_notes_workflow_ports","id":112},{"text":"Notes Workflow Channels","hash":"_notes_workflow_channels","id":113},{"text":"Direction: Identity Store → IBM Notes","hash":"_direction_identity_store_ibm_notes","id":114},{"text":"Direction: IBM Notes → Identity Store","hash":"_direction_ibm_notes_identity_store","id":115},{"text":"Password Channel","hash":"_password_channel_4","id":116},{"text":"Medico Workflows","hash":"_medico_workflows","id":117},{"text":"Medico Workflow Prerequisites and Limitations","hash":"_medico_workflow_prerequisites_and_limitations","id":118},{"text":"Configuring the Medico Workflow","hash":"_configuring_the_medico_workflow","id":119},{"text":"Configuring the Medico Target System","hash":"_configuring_the_medico_target_system","id":120},{"text":"Medico Workflow and Activities","hash":"_medico_workflow_and_activities","id":121},{"text":"Medico Workflow Ports","hash":"_medico_workflow_ports","id":122},{"text":"Medico Workflow Channels","hash":"_medico_workflow_channels","id":123},{"text":"Common Aspects","hash":"_common_aspects_4","id":124},{"text":"Person","hash":"_person","id":125},{"text":"Login","hash":"_login","id":126},{"text":"Password Channel","hash":"_password_channel_5","id":127},{"text":"Office 365 Workflows","hash":"_office_365_workflows","id":128},{"text":"Office 365 Workflow Prerequisites and Limitations","hash":"_office_365_workflow_prerequisites_and_limitations","id":129},{"text":"Connecting to Office 365","hash":"_connecting_to_office_365","id":130},{"text":"Configuring the Office 365 Target System","hash":"_configuring_the_office_365_target_system","id":131},{"text":"Office 365 Workflow and Activities","hash":"_office_365_workflow_and_activities","id":132},{"text":"Office 365 Workflow Ports","hash":"_office_365_workflow_ports","id":133},{"text":"Office 365 Workflow Channels","hash":"_office_365_workflow_channels","id":134},{"text":"Accounts","hash":"_accounts","id":135},{"text":"Groups","hash":"_groups","id":136},{"text":"Roles","hash":"_roles","id":137},{"text":"Service Plans","hash":"_service_plans","id":138},{"text":"Password Channel","hash":"_password_channel_6","id":139},{"text":"Member Channel","hash":"_member_channel","id":140},{"text":"OpenICF Windows Local Accounts Workflows","hash":"_openicf_windows_local_accounts_workflows","id":141},{"text":"OpenICF Windows Local Accounts Workflow Prerequisites and Limitations","hash":"_openicf_windows_local_accounts_workflow_prerequisites_and_limitations","id":142},{"text":"Connecting to the Windows Local Accounts System","hash":"_connecting_to_the_windows_local_accounts_system","id":143},{"text":"Configuring the OpenICF Windows Local Accounts Target System","hash":"_configuring_the_openicf_windows_local_accounts_target_system","id":144},{"text":"OpenICF Windows Local Accounts Workflow and Activities","hash":"_openicf_windows_local_accounts_workflow_and_activities","id":145},{"text":"OpenICF Windows Local Accounts Workflow Ports","hash":"_openicf_windows_local_accounts_workflow_ports","id":146},{"text":"OpenICF Windows Local Accounts Workflow Channels","hash":"_openicf_windows_local_accounts_workflow_channels","id":147},{"text":"Accounts","hash":"_accounts_2","id":148},{"text":"Groups","hash":"_groups_2","id":149},{"text":"Members","hash":"_members","id":150},{"text":"setPassword","hash":"_setpassword_2","id":151},{"text":"RACF Workflows","hash":"_racf_workflows","id":152},{"text":"Prerequisites and Limitations","hash":"_prerequisites_and_limitations","id":153},{"text":"Configuring the RACF Target System","hash":"_configuring_the_racf_target_system","id":154},{"text":"Configuring the Connection to RACF","hash":"_configuring_the_connection_to_racf","id":155},{"text":"Configuring the Connected Directory","hash":"_configuring_the_connected_directory","id":156},{"text":"RACF Workflow Ports","hash":"_racf_workflow_ports","id":157},{"text":"RACF Workflow Channels","hash":"_racf_workflow_channels","id":158},{"text":"Accounts Channel","hash":"_accounts_channel","id":159},{"text":"Groups Channel","hash":"_groups_channel","id":160},{"text":"Members Channel","hash":"_members_channel","id":161},{"text":"SetPassword Channel","hash":"_setpassword_channel","id":162},{"text":"Salesforce Workflows","hash":"_salesforce_workflows","id":163},{"text":"Salesforce Workflow Prerequisites and Limitations","hash":"_salesforce_workflow_prerequisites_and_limitations","id":164},{"text":"Registering the Remote Access Application","hash":"_registering_the_remote_access_application","id":165},{"text":"Creating the StatusInfo__c Attribute","hash":"_creating_the_statusinfo_c_attribute","id":166},{"text":"Salesforce Workflow Limitations","hash":"_salesforce_workflow_limitations","id":167},{"text":"Configuring the Salesforce Workflows","hash":"_configuring_the_salesforce_workflows","id":168},{"text":"Configuring the Salesforce Target System","hash":"_configuring_the_salesforce_target_system","id":169},{"text":"Salesforce Workflow and Activities","hash":"_salesforce_workflow_and_activities","id":170},{"text":"Salesforce Workflow Ports","hash":"_salesforce_workflow_ports","id":171},{"text":"Account-Channel Mapping for SF Users","hash":"_account_channel_mapping_for_sf_users","id":172},{"text":"Group-Channel Mapping for SF PermissionSets","hash":"_group_channel_mapping_for_sf_permissionsets","id":173},{"text":"Group-Channel Mapping for SF Profiles","hash":"_group_channel_mapping_for_sf_profiles","id":174},{"text":"Channel Mapping for SF Accounts","hash":"_channel_mapping_for_sf_accounts","id":175},{"text":"Channel Mapping for SF Contacts","hash":"_channel_mapping_for_sf_contacts","id":176},{"text":"Member-Channel Mapping for SF Users","hash":"_member_channel_mapping_for_sf_users","id":177},{"text":"SetPassword-Channel Mapping for SF Users","hash":"_setpassword_channel_mapping_for_sf_users","id":178},{"text":"Account-Channel Mapping for Identity Store Accounts","hash":"_account_channel_mapping_for_identity_store_accounts","id":179},{"text":"Group-Channel Mapping for Identity Store Profiles","hash":"_group_channel_mapping_for_identity_store_profiles","id":180},{"text":"Group-Channel Mapping for Identity Store PermissionSets","hash":"_group_channel_mapping_for_identity_store_permissionsets","id":181},{"text":"Channel Mapping for Identity Store Organizations (SF Accounts)","hash":"_channel_mapping_for_identity_store_organizations_sf_accounts","id":182},{"text":"Channel Mapping for Identity Store Users (SF Contacts)","hash":"_channel_mapping_for_identity_store_users_sf_contacts","id":183},{"text":"SAP ECC (R/3) UM Workflows","hash":"_sap_ecc_r3_um_workflows","id":184},{"text":"SAP R/3 UM Workflow Prerequisites and Limitations","hash":"_sap_r3_um_workflow_prerequisites_and_limitations","id":185},{"text":"Configuring the SAP R/3 UM Target System","hash":"_configuring_the_sap_r3_um_target_system","id":186},{"text":"SAP R/3 UM Workflow and Activities","hash":"_sap_r3_um_workflow_and_activities","id":187},{"text":"SAP R/3 UM Workflow Ports","hash":"_sap_r3_um_workflow_ports","id":188},{"text":"SAP R/3 UM Workflow Channels","hash":"_sap_r3_um_workflow_channels","id":189},{"text":"Common Aspects","hash":"_common_aspects_5","id":190},{"text":"Accounts","hash":"_accounts_3","id":191},{"text":"Groups","hash":"_groups_3","id":192},{"text":"Memberships","hash":"_memberships","id":193},{"text":"Password Channel","hash":"_password_channel_7","id":194},{"text":"Customizing the SAP R/3 UM Workflows","hash":"_customizing_the_sap_r3_um_workflows","id":195},{"text":"Service Management Workflows","hash":"_service_management_workflows","id":196},{"text":"Service Management Workflow Prerequisites and Limitations","hash":"_service_management_workflow_prerequisites_and_limitations","id":197},{"text":"Configuring Service Management Workflows","hash":"_configuring_service_management_workflows","id":198},{"text":"Configuring the Service Management Target System","hash":"_configuring_the_service_management_target_system","id":199},{"text":"Service Management Workflows and Activities","hash":"_service_management_workflows_and_activities","id":200},{"text":"Service Management Workflow Ports","hash":"_service_management_workflow_ports","id":201},{"text":"Service Management Workflow Channels","hash":"_service_management_workflow_channels","id":202},{"text":"Common Aspects","hash":"_common_aspects_6","id":203},{"text":"Account","hash":"_account_2","id":204},{"text":"Group","hash":"_group_2","id":205},{"text":"SharePoint Workflows","hash":"_sharepoint_workflows","id":206},{"text":"SharePoint Workflow Prerequisites and Limitations","hash":"_sharepoint_workflow_prerequisites_and_limitations","id":207},{"text":"Configuring the SharePoint Clusters, Workflows and Connection","hash":"_configuring_the_sharepoint_clusters_workflows_and_connection","id":208},{"text":"Creating Clustered SharePoint Target Systems","hash":"_creating_clustered_sharepoint_target_systems","id":209},{"text":"Configuring SharePoint Workflows","hash":"_configuring_sharepoint_workflows","id":210},{"text":"Configuring SharePoint SSL Connections","hash":"_configuring_sharepoint_ssl_connections","id":211},{"text":"Configuring the SharePoint Target System","hash":"_configuring_the_sharepoint_target_system","id":212},{"text":"SharePoint Workflow and Activities","hash":"_sharepoint_workflow_and_activities","id":213},{"text":"SharePoint Workflow Ports","hash":"_sharepoint_workflow_ports","id":214},{"text":"SharePoint Workflow Channels","hash":"_sharepoint_workflow_channels","id":215},{"text":"Aspects Common to All Channels and Synchronization Directions","hash":"_aspects_common_to_all_channels_and_synchronization_directions","id":216},{"text":"Groups","hash":"_groups_4","id":217},{"text":"Member Channel","hash":"_member_channel_2","id":218},{"text":"Unify Office Workflows","hash":"_unify_office_workflows","id":219},{"text":"Prerequisites and Limitations","hash":"_prerequisites_and_limitations_2","id":220},{"text":"Connecting to Unify Office","hash":"_connecting_to_unify_office","id":221},{"text":"Configuring the Unify Office Target System","hash":"_configuring_the_unify_office_target_system","id":222},{"text":"Workflow and Activities","hash":"_workflow_and_activities","id":223},{"text":"Workflow Ports","hash":"_workflow_ports","id":224},{"text":"Workflow Channels","hash":"_workflow_channels","id":225},{"text":"Accounts","hash":"_accounts_4","id":226},{"text":"UNIX-OpenICF Workflows","hash":"_unix_openicf_workflows","id":227},{"text":"UNIX-OpenICF Prerequisites and Limitations","hash":"_unix_openicf_prerequisites_and_limitations","id":228},{"text":"Connecting to the UNIX System","hash":"_connecting_to_the_unix_system","id":229},{"text":"Setting up the Java-based OpenICF Connector Server","hash":"_setting_up_the_java_based_openicf_connector_server","id":230},{"text":"Configuring the Connection to the OpenICF Connector Server","hash":"_configuring_the_connection_to_the_openicf_connector_server","id":231},{"text":"Configuring the UNIX-OpenICF Target System","hash":"_configuring_the_unix_openicf_target_system","id":232},{"text":"UNIX-OpenICF Workflow and Activities","hash":"_unix_openicf_workflow_and_activities","id":233},{"text":"UNIX-OpenICF Workflow Ports","hash":"_unix_openicf_workflow_ports","id":234},{"text":"UNIX-OpenICF Workflow Channels","hash":"_unix_openicf_workflow_channels","id":235},{"text":"Common Aspects","hash":"_common_aspects_7","id":236},{"text":"Accounts","hash":"_accounts_5","id":237},{"text":"Groups","hash":"_groups_5","id":238},{"text":"Understanding the Tcl-based Target System Workflows","hash":"_understanding_tcl_based_target_system_workflows","id":239},{"text":"Target System Workflow Types","hash":"_target_system_workflow_types","id":240},{"text":"Object Identification and Group-to-Account References","hash":"_object_identification_and_group_to_account_references","id":241},{"text":"Workflows for the Hierarchical Target Systems","hash":"_workflows_for_the_hierarchical_target_systems","id":242},{"text":"General Information","hash":"_general_information_2","id":243},{"text":"Referencing Information","hash":"_referencing_information","id":244},{"text":"Joining Information","hash":"_joining_information","id":245},{"text":"Workflows for the Non-Hierarchical Target Systems","hash":"_workflows_for_the_non_hierarchical_target_systems","id":246},{"text":"Referencing and Joining","hash":"_referencing_and_joining","id":247},{"text":"Target System Reference and Join Summary","hash":"_target_system_reference_and_join_summary","id":248},{"text":"HiPath Workflow","hash":"_hipath_workflow","id":249},{"text":"Prerequisites and Limitations","hash":"_prerequisites_and_limitations_3","id":250},{"text":"Configuring the Ident_HiPath Workflow","hash":"_configuring_the_ident_hipath_workflow","id":251},{"text":"Activity Ident2HiPath_HiPath (meta directory export)","hash":"_activity_ident2hipath_hipath_meta_directory_export","id":252},{"text":"General Features and Prerequisites","hash":"_general_features_and_prerequisites","id":253},{"text":"Basic Operation","hash":"_basic_operation","id":254},{"text":"Control of the Remote HiPath System","hash":"_control_of_the_remote_hipath_system","id":255},{"text":"Activity HiPath2Ident_HiPath (meta directory import)","hash":"_activity_hipath2ident_hipath_meta_directory_import","id":256},{"text":"General Features and Prerequisites","hash":"_general_features_and_prerequisites_2","id":257},{"text":"Basic Operation","hash":"_basic_operation_2","id":258},{"text":"Multiple Entry Handling","hash":"_multiple_entry_handling","id":259},{"text":"Setting up the HiPath Environment","hash":"_setting_up_the_hipath_environment","id":260},{"text":"User Creation Directives for HiPath 4000 Manager V3.1","hash":"_user_creation_directives_for_hipath_4000_manager_v3_1","id":261},{"text":"Enable HiPath Environment for rsh and rcp","hash":"_enable_hipath_environment_for_rsh_and_rcp","id":262},{"text":"HiPath Environment Setup for ssh and scp","hash":"_hipath_environment_setup_for_ssh_and_scp","id":263},{"text":"Export Traces","hash":"_export_traces","id":264},{"text":"Meta Directory Entry Section","hash":"_meta_directory_entry_section","id":265},{"text":"HiPath Entry Section","hash":"_hipath_entry_section","id":266},{"text":"Derived HiPath Updates Section","hash":"_derived_hipath_updates_section","id":267},{"text":"HiPath Update Statistics","hash":"_hipath_update_statistics","id":268},{"text":"Customizing the HiPath Workflow","hash":"_customizing_the_hipath_workflow","id":269},{"text":"Job Authentication","hash":"_job_authentication","id":270},{"text":"Ident2HiPath Target Selected Attributes and HiPath2Ident Source Selected Attributes","hash":"_ident2hipath_target_selected_attributes_and_hipath2ident_source_selected_attributes","id":271},{"text":"Ident2HiPath Attribute Mapping","hash":"_ident2hipath_attribute_mapping","id":272},{"text":"Ident2HiPath Export Properties","hash":"_ident2hipath_export_properties","id":273},{"text":"HiPath2Ident Attribute Mapping","hash":"_hipath2ident_attribute_mapping","id":274},{"text":"HiPath Tables","hash":"_hipath_tables","id":275},{"text":"HDMS 3.1 Conversion Table","hash":"_hdms_3_1_conversion_table","id":276},{"text":"HDMS 3.6 Conversion Table","hash":"_hdms_3_6_conversion_table","id":277},{"text":"HDMS 5.2 Conversion Table","hash":"_hdms_5_2_conversion_table","id":278},{"text":"HiPath 4000 Manager V1.0 Conversion Table","hash":"_hipath_4000_manager_v1_0_conversion_table","id":279},{"text":"HiPath 4000 Manager V3.1 Conversion Table","hash":"_hipath_4000_manager_v3_1_conversion_table","id":280},{"text":"ODBC Workflows","hash":"_odbc_workflows","id":281},{"text":"Prerequisites and Limitations","hash":"_prerequisites_and_limitations_4","id":282},{"text":"ODBC Workflow Concepts","hash":"_odbc_workflow_concepts","id":283},{"text":"Attribute Correlation","hash":"_attribute_correlation_2","id":284},{"text":"Attribute Configuration","hash":"_attribute_configuration","id":285},{"text":"Identity Multi-Valued Attribute to ODBC Multi-Record Transformation","hash":"_identity_multi_valued_attribute_to_odbc_multi_record_transformation","id":286},{"text":"ODBC Validation Workflow","hash":"_odbc_validation_workflow","id":287},{"text":"Workflow Activities","hash":"_workflow_activities","id":288},{"text":"DirX Identity-Groups/Memberships Handling","hash":"_dirx_identity_groupsmemberships_handling","id":289},{"text":"ODBC Synchronization Workflow","hash":"_odbc_synchronization_workflow","id":290},{"text":"Workflow Activities","hash":"_workflow_activities_2","id":291},{"text":"Workflow Tasks without Stored Procedures","hash":"_workflow_tasks_without_stored_procedures","id":292},{"text":"Workflow Tasks with Stored Procedures","hash":"_workflow_tasks_with_stored_procedures","id":293},{"text":"Customizing the ODBC Workflows","hash":"_customizing_the_odbc_workflows","id":294},{"text":"Using Additional Attributes","hash":"_using_additional_attributes","id":295},{"text":"Using Structurally Different ODBC Databases","hash":"_using_structurally_different_odbc_databases","id":296},{"text":"RACF Workflows","hash":"_racf_workflows_2","id":297},{"text":"SiPass Workflows","hash":"_sipass_workflows","id":298}]}},"components":{},"componentVersions":{"dirx-identity-docs/9.0.0":{"displayVersion":"9.0.0","title":"DirX Identity","version":"9.0.0","name":"dirx-identity-docs","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Documentation","site-url":"https://docs.dirx.solutions"},"sourcemap":false,"keepSource":true},"url":"/dirx-identity-docs/latest/index.html","navigation":[{"content":"General","items":[{"content":"About this Documentation","url":"/dirx-identity-docs/latest/index.html","urlType":"internal"}],"root":true,"order":0},{"content":"Application Development Guide","url":"/dirx-identity-docs/latest/appl-dev-guide/pdf-src/appl-dev-guide.html","urlType":"internal","items":[{"content":"Copyright","url":"/dirx-identity-docs/latest/copyright.html#_copyright","urlType":"internal","hash":"#_copyright"},{"content":"Preface","url":"/dirx-identity-docs/latest/appl-dev-guide/preface.html#_preface","urlType":"internal","hash":"#_preface"},{"content":"Understanding the Default Application Workflow Technology","url":"/dirx-identity-docs/latest/appl-dev-guide/ch1_applsref.html#_understanding_the_default_application_workflow_technology","urlType":"internal","hash":"#_understanding_the_default_application_workflow_technology","items":[{"content":"Understanding Request Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/ch1_applsref.html#_understanding_request_workflows","urlType":"internal","hash":"#_understanding_request_workflows"},{"content":"Understanding Java-based Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/ch1_applsref.html#_understanding_java_based_workflows","urlType":"internal","hash":"#_understanding_java_based_workflows"},{"content":"Understanding Tcl-based Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/ch1_applsref.html#_understanding_tcl_based_workflows","urlType":"internal","hash":"#_understanding_tcl_based_workflows"}]},{"content":"Using Request Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/ch2_reqWFs.html#_using_request_workflows","urlType":"internal","hash":"#_using_request_workflows","items":[{"content":"Understanding Creation Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/ch2_reqWFs.html#_understanding_creation_workflows","urlType":"internal","hash":"#_understanding_creation_workflows"},{"content":"Understanding Modification Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/ch2_reqWFs.html#_understanding_modification_workflows","urlType":"internal","hash":"#_understanding_modification_workflows"},{"content":"Understanding Assignment Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/ch2_reqWFs.html#_understanding_assignment_workflows","urlType":"internal","hash":"#_understanding_assignment_workflows"},{"content":"Understanding Deletion Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/ch2_reqWFs.html#_understanding_deletion_workflows","urlType":"internal","hash":"#_understanding_deletion_workflows"},{"content":"Understanding Certification Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/ch2_reqWFs.html#_understanding_certification_workflows","urlType":"internal","hash":"#_understanding_certification_workflows"},{"content":"Understanding Service Management Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/ch2_reqWFs.html#_understanding_service_management_workflows","urlType":"internal","hash":"#_understanding_service_management_workflows"}]},{"content":"Configuring Custom Scenarios","url":"/dirx-identity-docs/latest/appl-dev-guide/ch3_configScen.html#_configuring_custom_scenarios","urlType":"internal","hash":"#_configuring_custom_scenarios","items":[{"content":"Creating the New Scenario","url":"/dirx-identity-docs/latest/appl-dev-guide/ch3_configScen.html#_creating_the_new_scenario","urlType":"internal","hash":"#_creating_the_new_scenario"},{"content":"Refining the Scenario","url":"/dirx-identity-docs/latest/appl-dev-guide/ch3_configScen.html#_refining_the_scenario","urlType":"internal","hash":"#_refining_the_scenario"},{"content":"Creating the Identity Creation Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/ch3_configScen.html#_creating_the_identity_creation_workflows","urlType":"internal","hash":"#_creating_the_identity_creation_workflows"},{"content":"Creating Cluster Target Systems","url":"/dirx-identity-docs/latest/appl-dev-guide/ch3_configScen.html#_creating_cluster_target_systems","urlType":"internal","hash":"#_creating_cluster_target_systems"}]},{"content":"Using the Default Connectivity Applications","url":"/dirx-identity-docs/latest/appl-dev-guide/ch4_defappls.html#_using_the_default_connectivity_applications","urlType":"internal","hash":"#_using_the_default_connectivity_applications","items":[{"content":"Working with Default Connectivity Application Objects","url":"/dirx-identity-docs/latest/appl-dev-guide/ch4_defappls.html#_working_with_default_connectivity_application_objects","urlType":"internal","hash":"#_working_with_default_connectivity_application_objects"},{"content":"Working with the Default Connectivity Scenario","url":"/dirx-identity-docs/latest/appl-dev-guide/ch4_defappls.html#_working_with_default_connectivity_scenario","urlType":"internal","hash":"#_working_with_default_connectivity_scenario"}]},{"content":"Using the Source Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/ch5_sourceWFs.html#_using_the_source_workflows","urlType":"internal","hash":"#_using_the_source_workflows","items":[{"content":"Understanding the Java-based Source Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/ch5_sourceWFs.html#_understanding_the_java_based_source_workflows","urlType":"internal","hash":"#_understanding_the_java_based_source_workflows"},{"content":"Understanding the Tcl-based Source Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/ch5_sourceWFs.html#_understanding-the-tcl-based-source-workflows","urlType":"internal","hash":"#_understanding-the-tcl-based-source-workflows"}]},{"content":"Using the Maintenance Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/ch6_maintWFs.html#_using_the_maintenance_workflows","urlType":"internal","hash":"#_using_the_maintenance_workflows","items":[{"content":"Understanding the Java-based Maintenance Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/ch6_maintWFs.html#_understanding_java_based_maintenance_workflows","urlType":"internal","hash":"#_understanding_java_based_maintenance_workflows"},{"content":"Understanding the Tcl-based Maintenance Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/ch6_maintWFs.html#_understanding_tcl_based_maintenance_workflows","urlType":"internal","hash":"#_understanding_tcl_based_maintenance_workflows"}]},{"content":"Using the Target System (Provisioning) Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/ch7_targetWFs.html#_using_the_target_system_provisioning_workflows","urlType":"internal","hash":"#_using_the_target_system_provisioning_workflows","items":[{"content":"Understanding Java-based Target System Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/ch7_targetWFs.html#_understanding_java_based_target_system_workflows","urlType":"internal","hash":"#_understanding_java_based_target_system_workflows"},{"content":"Understanding Tcl-based Target System Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/ch7_targetWFs.html#_understanding_tcl_based_target_system_workflows","urlType":"internal","hash":"#_understanding_tcl_based_target_system_workflows"}]},{"content":"Deprecated Features","url":"/dirx-identity-docs/latest/appl-dev-guide/appa_depr.html#_deprecated_features","urlType":"internal","hash":"#_deprecated_features","items":[{"content":"ADS Provisioning Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/appa_depr.html#_ads_provisioning_workflows","urlType":"internal","hash":"#_ads_provisioning_workflows"},{"content":"Dashboard Workflow","url":"/dirx-identity-docs/latest/appl-dev-guide/appa_depr.html#_dashboard_workflow","urlType":"internal","hash":"#_dashboard_workflow"},{"content":"DirX Access Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/appa_depr.html#_dirx_access_workflows","urlType":"internal","hash":"#_dirx_access_workflows"},{"content":"JDBC Provisioning Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/appa_depr.html#_jdbc_provisioning_workflows","urlType":"internal","hash":"#_jdbc_provisioning_workflows"},{"content":"LDAP Provisioning Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/appa_depr.html#_ldap_provisioning_workflows","urlType":"internal","hash":"#_ldap_provisioning_workflows"},{"content":"LDAP XXL Provisioning Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/appa_depr.html#_ldap_xxl_provisioning_workflows","urlType":"internal","hash":"#_ldap_xxl_provisioning_workflows"},{"content":"Lotus Notes Provisioning Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/appa_depr.html#_lotus_notes_provisioning_workflows","urlType":"internal","hash":"#_lotus_notes_provisioning_workflows"},{"content":"UNIX PAM Provisioning Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/appa_depr.html#_unix_pam_provisioning_workflows","urlType":"internal","hash":"#_unix_pam_provisioning_workflows"},{"content":"UNIX PAM Workflows","url":"/dirx-identity-docs/latest/appl-dev-guide/appa_depr.html#_unix_pam_workflows","urlType":"internal","hash":"#_unix_pam_workflows"}]}],"root":true,"order":1}]}}}})